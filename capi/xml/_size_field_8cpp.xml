<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_size_field_8cpp" kind="file" language="C++">
    <compoundname>SizeField.cpp</compoundname>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">apf.h</includes>
    <includes local="no">apfVector.h</includes>
    <includes local="no">apfMesh.h</includes>
    <includes local="no">apfShape.h</includes>
    <includes local="no">apfDynamicVector.h</includes>
    <includes local="no">apfCavityOp.h</includes>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">PCU.h</includes>
    <includes local="no">samElementCount.h</includes>
    <includes local="no">queue</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="8">
        <label>list</label>
      </node>
      <node id="19">
        <label>apfMesh.h</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>queue</label>
      </node>
      <node id="20">
        <label>apfShape.h</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="25">
        <label>PCU.h</label>
      </node>
      <node id="21">
        <label>apfDynamicVector.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="24">
        <label>sstream</label>
      </node>
      <node id="16">
        <label>apfNumbering.h</label>
      </node>
      <node id="14">
        <label>apf.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>apfMesh2.h</label>
      </node>
      <node id="2">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>SizeField.cpp</label>
        <link refid="_size_field_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>apfVector.h</label>
      </node>
      <node id="22">
        <label>apfCavityOp.h</label>
      </node>
      <node id="26">
        <label>samElementCount.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structedge_walker_info" prot="public">edgeWalkerInfo</innerclass>
    <innerclass refid="struct_sorting_struct" prot="public">SortingStruct</innerclass>
    <innerclass refid="struct_smoother" prot="public">Smoother</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_size_field_8cpp_1a1b994fdad943cf560452ee64503aa673" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SmoothField</definition>
        <argsstring>(apf::Field *f)</argsstring>
        <name>SmoothField</name>
        <param>
          <type>apf::Field *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1131" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1131" bodyend="1135" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" declline="16" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gradeAnisoMesh</definition>
        <argsstring>(apf::Mesh *m, double gradingFactor)</argsstring>
        <name>gradeAnisoMesh</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradingFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1922" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1922" bodyend="2017" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gradeAspectRatio</definition>
        <argsstring>(apf::Mesh *m, int idx, double gradingFactor)</argsstring>
        <name>gradeAspectRatio</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradingFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="2019" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="2019" bodyend="2082" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1afd92398e3ceaac6ed5242d34d4ac0222" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double isotropicFormula</definition>
        <argsstring>(double phi, double dphi, double verr, double hmin, double hmax, double phi_s=0, double epsFact=0)</argsstring>
        <name>isotropicFormula</name>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dphi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>verr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi_s</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="22" column="15" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="22" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a45b2711a0ce49fb071e182e0736c469f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setSizeField</definition>
        <argsstring>(apf::Mesh2 *m, apf::MeshEntity *vertex, double h, apf::MeshTag *marker, apf::Field *sizeField)</argsstring>
        <name>setSizeField</name>
        <param>
          <type>apf::Mesh2 *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>vertex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h</declname>
        </param>
        <param>
          <type>apf::MeshTag *</type>
          <declname>marker</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>sizeField</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="33" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="33" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a7afcced10cc48d8055d6c0b3c5443ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int intersectsInterface</definition>
        <argsstring>(apf::MeshEntity *edge, apf::Field *levelSet)</argsstring>
        <name>intersectsInterface</name>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>levelSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="161" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="161" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkForPropagation</definition>
        <argsstring>(apf::Mesh *m, edgeWalkerInfo inputObject)</argsstring>
        <name>checkForPropagation</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref></type>
          <declname>inputObject</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="188" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="188" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a881ca7bf62f124fae99ce741716a1d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BFS_propagation</definition>
        <argsstring>(apf::Mesh *m, std::queue&lt; edgeWalkerInfo &gt; &amp;markedVertices)</argsstring>
        <name>BFS_propagation</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::queue&lt; <ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref> &gt; &amp;</type>
          <declname>markedVertices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="221" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="221" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1af418435e612939b44535279eea2305b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void minToEntity</definition>
        <argsstring>(apf::Field *ef, apf::Field *vf, apf::MeshEntity *ent)</argsstring>
        <name>minToEntity</name>
        <param>
          <type>apf::Field *</type>
          <declname>ef</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="569" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="569" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a7a417e10c9bf4594a40a1d2c5c8aa438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void errorAverageToEntity</definition>
        <argsstring>(apf::Field *ef, apf::Field *vf, apf::Field *err, apf::MeshEntity *ent)</argsstring>
        <name>errorAverageToEntity</name>
        <param>
          <type>apf::Field *</type>
          <declname>ef</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>err</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>ent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="616" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="616" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a51c9147f76d9bfac31c7abdc17d1b476" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* extractSpeed</definition>
        <argsstring>(apf::Field *velocity)</argsstring>
        <name>extractSpeed</name>
        <param>
          <type>apf::Field *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="641" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="641" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a7c6980b0ac599dc00a68a231a09ce214" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Matrix3x3</type>
        <definition>static apf::Matrix3x3 hessianFormula</definition>
        <argsstring>(apf::Matrix3x3 const &amp;g2phi)</argsstring>
        <name>hessianFormula</name>
        <param>
          <type>apf::Matrix3x3 const &amp;</type>
          <declname>g2phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="659" column="23" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="659" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a269e1a4614d1883daf6fee660a53e3b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* computeHessianField</definition>
        <argsstring>(apf::Field *grad2phi)</argsstring>
        <name>computeHessianField</name>
        <param>
          <type>apf::Field *</type>
          <declname>grad2phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="666" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="666" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a558fbcd71d9a6801c9a7898778aefbb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* computeMetricField</definition>
        <argsstring>(apf::Field *gradphi, apf::Field *grad2phi, apf::Field *size_iso, double eps_u)</argsstring>
        <name>computeMetricField</name>
        <param>
          <type>apf::Field *</type>
          <declname>gradphi</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>grad2phi</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>size_iso</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps_u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="684" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="684" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1abb4ad6cd689978596d46364c51f69ef0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void curveFormula</definition>
        <argsstring>(apf::Matrix3x3 const &amp;h, apf::Vector3 const &amp;g, apf::Vector3 &amp;curve)</argsstring>
        <name>curveFormula</name>
        <param>
          <type>apf::Matrix3x3 const &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>apf::Vector3 const &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>apf::Vector3 &amp;</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="714" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="714" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1ac3611c62936eb7f0c87ec31f7b3fe6ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* getCurves</definition>
        <argsstring>(apf::Field *hessians, apf::Field *gradphi)</argsstring>
        <name>getCurves</name>
        <param>
          <type>apf::Field *</type>
          <declname>hessians</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>gradphi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="734" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="734" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1ac6e8a910ffe6aba09c4463d30acfaf05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clamp</definition>
        <argsstring>(double &amp;v, double min, double max)</argsstring>
        <name>clamp</name>
        <param>
          <type>double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="755" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="755" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1aef29a1e58c8f76188b27724c39fcd43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clampField</definition>
        <argsstring>(apf::Field *field, double min, double max)</argsstring>
        <name>clampField</name>
        <param>
          <type>apf::Field *</type>
          <declname>field</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="762" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="762" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a65ea2cd94efbed670b4851eb5d1fe8c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void scaleFormula</definition>
        <argsstring>(double phi, double hmin, double hmax, int adapt_step, apf::Vector3 const &amp;curves, apf::Vector3 &amp;scale)</argsstring>
        <name>scaleFormula</name>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adapt_step</declname>
        </param>
        <param>
          <type>apf::Vector3 const &amp;</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>apf::Vector3 &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="782" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="782" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1ae0028588e1a3f90d95af920b31b3ca1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void scaleFormulaERM</definition>
        <argsstring>(double phi, double hmin, double hmax, double h_dest, apf::Vector3 const &amp;curves, double lambda[3], double eps_u, apf::Vector3 &amp;scale, int nsd, double maxAspect)</argsstring>
        <name>scaleFormulaERM</name>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_dest</declname>
        </param>
        <param>
          <type>apf::Vector3 const &amp;</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lambda</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>eps_u</declname>
        </param>
        <param>
          <type>apf::Vector3 &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxAspect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>useful</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="810" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="810" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a0f2b08e333a7aea937ad494512ae96a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* getSizeScales</definition>
        <argsstring>(apf::Field *phif, apf::Field *curves, double hmin, double hmax, int adapt_step)</argsstring>
        <name>getSizeScales</name>
        <param>
          <type>apf::Field *</type>
          <declname>phif</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hmax</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adapt_step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="899" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="899" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1aa103d2ba01b4466abd2137651741014f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* getSizeFrames</definition>
        <argsstring>(apf::Field *hessians, apf::Field *gradphi)</argsstring>
        <name>getSizeFrames</name>
        <param>
          <type>apf::Field *</type>
          <declname>hessians</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>gradphi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="931" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="931" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a58dbfe88d6deec596159b35c35ee4025" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Field *</type>
        <definition>static apf::Field* getERMSizeFrames</definition>
        <argsstring>(apf::Field *hessians, apf::Field *gradphi, apf::Field *frame_comps[3])</argsstring>
        <name>getERMSizeFrames</name>
        <param>
          <type>apf::Field *</type>
          <declname>hessians</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>gradphi</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>frame_comps</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="984" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="984" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a8a6f6bd5ed2818e9ccdddab5d84d74bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getTargetError</definition>
        <argsstring>(apf::Mesh *m, apf::Field *errField, double &amp;target_error, double totalError)</argsstring>
        <name>getTargetError</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apf::Field *</type>
          <declname>errField</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>target_error</declname>
        </param>
        <param>
          <type>double</type>
          <declname>totalError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1137" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1137" bodyend="1194"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gradeSizeModify</definition>
        <argsstring>(apf::Mesh *m, double gradingFactor, double size[2], apf::Adjacent edgAdjVert, apf::Adjacent vertAdjEdg, std::queue&lt; apf::MeshEntity * &gt; &amp;markedEdges, apf::MeshTag *isMarked, int fieldType, int vecPos, int idxFlag)</argsstring>
        <name>gradeSizeModify</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradingFactor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>size</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>apf::Adjacent</type>
          <declname>edgAdjVert</declname>
        </param>
        <param>
          <type>apf::Adjacent</type>
          <declname>vertAdjEdg</declname>
        </param>
        <param>
          <type>std::queue&lt; apf::MeshEntity * &gt; &amp;</type>
          <declname>markedEdges</declname>
        </param>
        <param>
          <type>apf::MeshTag *</type>
          <declname>isMarked</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fieldType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vecPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idxFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1476" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1476" bodyend="1559"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a5e3715a44fbd6ff6ac85bb77ae536c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void markEdgesInitial</definition>
        <argsstring>(apf::Mesh *m, std::queue&lt; apf::MeshEntity * &gt; &amp;markedEdges, double gradingFactor)</argsstring>
        <name>markEdgesInitial</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::queue&lt; apf::MeshEntity * &gt; &amp;</type>
          <declname>markedEdges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradingFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1561" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1561" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1aebb45354b90c2372625cd67182587487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int serialGradation</definition>
        <argsstring>(apf::Mesh *m, std::queue&lt; apf::MeshEntity * &gt; &amp;markedEdges, double gradingFactor)</argsstring>
        <name>serialGradation</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::queue&lt; apf::MeshEntity * &gt; &amp;</type>
          <declname>markedEdges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradingFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1591" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1591" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a15e63a644e649498cb85a0308f3d4b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gradeAnisoMesh</definition>
        <argsstring>(apf::Mesh *m)</argsstring>
        <name>gradeAnisoMesh</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1762" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1762" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="_size_field_8cpp_1a3c6e4a0cfe24d869ff1ef68fb7e3ba25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gradeAspectRatio</definition>
        <argsstring>(apf::Mesh *m, int idx)</argsstring>
        <name>gradeAspectRatio</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" line="1859" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp" bodystart="1859" bodyend="1920"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfDynamicVector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfCavityOp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samElementCount.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SmoothField(apf::Field<sp/>*<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" kindref="member">gradeAnisoMesh</ref>(apf::Mesh*<sp/>m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" kindref="member">gradeAspectRatio</ref>(apf::Mesh*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>the<sp/>distance<sp/>from<sp/>the<sp/>interface<sp/>epsilon<sp/>can<sp/>be<sp/>controlled<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>thickness<sp/>of<sp/>refinement<sp/>near<sp/>the<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>isotropicFormula(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dphi,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>verr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi_s<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsFact<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dphi_size_factor;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_size_factor;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(phi_s)<sp/>&lt;<sp/>(epsFact*7.5)<sp/>*<sp/>hmin)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hmin;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hmax;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSizeField(apf::Mesh2<sp/>*m,apf::MeshEntity<sp/>*vertex,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,apf::MeshTag<sp/>*marker,apf::Field*<sp/>sizeField)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//helper<sp/>function<sp/>for<sp/>banded<sp/>interface<sp/>to<sp/>facilitate<sp/>with<sp/>setting<sp/>the<sp/>proper<sp/>mesh<sp/>size<sp/>and<sp/>parallel<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isMarked=0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;hasTag(vertex,marker))</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>isMarked=1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_new;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isMarked)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>h_new<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(h,apf::getScalar(sizeField,vertex,0));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>h_new<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newMark<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertex,marker,&amp;newMark);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>apf::setScalar(sizeField,vertex,0,h_new);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Parallel<sp/>Communication<sp/>with<sp/>owning<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m-&gt;isOwned(vertex))</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getRemotes(vertex,remotes);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>owningPart=m-&gt;getOwner(vertex);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_PACK(owningPart,<sp/>remotes[owningPart]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_PACK(owningPart,<sp/>h_new);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_mesh_adapt_p_u_m_i_drvr_1a32a3b6ff131f4a36de1c2b2ec9321f78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a32a3b6ff131f4a36de1c2b2ec9321f78" kindref="member">MeshAdaptPUMIDrvr::setSphereSizeField</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>freeField(size_iso);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>size_iso<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((ent<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modelTag<sp/>=<sp/>m-&gt;getModelTag(m-&gt;toModel(ent));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;This<sp/>is<sp/>the<sp/>model<sp/>tag<sp/>&quot;&lt;&lt;modelTag&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sizeDesired;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modelTag==123)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeDesired=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeDesired=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(size_iso,ent,0,sizeDesired);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1bb6d304aa4d38c9f32125b1036f2098" kindref="member">gradeMesh</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="class_mesh_adapt_p_u_m_i_drvr_1aac549fb381e88d63fc1743b461adb337" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aac549fb381e88d63fc1743b461adb337" kindref="member">MeshAdaptPUMIDrvr::calculateSizeField</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_band)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//Implementation<sp/>of<sp/>banded<sp/>interface,<sp/>edge<sp/>intersection<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>mesh<sp/>edge<sp/>intersects<sp/>the<sp/>0<sp/>level-set,<sp/>then<sp/>the<sp/>adjacent<sp/>edges<sp/>need<sp/>to<sp/>be<sp/>refined<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>interfaceBand<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;interfaceBand&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*phif<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>assert(phif);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>vertexMarker<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;vertexMarker&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*edge;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>L_band<sp/>=<sp/>(numAdaptSteps+N_interface_band)*hPhi;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((edge<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>edge_adjVerts;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,0,edge_adjVerts);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex1<sp/>=<sp/>edge_adjVerts[0];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex2<sp/>=<sp/>edge_adjVerts[1];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi1<sp/>=<sp/>apf::getScalar(phif,vertex1,0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi2<sp/>=<sp/>apf::getScalar(phif,vertex2,0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>caseNumber<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::fabs(phi1)&gt;L_band)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caseNumber++;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::fabs(phi2)&gt;L_band)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caseNumber++;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(caseNumber==1<sp/>||<sp/>caseNumber<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex1,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex2,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(phi1*phi2<sp/>&lt;0)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex1,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex2,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex1,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSizeField(m,vertex2,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>,vertexMarker,interfaceBand);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Take<sp/>minimum<sp/>between<sp/>received<sp/>value<sp/>and<sp/>current<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*ent;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_received;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Note:<sp/>the<sp/>only<sp/>receiving<sp/>entities<sp/>should<sp/>be<sp/>owning<sp/>copies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(ent);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(h_received);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>minimum<sp/>of<sp/>received<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_current<sp/>=<sp/>apf::getScalar(interfaceBand,ent,0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_final<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(h_current,h_received);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(interfaceBand,ent,0,h_final);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Synchronization<sp/>has<sp/>all<sp/>remote<sp/>copies<sp/>track<sp/>the<sp/>owning<sp/>copy<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>apf::synchronize(interfaceBand);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(vertexMarker);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//add<sp/>to<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>sizeFieldList.push(interfaceBand);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="_size_field_8cpp_1a7afcced10cc48d8055d6c0b3c5443ea6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a7afcced10cc48d8055d6c0b3c5443ea6" kindref="member">intersectsInterface</ref>(apf::MeshEntity*<sp/>edge,<sp/>apf::Field*<sp/>levelSet)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Mesh*<sp/>m<sp/>=<sp/>apf::getMesh(levelSet);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>edge_adjVerts;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,0,edge_adjVerts);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex1<sp/>=<sp/>edge_adjVerts[0];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex2<sp/>=<sp/>edge_adjVerts[1];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi1<sp/>=<sp/>apf::getScalar(levelSet,vertex1,0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi2<sp/>=<sp/>apf::getScalar(levelSet,vertex2,0);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>doesIntersect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(phi1*phi2<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="comment">//implies<sp/>different<sp/>signs<sp/>and<sp/>therefore<sp/>intersects<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doesIntersect<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doesIntersect;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//Struct<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="structedge_walker_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref>{</highlight></codeline>
<codeline lineno="178" refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/><ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="179" refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/><ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref>;</highlight></codeline>
<codeline lineno="180" refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="181" refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref>;</highlight></codeline>
<codeline lineno="182" refid="structedge_walker_info_1a93cb2ec34a2d5dabf885cda2eb6e3c20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshTag*<sp/><ref refid="structedge_walker_info_1a93cb2ec34a2d5dabf885cda2eb6e3c20" kindref="member">trackerTag</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>char*<sp/>tagName;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref>;</highlight></codeline>
<codeline lineno="185" refid="structedge_walker_info_1a6ffc55eee22b989004f0f39f6b275e73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structedge_walker_info_1a6ffc55eee22b989004f0f39f6b275e73" kindref="member">initialRank</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" kindref="member">checkForPropagation</ref>(apf::Mesh*<sp/>m,<sp/><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref><sp/>inputObject)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>vert<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>actualPosition<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_local<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>direction<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshTag*<sp/>vertexMaxTraverse<sp/>=<sp/>m-&gt;findTag(</highlight><highlight class="stringliteral">&quot;maximumTraversal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>predictInterfaceBand<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;predictInterfaceBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>levelSet<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt_vert;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getPoint(vert,0,pt_vert);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>difference_vect<sp/>=<sp/>pt_vert-actualPosition;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>vertex<sp/>needs<sp/>to<sp/>be<sp/>added<sp/>to<sp/>queue<sp/>based<sp/>on<sp/>traversal<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dontContinue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;hasTag(vert,vertexMaxTraverse))</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>traversalDistance;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(vert,vertexMaxTraverse,&amp;traversalDistance);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((L_local-difference_vect.getLength())<sp/>&lt;<sp/>traversalDistance*1.01)<sp/></highlight><highlight class="comment">//has<sp/>to<sp/>be<sp/>1%<sp/>higher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dontContinue=1;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//directionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phiCurrent<sp/>=<sp/>apf::getScalar(levelSet,vert,0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((difference_vect.getLength()<sp/>&gt;<sp/>L_local)<sp/>||<sp/>dontContinue<sp/>||<sp/>(phiCurrent*direction&lt;=0))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="_size_field_8cpp_1a881ca7bf62f124fae99ce741716a1d94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a881ca7bf62f124fae99ce741716a1d94" kindref="member">BFS_propagation</ref>(apf::Mesh*<sp/>m,<sp/>std::queue&lt;edgeWalkerInfo&gt;<sp/>&amp;markedVertices)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//objects<sp/>in<sp/>the<sp/>queue<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>checked<sp/>and<sp/>needing<sp/>to<sp/>be<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>adjacencies<sp/>are<sp/>checked<sp/>before<sp/>adding<sp/>into<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>parallelism,<sp/>what&apos;s<sp/>important<sp/>is<sp/>to<sp/>stop<sp/>a<sp/>constant<sp/>back-and-forth<sp/>communication<sp/>on<sp/>shared<sp/>vertices;<sp/>we<sp/>do<sp/>this<sp/>by<sp/>considering<sp/>communication<sp/>when<sp/>we<sp/>add<sp/>an<sp/>entry<sp/>into<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>latest<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref><sp/>inputObject<sp/>=<sp/>markedVertices.front();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>markedVertices.pop();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>variables<sp/>from<sp/>the<sp/>inputObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>vert<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>actualPosition<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_local<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>direction<sp/>=<sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>necessary<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshTag*<sp/>vertexMaxTraverse<sp/>=<sp/>m-&gt;findTag(</highlight><highlight class="stringliteral">&quot;maximumTraversal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>predictInterfaceBand<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;predictInterfaceBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>levelSet<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needsParallel=0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>vertex_adjVerts;<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getBridgeAdjacent(m,vert,1,0,vertex_adjVerts);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;vertex_adjVerts.getSize();i++)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>newVert<sp/>=<sp/>vertex_adjVerts[i];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>=newVert;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" kindref="member">checkForPropagation</ref>(m,inputObject))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>new<sp/>traversal<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt_vert;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(newVert,0,pt_vert);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>difference_vect<sp/>=<sp/>pt_vert-actualPosition;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>traversalDistance<sp/>=<sp/>L_local-difference_vect.getLength();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(newVert,vertexMaxTraverse,&amp;traversalDistance);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(predictInterfaceBand,newVert,0,apf::getScalar(predictInterfaceBand,vert,0));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>vertex<sp/>to<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref><sp/>=<sp/>newVert;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedVertices.push(inputObject);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(newVert))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialRank<sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredSize<sp/>=<sp/>apf::getScalar(predictInterfaceBand,vert,0);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(newVert,remotes);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>iter=remotes.begin();<sp/>iter!=remotes.end();++iter)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>iter-&gt;second);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>L_local);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>actualPosition);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>direction);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>initialRank);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>inputObject.<ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>desiredSize);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needsParallel++;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>of<sp/>adjacent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needsParallel;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="class_mesh_adapt_p_u_m_i_drvr_1a97c4181cef84b47cd827c0f9214e4903" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a97c4181cef84b47cd827c0f9214e4903" kindref="member">MeshAdaptPUMIDrvr::predictiveInterfacePropagation</ref>()</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//compute<sp/>Lband</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//edge<sp/>walk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>interfaceBand<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;interfaceBand&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>velocity<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>levelSet<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>gradient<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*gradphi<sp/>=<sp/>apf::recoverGradientByVolume(levelSet);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>predictInterfaceBand<sp/>=<sp/>apf::createLagrangeField(m,</highlight><highlight class="stringliteral">&quot;predictInterfaceBand&quot;</highlight><highlight class="normal">,apf::SCALAR,1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::copyData(predictInterfaceBand,interfaceBand);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edge-walk<sp/>to<sp/>predict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshTag*<sp/>vertexMaxTraverse<sp/>=<sp/>m-&gt;createDoubleTag(</highlight><highlight class="stringliteral">&quot;maximumTraversal&quot;</highlight><highlight class="normal">,1);<sp/></highlight><highlight class="comment">//define<sp/>tag<sp/>field<sp/>for<sp/>each<sp/>vertex<sp/>to<sp/>store<sp/>maximum<sp/>distance<sp/>that<sp/>will<sp/>be<sp/>travelled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>std::queue<sp/>&lt;edgeWalkerInfo&gt;<sp/>markedVertices;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(edge<sp/>=<sp/>m-&gt;iterate(it))<sp/>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="_size_field_8cpp_1a7afcced10cc48d8055d6c0b3c5443ea6" kindref="member">intersectsInterface</ref>(edge,levelSet))</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>parameterized<sp/>position<sp/>of<sp/>interface<sp/>along<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>edge_adjVerts;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,0,edge_adjVerts);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex1<sp/>=<sp/>edge_adjVerts[0];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*vertex2<sp/>=<sp/>edge_adjVerts[1];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi1<sp/>=<sp/>apf::getScalar(levelSet,vertex1,0);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi2<sp/>=<sp/>apf::getScalar(levelSet,vertex2,0);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt_1,<sp/>pt_2;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(vertex1,0,pt_1);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(vertex2,0,pt_2);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>edgeVector<sp/>=<sp/>pt_2-pt_1;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1a551170923ac5c37baddc94df2d23c4d3" kindref="member">edgeLength</ref><sp/>=<sp/>apf::measure(m,edge);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zeroPosition<sp/>=<sp/><sp/>2*(-phi1/(phi2-phi1))-1.0;<sp/></highlight><highlight class="comment">//parametric<sp/>position<sp/>of<sp/>interface<sp/>on<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relativePosition<sp/>=<sp/>-phi1/(phi2-phi1);<sp/></highlight><highlight class="comment">//same<sp/>as<sp/>zeroPosition<sp/>but<sp/>in<sp/>interval<sp/>of<sp/>[0,1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>actualPosition<sp/>=<sp/>(pt_2-pt_1)*relativePosition<sp/>+<sp/>pt_1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>edgePoint(zeroPosition,0.0,0.0);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Element*<sp/>phiElem<sp/>=<sp/>apf::createElement(levelSet,edge);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Element*<sp/>gradPhiElem<sp/>=<sp/>apf::createElement(gradphi,edge);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Element*<sp/>velocityElem<sp/>=<sp/>apf::createElement(velocity,edge);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>localVelocity;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(velocityElem,edgePoint,localVelocity);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>localInterfaceNormal;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(gradPhiElem,edgePoint,localInterfaceNormal);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyElement(phiElem);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyElement(velocityElem);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyElement(gradPhiElem);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>L_local<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_local<sp/>=<sp/>localVelocity.getLength()*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a696a6f4c51c5138c70e21efa594c7b1d" kindref="member">numAdaptSteps</ref>*delta_T;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L_local<sp/>+=<sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa3eddefb9c31b31e2b8c91cdd01ea40a" kindref="member">N_interface_band</ref>)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>;<sp/></highlight><highlight class="comment">//add<sp/>blending<sp/>region<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>direction,<sp/>multiply<sp/>this<sp/>with<sp/>levelSet<sp/>value<sp/>to<sp/>determine<sp/>if<sp/>in<sp/>same<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>signValue<sp/>=<sp/>localVelocity*localInterfaceNormal;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>adjacent<sp/>vertices<sp/>and<sp/>their<sp/>adjacent<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;edge_adjVerts.getSize();i++)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref><sp/>inputObject;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref><sp/>=<sp/>edge_adjVerts[i];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref><sp/>=<sp/>actualPosition;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref><sp/>=<sp/>signValue;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref><sp/>=<sp/>L_local;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(edge);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a6ffc55eee22b989004f0f39f6b275e73" kindref="member">initialRank</ref><sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" kindref="member">checkForPropagation</ref>(m,inputObject))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedVertices.push(inputObject);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>))</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialRank<sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredSize<sp/>=<sp/>apf::getScalar(predictInterfaceBand,inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>,0);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref>,remotes);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>iter=remotes.begin();<sp/>iter!=remotes.end();++iter)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>iter-&gt;second);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>L_local);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>actualPosition);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>initialRank);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>inputObject.<ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>desiredSize);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>if<sp/>interface<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>following<sp/>parallel<sp/>code<sp/>is<sp/>just<sp/>for<sp/>the<sp/>initialization<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>might<sp/>be<sp/>a<sp/>way<sp/>to<sp/>put<sp/>all<sp/>of<sp/>this<sp/>under<sp/>a<sp/>function<sp/>as<sp/>this<sp/>is<sp/>repeated<sp/>code<sp/>later<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>vertex;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_local;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>actualPosition;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>direction;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialRank;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeID;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredSize;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(vertex);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(L_local);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(actualPosition);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(direction);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(initialRank);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(edgeID);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(desiredSize);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref><sp/>inputObject;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref><sp/>=<sp/>vertex;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref><sp/>=<sp/>L_local;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref><sp/>=<sp/>actualPosition;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref><sp/>=<sp/>direction;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref><sp/>=<sp/>edgeID;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a6ffc55eee22b989004f0f39f6b275e73" kindref="member">initialRank</ref>=initialRank;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ensures<sp/>that<sp/>the<sp/>size<sp/>is<sp/>the<sp/>same<sp/>across<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(desiredSize<sp/>&lt;<sp/>apf::getScalar(predictInterfaceBand,vertex,0))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(predictInterfaceBand,vertex,0,desiredSize);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" kindref="member">checkForPropagation</ref>(m,inputObject))</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt_vert;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(vertex,0,pt_vert);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>difference_vect<sp/>=<sp/>pt_vert-actualPosition;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>traversalDistance<sp/>=<sp/>L_local-difference_vect.getLength();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(vertex,vertexMaxTraverse,&amp;traversalDistance);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedVertices.push(inputObject);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parallel<sp/>preparations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needsParallel=1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(needsParallel&gt;0)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needsParallel=0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Handle<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedVertices.empty())</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needsParallel+=<ref refid="_size_field_8cpp_1a881ca7bf62f124fae99ce741716a1d94" kindref="member">BFS_propagation</ref>(m,markedVertices);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_Add_Ints(&amp;needsParallel,1);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>PCU_Comm_Receive()<sp/>)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>vertex;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_local;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>actualPosition;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>direction;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialRank;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeID;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>desiredSize;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(vertex);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(L_local);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(actualPosition);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(direction);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(initialRank);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(edgeID);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(desiredSize);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structedge_walker_info" kindref="compound">edgeWalkerInfo</ref><sp/>inputObject;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a1cdf22d045a254f9fd313f6a809bfc22" kindref="member">vertex</ref><sp/>=<sp/>vertex;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1af2fe83c0ad5c85880ac386fd19a5876d" kindref="member">L_local</ref><sp/>=<sp/>L_local;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1aae448ebcbc894370cb76032a2020b1d5" kindref="member">actualPosition</ref><sp/>=<sp/>actualPosition;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a2ef5f8d3ab1da8c37858792c8306a182" kindref="member">direction</ref><sp/>=<sp/>direction;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1ae86dc8f300a8b2f088aa0f303609fe68" kindref="member">edgeID</ref><sp/>=<sp/>edgeID;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputObject.<ref refid="structedge_walker_info_1a6ffc55eee22b989004f0f39f6b275e73" kindref="member">initialRank</ref>=initialRank;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ensures<sp/>that<sp/>the<sp/>size<sp/>is<sp/>the<sp/>same<sp/>across<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(desiredSize<sp/>&lt;<sp/>apf::getScalar(predictInterfaceBand,vertex,0))</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(predictInterfaceBand,vertex,0,desiredSize);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_size_field_8cpp_1a3b9dfbd1ac81a02b42fdf89f10a40905" kindref="member">checkForPropagation</ref>(m,inputObject))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt_vert;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(vertex,0,pt_vert);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>difference_vect<sp/>=<sp/>pt_vert-actualPosition;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>traversalDistance<sp/>=<sp/>L_local-difference_vect.getLength();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(vertex,vertexMaxTraverse,&amp;traversalDistance);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedVertices.push(inputObject);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::copyData(interfaceBand,predictInterfaceBand);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(predictInterfaceBand);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(gradphi);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>tags<sp/>for<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshIterator*<sp/>tagIt<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>taggedVertex;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>taggedVertex<sp/>=<sp/>m-&gt;iterate(tagIt)<sp/>)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;hasTag(taggedVertex,vertexMaxTraverse))</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;removeTag(taggedVertex,vertexMaxTraverse);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(tagIt);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;destroyTag(vertexMaxTraverse);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::isotropicIntersect()</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>freeField(size_iso);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>size_iso<sp/>=<sp/>apf::createFieldOn(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*vert;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*field<sp/>=<sp/>sizeFieldList.front();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>apf::copyData(size_iso,field);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>sizeFieldList.pop();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>apf::destroyField(field);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!sizeFieldList.empty())</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>field<sp/>=<sp/>sizeFieldList.front();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(vert<sp/>=<sp/>m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value1<sp/>=<sp/>apf::getScalar(size_iso,vert,0);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value2<sp/>=<sp/>apf::getScalar(field,vert,0);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minValue<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(value1,value2);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(size_iso,vert,0,minValue);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeFieldList.pop();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(field);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1bb6d304aa4d38c9f32125b1036f2098" kindref="member">gradeMesh</ref>();</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//taken<sp/>from<sp/>Dan&apos;s<sp/>superconvergent<sp/>patch<sp/>recovery<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::averageToEntity(apf::Field<sp/>*ef,<sp/>apf::Field<sp/>*vf,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*ent)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>convert<sp/>a<sp/>region/element<sp/>field<sp/>into<sp/>a<sp/>vertex<sp/>field<sp/>via<sp/>averaging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>each<sp/>vertex,<sp/>the<sp/>average<sp/>value<sp/>of<sp/>the<sp/>adjacent<sp/>elements<sp/>is<sp/>taken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//Input:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ef<sp/>is<sp/>the<sp/>element<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ent<sp/>is<sp/>the<sp/>target<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//Output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>vf<sp/>is<sp/>the<sp/>vertex<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(ef);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>elements;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>m-&gt;getDimension(),<sp/>elements);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elements.getSize();<sp/>++i)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>+=<sp/>apf::getScalar(ef,<sp/>elements[i],<sp/>0);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>/=<sp/>elements.getSize();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>apf::setScalar(vf,<sp/>ent,<sp/>0,<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="_size_field_8cpp_1af418435e612939b44535279eea2305b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1af418435e612939b44535279eea2305b9" kindref="member">minToEntity</ref>(apf::Field*<sp/>ef,<sp/>apf::Field*<sp/>vf,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>ent)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>apf::Mesh*<sp/>m<sp/>=<sp/>apf::getMesh(ef);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>elements;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>m-&gt;getDimension(),<sp/>elements);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>elements.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==0)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>=<sp/>apf::getScalar(ef,<sp/>elements[i],<sp/>0);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(apf::getScalar(ef,elements[i],0)<sp/>&lt;<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=<sp/>apf::getScalar(ef,elements[i],0);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>apf::setScalar(vf,<sp/>ent,<sp/>0,<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::volumeAverageToEntity(apf::Field<sp/>*ef,<sp/>apf::Field<sp/>*vf,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*ent)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//Serves<sp/>the<sp/>same<sp/>purpose<sp/>as<sp/>averageToEntity<sp/>but<sp/>considers<sp/>a<sp/>volume-weighted<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(ef);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>elements;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>apf::MeshElement<sp/>*testElement;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>m-&gt;getDimension(),<sp/>elements);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VolumeTotal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elements.getSize();<sp/>++i)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>testElement<sp/>=<sp/>apf::createMeshElement(m,<sp/>elements[i]);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>+=<sp/>apf::getScalar(ef,<sp/>elements[i],<sp/>0)*apf::measure(testElement);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>VolumeTotal<sp/>+=<sp/>apf::measure(testElement);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm_rank<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;What<sp/>is<sp/>s<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Volume?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>apf::measure(testElement)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>scale?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>apf::getScalar(ef,<sp/>elements[i],<sp/>0)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyMeshElement(testElement);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>/=<sp/>VolumeTotal;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comm_rank<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;What<sp/>is<sp/>s<sp/>final?<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>apf::setScalar(vf,<sp/>ent,<sp/>0,<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="_size_field_8cpp_1a7a417e10c9bf4594a40a1d2c5c8aa438" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a7a417e10c9bf4594a40a1d2c5c8aa438" kindref="member">errorAverageToEntity</ref>(apf::Field<sp/>*ef,<sp/>apf::Field<sp/>*vf,<sp/>apf::Field*<sp/>err,<sp/>apf::MeshEntity<sp/>*ent)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//Serves<sp/>the<sp/>same<sp/>purpose<sp/>as<sp/>averageToEntity<sp/>but<sp/>considers<sp/>a<sp/>error-weighted<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(ef);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>elements;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>m-&gt;getDimension(),<sp/>elements);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errorTotal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>elements.getSize();<sp/>++i)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>+=<sp/>apf::getScalar(ef,<sp/>elements[i],<sp/>0)*apf::getScalar(err,elements[i],0);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>errorTotal<sp/>+=<sp/>apf::getScalar(err,elements[i],0);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>/=<sp/>errorTotal;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/>if<sp/>(comm_rank<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;What<sp/>is<sp/>s<sp/>final?<sp/>&quot;<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>apf::setScalar(vf,<sp/>ent,<sp/>0,<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*extractSpeed(apf::Field<sp/>*velocity)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>convert<sp/>the<sp/>velocity<sp/>field<sp/>into<sp/>a<sp/>speed<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(velocity);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*speedF<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_speed&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(velocity,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>vel_vect);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>speed<sp/>=<sp/>vel_vect.getLength();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(speedF,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>speed);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>speedF;</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Matrix3x3<sp/>hessianFormula(apf::Matrix3x3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;g2phi)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>output<sp/>a<sp/>symmetric<sp/>hessian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>g2phit<sp/>=<sp/>apf::transpose(g2phi);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(g2phi<sp/>+<sp/>g2phit)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*computeHessianField(apf::Field<sp/>*grad2phi)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>writes<sp/>a<sp/>hessian<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(grad2phi);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*hessf<sp/>=<sp/>createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_hess&quot;</highlight><highlight class="normal">,<sp/>apf::MATRIX,<sp/>1);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>g2phi;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getMatrix(grad2phi,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>g2phi);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>hess<sp/>=<sp/>hessianFormula(g2phi);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setMatrix(hessf,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>hess);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hessf;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*computeMetricField(apf::Field<sp/>*gradphi,<sp/>apf::Field<sp/>*grad2phi,<sp/>apf::Field<sp/>*size_iso,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps_u)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>generate<sp/>a<sp/>field<sp/>of<sp/>metric<sp/>tensors<sp/>at<sp/>vertices.<sp/>It<sp/>is<sp/>meant<sp/>to<sp/>be<sp/>an<sp/>umbrella<sp/>function<sp/>that<sp/>can<sp/>compute<sp/>Hessians<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//Currently<sp/>needs<sp/>development.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(grad2phi);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*metricf<sp/>=<sp/>createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_metric&quot;</highlight><highlight class="normal">,<sp/>apf::MATRIX,<sp/>1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>g2phi;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getMatrix(grad2phi,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>g2phi);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>gphi;</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::getVector(gradphi,<sp/>v,<sp/>0,<sp/>gphi);</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>gphigphit(gphi[0]<sp/>*<sp/>gphi[0],<sp/>gphi[0]<sp/>*<sp/>gphi[1],<sp/>gphi[0]<sp/>*<sp/>gphi[2],</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gphi[0]<sp/>*<sp/>gphi[1],<sp/>gphi[1]<sp/>*<sp/>gphi[1],<sp/>gphi[1]<sp/>*<sp/>gphi[2],</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gphi[0]<sp/>*<sp/>gphi[2],<sp/>gphi[1]<sp/>*<sp/>gphi[2],<sp/>gphi[2]<sp/>*<sp/>gphi[2]);</highlight></codeline>
<codeline lineno="702"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>hess<sp/>=<sp/>hessianFormula(g2phi);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>metric<sp/>=<sp/>hess;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::Matrix3x3<sp/>metric<sp/>=<sp/>gphigphit/(apf::getScalar(size_iso,v,0)*apf::getScalar(size_iso,v,0))+<sp/>hess/eps_u;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::Matrix3x3<sp/>metric(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setMatrix(metricf,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>metric);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metricf;</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gaussian,<sp/>Mean<sp/>and<sp/>principal<sp/>curvatures<sp/>based<sp/>on<sp/>Hessian<sp/>and<sp/>gradient<sp/>of<sp/>phi.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>curveFormula(apf::Matrix3x3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;h,<sp/>apf::Vector3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;g,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>&amp;curve)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>(h[1][1]<sp/>+<sp/>h[2][2])<sp/>*<sp/>g[0]<sp/>*<sp/>g[0]<sp/>+<sp/>(h[0][0]<sp/>+<sp/>h[2][2])<sp/>*<sp/>g[1]<sp/>*<sp/>g[1]<sp/>+<sp/>(h[0][0]<sp/>+<sp/>h[1][1])<sp/>*<sp/>g[2]<sp/>*<sp/>g[2];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>g[0]<sp/>*<sp/>g[1]<sp/>*<sp/>h[0][1]<sp/>+<sp/>g[0]<sp/>*<sp/>g[2]<sp/>*<sp/>h[0][2]<sp/>+<sp/>g[1]<sp/>*<sp/>g[2]<sp/>*<sp/>h[1][2];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Km<sp/>=<sp/>(a<sp/>-<sp/>2<sp/>*<sp/>b)<sp/>/<sp/>pow(g<sp/>*<sp/>g,<sp/>1.5);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref><sp/>=<sp/>g[0]<sp/>*<sp/>g[0]<sp/>*<sp/>(h[1][1]<sp/>*<sp/>h[2][2]<sp/>-<sp/>h[1][2]<sp/>*<sp/>h[1][2])<sp/>+<sp/>g[1]<sp/>*<sp/>g[1]<sp/>*<sp/>(h[0][0]<sp/>*<sp/>h[2][2]<sp/>-<sp/>h[0][2]<sp/>*<sp/>h[0][2])<sp/>+<sp/>g[2]<sp/>*<sp/>g[2]<sp/>*<sp/>(h[0][0]<sp/>*<sp/>h[1][1]<sp/>-<sp/>h[0][1]<sp/>*<sp/>h[0][1]);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>g[0]<sp/>*<sp/>g[1]<sp/>*<sp/>(h[0][2]<sp/>*<sp/>h[1][2]<sp/>-<sp/>h[0][1]<sp/>*<sp/>h[2][2])<sp/>+<sp/>g[1]<sp/>*<sp/>g[2]<sp/>*<sp/>(h[0][1]<sp/>*<sp/>h[0][2]<sp/>-<sp/>h[1][2]<sp/>*<sp/>h[0][0])<sp/>+<sp/>g[0]<sp/>*<sp/>g[2]<sp/>*<sp/>(h[0][1]<sp/>*<sp/>h[1][2]<sp/>-<sp/>h[0][2]<sp/>*<sp/>h[1][1]);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Kg<sp/>=<sp/>(<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref><sp/>+<sp/>2<sp/>*<sp/>d)<sp/>/<sp/>pow(g<sp/>*<sp/>g,<sp/>2);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>curve[0]<sp/>=<sp/>Km;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Mean<sp/>curvature=<sp/>(k_1+k_2)/2,<sp/>Not<sp/>used<sp/>in<sp/>normal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>curve[1]<sp/>=<sp/>Km<sp/>+<sp/>sqrt(Km<sp/>*<sp/>Km<sp/>-<sp/>Kg);<sp/></highlight><highlight class="comment">//k_1,<sp/>First<sp/>principal<sp/>curvature<sp/><sp/>(maximum<sp/>curvature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>curve[2]<sp/>=<sp/>Km<sp/>-<sp/>sqrt(Km<sp/>*<sp/>Km<sp/>-<sp/>Kg);<sp/></highlight><highlight class="comment">//k_2,<sp/>Second<sp/>principal<sp/>curvature<sp/>(minimum<sp/>curvature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*getCurves(apf::Field<sp/>*hessians,<sp/>apf::Field<sp/>*gradphi)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(hessians);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*curves;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>curves<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_curves&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>hessian;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getMatrix(hessians,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>hessian);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>gphi;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(gradphi,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>gphi);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>curve;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>curveFormula(hessian,<sp/>gphi,<sp/>curve);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setVector(curves,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>curve);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curves;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clamp(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">min</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>restrict<sp/>the<sp/>mesh<sp/>size<sp/>to<sp/>user<sp/>specified<sp/>minimums<sp/>and<sp/>maximums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(<ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(<ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">min</ref>,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clampField(apf::Field<sp/>*field,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">min</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>loops<sp/>through<sp/>a<sp/>field<sp/>and<sp/>clamps<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(field);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numcomps<sp/>=<sp/>apf::countComponents(field);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>components[numcomps];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>tempValue<sp/>=<sp/>apf::getScalar(field,v,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getComponents(field,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>&amp;components[0]);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numcomps;<sp/>i++)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clamp(components[i],<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">min</ref>,<sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::setScalar(field,v,0,tempValue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setComponents(field,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>&amp;components[0]);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scaleFormula(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmax,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adapt_step,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;curves,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>&amp;scale)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>set<sp/>the<sp/>size<sp/>scale<sp/>vector<sp/>for<sp/>the<sp/>interface<sp/>size<sp/>field<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>7.0<sp/>*<sp/>hmin;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>)<sp/>&lt;<sp/>epsilon)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>hmin;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(0.002<sp/>/<sp/>fabs(curves[1]));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>sqrt(0.002<sp/>/<sp/>fabs(curves[2]));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>)<sp/>&lt;<sp/>4<sp/>*<sp/>epsilon)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>2<sp/>*<sp/>hmin;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>2<sp/>*<sp/>sqrt(0.002<sp/>/<sp/>fabs(curves[1]));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>2<sp/>*<sp/>sqrt(0.002<sp/>/<sp/>fabs(curves[2]));</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>apf::Vector3(1,<sp/>1,<sp/>1)<sp/>*<sp/>hmax;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>clamp(scale[i],<sp/>hmin,<sp/>hmax);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scaleFormulaERM(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_dest,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;curves,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps_u,<sp/>apf::Vector3<sp/>&amp;scale,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsd,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxAspect)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>set<sp/>the<sp/>size<sp/>scale<sp/>vector<sp/>for<sp/>the<sp/>anisotropic<sp/>ERM<sp/>size<sp/>field<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//Inputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>phi<sp/>is<sp/>is<sp/>the<sp/>distance<sp/>to<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hmin<sp/>is<sp/>the<sp/>minimum<sp/>mesh<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hmax<sp/>is<sp/>the<sp/>maximum<sp/>mesh<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>h_dest<sp/>is<sp/>the<sp/>computed<sp/>new<sp/>mesh<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>curves<sp/>is<sp/>a<sp/>vector<sp/>that<sp/>denotes<sp/>the<sp/>curvature<sp/>of<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lambda<sp/>is<sp/>the<sp/>ordered<sp/>set<sp/>of<sp/>eigenvalues<sp/>from<sp/>an<sp/>eigendecomposition<sp/>of<sp/>the<sp/>metric<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eps_u<sp/>is<sp/>a<sp/>tolerance<sp/>for<sp/>the<sp/>distance<sp/>away<sp/>from<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//Output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scale<sp/>is<sp/>the<sp/>mesh<sp/>size<sp/>in<sp/>each<sp/>direction<sp/>for<sp/>a<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/>double<sp/>epsilon<sp/>=<sp/>7.0<sp/>*<sp/>hmin;</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/>double<sp/>lambdamin<sp/>=<sp/>1.0<sp/>/<sp/>(hmin<sp/>*<sp/>hmin);</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/>if<sp/>(lambda[1]<sp/>&lt;<sp/>1e-10)</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/>lambda[1]<sp/>=<sp/>lambdamin;</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/>lambda[2]<sp/>=<sp/>lambdamin;</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/>if<sp/>(lambda[2]<sp/>&lt;<sp/>1e-10)</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/>lambda[2]<sp/>=<sp/>lambdamin;</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/>scale[0]<sp/>=<sp/>h_dest*pow(lambda[1]/lambda[0],0.25);<sp/><sp/></highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]/lambda[1])*scale[0];</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/>scale[2]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="844"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/>scale[0]<sp/>=<sp/>h_dest*pow(lambda[1]/lambda[0],0.25)*pow(3,0.25)*0.5;<sp/><sp/></highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]/lambda[1])*scale[0];</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/>scale[2]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="849"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/>if(nsd<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest;<sp/><sp/></highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]/lambda[1])*scale[0];</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/>else{</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest;<sp/><sp/></highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]/lambda[1])*scale[0];</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>sqrt(lambda[0]/lambda[2])*scale[0];</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nsd<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest<sp/>*<sp/>pow((lambda[1]<sp/>)<sp/>/<sp/>(lambda[0]),<sp/>1.0<sp/>/<sp/>4.0);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]<sp/>/<sp/>lambda[1])<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest<sp/>*<sp/>pow((lambda[1]<sp/>*<sp/>lambda[2])<sp/>/<sp/>(lambda[0]<sp/>*<sp/>lambda[0]),<sp/>1.0<sp/>/<sp/>6.0);</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]<sp/>/<sp/>lambda[1])<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>sqrt(lambda[0]<sp/>/<sp/>lambda[2])<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(lambda[0]<sp/>/<sp/>lambda[1])<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>sqrt(lambda[0]<sp/>/<sp/>lambda[2])<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(scale[1]/scale[0]<sp/>&gt;<sp/>maxAspect)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>maxAspect*scale[0];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(scale[2]/scale[0]<sp/>&gt;<sp/>maxAspect)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>maxAspect*scale[0];</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(scale[1]/scale[0]<sp/>&gt;<sp/>maxAspect<sp/>||<sp/>scale[2]/scale[0]<sp/>&gt;<sp/>maxAspect){</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Scales<sp/>reached<sp/>maximum<sp/>aspect<sp/>ratio\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/>if(fabs(phi)&lt;epsilon){</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>h_dest;</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>sqrt(eps_u/fabs(curves[2]));</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scale[2]<sp/>=<sp/>sqrt(eps_u/fabs(curves[1]));</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>apf::Vector3(1,1,1)<sp/>*<sp/>h_dest;<sp/></highlight></codeline>
<codeline lineno="896"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*getSizeScales(apf::Field<sp/>*phif,<sp/>apf::Field<sp/>*curves,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hmax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adapt_step)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>gets<sp/>size<sp/>scales<sp/>in<sp/>the<sp/>interface<sp/>size<sp/>field<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(phif);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*scales;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>scales<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref><sp/>=<sp/>apf::getScalar(phif,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>curve;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(curves,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>curve);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>scale;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>scaleFormula(<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<sp/>hmin,<sp/>hmax,<sp/>adapt_step,<sp/>curve,<sp/>scale);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setVector(scales,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>scale);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scales;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="struct_sorting_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sorting_struct" kindref="compound">SortingStruct</ref></highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923" refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" refkind="member"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/><ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="924" refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>;</highlight></codeline>
<codeline lineno="925" refid="struct_sorting_struct_1a2afefe49aaa8c498610393b5caa5c2bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_sorting_struct_1a2afefe49aaa8c498610393b5caa5c2bb" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_sorting_struct" kindref="compound">SortingStruct</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="926"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref><sp/>&lt;<sp/>other.<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal">};</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*getSizeFrames(apf::Field<sp/>*hessians,<sp/>apf::Field<sp/>*gradphi)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>gets<sp/>size<sp/>frames,<sp/>or<sp/>the<sp/>metric<sp/>tensor,<sp/>in<sp/>the<sp/>interface<sp/>size<sp/>field<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(gradphi);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*frames;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>frames<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size_frame&quot;</highlight><highlight class="normal">,<sp/>apf::MATRIX,<sp/>1);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>gphi;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(gradphi,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>gphi);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>dir;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gphi.getLength()<sp/>&gt;<sp/>1e-16)</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>gphi.normalize();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>apf::Vector3(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>hessian;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getMatrix(hessians,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>hessian);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>eigenVectors[3];</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenValues[3];</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::eigen(hessian,<sp/>eigenVectors,<sp/>eigenValues);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sorting_struct" kindref="compound">SortingStruct</ref><sp/>ssa[3];</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref><sp/>=<sp/>eigenVectors[i];</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref><sp/>=<sp/>std::fabs(eigenValues[i]);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(ssa,<sp/>ssa<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ssa[2].wm<sp/>&gt;=<sp/>ssa[1].wm);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ssa[1].wm<sp/>&gt;=<sp/>ssa[0].wm);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstEigenvalue<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>frame;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>frame[0]<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(firstEigenvalue<sp/>&gt;<sp/>1e-16)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>firstEigenvector<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[1]<sp/>=<sp/>apf::reject(firstEigenvector,<sp/>dir);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[2]<sp/>=<sp/>apf::cross(frame[0],<sp/>frame[1]);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame[2].getLength()<sp/>&lt;<sp/>1e-16)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::getFrame(dir);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::getFrame(dir);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[i]<sp/>=<sp/>frame[i].normalize();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::transpose(frame);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setMatrix(frames,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frames;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Field<sp/>*getERMSizeFrames(apf::Field<sp/>*hessians,<sp/>apf::Field<sp/>*gradphi,<sp/>apf::Field<sp/>*frame_comps[3])</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>gets<sp/>size<sp/>frames,<sp/>or<sp/>the<sp/>metric<sp/>tensor,<sp/>in<sp/>the<sp/>interface<sp/>size<sp/>field<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(gradphi);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*frames;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>frames<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_frame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>frame(1.0,<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>gphi;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(gradphi,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>gphi);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>dir;</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(gphi.getLength()<sp/>&gt;<sp/>1e-16)</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>gphi.normalize();</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>apf::Vector3(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>eigen<sp/>values<sp/>and<sp/>eigenvectors<sp/>from<sp/>hessian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>hessian;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getMatrix(hessians,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>hessian);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>eigenVectors[3];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenValues[3];</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::eigen(hessian,<sp/>eigenVectors,<sp/>eigenValues);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sorting_struct" kindref="compound">SortingStruct</ref><sp/>ssa[3];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref><sp/>=<sp/>eigenVectors[i];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref><sp/>=<sp/>std::fabs(eigenValues[i]);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sort<sp/>eigenvalues<sp/>and<sp/>eigenvectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(ssa,<sp/>ssa<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ssa[2].wm<sp/>&gt;=<sp/>ssa[1].wm);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ssa[1].wm<sp/>&gt;=<sp/>ssa[0].wm);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstEigenvalue<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(firstEigenvalue<sp/>&gt;<sp/>1e-12);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//frame[0]<sp/>=<sp/>dir;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(firstEigenvalue<sp/>&gt;<sp/>1e-16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[0]<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[1]<sp/>=<sp/>ssa[1].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[2]<sp/>=<sp/>ssa[0].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>frame<sp/>=<sp/>apf::getFrame(dir);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>test(1.0,0.0,0.0);</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::getFrame(test);</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::setMatrix(frames,v,0,frame);</highlight></codeline>
<codeline lineno="1038"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//normalize<sp/>eigenvectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[i]<sp/>=<sp/>frame[i].normalize();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::transpose(frame);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setMatrix(frames,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setVector(frame_comps[0],<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame[0]);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setVector(frame_comps[1],<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame[1]);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setVector(frame_comps[2],<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame[2]);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frames;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053" refid="class_mesh_adapt_p_u_m_i_drvr_1a7341569125c3eed5cafc6a9aa8524195" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7341569125c3eed5cafc6a9aa8524195" kindref="member">MeshAdaptPUMIDrvr::calculateAnisoSizeField</ref>()</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//High<sp/>level<sp/>function<sp/>that<sp/>obtains<sp/>the<sp/>size<sp/>scales<sp/>and<sp/>the<sp/>size<sp/>frames<sp/>for<sp/>anistropic<sp/>interface-based<sp/>adapt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*phif<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>assert(phif);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*gradphi<sp/>=<sp/>apf::recoverGradientByVolume(phif);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*grad2phi<sp/>=<sp/>apf::recoverGradientByVolume(gradphi);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*hess<sp/>=<sp/>computeHessianField(grad2phi);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>apf::destroyField(grad2phi);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*curves<sp/>=<sp/>getCurves(hess,<sp/>gradphi);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>freeField(size_scale);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>size_scale<sp/>=<sp/>getSizeScales(phif,<sp/>curves,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>apf::destroyField(curves);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>freeField(size_frame);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>size_frame<sp/>=<sp/>getSizeFrames(hess,<sp/>gradphi);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>apf::destroyField(hess);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>apf::destroyField(gradphi);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>SmoothField(size_scale);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="struct_smoother" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_smoother" kindref="compound">Smoother</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>apf::CavityOp</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080" refid="struct_smoother_1a9cc853cd755c8afd414bc866a6192a4a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_smoother_1a9cc853cd755c8afd414bc866a6192a4a" kindref="member">Smoother</ref>(apf::Field<sp/>*<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>:<sp/><ref refid="namespaceapf" kindref="compound">apf</ref>::CavityOp(<ref refid="namespaceapf" kindref="compound">apf</ref>::getMesh(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" kindref="member">field</ref><sp/>=<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>apf::countComponents(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref><sp/>=<sp/>apf::createPackedField(mesh,<sp/></highlight><highlight class="stringliteral">&quot;proteus_smooth_new&quot;</highlight><highlight class="normal">,<sp/>nc);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref>.setSize(nc);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1a8b008c73e6a8fe8c426f11752a02611e" kindref="member">value</ref>.setSize(nc);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1a20a49e8e66965232edd41e96623bf94b" kindref="member">nApplied</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089" refid="struct_smoother_1a04950044ad31407594085f37010b3ef1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_smoother_1a04950044ad31407594085f37010b3ef1" kindref="member">~Smoother</ref>()</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>copyData(<ref refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" kindref="member">field</ref>,<sp/><ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref>);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(<ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref>);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094" refid="struct_smoother_1a8e7b58bd18db732df42dd2eae7b05828" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Outcome<sp/><ref refid="struct_smoother_1a8e7b58bd18db732df42dd2eae7b05828" kindref="member">setEntity</ref>(apf::MeshEntity<sp/>*e)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(apf::hasEntity(<ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref>,<sp/>e))</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SKIP;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;requestLocality(&amp;e,<sp/>1))</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REQUEST;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref><sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OK;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103" refid="struct_smoother_1a0d53b6189444cdbe7346dca410a9bc76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_smoother_1a0d53b6189444cdbe7346dca410a9bc76" kindref="member">apply</ref>()</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>smoothing<sp/>function<sp/>used<sp/>here<sp/>is<sp/>the<sp/>average<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/>vertex<sp/>value<sp/>and<sp/>neighboring<sp/>vertex<sp/>values,<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/>center<sp/>vertex<sp/>weighted<sp/>equally<sp/>as<sp/>the<sp/>neighbors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Up<sp/>edges;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;getUp(<ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref>,<sp/>edges);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getComponents(<ref refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" kindref="member">field</ref>,<sp/><ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref>,<sp/>0,<sp/>&amp;<ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref>[0]);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>edges.n;<sp/>++i)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity<sp/>*ov<sp/>=<sp/>apf::getEdgeVertOppositeVert(</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh,<sp/>edges.e[i],<sp/><ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref>);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getComponents(<ref refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" kindref="member">field</ref>,<sp/>ov,<sp/>0,<sp/>&amp;<ref refid="struct_smoother_1a8b008c73e6a8fe8c426f11752a02611e" kindref="member">value</ref>[0]);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref><sp/>+=<sp/><ref refid="struct_smoother_1a8b008c73e6a8fe8c426f11752a02611e" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref><sp/>/=<sp/>edges.n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setComponents(<ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref>,<sp/><ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref>,<sp/>0,<sp/>&amp;<ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref>[0]);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="struct_smoother_1a20a49e8e66965232edd41e96623bf94b" kindref="member">nApplied</ref>;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122" refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" refkind="member"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*<ref refid="struct_smoother_1ae07831f68880f409f7fdbf7036570b45" kindref="member">field</ref>;</highlight></codeline>
<codeline lineno="1123" refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" refkind="member"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*<ref refid="struct_smoother_1acb7694ab3ef87be544da1403c5bf7948" kindref="member">newField</ref>;</highlight></codeline>
<codeline lineno="1124" refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" refkind="member"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="struct_smoother_1a3c342990fe5f7dec4c1677aa0b20d2ca" kindref="member">vertex</ref>;</highlight></codeline>
<codeline lineno="1125" refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" refkind="member"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/><ref refid="struct_smoother_1af5f0c6fd1508ba2460ad695bc224889c" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="1126" refid="struct_smoother_1a8b008c73e6a8fe8c426f11752a02611e" refkind="member"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/><ref refid="struct_smoother_1a8b008c73e6a8fe8c426f11752a02611e" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1127" refid="struct_smoother_1a5a100b714c0ef73dd547f12407045d3c" refkind="member"><highlight class="normal"><sp/><sp/>apf::MeshTag<sp/>*<ref refid="struct_smoother_1a5a100b714c0ef73dd547f12407045d3c" kindref="member">emptyTag</ref>;</highlight></codeline>
<codeline lineno="1128" refid="struct_smoother_1a20a49e8e66965232edd41e96623bf94b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_smoother_1a20a49e8e66965232edd41e96623bf94b" kindref="member">nApplied</ref>;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SmoothField(apf::Field<sp/>*<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><ref refid="struct_smoother" kindref="compound">Smoother</ref><sp/>op(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>op.applyToDimension(0);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="_size_field_8cpp_1a8a6f6bd5ed2818e9ccdddab5d84d74bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a8a6f6bd5ed2818e9ccdddab5d84d74bc" kindref="member">getTargetError</ref>(apf::Mesh*<sp/>m,<sp/>apf::Field*<sp/>errField,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;target_error,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalError){</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Implemented<sp/>for<sp/>3D<sp/>and<sp/>for<sp/>serial<sp/>case<sp/>only<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Need<sp/>to<sp/>communicate<sp/>target<sp/>error<sp/>in<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()&gt;0)<sp/></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;WARNING/ERROR:Parallel<sp/>implementation<sp/>is<sp/>not<sp/>completed<sp/>yet\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getDimension()==2){</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>target_error<sp/>=<sp/>totalError/sqrt(m-&gt;count(m-&gt;getDimension()));</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;The<sp/>estimated<sp/>target<sp/>error<sp/>is<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;target_error&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>interfaceField<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>targetField<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;targetError&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(m-&gt;getDimension(),1));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(m-&gt;getDimension());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/>element;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>apf::Element*<sp/>vofElem;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>std::vector<sp/>&lt;double&gt;<sp/>errVect;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(ent<sp/>=<sp/>m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>apf::createMeshElement(m,<sp/>ent);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>vofElem<sp/>=<sp/>apf::createElement(interfaceField,element);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vofVal<sp/>=<sp/>apf::getScalar(vofElem,apf::Vector3(1./3.,1./3.,1./3.));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vofVal<sp/>&lt;<sp/>0.9<sp/>&amp;&amp;<sp/>vofVal<sp/>&gt;<sp/>0.1){<sp/></highlight><highlight class="comment">//at<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errorValue<sp/>=<sp/>apf::getScalar(errField,ent,0);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>errVect.push_back(errorValue);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(targetField,ent,0,errorValue);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(targetField,ent,0,0.0);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Past<sp/>creation<sp/>of<sp/>vector\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errVect.size()==0){</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>target_error<sp/>=<sp/>totalError/sqrt(m-&gt;count(m-&gt;getDimension()));</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>myfile;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile.open(</highlight><highlight class="stringliteral">&quot;interfaceErrors.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios::app<sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;errVect.size();i++){</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myfile<sp/>&lt;&lt;<sp/>errVect[i]&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>myfile.close();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(errVect.begin(),errVect.end());</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vectorSize<sp/>=<sp/>errVect.size();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vectorSize<sp/>%2<sp/>==0){</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1<sp/>=<sp/>vectorSize/2-1;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_error<sp/>=<sp/>(errVect[idx1]+errVect[idx1+1])/2;<sp/></highlight><highlight class="comment">//get<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_error<sp/>=<sp/>errVect[(vectorSize-1)/2];</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;The<sp/>estimated<sp/>target<sp/>error<sp/>is<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;target_error&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::abort();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196" refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" kindref="member">MeshAdaptPUMIDrvr::getERMSizeField</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_total)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//High<sp/>level<sp/>function<sp/>that<sp/>obtains<sp/>the<sp/>size<sp/>scales<sp/>and<sp/>the<sp/>size<sp/>frames<sp/>for<sp/>ERM-based<sp/>adapt<sp/>and<sp/>uses<sp/>the<sp/>computed<sp/>total<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>freeField(size_frame);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>freeField(size_scale);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>freeField(size_iso);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>fields<sp/>and<sp/>needed<sp/>types/variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>errField;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::Mesh*<sp/>m;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;ERM&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>errField<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;ErrorRegion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;VMS&quot;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>errField<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;VMSH1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>assert(errField);<sp/></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::Mesh<sp/>*m<sp/>=<sp/>apf::getMesh(vmsErrH1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::getMesh(errField);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>apf::MeshIterator<sp/>*it;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>apf::MeshElement<sp/>*element;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>apf::MeshEntity<sp/>*reg;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//size_iso<sp/>=<sp/>apf::createLagrangeField(m,<sp/>&quot;proteus_size&quot;,<sp/>apf::SCALAR,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*errorSize<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;errorSize&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>size_scale<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>size_frame<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size_frame&quot;</highlight><highlight class="normal">,<sp/>apf::MATRIX,<sp/>1);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*errorSize_reg<sp/>=<sp/>apf::createField(m,<sp/></highlight><highlight class="stringliteral">&quot;iso_size&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>apf::getConstant(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*clipped_vtx<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;iso_clipped&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>total<sp/>number<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>numel<sp/>=<sp/>m-&gt;count(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(&amp;numel,<sp/>1);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>target<sp/>error<sp/>is<sp/>not<sp/>specified,<sp/>choose<sp/>one<sp/>based<sp/>on<sp/>interface<sp/>or<sp/>based<sp/>on<sp/>equidistribution<sp/>assumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target_error==0){</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof&quot;</highlight><highlight class="normal">)!=NULL)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1a8a6f6bd5ed2818e9ccdddab5d84d74bc" kindref="member">getTargetError</ref>(m,errField,target_error,err_total);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_error<sp/>=<sp/>err_total/sqrt(m-&gt;count(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>domain<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>only<sp/>need<sp/>to<sp/>be<sp/>computed<sp/>once<sp/>unless<sp/>geometry<sp/>is<sp/>complex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domainVolume<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volTotal<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(reg<sp/>=<sp/>m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>volTotal<sp/>+=<sp/>apf::measure(m,<sp/>reg);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Add_Doubles(&amp;volTotal,<sp/>1);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>domainVolume<sp/>=<sp/>volTotal;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(domainVolume<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>new<sp/>size<sp/>field<sp/>over<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_curr<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errRho_curr<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errRho_target<sp/>=<sp/>target_error<sp/>/<sp/>sqrt(domainVolume);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>err_vect;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(reg<sp/>=<sp/>m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_old;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_new;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>apf::createMeshElement(m,<sp/>reg);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getDimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_old<sp/>=<sp/>sqrt(apf::measure(element)<sp/>*<sp/>4<sp/>/<sp/>sqrt(3));</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h_old<sp/>=<sp/>pow(apf::measure(element)<sp/>*<sp/>6<sp/>*<sp/>sqrt(2),<sp/>1.0<sp/>/<sp/>3.0);<sp/>//edge<sp/>of<sp/>a<sp/>regular<sp/>tet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_old<sp/>=<sp/>apf::computeShortestHeightInTet(m,reg);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//err_curr<sp/>=<sp/>apf::getScalar(vmsErrH1,<sp/>reg,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>err_curr<sp/>=<sp/>apf::getScalar(errField,<sp/>reg,<sp/>0);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//err_curr<sp/>=<sp/>err_vect[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//errRho_curr<sp/>=<sp/>apf::getScalar(errRho_reg,<sp/>reg,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h_new<sp/>=<sp/>h_old*errRho_target/errRho_curr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//h_new<sp/>=<sp/>h_old*sqrt(apf::measure(element))/sqrt(domainVolume)*target_error/err_curr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//error-to-size<sp/>relationship<sp/>should<sp/>be<sp/>different<sp/>between<sp/>anisotropic<sp/>and<sp/>isotropic<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//consider<sp/>moving<sp/>this<sp/>to<sp/>where<sp/>size<sp/>frames<sp/>are<sp/>computed<sp/>to<sp/>get<sp/>aspect<sp/>ratio<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target_error/err_curr<sp/>&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_new<sp/>=<sp/>h_old<sp/>*<sp/>pow((target_error<sp/>/<sp/>err_curr),2.0/(2.0*(1.0)+1.0));<sp/></highlight><highlight class="comment">//refinement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_new<sp/>=<sp/>h_old<sp/>*<sp/>pow((target_error<sp/>/<sp/>err_curr),2.0/(2.0*(1.0)+3.0));<sp/></highlight><highlight class="comment">//coarsening</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//isotropic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_new<sp/>=<sp/>h_old<sp/>*<sp/>pow((target_error<sp/>/<sp/>err_curr),2.0/(2.0*(1.0)+<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(errorSize_reg,<sp/>reg,<sp/>0,<sp/>h_new);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyMeshElement(element);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Transfer<sp/>size<sp/>field<sp/>from<sp/>elements<sp/>to<sp/>vertices<sp/>through<sp/>averaging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//averageToEntity(errorSize_reg,<sp/>errorSize,<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//volumeAverageToEntity(errorSize_reg,<sp/>errorSize,<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1a7a417e10c9bf4594a40a1d2c5c8aa438" kindref="member">errorAverageToEntity</ref>(errorSize_reg,<sp/>errorSize,errField,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//minToEntity(errorSize_reg,<sp/>errorSize,<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>anisotropic<sp/>size<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Entering<sp/>anisotropic<sp/>loop<sp/>to<sp/>compute<sp/>size<sp/>scales<sp/>and<sp/>frames\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps_u<sp/>=<sp/>0.002;<sp/></highlight><highlight class="comment">//distance<sp/>from<sp/>the<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Field<sp/>*phif<sp/>=<sp/>m-&gt;findField(&quot;phi&quot;);</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Field<sp/>*gradphi<sp/>=<sp/>apf::recoverGradientByVolume(phif);</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Field<sp/>*grad2phi<sp/>=<sp/>apf::recoverGradientByVolume(gradphi);</highlight></codeline>
<codeline lineno="1317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*speedF<sp/>=<sp/>extractSpeed(m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*gradSpeed<sp/>=<sp/>apf::recoverGradientByVolume(speedF);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*grad2Speed<sp/>=<sp/>apf::recoverGradientByVolume(gradSpeed);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::Field<sp/>*hess<sp/>=<sp/>computeHessianField(grad2phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::Field<sp/>*curves<sp/>=<sp/>getCurves(hess,<sp/>gradphi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::Field*<sp/>metricf<sp/>=<sp/>computeMetricField(gradphi,grad2phi,errorSize,eps_u);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*metricf<sp/>=<sp/>computeMetricField(gradSpeed,<sp/>grad2Speed,<sp/>errorSize,<sp/>eps_u);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field<sp/>*frame_comps[3]<sp/>=<sp/>{apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;frame_0&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1),<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;frame_1&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1),<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;frame_2&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>1)};</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//getERMSizeFrames(metricf,<sp/>gradSpeed,<sp/>frame_comps);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Set<sp/>the<sp/>size<sp/>scale<sp/>for<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>scale;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempScale<sp/>=<sp/>apf::getScalar(errorSize,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempScale<sp/>&lt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>-1);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempScale<sp/>&gt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clamp(tempScale,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(errorSize,<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,0,tempScale);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it))<sp/>){</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>;</highlight><highlight class="comment">//<sp/>=<sp/>apf::getScalar(phif,<sp/>v,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>curve;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::getVector(curves,<sp/>v,<sp/>0,<sp/>curve);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//metricf<sp/>is<sp/>the<sp/>hessian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>metric;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getMatrix(metricf,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>metric);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>eigenVectors[3];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenValues[3];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::eigen(metric,<sp/>eigenVectors,<sp/>eigenValues);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>eigenvalues<sp/>and<sp/>corresponding<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>eigenvalues<sp/>means<sp/>a<sp/>need<sp/>for<sp/>a<sp/>finer<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sorting_struct" kindref="compound">SortingStruct</ref><sp/>ssa[3];</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref><sp/>=<sp/>eigenVectors[i];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssa[i].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref><sp/>=<sp/>std::fabs(eigenValues[i]);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(ssa,<sp/>ssa<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ssa[2].wm<sp/>&gt;=<sp/>ssa[1].wm);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ssa[1].wm<sp/>&gt;=<sp/>ssa[0].wm);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda[3]<sp/>=<sp/>{ssa[2].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>,<sp/>ssa[1].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>,<sp/>ssa[0].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>};</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaleFormulaERM(<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>,<sp/>apf::getScalar(errorSize,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0),<sp/>curve,<sp/>lambda,<sp/>eps_u,<sp/>scale,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aae6c68a4a0140f3d2eca1472e10b61d1" kindref="member">maxAspect</ref>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>scale);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>frames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>frame(1.0,<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0,<sp/>0.0,<sp/>0.0,<sp/>0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>eigen<sp/>values<sp/>and<sp/>eigenvectors<sp/>from<sp/>hessian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>firstEigenvalue<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1afcd66ea92c8342093ede149911d37475" kindref="member">wm</ref>;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(firstEigenvalue<sp/>&gt;<sp/>1e-12);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[0]<sp/>=<sp/>ssa[2].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[1]<sp/>=<sp/>ssa[1].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame[2]<sp/>=<sp/>ssa[0].<ref refid="struct_sorting_struct_1a0324d98f69ab74ba52afb06ea3871fc2" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//normalize<sp/>eigenvectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame[i]<sp/>=<sp/>frame[i].normalize();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frame<sp/>=<sp/>apf::transpose(frame);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setMatrix(size_frame,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>frame);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>simple<sp/>size<sp/>and<sp/>aspect<sp/>ratio<sp/>grading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" kindref="member">gradeAnisoMesh</ref>(m,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref>);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>grading<sp/>size<sp/>0\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" kindref="member">gradeAspectRatio</ref>(m,1,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>grading<sp/>size<sp/>1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" kindref="member">gradeAspectRatio</ref>(m,2,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref>);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>grading<sp/>size<sp/>2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::synchronize(size_scale);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::destroyField(gradphi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::destroyField(grad2phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::destroyField(curves);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::destroyField(hess);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>namebuffer[20];</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;pumi_preadapt_aniso_%i&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::writeVtkFiles(namebuffer,<sp/>m);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(metricf);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(frame_comps[0]);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(frame_comps[1]);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(frame_comps[2]);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(speedF);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(gradSpeed);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(grad2Speed);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempScale<sp/>=<sp/>apf::getScalar(errorSize,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempScale<sp/>&lt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>-1);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempScale<sp/>&gt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(clipped_vtx,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clamp(tempScale,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(errorSize,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>tempScale);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gradeMesh();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::synchronize(errorSize);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_element_count<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sam::scaleIsoSizeField(errorSize,<sp/>target_element_count);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clampField(errorSize,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gradeMesh();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SmoothField(errorSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeFieldList.push(errorSize);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Destroy<sp/>locally<sp/>required<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>apf::destroyField(errorSize_reg);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>apf::destroyField(clipped_vtx);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>Size<sp/>Field\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461" refid="class_mesh_adapt_p_u_m_i_drvr_1aa48e918a44e6c7e99cd8c88ee7478437" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa48e918a44e6c7e99cd8c88ee7478437" kindref="member">MeshAdaptPUMIDrvr::testIsotropicSizeField</ref>()</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>that<sp/>tests<sp/>MeshAdapt<sp/>by<sp/>generating<sp/>an<sp/>isotropic<sp/>sizefield<sp/>based<sp/>on<sp/>hmin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>freeField(size_iso);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>size_iso<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">,apf::SCALAR,1);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clamp(<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(size_iso,<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,0,<ref refid="_headers_8h_1ace0097aceb19d2d05a51f5d244573c4f" kindref="member">phi</ref>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476" refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(apf::Mesh*<sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor,<sp/></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2],<sp/>apf::Adjacent<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg,</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>&amp;markedEdges,</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshTag*<sp/>isMarked,</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fieldType,</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vecPos,<sp/></highlight><highlight class="comment">//which<sp/>idx<sp/>of<sp/>sizeVec<sp/>to<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idxFlag)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment">//General<sp/>function<sp/>to<sp/>actually<sp/>modify<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Determine<sp/>a<sp/>switching<sp/>scheme<sp/>depending<sp/>on<sp/>which<sp/>vertex<sp/>needs<sp/>a<sp/>modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1,idx2;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idxFlag<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx1=0;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx2=1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx1=1;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>marginVal<sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needsParallel=0;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fieldType<sp/>==<sp/>apf::SCALAR){</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Field*<sp/>size_iso<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size[idx1]&gt;(gradingFactor*size[idx2])*(1+marginVal))</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(edgAdjVert[idx1]))</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[idx1]<sp/>=<sp/>gradingFactor*size[idx2];</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(size_iso,edgAdjVert[idx1],0,size[idx1]);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[idx1],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!marker[2]){</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>isOwned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//Pack<sp/>information<sp/>to<sp/>owning<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needsParallel=1;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(edgAdjVert[idx1],remotes);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/>gradingFactor*size[idx2];</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>owningPart=m-&gt;getOwner(edgAdjVert[idx1]);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(owningPart,<sp/>remotes[owningPart]);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(owningPart,newSize);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>if<sp/>apf::SCALAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Field*<sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>sizeVec;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size[idx1]&gt;(gradingFactor*size[idx2])*(1+marginVal)){</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size[idx1]<sp/>=<sp/>gradingFactor*size[idx2];</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[idx1],0,sizeVec);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vecPos<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[vecPos]<sp/>=<sp/>size[idx1]*sizeVec[0];<sp/></highlight><highlight class="comment">//realize<sp/>the<sp/>new<sp/>aspect<sp/>ratio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[0]<sp/>=<sp/>size[idx1];</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,edgAdjVert[idx1],0,sizeVec);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[idx1],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!marker[2]){</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needsParallel;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561" refid="_size_field_8cpp_1a5e3715a44fbd6ff6ac85bb77ae536c4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1a5e3715a44fbd6ff6ac85bb77ae536c4e" kindref="member">markEdgesInitial</ref>(apf::Mesh*<sp/>m,<sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>&amp;markedEdges,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>initially<sp/>determine<sp/>which<sp/>edges<sp/>need<sp/>to<sp/>be<sp/>considered<sp/>for<sp/>gradation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;findTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_iso<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=apf::getScalar(size_iso,edgAdjVert[i],0);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(size[0]<sp/>&gt;<sp/>gradingFactor*size[1])<sp/>||<sp/>(size[1]<sp/>&gt;<sp/>gradingFactor*size[0])<sp/>){</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>edge<sp/>to<sp/>a<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);<sp/></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);<sp/></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="_size_field_8cpp_1aebb45354b90c2372625cd67182587487" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1aebb45354b90c2372625cd67182587487" kindref="member">serialGradation</ref>(apf::Mesh*<sp/>m,<sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>&amp;markedEdges,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>loop<sp/>over<sp/>the<sp/>mesh<sp/>edge<sp/>queue<sp/>for<sp/>gradation<sp/>and<sp/>modify<sp/>the<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;findTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_iso<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needsParallel=0;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//perform<sp/>serial<sp/>gradation<sp/>while<sp/>packing<sp/>necessary<sp/>info<sp/>for<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedEdges.empty()){<sp/></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>markedEdges.front();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]<sp/>=<sp/>apf::getScalar(size_iso,edgAdjVert[i],0);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>needsParallel+=<ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::SCALAR,0,<sp/>0);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>needsParallel+=<ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::SCALAR,0,<sp/>1);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>markedEdges.pop();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needsParallel;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624" refid="class_mesh_adapt_p_u_m_i_drvr_1a1bb6d304aa4d38c9f32125b1036f2098" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1bb6d304aa4d38c9f32125b1036f2098" kindref="member">MeshAdaptPUMIDrvr::gradeMesh</ref>()</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>grade<sp/>isotropic<sp/>mesh<sp/>through<sp/>comparison<sp/>of<sp/>edge<sp/>vertex<sp/>size<sp/>ratios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>implementation<sp/>accounts<sp/>for<sp/>parallel<sp/>meshes<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">//First<sp/>do<sp/>serial<sp/>gradation.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>a<sp/>shared<sp/>entity<sp/>has<sp/>its<sp/>size<sp/>modified,<sp/>then<sp/>send<sp/>new<sp/>size<sp/>to<sp/>owning<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//After<sp/>full<sp/>loop<sp/>over<sp/>entities,<sp/>have<sp/>owning<sp/>copy<sp/>take<sp/>minimum<sp/>of<sp/>all<sp/>sizes<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment">//Flag<sp/>adjacent<sp/>entities<sp/>to<sp/>owning<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//Communicate<sp/>to<sp/>remote<sp/>copies<sp/>that<sp/>a<sp/>size<sp/>was<sp/>modified,<sp/>and<sp/>flag<sp/>adjacent<sp/>edges<sp/>to<sp/>remote<sp/>copies<sp/>for<sp/>further<sp/>gradation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>grading\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>markedEdges;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><ref refid="_size_field_8cpp_1a5e3715a44fbd6ff6ac85bb77ae536c4e" kindref="member">markEdgesInitial</ref>(m,markedEdges,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref>);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needsParallel=1;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCount=1;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(needsParallel)</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>needsParallel<sp/>=<sp/><ref refid="_size_field_8cpp_1aebb45354b90c2372625cd67182587487" kindref="member">serialGradation</ref>(m,markedEdges,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref>);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Add_Ints(&amp;needsParallel,1);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Sending<sp/>size<sp/>info<sp/>for<sp/>gradation&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Send();<sp/></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>receivedSize;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>currentSize;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newSize;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Need<sp/>a<sp/>container<sp/>to<sp/>get<sp/>all<sp/>entitites<sp/>that<sp/>need<sp/>to<sp/>be<sp/>updated<sp/>on<sp/>remotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>updateRemoteVertices;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//owning<sp/>copies<sp/>are<sp/>receiving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(ent);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(receivedSize);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m-&gt;isOwned(ent)){</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;THERE<sp/>WAS<sp/>AN<sp/>ERROR&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentSize<sp/>=<sp/>apf::getScalar(size_iso,ent,0);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newSize<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(receivedSize,currentSize);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(size_iso,ent,0,newSize);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>adjacent<sp/>edges<sp/>into<sp/>Q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i)</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>vertAdjEdg[i];</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!marker[2])</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateRemoteVertices.push(ent);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!updateRemoteVertices.empty())</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ent<sp/>=<sp/>updateRemoteVertices.front();</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>remote<sp/>copies<sp/>and<sp/>send<sp/>updated<sp/>mesh<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(ent,remotes);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentSize<sp/>=<sp/>apf::getScalar(size_iso,ent,0);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>iter=remotes.begin();<sp/>iter!=remotes.end();++iter)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,<sp/>iter-&gt;second);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateRemoteVertices.pop();</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//while<sp/>remote<sp/>copies<sp/>are<sp/>receiving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(ent);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//PCU_COMM_UNPACK(receivedSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m-&gt;isOwned(ent));</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(ent)){</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Problem<sp/>occurred\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(1);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>adjacent<sp/>edges<sp/>into<sp/>Q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i)</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>vertAdjEdg[i];</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!marker[2])</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::synchronize(size_iso);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>outer<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Cleanup<sp/>of<sp/>edge<sp/>marker<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;removeTag(edge,isMarked);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(isMarked);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::synchronize(size_iso);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Completed<sp/>grading\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>needsParallel;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762" refid="_size_field_8cpp_1a15e63a644e649498cb85a0308f3d4b50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" kindref="member">gradeAnisoMesh</ref>(apf::Mesh*<sp/>m)</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>grade<sp/>anisotropic<sp/>mesh<sp/>through<sp/>comparison<sp/>of<sp/>edge<sp/>vertex<sp/>aspect<sp/>ratios<sp/>and<sp/>minimum<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>simplicity,<sp/>we<sp/>do<sp/>not<sp/>bother<sp/>with<sp/>accounting<sp/>for<sp/>entities<sp/>across<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(comm_rank==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout&lt;&lt;&quot;Starting<sp/>anisotropic<sp/>grading\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor<sp/>=<sp/>1.3;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>sizeVec;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>markedEdges;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[0];</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(size[0]<sp/>&gt;<sp/>gradingFactor*size[1])<sp/>||<sp/>(size[1]<sp/>&gt;<sp/>gradingFactor*size[0])<sp/>){</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>edge<sp/>to<sp/>a<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);<sp/></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);<sp/></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedEdges.empty()){</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>markedEdges.front();</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[0];</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,0,<sp/>0);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,0,<sp/>1);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/><sp/><sp/><sp/>if(size[0]&gt;gradingFactor*size[1]){</highlight></codeline>
<codeline lineno="1815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size[0]<sp/>=<sp/>gradingFactor*size[1];</highlight></codeline>
<codeline lineno="1816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[0],0,sizeVec);</highlight></codeline>
<codeline lineno="1817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[0]<sp/>=<sp/>size[0];</highlight></codeline>
<codeline lineno="1818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,edgAdjVert[0],0,sizeVec);</highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[0],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!marker[2]){</highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/><sp/><sp/><sp/>if(size[1]&gt;gradingFactor*size[0]){</highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size[1]<sp/>=<sp/>gradingFactor*size[0];</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[1],0,sizeVec);</highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[0]<sp/>=<sp/>size[1];</highlight></codeline>
<codeline lineno="1833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,edgAdjVert[1],0,sizeVec);</highlight></codeline>
<codeline lineno="1834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[1],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!marker[2]){</highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>markedEdges.pop();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;removeTag(edge,isMarked);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(isMarked);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>apf::synchronize(size_scale);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(comm_rank==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout&lt;&lt;&quot;Completed<sp/>minimum<sp/>size<sp/>grading\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859" refid="_size_field_8cpp_1a3c6e4a0cfe24d869ff1ef68fb7e3ba25" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" kindref="member">gradeAspectRatio</ref>(apf::Mesh*<sp/>m,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>grade<sp/>anisotropic<sp/>mesh<sp/>through<sp/>comparison<sp/>of<sp/>edge<sp/>vertex<sp/>aspect<sp/>ratios<sp/>and<sp/>minimum<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>simplicity,<sp/>we<sp/>do<sp/>not<sp/>bother<sp/>with<sp/>accounting<sp/>for<sp/>entities<sp/>across<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Entered<sp/>function\n&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor<sp/>=<sp/>1.3;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>sizeVec;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>markedEdges;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[idx]/sizeVec[0];</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(size[0]<sp/>&gt;<sp/>gradingFactor*size[1])<sp/>||<sp/>(size[1]<sp/>&gt;<sp/>gradingFactor*size[0])<sp/>){</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>edge<sp/>to<sp/>a<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);<sp/></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);<sp/></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Got<sp/>queue<sp/>of<sp/>size<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;markedEdges.size()&lt;&lt;std::endl;<sp/></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedEdges.empty()){</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>markedEdges.front();</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[idx]/sizeVec[0];</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,<sp/>idx,<sp/>0);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,<sp/>idx,<sp/>1);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>markedEdges.pop();</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;removeTag(edge,isMarked);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(isMarked);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>apf::synchronize(size_scale);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922" refid="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1ae5295e84b62dd781516cee74432434c0" kindref="member">gradeAnisoMesh</ref>(apf::Mesh*<sp/>m,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>grade<sp/>anisotropic<sp/>mesh<sp/>through<sp/>comparison<sp/>of<sp/>edge<sp/>vertex<sp/>aspect<sp/>ratios<sp/>and<sp/>minimum<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>simplicity,<sp/>we<sp/>do<sp/>not<sp/>bother<sp/>with<sp/>accounting<sp/>for<sp/>entities<sp/>across<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(comm_rank==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout&lt;&lt;&quot;Starting<sp/>anisotropic<sp/>grading\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>gradingFactor<sp/>=<sp/>1.3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>sizeVec;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>markedEdges;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[0];</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(size[0]<sp/>&gt;<sp/>gradingFactor*size[1])<sp/>||<sp/>(size[1]<sp/>&gt;<sp/>gradingFactor*size[0])<sp/>){</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>edge<sp/>to<sp/>a<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);<sp/></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);<sp/></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedEdges.empty()){</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>markedEdges.front();</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[0];</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,0,<sp/>0);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,0,<sp/>1);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1974"><highlight class="comment"><sp/><sp/><sp/><sp/>if(size[0]&gt;gradingFactor*size[1]){</highlight></codeline>
<codeline lineno="1975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size[0]<sp/>=<sp/>gradingFactor*size[1];</highlight></codeline>
<codeline lineno="1976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[0],0,sizeVec);</highlight></codeline>
<codeline lineno="1977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[0]<sp/>=<sp/>size[0];</highlight></codeline>
<codeline lineno="1978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,edgAdjVert[0],0,sizeVec);</highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[0],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!marker[2]){</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/><sp/><sp/><sp/>if(size[1]&gt;gradingFactor*size[0]){</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size[1]<sp/>=<sp/>gradingFactor*size[0];</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[1],0,sizeVec);</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sizeVec[0]<sp/>=<sp/>size[1];</highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(size_scale,edgAdjVert[1],0,sizeVec);</highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edgAdjVert[1],<sp/>1,<sp/>vertAdjEdg);</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::size_t<sp/>i=0;<sp/>i&lt;vertAdjEdg.getSize();++i){</highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(vertAdjEdg[i],isMarked,&amp;marker[2]);</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//if<sp/>edge<sp/>is<sp/>not<sp/>already<sp/>marked</highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!marker[2]){</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(vertAdjEdg[i],isMarked,&amp;marker[1]);</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(vertAdjEdg[i]);</highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>markedEdges.pop();</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;removeTag(edge,isMarked);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(isMarked);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>apf::synchronize(size_scale);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(comm_rank==0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout&lt;&lt;&quot;Completed<sp/>minimum<sp/>size<sp/>grading\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019" refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_size_field_8cpp_1af4cf12111441356dc97a08ca2a315e62" kindref="member">gradeAspectRatio</ref>(apf::Mesh*<sp/>m,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFactor)</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>grade<sp/>anisotropic<sp/>mesh<sp/>through<sp/>comparison<sp/>of<sp/>edge<sp/>vertex<sp/>aspect<sp/>ratios<sp/>and<sp/>minimum<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//For<sp/>simplicity,<sp/>we<sp/>do<sp/>not<sp/>bother<sp/>with<sp/>accounting<sp/>for<sp/>entities<sp/>across<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Entered<sp/>function\n&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>edge;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>edgAdjVert;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>vertAdjEdg;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>gradingFactor<sp/>=<sp/>1.3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>size[2];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>sizeVec;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>std::queue&lt;apf::MeshEntity*&gt;<sp/>markedEdges;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>apf::MeshTag*<sp/>isMarked<sp/>=<sp/>m-&gt;createIntTag(</highlight><highlight class="stringliteral">&quot;isMarked&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size_scale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//marker<sp/>structure<sp/>for<sp/>0)<sp/>not<sp/>marked<sp/>1)<sp/>marked<sp/>2)storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>marker[3]<sp/>=<sp/>{0,1,0};<sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[idx]/sizeVec[0];</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(size[0]<sp/>&gt;<sp/>gradingFactor*size[1])<sp/>||<sp/>(size[1]<sp/>&gt;<sp/>gradingFactor*size[0])<sp/>){</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>edge<sp/>to<sp/>a<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>markedEdges.push(edge);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tag<sp/>edge<sp/>to<sp/>indicate<sp/>that<sp/>it<sp/>is<sp/>part<sp/>of<sp/>queue<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[1]);<sp/></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);<sp/></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Got<sp/>queue<sp/>of<sp/>size<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;markedEdges.size()&lt;&lt;std::endl;<sp/></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!markedEdges.empty()){</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>markedEdges.front();</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(edge,<sp/>0,<sp/>edgAdjVert);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i=0;<sp/>i<sp/>&lt;<sp/>edgAdjVert.getSize();<sp/>++i){</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(size_scale,edgAdjVert[i],0,sizeVec);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size[i]=sizeVec[idx]/sizeVec[0];</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,<sp/>idx,<sp/>0);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_size_field_8cpp_1ad95a2fc41cd90449be1c423374f57907" kindref="member">gradeSizeModify</ref>(m,<sp/>gradingFactor,<sp/>size,<sp/>edgAdjVert,<sp/></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertAdjEdg,<sp/>markedEdges,<sp/>isMarked,<sp/>apf::VECTOR,<sp/>idx,<sp/>1);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setIntTag(edge,isMarked,&amp;marker[0]);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>markedEdges.pop();</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((edge=m-&gt;iterate(it))){</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;removeTag(edge,isMarked);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>m-&gt;end(it);<sp/></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(isMarked);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>apf::synchronize(size_scale);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/SizeField.cpp"/>
  </compounddef>
</doxygen>
