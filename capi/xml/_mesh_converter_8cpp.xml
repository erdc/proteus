<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_mesh_converter_8cpp" kind="file" language="C++">
    <compoundname>MeshConverter.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">PCU.h</includes>
    <includes refid="mesh_8h" local="yes">mesh.h</includes>
    <includes local="no">apfShape.h</includes>
    <includes local="no">sstream</includes>
    <includes local="yes">apfConvert.h</includes>
    <includes local="yes">apfMesh2.h</includes>
    <includes local="yes">apf.h</includes>
    <includes local="yes">apfNumbering.h</includes>
    <includes local="no">map</includes>
    <includes local="no">gmi_null.h</includes>
    <includes local="no">gmi_mesh.h</includes>
    <includes local="no">gmi.h</includes>
    <includes local="no">apfMDS.h</includes>
    <includes local="no">ma.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">gmi_lookup.h</includes>
    <incdepgraph>
      <node id="8">
        <label>list</label>
      </node>
      <node id="1">
        <label>MeshConverter.cpp</label>
        <link refid="_mesh_converter_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>queue</label>
      </node>
      <node id="19">
        <label>apfShape.h</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>gmi_null.h</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="27">
        <label>gmi_lookup.h</label>
      </node>
      <node id="18">
        <label>PCU.h</label>
      </node>
      <node id="25">
        <label>apfMDS.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="21">
        <label>apfConvert.h</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="16">
        <label>apfNumbering.h</label>
      </node>
      <node id="14">
        <label>apf.h</label>
      </node>
      <node id="23">
        <label>gmi_mesh.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>apfMesh2.h</label>
      </node>
      <node id="3">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="4">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="26">
        <label>ma.h</label>
      </node>
      <node id="24">
        <label>gmi.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceapf">apf</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_mesh_converter_8cpp_1af3667f36a761f015c514b9a469dd867c" prot="public" static="no">
        <name>INTERIOR_MATERIAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="349" column="9" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_mesh_converter_8cpp_1acbe8bc25a944e1a973bc20263e860c87" prot="public" static="no">
        <name>EXTERIOR_MATERIAL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="350" column="9" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_mesh_converter_8cpp_1a750523a6333b98c899b96a92b649ae80" prot="public" static="no">
        <name>DEFAULT_ELEMENT_MATERIAL</name>
        <initializer><ref refid="_mesh_converter_8cpp_1af3667f36a761f015c514b9a469dd867c" kindref="member">INTERIOR_MATERIAL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="351" column="9" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_mesh_converter_8cpp_1a058af25be9f209ef407b3446afbabea2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Numbering *</type>
        <definition>static apf::Numbering* numberOwnedEntitiesFirst</definition>
        <argsstring>(apf::Mesh *m, int dimension, int initialReconstructed)</argsstring>
        <name>numberOwnedEntitiesFirst</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initialReconstructed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="10" column="23" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="10" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="_mesh_converter_8cpp_1ab2bf6160ee8269d218f36b471b07f799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getProteusBoundaryIdx</definition>
        <argsstring>(apf::Mesh *m, apf::MeshEntity *e, apf::MeshEntity *f)</argsstring>
        <name>getProteusBoundaryIdx</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="155" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="155" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="_mesh_converter_8cpp_1a54a0f64e8338edfd299149ef587659e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void createStars</definition>
        <argsstring>(Mesh &amp;mesh)</argsstring>
        <name>createStars</name>
        <param>
          <type><ref refid="struct_mesh" kindref="compound">Mesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="282" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="282" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="_mesh_converter_8cpp_1abdfbf7091f25d44948d29586cba4766b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getInOutMaterial</definition>
        <argsstring>(apf::Mesh *m, apf::MeshEntity *e)</argsstring>
        <name>getInOutMaterial</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" line="353" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp" bodystart="353" bodyend="359"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mesh_8h" kindref="compound">mesh.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>apf::Numbering*<sp/>numberOwnedEntitiesFirst(apf::Mesh*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialReconstructed)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;proteus_number_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dimension;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref><sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>apf::FieldShape*<sp/>shape;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dimension)<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>switch<sp/>is<sp/>just<sp/>to<sp/>help<sp/>rendering<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>apf::getConstant(dimension);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>m-&gt;getShape();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>apf::Numbering*<sp/><ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref><sp/>=<sp/>createNumbering(m,<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>.c_str(),<sp/>shape,<sp/>1);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(dimension);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialReconstructed){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a75dde92eec1297f87deda0fe215773cf" kindref="member">apf::number</ref>(<ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>,<sp/>e,<sp/>0,<sp/>0,<sp/>i++);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;isOwned(e))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a75dde92eec1297f87deda0fe215773cf" kindref="member">apf::number</ref>(<ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>,<sp/>e,<sp/>0,<sp/>0,<sp/>i++);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dimension);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m-&gt;isOwned(e))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a75dde92eec1297f87deda0fe215773cf" kindref="member">apf::number</ref>(<ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>,<sp/>e,<sp/>0,<sp/>0,<sp/>i++);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//Main<sp/>API<sp/>to<sp/>construct<sp/>a<sp/>serial<sp/>pumi<sp/>mesh,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//what<sp/>we<sp/>do<sp/>is<sp/>contruct<sp/>the<sp/>global<sp/>mesh<sp/>when<sp/>working<sp/>with<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//and<sp/>let<sp/>Proteus<sp/>populate<sp/>the<sp/>subdomain<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//(though<sp/>it<sp/>will<sp/>be<sp/>exactly<sp/>same)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_mesh_adapt_p_u_m_i_drvr_1ab11169fd7e5b9a69fd2525b7d62ef9ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab11169fd7e5b9a69fd2525b7d62ef9ed" kindref="member">MeshAdaptPUMIDrvr::constructFromSerialPUMIMesh</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Constructing<sp/>global<sp/>data<sp/>structures\n&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>m-&gt;count(dim);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>=<sp/>m-&gt;count(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>m-&gt;count(dim<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>=<sp/>m-&gt;count(1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//nNodes_element<sp/>for<sp/>now<sp/>is<sp/>constant<sp/>for<sp/>the<sp/>entire<sp/>mesh,<sp/>Ask<sp/>proteus<sp/>about<sp/>using<sp/>mixed<sp/>meshes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::fail(</highlight><highlight class="stringliteral">&quot;dimension<sp/>is<sp/>not<sp/>2<sp/>or<sp/>3\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MESH_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;*******Proteus<sp/>Mesh<sp/>Stats*********\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>elements<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>nodes<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>boundaries<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>edges<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a31a9734e50e16e7aff9bf7dded15eebb" kindref="member">numberLocally</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>constructNodes(mesh);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>constructElements(mesh);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>constructBoundaries(mesh);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>constructEdges(mesh);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>constructMaterialArrays(mesh);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="class_mesh_adapt_p_u_m_i_drvr_1a31a9734e50e16e7aff9bf7dded15eebb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a31a9734e50e16e7aff9bf7dded15eebb" kindref="member">MeshAdaptPUMIDrvr::numberLocally</ref>()</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;=<sp/>m-&gt;getDimension();<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>freeNumbering(local[d]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>local[d]<sp/>=<sp/>numberOwnedEntitiesFirst(m,<sp/>d,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab30bca7c0adb1965e12d6196b2673d42" kindref="member">initialReconstructed</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab30bca7c0adb1965e12d6196b2673d42" kindref="member">initialReconstructed</ref>)<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab30bca7c0adb1965e12d6196b2673d42" kindref="member">initialReconstructed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">MeshAdaptPUMIDrvr::localNumber</ref>(apf::MeshEntity*<sp/>e)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getNumber(local[apf::getDimension(m,<sp/>e)],<sp/>e,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::constructNodes(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>*<sp/>3];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(e);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>x;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getPoint(e,<sp/>0,<sp/>x);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[i<sp/>*<sp/>3<sp/>+<sp/>j]=<sp/>x[j];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::constructElements(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(m-&gt;getDimension());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(e);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Downward<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iNumVtx<sp/>=<sp/>m-&gt;getDownward(e,<sp/>0,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>iNumVtx;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtxID<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>[j]);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[i<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>j]<sp/>=<sp/>vtxID;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>following<sp/>is<sp/>going<sp/>to<sp/>look<sp/>adhoc<sp/>and<sp/>arbitrary<sp/>but<sp/>it<sp/>is<sp/>needed<sp/>to</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>resolve<sp/>a<sp/>conflict<sp/>between<sp/>the<sp/>way<sp/>proteus<sp/>handles<sp/>faces<sp/>and<sp/>we<sp/>handle<sp/>faces.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>The<sp/>order<sp/>in<sp/>which<sp/>we<sp/>retrieve<sp/>faces<sp/>from<sp/>adjacency<sp/>is<sp/>different<sp/>to<sp/>what</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/>proteus<sp/>expects<sp/>them<sp/>to<sp/>be<sp/>in<sp/>their<sp/>elementBoundaries<sp/>array.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>To<sp/>resolve<sp/>this<sp/>we<sp/>need<sp/>to<sp/>change<sp/>the<sp/>local<sp/>number<sp/>of<sp/>the<sp/>face<sp/>of<sp/>an<sp/>element</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/>to<sp/>what<sp/>proteus<sp/>expects<sp/>it<sp/>to<sp/>be<sp/>and<sp/>then<sp/>it<sp/>works.<sp/>Whussh.<sp/>magic.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>original<sp/>comment<sp/>above<sp/>preserved<sp/>for<sp/>entertainment.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>This<sp/>maps<sp/>SCOREC&apos;s<sp/>tet<sp/>face<sp/>numbering<sp/>to<sp/>that<sp/>of<sp/>proteus.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="_mesh_converter_8cpp_1ab2bf6160ee8269d218f36b471b07f799" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_mesh_converter_8cpp_1ab2bf6160ee8269d218f36b471b07f799" kindref="member">getProteusBoundaryIdx</ref>(apf::Mesh*<sp/>m,<sp/>apf::MeshEntity*<sp/>e,<sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>apf::Downward<sp/>fs;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfs<sp/>=<sp/>m-&gt;getDownward(e,<sp/>dim<sp/>-<sp/>1,<sp/>fs);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx_apf<sp/>=<sp/>apf::findIn(fs,<sp/>nfs,<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Proteus<sp/>convention<sp/>is<sp/>that<sp/>the<sp/>face<sp/>index<sp/>equals<sp/>the<sp/>vertex<sp/>index</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>vertex<sp/>opposite<sp/>to<sp/>the<sp/>face.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Proteus<sp/>and<sp/>PUMI<sp/>should<sp/>have<sp/>consistent<sp/>vertex<sp/>orderings<sp/>for</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>simplices,<sp/>but<sp/>the<sp/>above<sp/>rule<sp/>makes<sp/>the<sp/>side<sp/>orderings<sp/>different<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tet_boundary_map[4]<sp/>=<sp/>{3,2,0,1};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tri_boundary_map[3]<sp/>=<sp/>{2,0,1};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boundary_maps[4]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>tri_boundary_map,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>tet_boundary_map</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundary_maps[dim][idx_apf];</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::constructBoundaries(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//build<sp/>face<sp/>list<sp/>(elementBoundary<sp/>and<sp/>nodeBoundary<sp/>arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//Enter<sp/>at<sp/>your<sp/>own<sp/>peril<sp/>for<sp/>those<sp/>who<sp/>stray<sp/>will<sp/>be<sp/>lost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>interiorElementBoundaries;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>exteriorElementBoundaries;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>*<sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref><sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref><sp/>=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//exteriorGlobaltoLocalElementBoundariesArray<sp/>=<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>new<sp/>int[mesh.nElementBoundaries_global];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>exterior_count<sp/>=<sp/>0;<sp/>//counter<sp/>for<sp/>external<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(dim<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>vertices<sp/>from<sp/>adjacency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Downward<sp/>vs;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iNumVtx<sp/>=<sp/>m-&gt;getDownward(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,<sp/>0,<sp/>vs);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iVtx<sp/>=<sp/>0;<sp/>iVtx<sp/>&lt;<sp/>iNumVtx;<sp/>++iVtx)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtxID<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(vs[iVtx]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>+<sp/>iVtx]<sp/>=<sp/>vtxID;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//get<sp/>regions<sp/>from<sp/>adjacency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Up<sp/>rs;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getUp(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,<sp/>rs);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iNumRgn<sp/>=<sp/>rs.n;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RgnID[2]<sp/>=<sp/>{-1,-1};<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localBoundaryNumber[2]<sp/>=<sp/>{-1,-1};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iRgn<sp/>=<sp/>0;<sp/>iRgn<sp/>&lt;<sp/>iNumRgn;<sp/>++iRgn)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RgnID[iRgn]<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(rs.e[iRgn]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[i<sp/>*<sp/>2<sp/>+<sp/>iRgn]=<sp/>RgnID[iRgn];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>localBoundaryNumber[iRgn]<sp/>=<sp/><ref refid="_mesh_converter_8cpp_1ab2bf6160ee8269d218f36b471b07f799" kindref="member">getProteusBoundaryIdx</ref>(m,<sp/>rs.e[iRgn],<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(localBoundaryNumber[iRgn]<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref>[</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>*<sp/>2<sp/>+<sp/>iRgn]<sp/>=<sp/>localBoundaryNumber[iRgn];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//left<sp/>and<sp/>right<sp/>regions<sp/>are<sp/>shared<sp/>by<sp/>this<sp/>face<sp/>we<sp/>are<sp/>currntly<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftRgnID<sp/>=<sp/>RgnID[0];<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftLocalBoundaryNumber<sp/>=<sp/>localBoundaryNumber[0];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightRgnID<sp/>=<sp/>RgnID[1];<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightLocalBoundaryNumber<sp/>=<sp/>localBoundaryNumber[1];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*left<sp/>region<sp/>is<sp/>always<sp/>there,<sp/>so<sp/>either<sp/>rightRgnID<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>actual<sp/>ID<sp/>if<sp/>this<sp/>face<sp/>is<sp/>shared,<sp/>or<sp/>will<sp/>contain<sp/>-1</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>is<sp/>an<sp/>exterior<sp/>face<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leftRgnID<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>leftLocalBoundaryNumber]</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rightRgnID;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>leftRgnID<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>leftLocalBoundaryNumber]</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>only<sp/>1<sp/>region<sp/>is<sp/>adjacent<sp/>to<sp/>this<sp/>face,</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>means<sp/>it<sp/>is<sp/>an<sp/>exterior<sp/>face<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iNumRgn==1)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(RgnID[1]==-1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(localBoundaryNumber[1]==-1);<sp/></highlight><highlight class="comment">//last<sp/>2<sp/>checks<sp/>are<sp/>only<sp/>for<sp/>sanity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref>[i<sp/>*<sp/>2<sp/>+<sp/>1]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//exterior<sp/>face<sp/>as<sp/>only<sp/>1<sp/>region<sp/>adjacent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exteriorElementBoundaries.insert(i);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//construct<sp/>inverse<sp/>mapping<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//exteriorGlobaltoLocalElementBoundariesArray[i]<sp/>=<sp/>exterior_count;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//exterior_count++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//2<sp/>regions<sp/>are<sp/>shared<sp/>by<sp/>this<sp/>face<sp/>so<sp/>interior<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightRgnID<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>rightLocalBoundaryNumber]</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>leftRgnID;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightRgnID<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>rightLocalBoundaryNumber]</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interiorElementBoundaries.insert(i);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>interior<sp/>and<sp/>exterior<sp/>element<sp/>boundaries<sp/>array<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1ac4c81e5919b922684341f2e9f4fe1054" kindref="member">nInteriorElementBoundaries_global</ref><sp/>=<sp/>interiorElementBoundaries.size();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1ada24a4a97b51d0796ef5d7041a538baa" kindref="member">interiorElementBoundariesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1ac4c81e5919b922684341f2e9f4fe1054" kindref="member">nInteriorElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref><sp/>=<sp/>exteriorElementBoundaries.size();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebNI=0,ebNE=0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>ebN=interiorElementBoundaries.begin();ebN<sp/>!=<sp/>interiorElementBoundaries.end();<sp/>ebN++,ebNI++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ada24a4a97b51d0796ef5d7041a538baa" kindref="member">interiorElementBoundariesArray</ref>[ebNI]<sp/>=<sp/>*ebN;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>ebN=exteriorElementBoundaries.begin();ebN<sp/>!=<sp/>exteriorElementBoundaries.end();<sp/>ebN++,ebNE++)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[ebNE]<sp/>=<sp/>*ebN;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>these<sp/>algorithms<sp/>are<sp/>totally<sp/>independent<sp/>of<sp/>SCOREC;</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/>they<sp/>form<sp/>the<sp/>proteus</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/>vertex<sp/>to<sp/>vertex<sp/>and<sp/>vertex<sp/>to<sp/>element<sp/>adjacency<sp/>tables</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/>from<sp/>the<sp/>edge<sp/>to<sp/>vertex<sp/>and<sp/>element<sp/>to<sp/>vertex<sp/>tables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createStars(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>nodeStar(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeN<sp/>=<sp/>0;<sp/>edgeN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>edgeN++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeStar[mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN<sp/>*<sp/>2<sp/>+<sp/>0]].insert(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN<sp/>*<sp/>2<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeStar[mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN<sp/>*<sp/>2<sp/>+<sp/>1]].insert(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN<sp/>*<sp/>2<sp/>+<sp/>0]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>1;<sp/>nN<sp/>&lt;=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN]<sp/>=</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN<sp/>-<sp/>1]<sp/>+<sp/>nodeStar[nN<sp/>-<sp/>1].size();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0,<sp/>offset<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>nN_star=nodeStar[nN].begin();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_star!=nodeStar[nN].end();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_star++,<sp/>offset++)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[offset]<sp/>=<sp/>*nN_star;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref><sp/>=</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN<sp/>+<sp/>1]<sp/>-<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN]);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>nodeElementsStar(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementsStar[</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN<sp/>*<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>].insert(eN);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN<sp/>+<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN]<sp/>+<sp/>nodeElementsStar[nN].size();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>eN_star<sp/>=<sp/>nodeElementsStar[nN].begin();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star<sp/>!=<sp/>nodeElementsStar[nN].end();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star++,<sp/>offset++)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset]<sp/>=<sp/>*eN_star;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::constructEdges(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>*<sp/>2];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(1);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(e);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>[2];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getDownward(e,<sp/>0,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iVtx=0;<sp/>iVtx<sp/>&lt;<sp/>2;<sp/>++iVtx)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtxID<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>[iVtx]);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[i<sp/>*<sp/>2<sp/>+<sp/>iVtx]<sp/>=<sp/>vtxID;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>createStars(mesh);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="_mesh_converter_8cpp_1af3667f36a761f015c514b9a469dd867c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERIOR_MATERIAL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="_mesh_converter_8cpp_1acbe8bc25a944e1a973bc20263e860c87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXTERIOR_MATERIAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="_mesh_converter_8cpp_1a750523a6333b98c899b96a92b649ae80" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_ELEMENT_MATERIAL<sp/>INTERIOR_MATERIAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getInOutMaterial(apf::Mesh*<sp/>m,<sp/>apf::MeshEntity*<sp/>e)</highlight></codeline>
<codeline lineno="354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getModelType(m-&gt;toModel(e))<sp/>==<sp/>m-&gt;getDimension())</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_mesh_converter_8cpp_1af3667f36a761f015c514b9a469dd867c" kindref="member">INTERIOR_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_mesh_converter_8cpp_1acbe8bc25a944e1a973bc20263e860c87" kindref="member">EXTERIOR_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>builds<sp/>the<sp/>element,<sp/>elementBoundary,<sp/>and<sp/>node</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>Material<sp/>arrays<sp/>and<sp/>fills<sp/>them<sp/>in<sp/>with<sp/>zero<sp/>or<sp/>one<sp/>depending</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>one<sp/>whether<sp/>the<sp/>entity<sp/>is<sp/>classified<sp/>on<sp/>the<sp/>geometric<sp/>boundary</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>This<sp/>forms<sp/>a<sp/>baseline<sp/>material<sp/>tagging<sp/>for<sp/>all<sp/>entities,</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>which<sp/>later<sp/>gets<sp/>overwritten<sp/>for<sp/>some<sp/>entities<sp/>with<sp/>more</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>specific<sp/>values<sp/>in<sp/>MeshAdaptPUMIDrvr::UpdateMaterialArrays.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::constructMaterialArrays(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[i]<sp/>=<sp/><ref refid="_mesh_converter_8cpp_1a750523a6333b98c899b96a92b649ae80" kindref="member">DEFAULT_ELEMENT_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(dim<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<sp/>getInOutMaterial(m,<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]<sp/>=<sp/>getInOutMaterial(m,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Given<sp/>a<sp/>geometric<sp/>model<sp/>face<sp/>identified<sp/>by<sp/>the<sp/>integer</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>(scorec_tag),<sp/>get<sp/>all<sp/>nodes<sp/>and<sp/>element<sp/>boundaries</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>classified<sp/>on<sp/>the<sp/>closure<sp/>of<sp/>that<sp/>model<sp/>face<sp/>and</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>put<sp/>the<sp/>(proteus_material)<sp/>integer<sp/>in<sp/>their<sp/>material</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>array<sp/>slot.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="class_mesh_adapt_p_u_m_i_drvr_1a0174b9ea01dc47a497c832a8c46014d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0174b9ea01dc47a497c832a8c46014d0" kindref="member">MeshAdaptPUMIDrvr::updateMaterialArrays</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proteus_material,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scorec_tag)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>geomEnt<sp/>=<sp/>m-&gt;findModelEntity(dim,<sp/>scorec_tag);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==m-&gt;getDimension()){</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>==<sp/>geomEnt)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[i]<sp/>=<sp/>proteus_material;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>==<sp/>geomEnt)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<sp/>proteus_material;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::DynamicArray&lt;apf::Node&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getNodesOnClosure(m,<sp/>geomEnt,<sp/>nodes);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nodes.getSize();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtxId<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(nodes[i].entity);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[vtxId]<sp/>=<sp/>proteus_material;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Overload<sp/>updateMaterialArray<sp/>for<sp/>reconstructed<sp/>SCOREC<sp/>meshes.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>The<sp/>material<sp/>types<sp/>are<sp/>stored<sp/>based<sp/>on<sp/>derived<sp/>model<sp/>entity.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>We<sp/>can<sp/>recover<sp/>the<sp/>material<sp/>of<sp/>a<sp/>mesh<sp/>entity<sp/>by<sp/>looking<sp/>at<sp/>its<sp/>classified</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>model<sp/>entity</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="class_mesh_adapt_p_u_m_i_drvr_1a4b337a4235b1e8e2ea3568700d9ddb91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0174b9ea01dc47a497c832a8c46014d0" kindref="member">MeshAdaptPUMIDrvr::updateMaterialArrays</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geomTag;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>geomEnt;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(geomEnt);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>dim){</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]<sp/>=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref>[geomTag];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)==(m-&gt;getDimension()-1)){<sp/></highlight><highlight class="comment">//on<sp/>the<sp/>boundary<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]<sp/>=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>[geomTag];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>3D<sp/>and<sp/>is<sp/>on<sp/>an<sp/>exterior<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getDimension()==3<sp/>&amp;&amp;<sp/>m-&gt;getModelType(geomEnt)==1){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>vert_adjFace;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,2,vert_adjFace);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;vert_adjFace.getSize();j++){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>adjEnt<sp/>=<sp/>m-&gt;toModel(vert_adjFace[j]);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(adjEnt)<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>[m-&gt;getModelTag(adjEnt)];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//This<sp/>assumes<sp/>that<sp/>all<sp/>vertices<sp/>on<sp/>the<sp/>boundary<sp/>are<sp/>model<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getDimension()==2)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>dim){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>[geomTag];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Interior<sp/>boundaries<sp/>and<sp/>entities<sp/>have<sp/>a<sp/>material<sp/>type<sp/>of<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>dim+1;<sp/></highlight><highlight class="comment">//the<sp/>regions<sp/>are<sp/>necessarily<sp/>one<sp/>dimension<sp/>higher<sp/>than<sp/>previous<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;getModelType(geomEnt)==dim);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>geomTag<sp/>is<sp/>actually<sp/>the<sp/>right<sp/>material<sp/>for<sp/>region<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[i]<sp/>=<sp/>geomTag;<sp/></highlight><highlight class="comment">//modelRegionMaterial[geomTag];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="class_mesh_adapt_p_u_m_i_drvr_1a3fca50c59c93e805f6f17a0158a5185b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a3fca50c59c93e805f6f17a0158a5185b" kindref="member">MeshAdaptPUMIDrvr::updateMaterialArrays2</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>to<sp/>update<sp/>material<sp/>arrays\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>geomTag;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>geomEnt;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>associate<sp/>all<sp/>nodes<sp/>with<sp/>a<sp/>material<sp/>tag<sp/>and<sp/>synchronize<sp/>fields<sp/>to<sp/>avoid<sp/>mismatches<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//The<sp/>procedure<sp/>is<sp/>to<sp/>have<sp/>each<sp/>vertex<sp/>look<sp/>for<sp/>its<sp/>classification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>it<sp/>is<sp/>classified<sp/>in<sp/>the<sp/>region,<sp/>then<sp/>it<sp/>is<sp/>interior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Else,<sp/>loop<sp/>over<sp/>adjacent<sp/>faces<sp/>and<sp/>stop<sp/>at<sp/>first<sp/>instance<sp/>of<sp/>mesh<sp/>face<sp/>classified<sp/>on<sp/>model<sp/>boundary<sp/>and<sp/>take<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>are<sp/>no<sp/>such<sp/>adjacent<sp/>mesh<sp/>faces,<sp/>then<sp/>set<sp/>the<sp/>value<sp/>to<sp/>be<sp/>-1.<sp/>This<sp/>should<sp/>only<sp/>happen<sp/>if<sp/>the<sp/>vertex<sp/>is<sp/>a<sp/>shared<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>vertex<sp/>is<sp/>shared,<sp/>communicate<sp/>value<sp/>to<sp/>remote<sp/>copies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//When<sp/>receiving<sp/>values,<sp/>if<sp/>the<sp/>current<sp/>value<sp/>is<sp/>-1,<sp/>write<sp/>to<sp/>field<sp/>the<sp/>received<sp/>value.<sp/>Otherwise,<sp/>do<sp/>nothing.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>nodeMaterials<sp/>=<sp/>apf::createLagrangeField(m,<sp/></highlight><highlight class="stringliteral">&quot;nodeMaterials&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR,<sp/>1);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>classified<sp/>in<sp/>a<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>m-&gt;getDimension())</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0,0);<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>vert_adjFace;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,m-&gt;getDimension()-1,vert_adjFace);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>face;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i&lt;vert_adjFace.getSize();i++)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>face=vert_adjFace[i];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(face);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//IF<sp/>mesh<sp/>face<sp/>is<sp/>classified<sp/>on<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>m-&gt;getDimension()-1)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(geomEnt);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0,geomTag);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>))</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,remotes);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>iter<sp/>=<sp/>remotes.begin();<sp/>iter<sp/>!=<sp/>remotes.end();<sp/>++iter)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,iter-&gt;second);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(iter-&gt;first,geomTag);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>vert_adjFace.getSize()-1<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0,-1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(geomTag);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentTag<sp/>=<sp/>apf::getScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newTag<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(currentTag,geomTag);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>vertex<sp/>is<sp/>not<sp/>interior<sp/>and<sp/>had<sp/>no<sp/>adjacent<sp/>faces,<sp/>take<sp/>received<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>take<sp/>minimum<sp/>value<sp/>of<sp/>all<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTag==-1)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0,geomTag);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0,newTag);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Ensure<sp/>there<sp/>are<sp/>no<sp/>mismatches<sp/>across<sp/>parts<sp/>and<sp/>then<sp/>assign<sp/>node<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>apf::synchronize(nodeMaterials);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>=m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vID<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[vID]<sp/>=<sp/>apf::getScalar(nodeMaterials,<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,0);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//First<sp/>iterate<sp/>over<sp/>all<sp/>faces<sp/>in<sp/>3D,<sp/>get<sp/>the<sp/>model<sp/>tag<sp/>and<sp/>apply<sp/>to<sp/>all<sp/>downward<sp/>adjacencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>m-&gt;getDimension()-1;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it))</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(geomEnt);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>dim)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<sp/>geomTag;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>apf::destroyField(nodeMaterials);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>faces<sp/>and<sp/>verts\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>over<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>geomEnt<sp/>=<sp/>m-&gt;toModel(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>geomTag<sp/>=<sp/>m-&gt;getModelTag(geomEnt);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(geomEnt)<sp/>==<sp/>dim){</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[i]<sp/>=<sp/>0;</highlight><highlight class="comment">//geomTag;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">/*This<sp/>section<sp/>of<sp/>code<sp/>is<sp/>a<sp/>modified<sp/>version<sp/>of<sp/>the<sp/>apf::construct()<sp/>function<sp/>available<sp/>in<sp/></highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>scorec/core.<sp/>This<sp/>may<sp/>be<sp/>added<sp/>into<sp/>scorec/core<sp/>eventually<sp/>and<sp/>removed.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;apfConvert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;apfMesh2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;apf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;apfNumbering.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640" refid="namespaceapf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceapf" kindref="compound">apf</ref><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constructVerts(</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh2*<sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nverts,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>local2globalMap,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalToVert&amp;<sp/>result)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>ModelEntity*<sp/>interior<sp/>=<sp/>m-&gt;findModelEntity(m-&gt;getDimension(),<sp/>0);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nverts;<sp/>++i)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>result[local2globalMap[i]]<sp/>=<sp/>m-&gt;createVert_(interior);</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constructBoundaryElements(</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh2*<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref>*<sp/>conn_b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem_b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype_b,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>ModelEntity*<sp/>interior<sp/>=<sp/>m-&gt;findModelEntity(m-&gt;getDimension(),<sp/>0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nev<sp/>=<sp/>apf::Mesh::adjacentCount[etype_b][0];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nelem_b;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>Downward<sp/>verts;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>i<sp/>*<sp/>nev;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nev;<sp/>++j){</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verts[j]<sp/>=<sp/>globalToVert[conn_b[j<sp/>+<sp/>offset]];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>only<sp/>care<sp/>about<sp/>how<sp/>boundary<sp/>elements<sp/>are<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>intermediate<sp/>entities<sp/>need<sp/>to<sp/>inherit<sp/>the<sp/>classifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getDimension()==2)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;createEntity(etype_b,interior,verts);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::buildElement(m,interior,2,verts);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constructElements(</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>Mesh2*<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref>*<sp/>conn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>ModelEntity*<sp/>interior<sp/>=<sp/>m-&gt;findModelEntity(m-&gt;getDimension(),<sp/>0);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nev<sp/>=<sp/>apf::Mesh::adjacentCount[etype][0];</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nelem;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>Downward<sp/>verts;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>i<sp/>*<sp/>nev;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nev;<sp/>++j)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>verts[j]<sp/>=<sp/>globalToVert[conn[j<sp/>+<sp/>offset]];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>buildElement(m,<sp/>interior,<sp/>etype,<sp/>verts);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref><sp/>getMax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>APF_CONST_ITERATE(GlobalToVert,<sp/>globalToVert,<sp/>it)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref><sp/>=<sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">std::max</ref>(<ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>,<sp/>it-&gt;first);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PCU_Max_Int(<ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>type-dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>algorithm<sp/>courtesy<sp/>of<sp/>Sebastian<sp/>Rettenberger:</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/>use<sp/>brokers/routers<sp/>for<sp/>the<sp/>vertex<sp/>global<sp/>ids.</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/>Although<sp/>we<sp/>have<sp/>used<sp/>this<sp/>trick<sp/>before<sp/>(see<sp/>mpas/apfMPAS.cc),</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/>I<sp/>didn&apos;t<sp/>think<sp/>to<sp/>use<sp/>it<sp/>here,<sp/>so<sp/>credit<sp/>is<sp/>given.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constructResidence(Mesh2*<sp/>m,<sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref><sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref><sp/>=<sp/>getMax(globalToVert);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="namespaceapf_1a13c4b4f5e52d755d7f8c80c1c082b48d" kindref="member">Gid</ref><sp/>total<sp/>=<sp/><ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peers<sp/>=<sp/>PCU_Comm_Peers();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/>total<sp/>/<sp/>peers;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/>total<sp/>%<sp/>peers;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mySize<sp/>=<sp/>quotient;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>(peers<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>mySize<sp/>+=<sp/>remainder;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>TmpParts;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>TmpParts<sp/>tmpParts(mySize);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>we<sp/>have<sp/>a<sp/>vertex,<sp/>send<sp/>its<sp/>global<sp/>id<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>broker<sp/>for<sp/>that<sp/>global<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>APF_ITERATE(GlobalToVert,<sp/>globalToVert,<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(peers<sp/>-<sp/>1,<sp/>gid<sp/>/<sp/>quotient);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_PACK(to,<sp/>gid);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myOffset<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>*<sp/>quotient;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>brokers<sp/>store<sp/>all<sp/>the<sp/>part<sp/>ids<sp/>that<sp/>sent<sp/>messages</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>each<sp/>global<sp/>id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PCU_Comm_Receive())<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(gid);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from<sp/>=<sp/>PCU_Comm_Sender();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpParts.at(gid<sp/>-<sp/>myOffset).push_back(from);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>each<sp/>global<sp/>id,<sp/>send<sp/>all<sp/>associated<sp/>part<sp/>ids</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>all<sp/>associated<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mySize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;&amp;<sp/>parts<sp/>=<sp/>tmpParts[i];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>parts.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to<sp/>=<sp/>parts[j];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid<sp/>=<sp/>i<sp/>+<sp/>myOffset;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nparts<sp/>=<sp/>parts.size();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(to,<sp/>gid);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(to,<sp/>nparts);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>parts.size();<sp/>++k)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(to,<sp/>parts[k]);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>receiving<sp/>a<sp/>global<sp/>id<sp/>and<sp/>associated<sp/>parts,</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>lookup<sp/>the<sp/>vertex<sp/>and<sp/>classify<sp/>it<sp/>on<sp/>the<sp/>partition</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>model<sp/>entity<sp/>for<sp/>that<sp/>set<sp/>of<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PCU_Comm_Receive())<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(gid);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nparts;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(nparts);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>Parts<sp/>residence;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nparts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(part);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>residence.insert(part);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>MeshEntity*<sp/>vert<sp/>=<sp/>globalToVert[gid];</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setResidence(vert,<sp/>residence);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>given<sp/>correct<sp/>residence<sp/>from<sp/>the<sp/>above<sp/>algorithm,</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/>negotiate<sp/>remote<sp/>copies<sp/>by<sp/>exchanging<sp/>(gid,pointer)</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/>pairs<sp/>with<sp/>parts<sp/>in<sp/>the<sp/>residence<sp/>of<sp/>the<sp/>vertex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>constructRemotes(Mesh2*<sp/>m,<sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>APF_ITERATE(GlobalToVert,<sp/>globalToVert,<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>MeshEntity*<sp/>vert<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>Parts<sp/>residence;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getResidence(vert,<sp/>residence);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>APF_ITERATE(Parts,<sp/>residence,<sp/>rit)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*rit<sp/>!=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(*rit,<sp/>gid);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(*rit,<sp/>vert);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PCU_Comm_Receive())<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gid;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(gid);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>MeshEntity*<sp/>remote;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(remote);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from<sp/>=<sp/>PCU_Comm_Sender();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>MeshEntity*<sp/>vert<sp/>=<sp/>globalToVert[gid];</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;addRemote(vert,<sp/>from,<sp/>remote);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="namespaceapf_1ad2cd56661f04d58f443c5b9e2b797175" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceapf_1ad2cd56661f04d58f443c5b9e2b797175" kindref="member">construct</ref>(Mesh2*<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>conn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>conn_b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem,<sp/></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem_b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nverts,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype_b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>local2globalMap,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>GlobalToVert&amp;<sp/>globalToVert)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>constructVerts(m,<sp/>nverts,local2globalMap,globalToVert);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>constructBoundaryElements(m,<sp/>conn_b,<sp/>nelem_b,<sp/>etype_b,<sp/>globalToVert);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>constructElements(m,<sp/>conn,<sp/>nelem,<sp/>etype,<sp/>globalToVert);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>constructResidence(m,<sp/>globalToVert);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>constructRemotes(m,<sp/>globalToVert);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>stitchMesh(m);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>m-&gt;acceptChanges();</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>following<sp/>functions<sp/>are<sp/>used<sp/>to<sp/>facilitate<sp/>and<sp/>perform<sp/>a<sp/>reconstruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//of<sp/>the<sp/>proteus<sp/>mesh<sp/>into<sp/>a<sp/>SCOREC<sp/>mesh<sp/>to<sp/>enable<sp/>adaptivity<sp/>features.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//Currently,<sp/>only<sp/>2D<sp/>mesh<sp/>reconstruction<sp/>is<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>basic<sp/>strategy<sp/>is<sp/>to<sp/>assume<sp/>each<sp/>exterior<sp/>entity<sp/>is<sp/>a<sp/>model<sp/>entity<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//no<sp/>geometric<sp/>model<sp/>is<sp/>given.<sp/>In<sp/>Proteus,<sp/>part<sp/>boundary<sp/>mesh<sp/>entities<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//considered<sp/>exterior<sp/>and<sp/>so<sp/>there<sp/>needs<sp/>to<sp/>be<sp/>logic<sp/>to<sp/>avoid<sp/>classifying<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//Each<sp/>model<sp/>entity<sp/>should<sp/>be<sp/>unique<sp/>and<sp/>is<sp/>associated<sp/>with<sp/>a<sp/>material<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//These<sp/>material<sp/>types<sp/>are<sp/>kept<sp/>track<sp/>via<sp/>material<sp/>arrays<sp/>and<sp/>the<sp/>size<sp/>of<sp/>such<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//arrays<sp/>are<sp/>based<sp/>on<sp/>the<sp/>total<sp/>number<sp/>of<sp/>owned<sp/>entities<sp/>on<sp/>each<sp/>rank.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//There<sp/>are<sp/>some<sp/>currently<sp/>obsolete<sp/>functionality<sp/>for<sp/>2D<sp/>model<sp/>entity<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>mesh<sp/>entities<sp/>which<sp/>will<sp/>likely<sp/>be<sp/>developed/completed<sp/>at<sp/>a<sp/>later<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//To<sp/>use,<sp/>add<sp/>the<sp/>following<sp/>to<sp/>your<sp/>case.py<sp/>file<sp/>(for<sp/>example):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/>adaptMesh<sp/>=<sp/>True</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/>adaptMesh_nSteps<sp/>=<sp/>10</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/>adaptMesh_numIter<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/>MeshAdaptMesh=MeshAdaptPUMI.MeshAdaptPUMI(hmax=1.0,<sp/>hmin=0.001,<sp/>numIter=adaptMesh_numIter,sfConfig=&quot;ERM&quot;,logType=&quot;off&quot;,targetError=100,targetElementCount=8000)</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/>useModel=False</highlight></codeline>
<codeline lineno="838"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi_null.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi_mesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMDS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMesh2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfConvert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi_lookup.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>to<sp/>transfer<sp/>some<sp/>model<sp/>information<sp/>from<sp/>NumericalSolution<sp/>into<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//MeshAdaptPUMIDrvr<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="class_mesh_adapt_p_u_m_i_drvr_1a2314044d8a34d2f5872d93da1931898f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2314044d8a34d2f5872d93da1931898f" kindref="member">MeshAdaptPUMIDrvr::transferModelInfo</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>numGeomEntities,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>edges,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>faces,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mVertex2Model,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*mEdge2Model,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*mBoundary2Model,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxSegments){</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[0]<sp/>=<sp/>numGeomEntities[0];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[1]<sp/>=<sp/>numGeomEntities[1];</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[2]<sp/>=<sp/>numGeomEntities[2];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[3]<sp/>=<sp/>numGeomEntities[3];</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa5906a0f076e0ad1de1c61c905c85b20" kindref="member">edgeList</ref><sp/>=<sp/>edges;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab42d754f517e0886d5749038df914452" kindref="member">faceList</ref><sp/>=<sp/>faces;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7a39e1cdd603aa22b54acd6c83fb0eb0" kindref="member">meshVertex2Model</ref><sp/>=<sp/>mVertex2Model;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a036919258d2820160b6b5f3699321aac" kindref="member">meshEdge2Model</ref><sp/>=<sp/>mEdge2Model;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a5837c7464bf0703abf955e31334bb823" kindref="member">meshBoundary2Model</ref><sp/>=<sp/>mBoundary2Model;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab7268c72a11923e639065b10f75062f6" kindref="member">numSegments</ref><sp/>=<sp/>nMaxSegments;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//Actual<sp/>function<sp/>to<sp/>prompt<sp/>recontruction<sp/>and<sp/>takes<sp/>in<sp/>the<sp/>subodomain<sp/>mesh<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>global<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="class_mesh_adapt_p_u_m_i_drvr_1a0bd25b35ad7754632353d43aa3094df4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0bd25b35ad7754632353d43aa3094df4" kindref="member">MeshAdaptPUMIDrvr::reconstructFromProteus</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>globalMesh,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hasModel)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;STARTING<sp/>RECONSTRUCTION\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a82c29efd9d3cf097e81daba5b9cdcba9" kindref="member">isReconstructed</ref><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/************Preliminaries**************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>comm_size<sp/>=<sp/>PCU_Comm_Peers();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>comm_rank<sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numModelNodes;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numModelEdges;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numModelBoundaries;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numModelRegions;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBoundaryNodes=0;<sp/></highlight><highlight class="comment">//number<sp/>of<sp/>total<sp/>boundary<sp/>nodes<sp/>regardless<sp/>of<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_owned<sp/>=<sp/>globalMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[PCU_Comm_Self()+1]-globalMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[PCU_Comm_Self()];</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;i&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;i++){</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[i]&gt;0){</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBoundaryNodes++;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDim;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>==3)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>numDim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>numDim<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Depending<sp/>on<sp/>the<sp/>dimension<sp/>of<sp/>the<sp/>problem,<sp/>exterior<sp/>boundaries<sp/>may<sp/>refer<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//edges<sp/>or<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasModel){</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelNodes=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[0];</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelEdges=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[1];</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelBoundaries=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[2];</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelRegions=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[3];</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim=2){</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//should<sp/>add<sp/>some<sp/>sort<sp/>of<sp/>assertion<sp/>statement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numModelBoundaries<sp/>=<sp/>numModelEdges;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelNodes<sp/>=<sp/>nBoundaryNodes;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelEdges<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelBoundaries<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelRegions<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[3];</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>assert(numModelRegions&gt;0);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0]<sp/>=<sp/>numModelNodes;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[1]<sp/>=<sp/>numModelEdges;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2]<sp/>=<sp/>numModelBoundaries;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]<sp/>=<sp/>0;</highlight><highlight class="comment">//The<sp/>total<sp/>number<sp/>of<sp/>regions<sp/>is<sp/>known<sp/>so<sp/>no<sp/>need<sp/>to<sp/>set<sp/>a<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(&amp;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0],4);<sp/></highlight><highlight class="comment">//get<sp/>all<sp/>offsets<sp/>at<sp/>the<sp/>same<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]<sp/>=<sp/>numModelRegions;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/************Model<sp/>Allocation**************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>section<sp/>starts<sp/>the<sp/>process<sp/>to<sp/>derive<sp/>the<sp/>geometric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//model<sp/>associated<sp/>with<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>gmi_model*<sp/>gMod;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gmi_base*<sp/>gMod_base;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>gMod_base<sp/>=<sp/>(gmi_base*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*gMod_base));</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>gMod_base-&gt;model.ops<sp/>=<sp/>&amp;gmi_base_ops;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>gmi_base_init(gMod_base);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">agm_ent<sp/>e;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">agm_bdry<sp/>b;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">agm_ent<sp/>d;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gvertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>gmi_base_reserve(gMod_base,AGM_VERTEX,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0]);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==2){</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gedges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_EDGE,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2]);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_FACE,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gregions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_REGION,0);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==3){</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gedges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_EDGE,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[1]);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gfaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_FACE,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2]);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gregions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_base_reserve(gMod_base,AGM_REGION,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>gMod<sp/>=<sp/>&amp;gMod_base-&gt;model;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/************Mesh<sp/>Creation**************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//We<sp/>can<sp/>use<sp/>apf::construct()<sp/>which<sp/>takes<sp/>in<sp/>a<sp/>mapping<sp/>of<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//to<sp/>their<sp/>global<sp/>vertices<sp/>as<sp/>well<sp/>as<sp/>boundary<sp/>elements<sp/>to<sp/>their<sp/>global<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//vertices<sp/>and<sp/>outputs<sp/>a<sp/>topologically<sp/>correct<sp/>mesh.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>apf::makeEmptyMdsMesh(gMod,numDim,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etype,etype_b;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundaryDim<sp/>=<sp/>numDim-1;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>apf::GlobalToVert<sp/>outMap;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim<sp/>==<sp/>2){</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>etype<sp/>=<sp/>apf::Mesh::TRIANGLE;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>etype_b<sp/>=<sp/>apf::Mesh::EDGE;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>etype<sp/>=<sp/>apf::Mesh::TET;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>etype_b<sp/>=<sp/>apf::Mesh::TRIANGLE;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>the<sp/>mappings<sp/>from<sp/>proteus<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>local2global_elementBoundaryNodes;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>local2global_elementBoundaryNodes<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*apf::Mesh::adjacentCount[etype_b][0]);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*apf::Mesh::adjacentCount[etype_b][0];i++){<sp/></highlight><highlight class="comment">//should<sp/>use<sp/>adjacent<sp/>count<sp/>function<sp/>from<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>local2global_elementBoundaryNodes[i]<sp/>=<sp/>globalMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i]];</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>local2global_elementNodes;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>local2global_elementNodes<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*apf::Mesh::adjacentCount[etype][0]);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*apf::Mesh::adjacentCount[etype][0];i++){<sp/></highlight><highlight class="comment">//should<sp/>use<sp/>adjacent<sp/>count<sp/>function<sp/>from<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>local2global_elementNodes[i]<sp/>=<sp/>globalMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[i]];</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><ref refid="namespaceapf_1ad2cd56661f04d58f443c5b9e2b797175" kindref="member">apf::construct</ref>(m,local2global_elementNodes,local2global_elementBoundaryNodes,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>,mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>,mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>,etype,etype_b,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>globalMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>,outMap);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>global<sp/>model<sp/>offsets<sp/>after<sp/>the<sp/>mesh<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Need<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>owned<sp/>element<sp/>boundaries<sp/>on<sp/>the<sp/>current<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Also<sp/>need<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>owned<sp/>exterior<sp/>entities<sp/>for<sp/>proper<sp/>processor<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>is<sp/>necessary<sp/>because<sp/>a<sp/>shared<sp/>mesh<sp/>entity<sp/>should<sp/>point<sp/>to<sp/>the<sp/>same<sp/>model<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>nBoundaryNodes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>entIter=m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((ent=m-&gt;iterate(entIter))){</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(ent)){</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[idx]&gt;0)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBoundaryNodes++;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>entIter=m-&gt;begin(boundaryDim);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>idx=0;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nExteriorElementBoundaries_owned<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((ent=m-&gt;iterate(entIter))){</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(ent)){</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[idx]&gt;0)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nExteriorElementBoundaries_owned++;<sp/><sp/></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasModel){</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelNodes=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[0];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelEdges=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[1];</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelBoundaries=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[2];</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelRegions=<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[3];</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim=2){</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numModelBoundaries<sp/>=<sp/>numModelEdges;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelNodes<sp/>=<sp/>nBoundaryNodes;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelEdges<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelBoundaries<sp/>=<sp/>nExteriorElementBoundaries_owned;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>numModelRegions<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a06e0b5795826df209fabcd78f30a3ccd" kindref="member">numModelEntities</ref>[3];<sp/></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[0]<sp/>=<sp/>numModelNodes;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[1]<sp/>=<sp/>numModelEdges;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[2]<sp/>=<sp/>numModelBoundaries;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0]<sp/>=<sp/>numModelNodes;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[1]<sp/>=<sp/>numModelEdges;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2]<sp/>=<sp/>numModelBoundaries;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Get<sp/>Region<sp/>starting<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>entIter<sp/>=<sp/>m-&gt;begin(numDim);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regStartMaterial<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rID<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(entIter)){</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[rID]<sp/>&lt;<sp/>regStartMaterial)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regStartMaterial<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[rID];</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>rID++;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>offsets<sp/>at<sp/>the<sp/>same<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>PCU_Exscan_Ints(&amp;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[0],4);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(&amp;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0],4);<sp/></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]<sp/>=<sp/>numModelRegions;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//classify<sp/>mesh<sp/>entities<sp/>on<sp/>model<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>pt;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>g_vertEnt;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>g_edgeEnt;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>g_faceEnt;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>vertEnt;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a84f27a11492a2a1f3582345bad013a37" kindref="member">modelRegionMaterial</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3],</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//gmi<sp/>set<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//more<sp/>entities<sp/>were<sp/>reserved<sp/>than<sp/>necessary,<sp/>but<sp/>that&apos;s<sp/>okay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>gmi_unfreeze_lookups(gMod_base-&gt;lookup);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0];i++){</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_VERTEX);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_set_lookup(gMod_base-&gt;lookup,<sp/>e,<sp/>i);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>gmi_freeze_lookup(gMod_base-&gt;lookup,<sp/>(agm_ent_type)0);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2];i++){</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==2)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_EDGE);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_FACE);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_set_lookup(gMod_base-&gt;lookup,<sp/>e,<sp/>i);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>gmi_freeze_lookup(gMod_base-&gt;lookup,<sp/>(agm_ent_type)boundaryDim);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numModelRegions;i++){</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_FACE);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_REGION);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assumes<sp/>material<sp/>types<sp/>are<sp/>enumerated<sp/>starting<sp/>from<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_set_lookup(gMod_base-&gt;lookup,<sp/>e,<sp/>i+regStartMaterial);<sp/></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasModel){</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>agm_add_bdry(gMod_base-&gt;topo,<sp/>e);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;k&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab7268c72a11923e639065b10f75062f6" kindref="member">numSegments</ref>;k++){</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab42d754f517e0886d5749038df914452" kindref="member">faceList</ref>[(i)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab7268c72a11923e639065b10f75062f6" kindref="member">numSegments</ref>+k]==-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>gmi_look_up(gMod_base-&gt;lookup,AGM_EDGE,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab42d754f517e0886d5749038df914452" kindref="member">faceList</ref>[(i)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab7268c72a11923e639065b10f75062f6" kindref="member">numSegments</ref>+k]);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agm_add_use(gMod_base-&gt;topo,b,d);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>gmi_freeze_lookup(gMod_base-&gt;lookup,<sp/>(agm_ent_type)numDim);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==3){</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[1];i++){</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>agm_add_ent(gMod_base-&gt;topo,<sp/>AGM_EDGE);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gmi_set_lookup(gMod_base-&gt;lookup,<sp/>e,<sp/>i);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_freeze_lookup(gMod_base-&gt;lookup,<sp/>(agm_ent_type)1);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matTag;<sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>gEnt;<sp/></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertCounter<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[0];</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>over<sp/>the<sp/>vertices<sp/>and<sp/>set<sp/>the<sp/>coordinates<sp/>and<sp/>model<sp/>classification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vID<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>entIter<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(entIter)){</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>pt[0]=mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vID*3+0];</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>pt[1]=mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vID*3+1];</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>pt[2]=mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vID*3+2];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setPoint(ent,0,pt);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(ent)){</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matTag<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[vID];</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasModel){</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7a39e1cdd603aa22b54acd6c83fb0eb0" kindref="member">meshVertex2Model</ref>[2*vID+1],<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7a39e1cdd603aa22b54acd6c83fb0eb0" kindref="member">meshVertex2Model</ref>[2*vID]);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>entity<sp/>is<sp/>a<sp/>model<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7a39e1cdd603aa22b54acd6c83fb0eb0" kindref="member">meshVertex2Model</ref>[2*vID+1]==0)<sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref>[<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7a39e1cdd603aa22b54acd6c83fb0eb0" kindref="member">meshVertex2Model</ref>[2*vID]]<sp/>=<sp/>matTag;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>entity<sp/>is<sp/>interior,<sp/>it<sp/>should<sp/>be<sp/>classified<sp/>on<sp/>a<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matTag==0){</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matTag<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[vID]]];</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(numDim,matTag);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else<sp/>there<sp/>is<sp/>an<sp/>associated<sp/>model<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(0,vertCounter);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref>[vertCounter]<sp/>=<sp/>matTag;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertCounter++;<sp/><sp/></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(ent,gEnt);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>owner<sp/>and<sp/>entity<sp/>is<sp/>shared,<sp/>share<sp/>the<sp/>model<sp/>classification<sp/>with<sp/>other<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(ent)){</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(ent,remotes);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>it<sp/>=<sp/>remotes.begin();<sp/>it<sp/>!=<sp/>remotes.end();<sp/>++it){</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,it-&gt;second);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,gEnt);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//endif<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>vID++;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//receive<sp/>model<sp/>entity<sp/>classification<sp/>from<sp/>owning<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive()){</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(ent);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(gEnt);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(ent,gEnt);<sp/></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>PCU_Barrier();</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Classify<sp/>the<sp/>mesh<sp/>boundary<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>edge<sp/>is<sp/>on<sp/>a<sp/>model<sp/>edge,<sp/>it<sp/>should<sp/>have<sp/>a<sp/>material<sp/>tag<sp/>greater<sp/>than<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>edge<sp/>is<sp/>on<sp/>a<sp/>partition<sp/>boundary,<sp/>the<sp/>material<sp/>tag<sp/>should<sp/>be<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//There<sp/>is<sp/>no<sp/>direct<sp/>control<sp/>over<sp/>ownership<sp/>when<sp/>constructing<sp/>the<sp/>mesh,<sp/>so<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//must<sp/>be<sp/>left<sp/>general.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundaryID<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>counter<sp/>for<sp/>the<sp/>set<sp/>of<sp/>boundary<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundaryCounter<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>counter<sp/>for<sp/>the<sp/>set<sp/>of<sp/>exterior<sp/>boundary<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundaryMaterialCounter<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[2];<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>counter<sp/>for<sp/>the<sp/>storage<sp/>array<sp/>used<sp/>to<sp/>map<sp/>material<sp/>types<sp/>to<sp/>the<sp/>new<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgCounter<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aff8d734eb2cfc1d53e338e91f69d2aa9" kindref="member">numModelOffsets</ref>[1];<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>a<sp/>counter<sp/>for<sp/>the<sp/>set<sp/>of<sp/>exterior<sp/>edge<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>apf::ModelEntity*<sp/>edg_gEnt;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>entIter=m-&gt;begin(boundaryDim);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(entIter)){</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasModel){</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a5837c7464bf0703abf955e31334bb823" kindref="member">meshBoundary2Model</ref>[2*boundaryID+1],<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a5837c7464bf0703abf955e31334bb823" kindref="member">meshBoundary2Model</ref>[2*boundaryID]);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>entity<sp/>is<sp/>a<sp/>on<sp/>a<sp/>model<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a5837c7464bf0703abf955e31334bb823" kindref="member">meshBoundary2Model</ref>[2*boundaryID+1]==1)<sp/></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>[<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a5837c7464bf0703abf955e31334bb823" kindref="member">meshBoundary2Model</ref>[2*boundaryID]]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[boundaryID];</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[boundaryCounter]==boundaryID<sp/>&amp;&amp;<sp/>(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[boundaryID]!=0)){</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(boundaryDim,boundaryMaterialCounter);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>[boundaryMaterialCounter]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[boundaryID];<sp/></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaryCounter++;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaryMaterialCounter++;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>3D,<sp/>need<sp/>to<sp/>set<sp/>exterior<sp/>edge<sp/>classification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==3){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>adj_edges;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,1,adj_edges);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;adj_edges.getSize();i++){</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>edge<sp/>is<sp/>classified<sp/>on<sp/>a<sp/>higher<sp/>order<sp/>entity<sp/>than<sp/>gEnt<sp/>or<sp/>if<sp/>the<sp/>edge<sp/>hasn&apos;t<sp/>been<sp/>classified<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(m-&gt;toModel(adj_edges[i]))&gt;m-&gt;getModelType(gEnt)<sp/>||<sp/>(m-&gt;getModelType(m-&gt;toModel(adj_edges[i]))==0)){</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edg_gEnt<sp/>=<sp/>m-&gt;findModelEntity(1,edgCounter);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(adj_edges[i],edg_gEnt);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgCounter++;<sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>owner<sp/>and<sp/>entity<sp/>is<sp/>shared,<sp/>share<sp/>the<sp/>model<sp/>classification<sp/>with<sp/>other<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(adj_edges[i])<sp/>&amp;&amp;<sp/>m-&gt;isShared(adj_edges[i])){</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(ent,remotes);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>it<sp/>=<sp/>remotes.begin();<sp/>it<sp/>!=<sp/>remotes.end();<sp/>++it){</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,it-&gt;second);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,edg_gEnt);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>current<sp/>exterior<sp/>entity<sp/>is<sp/>an<sp/>edge<sp/>on<sp/>a<sp/>partition<sp/>boundary,<sp/>need<sp/>to<sp/>check<sp/>material<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>to<sp/>the<sp/>next<sp/>item<sp/>in<sp/>the<sp/>exterior<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(ent)<sp/>&amp;&amp;<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[mesh.<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[boundaryCounter]]==0)<sp/></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaryCounter++;<sp/></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert((mesh.elementBoundaryMaterialTypes[boundaryID]==0<sp/>||<sp/>numModelTotals[3]&gt;1)<sp/>&amp;&amp;<sp/>&quot;If<sp/>working<sp/>with<sp/>multi-region<sp/>cases,<sp/>turn<sp/>this<sp/>assertion<sp/>off&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>are<sp/>always<sp/>two<sp/>entities<sp/>adjacent<sp/>to<sp/>an<sp/>element<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Pick<sp/>one<sp/>and<sp/>take<sp/>that<sp/>as<sp/>the<sp/>material<sp/>type<sp/>for<sp/>classification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matTag<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[2*boundaryID]];</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(numDim,matTag);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>3D,<sp/>need<sp/>to<sp/>set<sp/>edge<sp/>classification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numDim==3){<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>adj_edges;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,1,adj_edges);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;adj_edges.getSize();i++){</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>edge<sp/>is<sp/>classified<sp/>on<sp/>a<sp/>higher<sp/>order<sp/>entity<sp/>than<sp/>gEnt<sp/>or<sp/>if<sp/>the<sp/>edge<sp/>hasn&apos;t<sp/>been<sp/>classified<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;getModelType(m-&gt;toModel(adj_edges[i]))&gt;m-&gt;getModelType(gEnt)<sp/>||<sp/>(m-&gt;getModelType(m-&gt;toModel(adj_edges[i]))==0)){</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(adj_edges[i],gEnt);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>owner<sp/>and<sp/>entity<sp/>is<sp/>shared,<sp/>share<sp/>the<sp/>model<sp/>classification<sp/>with<sp/>other<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isOwned(adj_edges[i])<sp/>&amp;&amp;<sp/>m-&gt;isShared(adj_edges[i])){</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(ent,remotes);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>it<sp/>=<sp/>remotes.begin();<sp/>it<sp/>!=<sp/>remotes.end();<sp/>++it){</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,it-&gt;second);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,gEnt);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(ent,gEnt);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaryID++;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//receive<sp/>model<sp/>entity<sp/>classification<sp/>from<sp/>owning<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive()){</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(ent);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(gEnt);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(ent,gEnt);<sp/></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>PCU_Barrier();</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Iterate<sp/>over<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Populate<sp/>the<sp/>region<sp/>materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Assumes<sp/>that<sp/>the<sp/>regions<sp/>are<sp/>numbered<sp/>sequentially<sp/>from<sp/>1<sp/>onward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numModelRegions;i++)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a84f27a11492a2a1f3582345bad013a37" kindref="member">modelRegionMaterial</ref>[i]<sp/>=<sp/>i+regStartMaterial;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>rID=0;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>entIter<sp/>=<sp/>m-&gt;begin(numDim);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(entIter)){</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>gEnt<sp/>=<sp/>m-&gt;findModelEntity(numDim,mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[rID]);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setModelEntity(ent,gEnt);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>rID++;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>m-&gt;end(entIter);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sum<sp/>all<sp/>of<sp/>the<sp/>material<sp/>arrays<sp/>to<sp/>get<sp/>the<sp/>model-material<sp/>mapping<sp/>across<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ranks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[0]);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[2]);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a84f27a11492a2a1f3582345bad013a37" kindref="member">modelRegionMaterial</ref>,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afee9fc62fa74e070a316e1ecb8d4a560" kindref="member">numModelTotals</ref>[3]);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>that<sp/>the<sp/>mesh<sp/>is<sp/>consistent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>m-&gt;acceptChanges();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>apf::alignMdsRemotes(m);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab30bca7c0adb1965e12d6196b2673d42" kindref="member">initialReconstructed</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//renumber<sp/>for<sp/>compatibility<sp/>with<sp/>Proteus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a31a9734e50e16e7aff9bf7dded15eebb" kindref="member">numberLocally</ref>();</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//free<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>free(local2global_elementBoundaryNodes);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>free(local2global_elementNodes);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;FINISHING<sp/>RECONSTRUCTION\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335" refid="class_mesh_adapt_p_u_m_i_drvr_1a10be3b196fb7563006c0185b0495e6e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a10be3b196fb7563006c0185b0495e6e4" kindref="member">MeshAdaptPUMIDrvr::reconstructFromProteus2</ref>(<ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>isModelVert,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bFaces){</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>function<sp/>only<sp/>applies<sp/>for<sp/>3D<sp/>meshes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elementType;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>3){</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementType<sp/>=<sp/>apf::Mesh::TRIANGLE;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementType<sp/>=<sp/>apf::Mesh::TET;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a82c29efd9d3cf097e81daba5b9cdcba9" kindref="member">isReconstructed</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBFaces<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isModelVert_bool[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;i++){</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isModelVert_bool[i]<sp/>=<sp/>isModelVert[i]<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numEntries<sp/>=<sp/>2+dim;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bEdges_1D[nBFaces][4];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bFaces_2D[nBFaces][5];</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2){</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nBFaces;i++){</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>i*numEntries;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;numEntries;j++)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bEdges_1D[i][j]<sp/>=<sp/>bFaces[idx+j];</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==3){</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nBFaces;i++){</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>i*numEntries;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;numEntries;j++)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][j]<sp/>=<sp/>bFaces[idx+j];</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][0]<sp/>=<sp/>bFaces[idx+0];</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][1]<sp/>=<sp/>bFaces[idx+1];</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][2]<sp/>=<sp/>bFaces[idx+2];</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][3]<sp/>=<sp/>bFaces[idx+3];</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>bFaces_2D[i][4]<sp/>=<sp/>bFaces[idx+4];</highlight></codeline>
<codeline lineno="1382"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::GlobalToVert<sp/>outMap;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_model*<sp/>tempModel<sp/><sp/>=<sp/>gmi_load(</highlight><highlight class="stringliteral">&quot;.null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>apf::makeEmptyMdsMesh(tempModel,dim,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceapf_1ad2cd56661f04d58f443c5b9e2b797175" kindref="member">apf::construct</ref>(m,mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>,mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>,elementType,outMap);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setCoords(m,mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>,mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>,outMap);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,apf::MeshEntity*&gt;<sp/>globalToRegion;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(dim);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>ent<sp/>=<sp/>m-&gt;iterate(it)<sp/>){</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>globalToRegion.insert(std::pair&lt;int,apf::MeshEntity*&gt;<sp/>(counter,ent<sp/>));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::derive2DMdlFromManifold(m,isModelVert_bool,nBFaces,bEdges_1D,outMap,globalToRegion);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::deriveMdlFromManifold(m,isModelVert_bool,nBFaces,bFaces_2D,outMap,globalToRegion);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;writeNative(</highlight><highlight class="stringliteral">&quot;Reconstructed.smb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>gmi_write_dmg(m-&gt;getModel(),</highlight><highlight class="stringliteral">&quot;Reconstructed.dmg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>Reconstruction,<sp/>terminating<sp/>program.<sp/>Rerun<sp/>with<sp/>PUMI<sp/>workflow\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshConverter.cpp"/>
  </compounddef>
</doxygen>
