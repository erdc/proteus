<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classproteus_1_1_r_a_n_s2_p__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>proteus::RANS2P_base</compoundname>
    <derivedcompoundref refid="classproteus_1_1_r_a_n_s2_p" prot="public" virt="non-virtual">proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</derivedcompoundref>
    <includes refid="_r_a_n_s2_p_8h" local="no">/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ac98b9770a5a62b4c353b5487b6094593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual proteus::RANS2P_base::~RANS2P_base</definition>
        <argsstring>()</argsstring>
        <name>~RANS2P_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="22" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1af9e615ad723539c7c8dade1a9480506f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateResidual</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABLIZATION, double *numerical_viscosity, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *x_ref, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const double *eps_solid, double *phi_solid, const double *q_velocity_solid, const double *q_porosity, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, const double LAG_LES, double *q_eddy_viscosity, double *q_eddy_viscosity_last, double *ebqe_eddy_viscosity, double *ebqe_eddy_viscosity_last, int *p_l2g, int *vel_l2g, int *rp_l2g, int *rvel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *p_old_dof, double *u_old_dof, double *v_old_dof, double *w_old_dof, double *g, const double useVF, double *q_rho, double *vf, double *phi, double *phi_nodes, double *normal_phi, double *kappa_phi, double *q_mom_u_acc, double *q_mom_v_acc, double *q_mom_w_acc, double *q_mass_adv, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *q_cfl, double *q_numDiff_u, double *q_numDiff_v, double *q_numDiff_w, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, double *globalResidual, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_porosity_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, double *q_x, double *q_velocity, double *ebqe_velocity, double *flux, double *elementResidual_p, int *elementFlags, int *boundaryFlags, double *barycenters, double *wettedAreas, double *netForces_p, double *netForces_v, double *netMoments, double *velocityError, double *velocityErrorNodal, double *forcex, double *forcey, double *forcez, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, double *ball_center_acceleration, double *ball_angular_acceleration, double *ball_density, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double *ebq_global_phi_s, double *ebq_global_grad_phi_s, double *ebq_particle_velocity_s, int nParticles, double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, double *phi_solid_nodes, double *distance_to_solids, const int use_pseudo_penalty, bool useExact)=0</argsstring>
        <name>calculateResidual</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a63146e5310c6c2c58f6d91398944a69a">calculateResidual</reimplementedby>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABLIZATION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rp_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rvel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementResidual_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityError</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityErrorNodal</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="23" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1aa57937b9b5702e2d0cf3f5ca4a33aeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateJacobian</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *x_ref, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const double *eps_solid, const double *phi_solid, const double *q_velocity_solid, const double *q_porosity, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, const double LAG_LES, double *q_eddy_viscosity_last, double *ebqe_eddy_viscosity_last, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *p_old_dof, double *u_old_dof, double *v_old_dof, double *w_old_dof, double *g, const double useVF, double *vf, double *phi, double *phi_nodes, double *normal_phi, double *kappa_phi, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *q_cfl, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_p_u, int *csrColumnOffsets_p_u, int *csrRowIndeces_p_v, int *csrColumnOffsets_p_v, int *csrRowIndeces_p_w, int *csrColumnOffsets_p_w, int *csrRowIndeces_u_p, int *csrColumnOffsets_u_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_u_v, int *csrColumnOffsets_u_v, int *csrRowIndeces_u_w, int *csrColumnOffsets_u_w, int *csrRowIndeces_v_p, int *csrColumnOffsets_v_p, int *csrRowIndeces_v_u, int *csrColumnOffsets_v_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_v_w, int *csrColumnOffsets_v_w, int *csrRowIndeces_w_p, int *csrColumnOffsets_w_p, int *csrRowIndeces_w_u, int *csrColumnOffsets_w_u, int *csrRowIndeces_w_v, int *csrColumnOffsets_w_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *globalJacobian, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_porosity_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, int *csrColumnOffsets_eb_p_p, int *csrColumnOffsets_eb_p_u, int *csrColumnOffsets_eb_p_v, int *csrColumnOffsets_eb_p_w, int *csrColumnOffsets_eb_u_p, int *csrColumnOffsets_eb_u_u, int *csrColumnOffsets_eb_u_v, int *csrColumnOffsets_eb_u_w, int *csrColumnOffsets_eb_v_p, int *csrColumnOffsets_eb_v_u, int *csrColumnOffsets_eb_v_v, int *csrColumnOffsets_eb_v_w, int *csrColumnOffsets_eb_w_p, int *csrColumnOffsets_eb_w_u, int *csrColumnOffsets_eb_w_v, int *csrColumnOffsets_eb_w_w, int *elementFlags, int *boundaryFlags, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, double *ball_center_acceleration, double *ball_angular_acceleration, double *ball_density, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double *ebq_global_phi_s, double *ebq_global_grad_phi_s, double *ebq_particle_velocity_s, double *phi_solid_nodes, double *distance_to_solids, int nParticles, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, const int use_pseudo_penalty, bool useExact)=0</argsstring>
        <name>calculateJacobian</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1ad2290233cf9a2819b93f040e5639beaf">calculateJacobian</reimplementedby>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="226" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1a19ed30cfae419903868c7593804dca97" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, int *interiorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *normal_ref, double *boundaryJac_ref, int *vel_l2g, double *u_dof, double *v_dof, double *w_dof, double *vel_trial_trace_ref, double *ebqe_velocity, double *velocityAverage)=0</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a811f562fa019020df780d30394ae4ec0">calculateVelocityAverage</reimplementedby>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityAverage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="426" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ac792268b36a32af7e06114b451e97fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseAdvectionOperator</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *vel_trail_ref, double *vel_grad_trial_ref, double *elementDiameter, double *nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *vel_l2g, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *advection_matrix)=0</argsstring>
        <name>getTwoPhaseAdvectionOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a100fe54d0ba85bbf85e094bdaeb54576">getTwoPhaseAdvectionOperator</reimplementedby>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trail_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>advection_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="447" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1acf1aa973f8b828074f917566f649d172" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseInvScaledLaplaceOperator</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_grad_trial_ref, double *vel_grad_trial_ref, double *elementDiameter, double *nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *sdInfo_p_p_rowptr, int *sdInfo_p_p_colind, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *laplace_matrix)=0</argsstring>
        <name>getTwoPhaseInvScaledLaplaceOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1ae7352b8f6f5d78a97c100c6e6d88f546">getTwoPhaseInvScaledLaplaceOperator</reimplementedby>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_p_p_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_p_p_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>laplace_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="476" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ac76453a3d1a99cd4ba3702092696bc2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseScaledMassOperator</definition>
        <argsstring>(int scale_type, int use_numerical_viscosity, int lumped, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_trial_ref, double *p_test_ref, double *vel_trial_ref, double *vel_test_ref, double *elementDiameter, double *nodeDiametersArray, double *numerical_viscosity, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *mass_matrix)=0</argsstring>
        <name>getTwoPhaseScaledMassOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a4184fdc06b9e962875575b22ea95ff77">getTwoPhaseScaledMassOperator</reimplementedby>
        <param>
          <type>int</type>
          <declname>scale_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lumped</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mass_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="508" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>proteus::RANS2P_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p__base"/>
      </node>
      <node id="2">
        <label>proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" line="20" column="1" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P.h" bodystart="19" bodyend="546"/>
    <listofallmembers>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1aa57937b9b5702e2d0cf3f5ca4a33aeb7" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1af9e615ad723539c7c8dade1a9480506f" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1a19ed30cfae419903868c7593804dca97" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ac792268b36a32af7e06114b451e97fe5" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseAdvectionOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1acf1aa973f8b828074f917566f649d172" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseInvScaledLaplaceOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ac76453a3d1a99cd4ba3702092696bc2d" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseScaledMassOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ac98b9770a5a62b4c353b5487b6094593" prot="public" virt="virtual"><scope>proteus::RANS2P_base</scope><name>~RANS2P_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
