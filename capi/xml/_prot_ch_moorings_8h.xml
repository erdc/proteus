<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_prot_ch_moorings_8h" kind="file" language="C++">
    <compoundname>ProtChMoorings.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string</includes>
    <includes local="yes">chrono/physics/ChSystem.h</includes>
    <includes local="yes">chrono/physics/ChSystemSMC.h</includes>
    <includes local="yes">chrono/physics/ChLoadContainer.h</includes>
    <includes local="yes">chrono/physics/ChLinkMate.h</includes>
    <includes local="yes">chrono/physics/ChBodyEasy.h</includes>
    <includes local="yes">chrono/fea/ChElementBeamANCF.h</includes>
    <includes local="yes">chrono/fea/ChElementCableANCF.h</includes>
    <includes local="yes">chrono/fea/ChElementBeamEuler.h</includes>
    <includes local="yes">chrono/fea/ChBeamSection.h</includes>
    <includes local="yes">chrono/fea/ChMesh.h</includes>
    <includes local="yes">chrono/fea/ChLinkPointPoint.h</includes>
    <includes local="yes">chrono/fea/ChLinkPointFrame.h</includes>
    <includes local="yes">chrono/fea/ChLinkDirFrame.h</includes>
    <includes local="yes">chrono/fea/ChLoadsBeam.h</includes>
    <includes local="yes">chrono/fea/ChContactSurfaceNodeCloud.h</includes>
    <includes local="yes">chrono/timestepper/ChTimestepper.h</includes>
    <includes local="yes">chrono/solver/ChSolverMINRES.h</includes>
    <includes local="yes">chrono/core/ChTransform.h</includes>
    <incdepgraph>
      <node id="22">
        <label>chrono/core/ChTransform.h</label>
      </node>
      <node id="14">
        <label>chrono/fea/ChMesh.h</label>
      </node>
      <node id="6">
        <label>chrono/physics/ChSystemSMC.h</label>
      </node>
      <node id="13">
        <label>chrono/fea/ChBeamSection.h</label>
      </node>
      <node id="11">
        <label>chrono/fea/ChElementCableANCF.h</label>
      </node>
      <node id="9">
        <label>chrono/physics/ChBodyEasy.h</label>
      </node>
      <node id="15">
        <label>chrono/fea/ChLinkPointPoint.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="16">
        <label>chrono/fea/ChLinkPointFrame.h</label>
      </node>
      <node id="10">
        <label>chrono/fea/ChElementBeamANCF.h</label>
      </node>
      <node id="8">
        <label>chrono/physics/ChLinkMate.h</label>
      </node>
      <node id="1">
        <label>ProtChMoorings.h</label>
        <link refid="_prot_ch_moorings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>chrono/timestepper/ChTimestepper.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>chrono/fea/ChElementBeamEuler.h</label>
      </node>
      <node id="7">
        <label>chrono/physics/ChLoadContainer.h</label>
      </node>
      <node id="17">
        <label>chrono/fea/ChLinkDirFrame.h</label>
      </node>
      <node id="5">
        <label>chrono/physics/ChSystem.h</label>
      </node>
      <node id="18">
        <label>chrono/fea/ChLoadsBeam.h</label>
      </node>
      <node id="19">
        <label>chrono/fea/ChContactSurfaceNodeCloud.h</label>
      </node>
      <node id="21">
        <label>chrono/solver/ChSolverMINRES.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_ch_element_cable_a_n_c_fmod" prot="public">ChElementCableANCFmod</innerclass>
    <innerclass refid="class_ch_element_beam_eulermod" prot="public">ChElementBeamEulermod</innerclass>
    <innerclass refid="class_my_loader_triangular" prot="public">MyLoaderTriangular</innerclass>
    <innerclass refid="classcpp_cable" prot="public">cppCable</innerclass>
    <innerclass refid="classcpp_multi_segmented_cable" prot="public">cppMultiSegmentedCable</innerclass>
    <innernamespace refid="namespacechrono_1_1fea">chrono::fea</innernamespace>
    <innernamespace refid="namespacechrono_1_1geometry">chrono::geometry</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_prot_ch_moorings_8h_1a525335710b53cb064ca56b936120431e" prot="public" static="no">
        <name>_USE_MATH_DEFINES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" line="3" column="9" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_prot_ch_moorings_8h_1ae4f8c960f5677c889d6a1c0606c767c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref> *</type>
        <definition>cppMultiSegmentedCable* newMoorings</definition>
        <argsstring>(std::shared_ptr&lt; ChSystem &gt; system, std::shared_ptr&lt; ChMesh &gt; mesh, std::vector&lt; double &gt; length, std::vector&lt; int &gt; nb_elems, std::vector&lt; double &gt; d, std::vector&lt; double &gt; rho, std::vector&lt; double &gt; E, std::string beam_type)</argsstring>
        <name>newMoorings</name>
        <param>
          <type>std::shared_ptr&lt; ChSystem &gt;</type>
          <declname>system</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChMesh &gt;</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; double &gt;</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
          <declname>nb_elems</declname>
        </param>
        <param>
          <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; double &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; double &gt;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; double &gt;</type>
          <declname>E</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>beam_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" line="979" column="25" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" bodystart="979" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_moorings_8h_1ae9a2807dd7597d5bbbabd33eff8f1ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cppAttachNodeToNodeFEAxyzD</definition>
        <argsstring>(cppMultiSegmentedCable *cable1, int node1, cppMultiSegmentedCable *cable2, int node2)</argsstring>
        <name>cppAttachNodeToNodeFEAxyzD</name>
        <param>
          <type><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref> *</type>
          <declname>cable1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>node1</declname>
        </param>
        <param>
          <type><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref> *</type>
          <declname>cable2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>node2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" line="999" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" bodystart="999" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_moorings_8h_1a126b50d227c64c86eba5fffd4bcbf9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cppAttachNodeToNodeFEAxyzrot</definition>
        <argsstring>(cppMultiSegmentedCable *cable1, int node1, cppMultiSegmentedCable *cable2, int node2)</argsstring>
        <name>cppAttachNodeToNodeFEAxyzrot</name>
        <param>
          <type><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref> *</type>
          <declname>cable1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>node1</declname>
        </param>
        <param>
          <type><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref> *</type>
          <declname>cable2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>node2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" line="1010" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h" bodystart="1010" bodyend="1019"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="_prot_ch_moorings_8h_1a525335710b53cb064ca56b936120431e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChSystemSMC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChLoadContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChLinkMate.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChBodyEasy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChElementBeamANCF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChElementCableANCF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChElementBeamEuler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChBeamSection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChMesh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChLinkPointPoint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChLinkPointFrame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChLinkDirFrame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChLoadsBeam.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/fea/ChContactSurfaceNodeCloud.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/timestepper/ChTimestepper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/solver/ChSolverMINRES.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/core/ChTransform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//using<sp/>namespace<sp/>std;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacechrono" kindref="compound">chrono</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">chrono::fea;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">chrono::collision;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">chrono::geometry;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>override<sp/>some<sp/>functions<sp/>of<sp/>ChElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_ch_element_cable_a_n_c_fmod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_ch_element_cable_a_n_c_fmod" kindref="compound">ChElementCableANCFmod</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ChElementCableANCF<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupInitial(ChSystem*<sp/>system)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(section);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>rest<sp/>length,<sp/>mass:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length2<sp/>=<sp/>(nodes[1]-&gt;GetX0()<sp/>-<sp/>nodes[0]-&gt;GetX0()).Length();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mass<sp/>=<sp/>this-&gt;length<sp/>*<sp/>this-&gt;section-&gt;Area<sp/>*<sp/>this-&gt;section-&gt;density;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>calculate<sp/>the<sp/>internal<sp/>forces<sp/>in<sp/>the<sp/>initial<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>of<sp/>initial<sp/>configuration<sp/>in<sp/>elastic<sp/>forces<sp/>is<sp/>automatically<sp/>subtracted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>ChMatrixDynamic&lt;&gt;<sp/>FVector0(12,<sp/>1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>FVector0.FillElem(0.0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_GenForceVec0.FillElem(0.0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeInternalForces(FVector0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_GenForceVec0<sp/>=<sp/>FVector0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>mass<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeMassMatrix();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_ch_element_beam_eulermod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_ch_element_beam_eulermod" kindref="compound">ChElementBeamEulermod</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ChElementBeamEuler<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupInitial(ChSystem*<sp/>system)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(section);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this-&gt;length<sp/>=<sp/>(nodes[1]-&gt;GetX0().GetPos()<sp/>-<sp/>nodes[0]-&gt;GetX0().GetPos()).Length();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mass<sp/>=<sp/>this-&gt;length<sp/>*<sp/>this-&gt;section-&gt;Area<sp/>*<sp/>this-&gt;section-&gt;density;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>initial<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ChMatrix33&lt;&gt;<sp/>A0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;&gt;<sp/>mXele<sp/>=<sp/>nodes[1]-&gt;GetX0().GetPos()<sp/>-<sp/>nodes[0]-&gt;GetX0().GetPos();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;&gt;<sp/>myele<sp/>=<sp/>nodes[0]-&gt;GetX0().GetA().Get_A_Yaxis();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>A0.Set_A_Xdir(mXele,<sp/>myele);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>q_element_ref_rot<sp/>=<sp/>A0.Get_A_quaternion();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>local<sp/>stiffness<sp/>matrix:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeStiffnessMatrix();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="class_my_loader_triangular" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_my_loader_triangular" kindref="compound">MyLoaderTriangular</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ChLoaderUdistributed<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Useful:<sp/>a<sp/>constructor<sp/>that<sp/>also<sp/>sets<sp/>ChLoadable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_my_loader_triangular_1a2dcb92fa7792d5cedd1e23c1e2c840f2" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="class_my_loader_triangular_1a2dcb92fa7792d5cedd1e23c1e2c840f2" kindref="member">Fa</ref>;</highlight></codeline>
<codeline lineno="82" refid="class_my_loader_triangular_1adb5c3eb8ef2622ff9a853e19170dcba5" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="class_my_loader_triangular_1adb5c3eb8ef2622ff9a853e19170dcba5" kindref="member">Fb</ref>;</highlight></codeline>
<codeline lineno="83" refid="class_my_loader_triangular_1a8b37686aae0d4b00687ab5a08a0503a0" refkind="member"><highlight class="normal"><sp/><ref refid="class_my_loader_triangular_1a8b37686aae0d4b00687ab5a08a0503a0" kindref="member">MyLoaderTriangular</ref>(std::shared_ptr&lt;ChLoadableU&gt;<sp/>mloadable):</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ChLoaderUdistributed(mloadable)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Fa<sp/>=<sp/>ChVector&lt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>Fb<sp/>=<sp/>ChVector&lt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>F=F(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>function<sp/>that<sp/>you<sp/>have<sp/>to<sp/>implement.<sp/>It<sp/>should<sp/>return<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>at<sp/>U.<sp/>For<sp/>Eulero<sp/>beams,<sp/>loads<sp/>are<sp/>expected<sp/>as<sp/>6-rows<sp/>vectors,<sp/>containing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>wrench:<sp/>forceX,<sp/>forceY,<sp/>forceZ,<sp/>torqueX,<sp/>torqueY,<sp/>torqueZ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="class_my_loader_triangular_1abc15ab42ca4cd1d1a8a6add746264fed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_my_loader_triangular_1abc15ab42ca4cd1d1a8a6add746264fed" kindref="member">ComputeF</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a64e1fe39afc10b00a4f50198aef8626d" kindref="member">U</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVectorDynamic&lt;&gt;&amp;<sp/>F,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVectorDynamic&lt;&gt;*<sp/>state_x,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVectorDynamic&lt;&gt;*<sp/>state_w</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Fy_max<sp/>=<sp/>0.005;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;&gt;<sp/>force<sp/>=<sp/>Fa*abs(-1+<ref refid="_headers_8h_1a64e1fe39afc10b00a4f50198aef8626d" kindref="member">U</ref>)/2.+Fb*(1+<ref refid="_headers_8h_1a64e1fe39afc10b00a4f50198aef8626d" kindref="member">U</ref>)/2.;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>F.PasteVector(force,0.,0.);<sp/><sp/></highlight><highlight class="comment">//<sp/>load,<sp/>force<sp/>part;<sp/>hardwired<sp/>for<sp/>brevity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101" refid="class_my_loader_triangular_1a7eb19e0ba8a03ca53a46b53cc5db98bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_my_loader_triangular_1a7eb19e0ba8a03ca53a46b53cc5db98bd" kindref="member">SetF</ref>(ChVector&lt;&gt;<sp/>Fa_in,<sp/>ChVector&lt;&gt;<sp/>Fb_in)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Fa<sp/>=<sp/>Fa_in;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Fb<sp/>=<sp/>Fb_in;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>because<sp/>inheriting<sp/>ChLoaderUdistributed.<sp/>Use<sp/>1<sp/>because<sp/>linear<sp/>load<sp/>fx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_my_loader_triangular_1a867ec062ea2b48b9a3ffa984c30f0559" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_my_loader_triangular_1a867ec062ea2b48b9a3ffa984c30f0559" kindref="member">GetIntegrationPointsU</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>load<sp/>(and<sp/>handle<sp/>it<sp/>with<sp/>a<sp/>shared<sp/>pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ChLoad<sp/>is<sp/>a<sp/>&apos;container&apos;<sp/>for<sp/>your<sp/>ChLoader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>created<sp/>using<sp/>templates,<sp/>that<sp/>is<sp/>instancing<sp/>a<sp/>ChLoad&lt;a_loader_class&gt;()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//std::shared_ptr&lt;ChLoad&lt;MyLoaderTriangular&gt;&gt;<sp/>mloadtri(new<sp/>ChLoad&lt;MyLoaderTriangular&gt;(melementA));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//mloadcontainer-&gt;Add(mloadtri);<sp/><sp/>//<sp/>do<sp/>not<sp/>forget<sp/>to<sp/>add<sp/>the<sp/>load<sp/>to<sp/>the<sp/>load<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classcpp_cable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_cable" kindref="compound">cppCable</ref><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117" refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChSystem&gt;<sp/><ref refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" kindref="member">system</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classcpp_cable_1a69111440455982d24f53e964945d053e" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>nodes<sp/>along<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classcpp_cable_1a4384aa8dedd22a32545fb92a7ced9b1f" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_cable_1a4384aa8dedd22a32545fb92a7ced9b1f" kindref="member">length_per_elem</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>each<sp/>element<sp/>on<sp/>the<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classcpp_cable_1a4e5cfd02bfc79a92b4b93089a1f0eb2e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a4e5cfd02bfc79a92b4b93089a1f0eb2e" kindref="member">Cd_axial</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>drag<sp/>coeff<sp/>in<sp/>axial<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classcpp_cable_1aa32cc99eb80081cf0e32bd5c762da74c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1aa32cc99eb80081cf0e32bd5c762da74c" kindref="member">Cd_normal</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>drag<sp/>coeff<sp/>in<sp/>normal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classcpp_cable_1a7585df9378ecbe1139245598c20bf68b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a7585df9378ecbe1139245598c20bf68b" kindref="member">Cm_axial</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>mass<sp/>coeff<sp/>in<sp/>axial<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classcpp_cable_1a488818539a1396116eaf003103ea9d37" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a488818539a1396116eaf003103ea9d37" kindref="member">Cm_normal</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>mass<sp/>coeff<sp/>in<sp/>normal<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>vectors<sp/>(nodes<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>vectors<sp/>(tangents<sp/>at<sp/>nodes<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classcpp_cable_1aa73e67acf211ce72d7112c3543f85b90" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1aa73e67acf211ce72d7112c3543f85b90" kindref="member">mvecs_middle</ref>;</highlight></codeline>
<codeline lineno="128" refid="classcpp_cable_1af0cf9932e24431c3ab555b99f66ca7e6" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1af0cf9932e24431c3ab555b99f66ca7e6" kindref="member">mdirs</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>vectors<sp/>(nodes<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/><ref refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" kindref="member">rho</ref>,<sp/>E,<sp/>length;<sp/><sp/></highlight><highlight class="comment">//<sp/>diameter,<sp/>density,<sp/>Young&apos;s<sp/>modulus,<sp/>length<sp/>of<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classcpp_cable_1abf4d469dfdd2acaa62f1aedc15ef587b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1abf4d469dfdd2acaa62f1aedc15ef587b" kindref="member">A0</ref>;<sp/></highlight><highlight class="comment">//<sp/>unstretched<sp/>diameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classcpp_cable_1a38a0e97b5f64ef3505bedd8cf3b186d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L0<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>length<sp/>along<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref>;</highlight></codeline>
<codeline lineno="133" refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>;</highlight></codeline>
<codeline lineno="134" refid="classcpp_cable_1a2fe64545b3e0ace4ef802f6b00912c01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a2fe64545b3e0ace4ef802f6b00912c01" kindref="member">applyDrag</ref>;</highlight></codeline>
<codeline lineno="135" refid="classcpp_cable_1abd2ed7f279ebbbe195db353008b071e9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1abd2ed7f279ebbbe195db353008b071e9" kindref="member">applyAddedMass</ref>;</highlight></codeline>
<codeline lineno="136" refid="classcpp_cable_1a2625d2d46b41e7bcefd7537bd9727fed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a2625d2d46b41e7bcefd7537bd9727fed" kindref="member">applyBuoyancy</ref>;</highlight></codeline>
<codeline lineno="137" refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref>;</highlight></codeline>
<codeline lineno="138" refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzD&gt;&gt;<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classcpp_cable_1abd41d91dce532626fe6e4bdf6d23299d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzDD&gt;&gt;<sp/><ref refid="classcpp_cable_1abd41d91dce532626fe6e4bdf6d23299d" kindref="member">nodesDD</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChElementCableANCF&gt;&gt;<sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChElementBeamEuler&gt;&gt;<sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzrot&gt;&gt;<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classcpp_cable_1a6bcda2410f4b183e7c12a0a2545a375a" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChElementCableANCF&gt;&gt;<sp/><ref refid="classcpp_cable_1a6bcda2410f4b183e7c12a0a2545a375a" kindref="member">elems_cable</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBeamSectionCable&gt;<sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>cable<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBeamSectionAdvanced&gt;<sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>cable<sp/>material</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classcpp_cable_1abf0c75012db691a74bf21ac0007859b0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_cable_1abf0c75012db691a74bf21ac0007859b0" kindref="member">elems_length</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" kindref="member">fluid_velocity</ref>;</highlight></codeline>
<codeline lineno="148" refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" kindref="member">fluid_acceleration</ref>;</highlight></codeline>
<codeline lineno="149" refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref>;</highlight></codeline>
<codeline lineno="150" refid="classcpp_cable_1ac88e2cc9dba684530eaea6a0418ea3e7" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_cable_1ac88e2cc9dba684530eaea6a0418ea3e7" kindref="member">nodes_density</ref>;<sp/></highlight><highlight class="comment">//<sp/>density<sp/>of<sp/>(cable-fluid)<sp/>at<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable" kindref="compound">cppCable</ref>(std::shared_ptr&lt;ChSystem&gt;<sp/>system,<sp/>std::shared_ptr&lt;ChMesh&gt;<sp/>mesh,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_elems,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L0,<sp/>std::string<sp/>beam_type);<sp/><sp/></highlight><highlight class="comment">//<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidVelocityAtNodes(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidAccelerationAtNodes(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/>acc);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidDensityAtNodes(std::vector&lt;double&gt;<sp/>vof);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/>getNodalPositions();</highlight></codeline>
<codeline lineno="157" refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>;</highlight></codeline>
<codeline lineno="158" refid="classcpp_cable_1a839746caf132363226121f99e42e0566" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>std::vector&lt;std::shared_ptr&lt;ChLoadBeamWrenchDistributed&gt;&gt;<sp/>elems_loads_distributed;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChLoad&lt;MyLoaderTriangular&gt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>;</highlight></codeline>
<codeline lineno="161" refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChLoad&lt;ChLoaderGravity&gt;&gt;&gt;<sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>std::vector&lt;std::shared_ptr&lt;ChLoadBeamWrench&gt;&gt;<sp/>elems_loads;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildVectors();<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>location<sp/>vectors<sp/>for<sp/>the<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNodes(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>nodes<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNodesBeamEuler(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>nodes<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNodesCableANCF(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>nodes<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildElements(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>elements<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildElementsBeamEuler(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>elements<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildElementsCableANCF(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>elements<sp/>for<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildMesh(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildMeshBeamEuler(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildMeshCableANCF(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode);<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDragForce();<sp/><sp/></highlight><highlight class="comment">//<sp/>calculates<sp/>the<sp/>drag<sp/>force<sp/>per<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAddedMassForce();<sp/><sp/></highlight><highlight class="comment">//<sp/>calculates<sp/>the<sp/>added<sp/>mass<sp/>force<sp/>per<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyForces();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addNodestoContactCloud(std::shared_ptr&lt;ChContactSurfaceNodeCloud&gt;<sp/>cloud);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDragCoefficients(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axial,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAddedMassCoefficients(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axial,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRestLengthPerElement(std::vector&lt;double&gt;<sp/>length_array);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setIyy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Iyy_in);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classcpp_multi_segmented_cable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185" refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChSystem&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref>;</highlight></codeline>
<codeline lineno="187" refid="classcpp_multi_segmented_cable_1a706ba1763052fa547db27323fa11fe67" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChMaterialSurfaceSMC&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a706ba1763052fa547db27323fa11fe67" kindref="member">mysurfmaterial</ref>;</highlight></codeline>
<codeline lineno="188" refid="classcpp_multi_segmented_cable_1acda4f06824cb7b1e3bb1fa135af7da5a" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1acda4f06824cb7b1e3bb1fa135af7da5a" kindref="member">mesh</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classcpp_multi_segmented_cable_1a4af517712014b5681a7eb7f67f7ebea2" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a4af517712014b5681a7eb7f67f7ebea2" kindref="member">fairleadd</ref>;</highlight></codeline>
<codeline lineno="190" refid="classcpp_multi_segmented_cable_1a7963d1e04163d5cca0bc4d121c7b90d6" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChLinkPointFrame&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a7963d1e04163d5cca0bc4d121c7b90d6" kindref="member">fairlead2</ref>;</highlight></codeline>
<codeline lineno="191" refid="classcpp_multi_segmented_cable_1a083481688ca290d75ecffa6e3d59224d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a083481688ca290d75ecffa6e3d59224d" kindref="member">nb_nodes</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>nodes<sp/>along<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="classcpp_multi_segmented_cable_1a21ee36eba5d2eea198d108eac5355c05" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a21ee36eba5d2eea198d108eac5355c05" kindref="member">nb_elems</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>nodes<sp/>along<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classcpp_multi_segmented_cable_1acd3c58a3d1eda0bdd8014cc93c7db1f4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1acd3c58a3d1eda0bdd8014cc93c7db1f4" kindref="member">mvecs</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>vectors<sp/>(nodes<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;cppCable&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>;</highlight></codeline>
<codeline lineno="195" refid="classcpp_multi_segmented_cable_1a436e1388f8332121f6ed72bd155082f4" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChMaterialSurfaceSMC&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a436e1388f8332121f6ed72bd155082f4" kindref="member">contact_material</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classcpp_multi_segmented_cable_1a82abbfa5fa23fd87d22c8d48d76ce6c6" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a82abbfa5fa23fd87d22c8d48d76ce6c6" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="197" refid="classcpp_multi_segmented_cable_1a13be6356c25ae9b0ef8689bcf0cd9f76" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a13be6356c25ae9b0ef8689bcf0cd9f76" kindref="member">rho</ref>;</highlight></codeline>
<codeline lineno="198" refid="classcpp_multi_segmented_cable_1a279b4b6ded4e72affd7c5d5f90f75ed4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a279b4b6ded4e72affd7c5d5f90f75ed4" kindref="member">E</ref>;</highlight></codeline>
<codeline lineno="199" refid="classcpp_multi_segmented_cable_1ac103627bf74950ad2996bad470b692e4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1ac103627bf74950ad2996bad470b692e4" kindref="member">length</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>diameter,<sp/>density,<sp/>Young&apos;s<sp/>modulus,<sp/>length<sp/>of<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzD&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classcpp_multi_segmented_cable_1a9e700c0352587492af7221e4d3e8e889" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzDD&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a9e700c0352587492af7221e4d3e8e889" kindref="member">nodesDD</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChNodeFEAxyzrot&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>nodes<sp/>coordinates<sp/>and<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>;</highlight></codeline>
<codeline lineno="204" refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>;</highlight></codeline>
<codeline lineno="205" refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>;</highlight></codeline>
<codeline lineno="206" refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChElementCableANCF&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChElementBeamEuler&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="classcpp_multi_segmented_cable_1ae312974cb11fca274a3d42982323820d" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChLinkBase&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1ae312974cb11fca274a3d42982323820d" kindref="member">constraint_front</ref>;</highlight></codeline>
<codeline lineno="209" refid="classcpp_multi_segmented_cable_1a68f25bece1742c7e7263733561f7b4af" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChLinkBase&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a68f25bece1742c7e7263733561f7b4af" kindref="member">constraint_back</ref>;</highlight></codeline>
<codeline lineno="210" refid="classcpp_multi_segmented_cable_1a015774de41a0b2890af46939dfc2fb90" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a015774de41a0b2890af46939dfc2fb90" kindref="member">forces_drag</ref>;</highlight></codeline>
<codeline lineno="211" refid="classcpp_multi_segmented_cable_1a28c8ac48f3845529353c16e52d29e2bb" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a28c8ac48f3845529353c16e52d29e2bb" kindref="member">forces_addedmass</ref>;</highlight></codeline>
<codeline lineno="212" refid="classcpp_multi_segmented_cable_1ab2b73cdecf662497024dc879e839ab0c" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1ab2b73cdecf662497024dc879e839ab0c" kindref="member">body_back</ref>;</highlight></codeline>
<codeline lineno="213" refid="classcpp_multi_segmented_cable_1a3177a183e9fbfc4871a16f37c576321f" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a3177a183e9fbfc4871a16f37c576321f" kindref="member">body_front</ref>;</highlight></codeline>
<codeline lineno="214" refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref>;</highlight></codeline>
<codeline lineno="215" refid="classcpp_multi_segmented_cable_1ae6cd845f12eda1d6dc4a9d51648c631d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ae6cd845f12eda1d6dc4a9d51648c631d" kindref="member">nb_elems_tot</ref>;</highlight></codeline>
<codeline lineno="216" refid="classcpp_multi_segmented_cable_1af201a963fc430bc1af30a8846e2236e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1af201a963fc430bc1af30a8846e2236e8" kindref="member">nodes_built</ref>;</highlight></codeline>
<codeline lineno="217" refid="classcpp_multi_segmented_cable_1a22d67a83519a46ac4aca2c14d00700ec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a22d67a83519a46ac4aca2c14d00700ec" kindref="member">elems_built</ref>;</highlight></codeline>
<codeline lineno="218" refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>(std::shared_ptr&lt;ChSystem&gt;<sp/>system,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/>mesh,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>length,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nb_nodes,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>d,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>E,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>beam_type);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidVelocityAtNodes(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidAccelerationAtNodes(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFluidDensityAtNodes(std::vector&lt;double&gt;<sp/>dens);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateDragForces();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateAddedMassForces();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyForces();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/>getNodalPositions();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNodes();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildElements();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildCable();<sp/><sp/></highlight><highlight class="comment">//<sp/>builds<sp/>the<sp/>multi-segmented<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getForceFairlead();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>attachBackNodeToBody(std::shared_ptr&lt;ChBody&gt;<sp/>body);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>attachFrontNodeToBody(std::shared_ptr&lt;ChBody&gt;<sp/>body);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setContactMaterial(std::shared_ptr&lt;ChMaterialSurfaceSMC&gt;<sp/>material);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buildNodesCloud();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>getTensionElement(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="classcpp_multi_segmented_cable_1a1cf6a36708343042a0f546133edae8b8" refkind="member"><highlight class="normal"><ref refid="classcpp_multi_segmented_cable_1a1cf6a36708343042a0f546133edae8b8" kindref="member">cppMultiSegmentedCable::cppMultiSegmentedCable</ref>(std::shared_ptr&lt;ChSystem&gt;<sp/>system,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/>mesh,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>length,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nb_elems,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>d,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>E,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>beam_type=</highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="255"><highlight class="normal">system(system),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>mesh(mesh),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>length(length),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>nb_elems(nb_elems),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>d(d),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>rho(rho),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>E(E),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>beam_type(beam_type)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1af201a963fc430bc1af30a8846e2236e8" kindref="member">nodes_built</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a22d67a83519a46ac4aca2c14d00700ec" kindref="member">elems_built</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>links<sp/>(true)<sp/>or<sp/>link<sp/>elements<sp/>directly<sp/>(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;cppCable&gt;<sp/>segment;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1ac103627bf74950ad2996bad470b692e4" kindref="member">length</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>std::make_shared&lt;cppCable&gt;(<ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1acda4f06824cb7b1e3bb1fa135af7da5a" kindref="member">mesh</ref>,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ac103627bf74950ad2996bad470b692e4" kindref="member">length</ref>[i],</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a21ee36eba5d2eea198d108eac5355c05" kindref="member">nb_elems</ref>[i],</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a82abbfa5fa23fd87d22c8d48d76ce6c6" kindref="member">d</ref>[i],</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a13be6356c25ae9b0ef8689bcf0cd9f76" kindref="member">rho</ref>[i],</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a279b4b6ded4e72affd7c5d5f90f75ed4" kindref="member">E</ref>[i],</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L0,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.push_back(segment);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>L0<sp/>=<sp/>L0<sp/>+<sp/><ref refid="classcpp_multi_segmented_cable_1ac103627bf74950ad2996bad470b692e4" kindref="member">length</ref>[i];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classcpp_multi_segmented_cable_1a79acfa2d67db5e8169edc49e9d4bdd39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a79acfa2d67db5e8169edc49e9d4bdd39" kindref="member">cppMultiSegmentedCable::buildNodes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.clear();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.clear();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildNodes(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.end(),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.begin(),</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.end());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.size();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildNodes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildNodes(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.end(),</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.begin(),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.end());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.size();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1af201a963fc430bc1af30a8846e2236e8" kindref="member">nodes_built</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="classcpp_multi_segmented_cable_1ae9e8b1e70721d11eb0473d0dbf2e7d3f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ae9e8b1e70721d11eb0473d0dbf2e7d3f" kindref="member">cppMultiSegmentedCable::buildElements</ref>()<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>.clear();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>.clear();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size()-1<sp/>&amp;&amp;<sp/><ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildElements(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsCableANCF[<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsCableANCF.size()-1]-&gt;SetNodes(<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>[<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.size()-1],<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i+1]-&gt;nodes[0]);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsBeamEuler[<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsBeamEuler.size()-1]-&gt;SetNodes(<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>[<ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.size()-1],<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i+1]-&gt;nodesRot[0]);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildElements(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>.end(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsCableANCF.begin(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsCableANCF.end());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae6cd845f12eda1d6dc4a9d51648c631d" kindref="member">nb_elems_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>.size();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>.end(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsBeamEuler.begin(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;elemsBeamEuler.end());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae6cd845f12eda1d6dc4a9d51648c631d" kindref="member">nb_elems_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>.size();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a22d67a83519a46ac4aca2c14d00700ec" kindref="member">elems_built</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classcpp_multi_segmented_cable_1afdfb3cb861ad20d920d194544937cc7e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1afdfb3cb861ad20d920d194544937cc7e" kindref="member">cppMultiSegmentedCable::buildCable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>builds<sp/>all<sp/>cable<sp/>segments<sp/>and<sp/>updates<sp/>their<sp/>link</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(no<sp/>duplicate<sp/>node<sp/>added<sp/>to<sp/>mesh)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1af201a963fc430bc1af30a8846e2236e8" kindref="member">nodes_built</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a79acfa2d67db5e8169edc49e9d4bdd39" kindref="member">buildNodes</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a22d67a83519a46ac4aca2c14d00700ec" kindref="member">elems_built</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae9e8b1e70721d11eb0473d0dbf2e7d3f" kindref="member">buildElements</ref>();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size()-1<sp/>&amp;&amp;<sp/><ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildMesh(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;buildMesh(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a15b59debf5423e977015fe8b2f3df409" kindref="member">nodes_chlink</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>con1<sp/>=<sp/>std::make_shared&lt;ChLinkMateSpherical&gt;();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeA<sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.front();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeB<sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i-1]-&gt;nodesRot.back();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con1-&gt;Initialize(nodeA,<sp/>nodeB,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>nodeA-&gt;GetPos(),<sp/>nodeA-&gt;GetPos());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(con1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>con1<sp/>=<sp/>std::make_shared&lt;ChLinkPointPoint&gt;();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeA<sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.front();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeB<sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i-1]-&gt;nodes.back();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>con1-&gt;Initialize(nodeA,<sp/>nodeB);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(con1);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a015774de41a0b2890af46939dfc2fb90" kindref="member">forces_drag</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1a015774de41a0b2890af46939dfc2fb90" kindref="member">forces_drag</ref>.end(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;forces_drag.begin(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;forces_drag.end());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a28c8ac48f3845529353c16e52d29e2bb" kindref="member">forces_addedmass</ref>.insert(<ref refid="classcpp_multi_segmented_cable_1a28c8ac48f3845529353c16e52d29e2bb" kindref="member">forces_addedmass</ref>.end(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;forces_addedmass.begin(),<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;forces_addedmass.end());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a4a2ed6675232463eefc3029cda3ba322" kindref="member">buildNodesCloud</ref>();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>.clear();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>.clear();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>.clear();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.size();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.size();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1ae42d565e7ac874815f0b9a133b175ffb" kindref="member">nb_nodes_tot</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>.push_back(ChVector&lt;&gt;(0.,0.,0.));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>.push_back(ChVector&lt;&gt;(0.,0.,0.));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>.push_back(0.);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a37dfbff705d81b363089450631e21bfd" kindref="member">setFluidVelocityAtNodes</ref>(<ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a29263d0a62538e0200d93835d6199835" kindref="member">setFluidAccelerationAtNodes</ref>(<ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1aee9fd24463a3659e0996e053db8ee616" kindref="member">setFluidDensityAtNodes</ref>(<ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classcpp_multi_segmented_cable_1a29263d0a62538e0200d93835d6199835" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a29263d0a62538e0200d93835d6199835" kindref="member">cppMultiSegmentedCable::setFluidAccelerationAtNodes</ref>(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/>acc)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref><sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb_prev<sp/>=<sp/>node_nb;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.size();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.size();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/>fluid_acc(<ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>.begin()+node_nb_prev,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1aef790051badf9c2d1e2cc2a0927e73d7" kindref="member">fluid_acceleration</ref>.begin()+node_nb);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;setFluidAccelerationAtNodes(fluid_acc);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>node_nb_prev<sp/>=<sp/>node_nb;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classcpp_multi_segmented_cable_1a37dfbff705d81b363089450631e21bfd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a37dfbff705d81b363089450631e21bfd" kindref="member">cppMultiSegmentedCable::setFluidVelocityAtNodes</ref>(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref><sp/>=<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb_prev<sp/>=<sp/>node_nb;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.size();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.size();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/>fluid_vel(<ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>.begin()+node_nb_prev,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a2e296f5381f530355a71d2a885044919" kindref="member">fluid_velocity</ref>.begin()+node_nb);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;setFluidVelocityAtNodes(fluid_vel);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>node_nb_prev<sp/>=<sp/>node_nb;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="classcpp_multi_segmented_cable_1aee9fd24463a3659e0996e053db8ee616" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1aee9fd24463a3659e0996e053db8ee616" kindref="member">cppMultiSegmentedCable::setFluidDensityAtNodes</ref>(std::vector&lt;double&gt;<sp/>dens)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref><sp/>=<sp/>dens;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_nb_prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodesRot.size();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_nb<sp/>+=<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;nodes.size();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>fluid_dens(<ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>.begin()+node_nb_prev,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1abc1e203de57f5f0c3b4069861684c2e6" kindref="member">fluid_density</ref>.begin()<sp/>+<sp/>node_nb);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;setFluidDensityAtNodes(fluid_dens);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>node_nb_prev<sp/>=<sp/>node_nb;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="classcpp_multi_segmented_cable_1ae633d9fa08df16a5611af5479a4cc824" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ae633d9fa08df16a5611af5479a4cc824" kindref="member">cppMultiSegmentedCable::updateDragForces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;setDragForce();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classcpp_multi_segmented_cable_1ac3ab78a56671b180a6b51893de9a68bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ac3ab78a56671b180a6b51893de9a68bb" kindref="member">cppMultiSegmentedCable::updateAddedMassForces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;setAddedMassForce();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="classcpp_multi_segmented_cable_1a52cf40f401a6adf81575a302b4076bda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a52cf40f401a6adf81575a302b4076bda" kindref="member">cppMultiSegmentedCable::applyForces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;applyForces();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="classcpp_multi_segmented_cable_1a3e6ce0cc8c2a24a93e969cdfecf65196" refkind="member"><highlight class="normal">ChVector&lt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a3e6ce0cc8c2a24a93e969cdfecf65196" kindref="member">cppMultiSegmentedCable::getTensionElement</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta=0.)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>force<sp/>=<sp/>ChVector&lt;&gt;();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>torque<sp/>=<sp/>ChVector&lt;&gt;();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>[i]-&gt;EvaluateSectionForceTorque(eta,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a8991a0e8c10c79bd81cf3adb2cbeeaa0" kindref="member">elemsCableANCF</ref>[i]-&gt;EvaluateSectionStrain(eta,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat2<sp/>=<sp/>ChMatrixDynamic&lt;&gt;();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1af91744a7dca6c98edd86513aee560803" kindref="member">elemsBeamEuler</ref>[i]-&gt;EvaluateSectionForceTorque(eta,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>force;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="classcpp_multi_segmented_cable_1a5671ccf8f4b66ab9c0ccfc842f575d3d" refkind="member"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/><ref refid="classcpp_multi_segmented_cable_1a5671ccf8f4b66ab9c0ccfc842f575d3d" kindref="member">cppMultiSegmentedCable::getNodalPositions</ref>()<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ChVector&lt;double&gt;&gt;&gt;<sp/>nodal_positions;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="test_f_m_mand_f_s_w_8cpp_1af2d8f5c7beb781a847dc0f33fbdca44b" kindref="member">pos</ref><sp/>=<sp/><ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>[i]-&gt;GetPos();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/><ref refid="test_f_m_mand_f_s_w_8cpp_1af2d8f5c7beb781a847dc0f33fbdca44b" kindref="member">pos</ref>.x();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="test_f_m_mand_f_s_w_8cpp_1af2d8f5c7beb781a847dc0f33fbdca44b" kindref="member">pos</ref>.y();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref><sp/>=<sp/><ref refid="test_f_m_mand_f_s_w_8cpp_1af2d8f5c7beb781a847dc0f33fbdca44b" kindref="member">pos</ref>.z();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodal_position<sp/>=<sp/>std::make_shared&lt;ChVector&lt;double&gt;&gt;(x,<sp/>y,<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>nodal_positions.push_back(nodal_position);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodal_positions;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classcpp_multi_segmented_cable_1a89adba46a5ca149d17d2d8ddf6cb9c82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a89adba46a5ca149d17d2d8ddf6cb9c82" kindref="member">cppMultiSegmentedCable::attachBackNodeToBody</ref>(std::shared_ptr&lt;ChBody&gt;<sp/>body)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraint<sp/>=<sp/>std::make_shared&lt;ChLinkMateSpherical&gt;();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;Initialize(<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.back(),<sp/>body,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.back()-&gt;GetPos(),<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.back()-&gt;GetPos());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(constraint);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ab2b73cdecf662497024dc879e839ab0c" kindref="member">body_back</ref><sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a68f25bece1742c7e7263733561f7b4af" kindref="member">constraint_back</ref><sp/>=<sp/>constraint;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraint<sp/>=<sp/>std::make_shared&lt;ChLinkPointFrame&gt;();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;Initialize(<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.back(),<sp/>body);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(constraint);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ab2b73cdecf662497024dc879e839ab0c" kindref="member">body_back</ref><sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a68f25bece1742c7e7263733561f7b4af" kindref="member">constraint_back</ref><sp/>=<sp/>constraint;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal">};</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="classcpp_multi_segmented_cable_1a1aeb95036a2d6c2adddef0b961414504" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a1aeb95036a2d6c2adddef0b961414504" kindref="member">cppMultiSegmentedCable::attachFrontNodeToBody</ref>(std::shared_ptr&lt;ChBody&gt;<sp/>body)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraint<sp/>=<sp/>std::make_shared&lt;ChLinkMateSpherical&gt;();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;Initialize(<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.front(),<sp/>body,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.front()-&gt;GetPos(),<sp/><ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>.front()-&gt;GetPos());</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(constraint);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a3177a183e9fbfc4871a16f37c576321f" kindref="member">body_front</ref><sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae312974cb11fca274a3d42982323820d" kindref="member">constraint_front</ref><sp/>=<sp/>constraint;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a9f8c8812633e7b27948c7536d7dd04b3" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constraint<sp/>=<sp/>std::make_shared&lt;ChLinkPointFrame&gt;();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>constraint-&gt;Initialize(<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>.front(),<sp/>body);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(constraint);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a3177a183e9fbfc4871a16f37c576321f" kindref="member">body_front</ref><sp/>=<sp/>body;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1ae312974cb11fca274a3d42982323820d" kindref="member">constraint_front</ref><sp/>=<sp/>constraint;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal">};</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="classcpp_multi_segmented_cable_1ab8be84156e7966aaa132bb071d6a5560" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1ab8be84156e7966aaa132bb071d6a5560" kindref="member">cppMultiSegmentedCable::setContactMaterial</ref>(std::shared_ptr&lt;ChMaterialSurfaceSMC&gt;<sp/>material)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a436e1388f8332121f6ed72bd155082f4" kindref="member">contact_material</ref><sp/>=<sp/>material;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">};</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="classcpp_multi_segmented_cable_1a4a2ed6675232463eefc3029cda3ba322" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable_1a4a2ed6675232463eefc3029cda3ba322" kindref="member">cppMultiSegmentedCable::buildNodesCloud</ref>()<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_multi_segmented_cable_1a436e1388f8332121f6ed72bd155082f4" kindref="member">contact_material</ref>)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>contact_cloud<sp/>=<sp/>std::make_shared&lt;ChContactSurfaceNodeCloud&gt;();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1acda4f06824cb7b1e3bb1fa135af7da5a" kindref="member">mesh</ref>-&gt;AddContactSurface(contact_cloud);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>DEM<sp/>surface<sp/>material<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>contact_cloud-&gt;SetMaterialSurface(<ref refid="classcpp_multi_segmented_cable_1a436e1388f8332121f6ed72bd155082f4" kindref="member">contact_material</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>cable<sp/>nodes<sp/>to<sp/>cloud</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable_1a467c928fe7ad9f88d08b0ee16b28c8e5" kindref="member">cables</ref>[i]-&gt;addNodestoContactCloud(contact_cloud);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal">};</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555" refid="classcpp_cable_1a3362a77b01df79bb6bf9e234186ca122" refkind="member"><highlight class="normal"><ref refid="classcpp_cable_1a3362a77b01df79bb6bf9e234186ca122" kindref="member">cppCable::cppCable</ref>(std::shared_ptr&lt;ChSystem&gt;<sp/>system,<sp/></highlight><highlight class="comment">//<sp/>system<sp/>in<sp/>which<sp/>the<sp/>cable<sp/>belong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/>mesh,<sp/></highlight><highlight class="comment">//<sp/>mesh<sp/>of<sp/>the<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb_elems,<sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>nodes<sp/>along<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/><sp/></highlight><highlight class="comment">//<sp/>diameter<sp/>of<sp/>cable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>density<sp/>of<sp/>cable<sp/>(kg/m3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="comment">//<sp/>Young&apos;s<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L0<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>beam_type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>system(system),</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>mesh(mesh),</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>length(length),</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>nb_elems(nb_elems),</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>d(d),</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>rho(rho),</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>E(E),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>L0(L0),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>beam_type(beam_type)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a4e5cfd02bfc79a92b4b93089a1f0eb2e" kindref="member">Cd_axial</ref><sp/>=<sp/>1.15;<sp/><sp/></highlight><highlight class="comment">//<sp/>studless<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1aa32cc99eb80081cf0e32bd5c762da74c" kindref="member">Cd_normal</ref><sp/>=<sp/>1.4;<sp/><sp/></highlight><highlight class="comment">//<sp/>studless<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a7585df9378ecbe1139245598c20bf68b" kindref="member">Cm_axial</ref><sp/>=<sp/>0.5;<sp/><sp/></highlight><highlight class="comment">//studless<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a488818539a1396116eaf003103ea9d37" kindref="member">Cm_normal</ref><sp/>=<sp/>1.;<sp/><sp/></highlight><highlight class="comment">//<sp/>studless<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1abf4d469dfdd2acaa62f1aedc15ef587b" kindref="member">A0</ref><sp/>=<sp/><ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>/4*M_PI;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iyy<sp/>=<sp/>1e-12;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a2fe64545b3e0ace4ef802f6b00912c01" kindref="member">applyDrag</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1abd2ed7f279ebbbe195db353008b071e9" kindref="member">applyAddedMass</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a2625d2d46b41e7bcefd7537bd9727fed" kindref="member">applyBuoyancy</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a4384aa8dedd22a32545fb92a7ced9b1f" kindref="member">length_per_elem</ref>.push_back(<ref refid="classcpp_cable_1aee8538399b8f348a7b3edeab2560b694" kindref="member">length</ref>/<ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref><sp/>=<sp/>std::make_shared&lt;ChBeamSectionCable&gt;();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>-&gt;SetDiameter(<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>-&gt;SetYoungModulus(<ref refid="classcpp_cable_1a7a8a5ca210f630eb0b05e813654bff05" kindref="member">E</ref>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>-&gt;SetDensity(<ref refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" kindref="member">rho</ref>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>msection_cable-&gt;SetI(Iyy);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref><sp/>=<sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>-&gt;GetI();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref><sp/>=<sp/>std::make_shared&lt;ChBeamSectionAdvanced&gt;();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetYoungModulus(<ref refid="classcpp_cable_1a7a8a5ca210f630eb0b05e813654bff05" kindref="member">E</ref>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetGshearModulus(1e-6);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetDensity(<ref refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" kindref="member">rho</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetAsCircularSection(<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>msection_advanced-&gt;SetIyy(Iyy);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>msection_advanced-&gt;SetIzz(Iyy);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref><sp/>=<sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;GetIyy();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="classcpp_cable_1a7e02cd35c9b31350893d1552cc485b4c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a7e02cd35c9b31350893d1552cc485b4c" kindref="member">cppCable::setIyy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Iyy_in)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref><sp/>=<sp/>Iyy_in;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>-&gt;SetI(<ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetIyy(<ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>-&gt;SetIzz(<ref refid="classcpp_cable_1a8fa2e32f9363e45cb5237ba1659e020d" kindref="member">Iyy</ref>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="classcpp_cable_1a331c41780b7c6953c643ebe1e06b7f72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a331c41780b7c6953c643ebe1e06b7f72" kindref="member">cppCable::buildNodes</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{<ref refid="classcpp_cable_1aeb49144281998588fe1bfaa4d3f1dab3" kindref="member">buildNodesCableANCF</ref>(last_node);}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{<ref refid="classcpp_cable_1a1315c62ca9ac4d9147af8d9041a9f766" kindref="member">buildNodesBeamEuler</ref>(last_node);}</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="classcpp_cable_1a1315c62ca9ac4d9147af8d9041a9f766" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a1315c62ca9ac4d9147af8d9041a9f766" kindref="member">cppCable::buildNodesBeamEuler</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.clear();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.clear();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.clear();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChNodeFEAxyzrot&gt;<sp/>node;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>dir;<sp/><sp/></highlight><highlight class="comment">//<sp/>direction<sp/>of<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>ref<sp/>=<sp/>ChVector&lt;&gt;(1.,0.,0.);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ChQuaternion&lt;&gt;<sp/>frame_quat;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/><ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>[i];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ang<sp/>=<sp/>acos(dir^ref);<sp/><sp/></highlight><highlight class="comment">//<sp/>inner<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>ref%dir;<sp/></highlight><highlight class="comment">//<sp/>cross<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_quat.Q_from_AngAxis(ang,<sp/>axis);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>std::make_shared&lt;ChNodeFEAxyzrot&gt;(ChFrame&lt;&gt;(<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>[i],</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_quat));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.push_back(node);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>drag0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>am0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.push_back(drag0);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.push_back(am0);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_node<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/><ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>[<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>.size()-1];</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ang<sp/>=<sp/>-acos(dir^ref);<sp/><sp/></highlight><highlight class="comment">//<sp/>inner<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>ref%dir;<sp/></highlight><highlight class="comment">//<sp/>cross<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>frame_quat.Q_from_AngAxis(ang,<sp/>axis);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>std::make_shared&lt;ChNodeFEAxyzrot&gt;(ChFrame&lt;&gt;(<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>[<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>.size()-1],</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_quat));</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.push_back(node);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.size();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref><sp/>=<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>-1;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>drag0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>am0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.push_back(drag0);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.push_back(am0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.size();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref><sp/>=<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="classcpp_cable_1aeb49144281998588fe1bfaa4d3f1dab3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1aeb49144281998588fe1bfaa4d3f1dab3" kindref="member">cppCable::buildNodesCableANCF</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>last_node)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>.clear();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.clear();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.clear();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChNodeFEAxyzD&gt;<sp/>node;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>dir;<sp/><sp/></highlight><highlight class="comment">//<sp/>direction<sp/>of<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>ChCoordsys&lt;&gt;<sp/>coordsys;<sp/><sp/></highlight><highlight class="comment">//<sp/>coordinate<sp/>system<sp/>of<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/><ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>[i];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>std::make_shared&lt;ChNodeFEAxyzD&gt;(<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>[i],<sp/>dir);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>.push_back(node);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>drag0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>am0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.push_back(drag0);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.push_back(am0);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_node<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>dir<sp/>=<sp/><ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>[<ref refid="classcpp_cable_1a39bae133378e4bd6147d65b84189159f" kindref="member">mvecs_tangents</ref>.size()-1];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>dir.Normalize();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>std::make_shared&lt;ChNodeFEAxyzD&gt;(<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>[<ref refid="classcpp_cable_1a76a018acec012e748b5f3ae0dcdc0766" kindref="member">mvecs</ref>.size()-1],<sp/>dir);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>.push_back(node);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>.size();</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref><sp/>=<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>-1;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>drag0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChVector&lt;&gt;&gt;<sp/>am0<sp/>=<sp/>std::make_shared&lt;ChVector&lt;&gt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>.push_back(drag0);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>.push_back(am0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>.size();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref><sp/>=<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="classcpp_cable_1ae0ddbc352f4ad27be6e4a67af97cbbc8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1ae0ddbc352f4ad27be6e4a67af97cbbc8" kindref="member">cppCable::buildElements</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a89b92a50c7b6ee09f2e494233f2b20fd" kindref="member">buildElementsCableANCF</ref>(set_lastnodes);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a87cfe9c2522c12ac4f30861e2be0a45d" kindref="member">buildElementsBeamEuler</ref>(set_lastnodes);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="classcpp_cable_1a89b92a50c7b6ee09f2e494233f2b20fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a89b92a50c7b6ee09f2e494233f2b20fd" kindref="member">cppCable::buildElementsCableANCF</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loadcontainer<sp/>=<sp/>std::make_shared&lt;ChLoadContainer&gt;();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" kindref="member">system</ref>-&gt;Add(loadcontainer);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>.clear();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads_distributed.clear();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>.clear();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>.clear();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads.clear();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>=<sp/>std::make_shared&lt;ChElementCableANCFmod&gt;();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>load_distributed<sp/>=<sp/>std::make_shared&lt;ChLoadBeamWrenchDistributed&gt;(element);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>load<sp/>=<sp/>std::make_shared&lt;ChLoadBeamWrench&gt;(element);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChLoad&lt;MyLoaderTriangular&gt;&gt;<sp/>loadtri(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChLoad&lt;MyLoaderTriangular&gt;(element));</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>load_volumetric<sp/>=<sp/>std::make_shared&lt;ChLoad&lt;ChLoaderGravity&gt;&gt;(element);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>load_volumetric-&gt;loader.Set_G_acc(ChVector&lt;&gt;(0.,0.,0.));</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loadcontainer-&gt;Add(load_distributed);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loadcontainer-&gt;Add(load);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>loadcontainer-&gt;Add(loadtri);<sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>forget<sp/>to<sp/>add<sp/>the<sp/>load<sp/>to<sp/>the<sp/>load<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>loadcontainer-&gt;Add(load_volumetric);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>.push_back(element);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads_distributed.push_back(load_distributed);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads.push_back(load);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>.push_back(loadtri);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>.push_back(load_volumetric);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetSection(<ref refid="classcpp_cable_1af3346ce46541fa83bee7afc726535b5b" kindref="member">msection_cable</ref>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetRestLength(<ref refid="classcpp_cable_1a4384aa8dedd22a32545fb92a7ced9b1f" kindref="member">length_per_elem</ref>[i]);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>-1)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetNodes(<ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i],<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_lastnodes<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetNodes(<ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i],<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="classcpp_cable_1a87cfe9c2522c12ac4f30861e2be0a45d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a87cfe9c2522c12ac4f30861e2be0a45d" kindref="member">cppCable::buildElementsBeamEuler</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_lastnodes)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loadcontainer<sp/>=<sp/>std::make_shared&lt;ChLoadContainer&gt;();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" kindref="member">system</ref>-&gt;Add(loadcontainer);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>.clear();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads_distributed.clear();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>.clear();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads.clear();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>=<sp/>std::make_shared&lt;ChElementBeamEulermod&gt;();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>load_distributed<sp/>=<sp/>std::make_shared&lt;ChLoadBeamWrenchDistributed&gt;(element);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>load<sp/>=<sp/>std::make_shared&lt;ChLoadBeamWrench&gt;(element);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChLoad&lt;MyLoaderTriangular&gt;&gt;<sp/>loadtri(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ChLoad&lt;MyLoaderTriangular&gt;(element));</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>load_volumetric<sp/>=<sp/>std::make_shared&lt;ChLoad&lt;ChLoaderGravity&gt;&gt;(element);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>load_volumetric-&gt;loader.Set_G_acc(ChVector&lt;&gt;(0.,0.,0.));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loadcontainer-&gt;Add(load_distributed);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>loadcontainer-&gt;Add(load);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>loadcontainer-&gt;Add(loadtri);<sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>forget<sp/>to<sp/>add<sp/>the<sp/>load<sp/>to<sp/>the<sp/>load<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>loadcontainer-&gt;Add(load_volumetric);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>.push_back(element);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads_distributed.push_back(load_distributed);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elems_loads.push_back(load);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>.push_back(loadtri);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>.push_back(load_volumetric);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetSection(<ref refid="classcpp_cable_1abf0dc1b8476879bca938dbbc98142155" kindref="member">msection_advanced</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>element-&gt;SetRestLength(<ref refid="classcpp_cable_1aee8538399b8f348a7b3edeab2560b694" kindref="member">length</ref>/<ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a862f8649fa80033bee8b4413afbaca17" kindref="member">nb_elems</ref>-1)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetNodes(<ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i],<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_lastnodes<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element-&gt;SetNodes(<ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i],<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="classcpp_cable_1ad59d9407ce948079c49e6abf281f1845" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1ad59d9407ce948079c49e6abf281f1845" kindref="member">cppCable::buildMesh</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aaf43913c70de6cf5ac34fa8433a92a59" kindref="member">buildMeshCableANCF</ref>(add_lastnode);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a1d4c1341f2179754371d76caff1d2bb1" kindref="member">buildMeshBeamEuler</ref>(add_lastnode);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="classcpp_cable_1a1d4c1341f2179754371d76caff1d2bb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a1d4c1341f2179754371d76caff1d2bb1" kindref="member">cppCable::buildMeshBeamEuler</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>mesh<sp/>(nodes<sp/>and<sp/>elements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>[0]-&gt;GetNodeA();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>.size()-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>[i]-&gt;GetNodeB();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddElement(<ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>[i]);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_lastnode<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>[<ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>.size()-1]-&gt;GetNodeB();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddElement(<ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>[<ref refid="classcpp_cable_1a45d1a19cf5ab77066c473f35349b5f7d" kindref="member">elemsBeamEuler</ref>.size()-1]);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="classcpp_cable_1aaf43913c70de6cf5ac34fa8433a92a59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1aaf43913c70de6cf5ac34fa8433a92a59" kindref="member">cppCable::buildMeshCableANCF</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add_lastnode)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>the<sp/>mesh<sp/>(nodes<sp/>and<sp/>elements)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>[0]-&gt;GetNodeA();</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>.size()-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>[i]-&gt;GetNodeB();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddElement(<ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>[i]);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add_lastnode<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/><ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>[<ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>.size()-1]-&gt;GetNodeB();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddNode(node);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;AddElement(<ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>[<ref refid="classcpp_cable_1a206207ad980be861bcb281f4c98f6195" kindref="member">elemsCableANCF</ref>.size()-1]);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826" refid="classcpp_cable_1a3f163c62ead40b2a8666b948f5e0927d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a3f163c62ead40b2a8666b948f5e0927d" kindref="member">cppCable::setFluidAccelerationAtNodes</ref>(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/>acc)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" kindref="member">fluid_acceleration</ref><sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="classcpp_cable_1a57f30b2d382c847408e885486d79cb81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a57f30b2d382c847408e885486d79cb81" kindref="member">cppCable::setFluidVelocityAtNodes</ref>(<ref refid="_allocation_8h_1a3e3ccfdcdd496df99eaa29f65fe68b31" kindref="member">std::vector</ref>&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" kindref="member">fluid_velocity</ref><sp/>=<sp/><ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="classcpp_cable_1ad7b60b88dc3630bbd05421bd777440b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1ad7b60b88dc3630bbd05421bd777440b3" kindref="member">cppCable::setFluidDensityAtNodes</ref>(std::vector&lt;double&gt;<sp/>dens)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref><sp/>=<sp/>dens;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="classcpp_cable_1a8e06095c2f4e570a37a92d454f505285" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a8e06095c2f4e570a37a92d454f505285" kindref="member">cppCable::setDragCoefficients</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axial,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a4e5cfd02bfc79a92b4b93089a1f0eb2e" kindref="member">Cd_axial</ref><sp/>=<sp/>axial;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1aa32cc99eb80081cf0e32bd5c762da74c" kindref="member">Cd_normal</ref><sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="classcpp_cable_1a8326a943a13038e660f4749c77e3b951" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a8326a943a13038e660f4749c77e3b951" kindref="member">cppCable::setAddedMassCoefficients</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>axial,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a7585df9378ecbe1139245598c20bf68b" kindref="member">Cm_axial</ref><sp/>=<sp/>axial;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a488818539a1396116eaf003103ea9d37" kindref="member">Cm_normal</ref><sp/>=<sp/>normal;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="classcpp_cable_1acfa85cafd6343b9284a45bed29a41321" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1acfa85cafd6343b9284a45bed29a41321" kindref="member">cppCable::setRestLengthPerElement</ref>(std::vector&lt;double&gt;<sp/>length_array)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><ref refid="classcpp_cable_1a4384aa8dedd22a32545fb92a7ced9b1f" kindref="member">length_per_elem</ref><sp/>=<sp/>length_array;</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="classcpp_cable_1a2b9a0fa85de9be5edc4cf6e1b431cd1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a2b9a0fa85de9be5edc4cf6e1b431cd1e" kindref="member">cppCable::setDragForce</ref>()<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/>*<sp/>setFluidVelocityAtNodes<sp/>and<sp/>setFluidDensityAtNodes</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/>*<sp/>must<sp/>be<sp/>called<sp/>before<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>u_ch;<sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>from<sp/>chrono</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>u_prot;<sp/><sp/></highlight><highlight class="comment">//<sp/>velocity<sp/>from<sp/>proteus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>u_rel;<sp/><sp/></highlight><highlight class="comment">//<sp/>relative<sp/>velocity<sp/>of<sp/>node<sp/>with<sp/>surrounding<sp/>fluid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>t_dir;<sp/><sp/></highlight><highlight class="comment">//<sp/>tangent<sp/>at<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fd_a;<sp/><sp/></highlight><highlight class="comment">//<sp/>axial<sp/>(tangential)<sp/>drag<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fd_n;<sp/><sp/></highlight><highlight class="comment">//<sp/>normal(transversal)<sp/>drag<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fd;<sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>drag<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Va;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Vn;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_f;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>current<sp/>drag<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length_elem<sp/>=<sp/><ref refid="classcpp_cable_1aee8538399b8f348a7b3edeab2560b694" kindref="member">length</ref><sp/>/<sp/>(<ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_dir<sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i]-&gt;GetD();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u_ch<sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i]-&gt;GetPos_dt();</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_dir<sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i]-&gt;GetRot().GetVector();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u_ch<sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i]-&gt;GetPos_dt();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>velocity<sp/>u_prot<sp/>from<sp/>proteus<sp/>//<sp/>TO<sp/>CHANGE<sp/>!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ux_prot<sp/>=<sp/><ref refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" kindref="member">fluid_velocity</ref>[i][0];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uy_prot<sp/>=<sp/><ref refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" kindref="member">fluid_velocity</ref>[i][1];</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uz_prot<sp/>=<sp/><ref refid="classcpp_cable_1ae2d1c9122f97e0bf259adf9d080e9cdf" kindref="member">fluid_velocity</ref>[i][2];</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>u_prot<sp/>=<sp/>ChVector&lt;&gt;(ux_prot,<sp/>uy_prot,<sp/>uz_prot);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>u_rel<sp/>=<sp/>u_prot<sp/>-<sp/>u_ch;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CAREFUL<sp/>HERE:<sp/>ChBeamElementANCF,<sp/>GetD()<sp/>does<sp/>not<sp/>give<sp/>direction<sp/>but<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>rho_f<sp/>=<sp/><ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref>[i];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dot<sp/>=<sp/>u_rel^t_dir;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>Va<sp/>=<sp/>t_dir*dot;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>Vn<sp/>=<sp/>u_rel-Va;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>Fd_a<sp/>=<sp/>0.5*rho_f*<ref refid="classcpp_cable_1a4e5cfd02bfc79a92b4b93089a1f0eb2e" kindref="member">Cd_axial</ref>*M_PI*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*Va.Length()*Va;</highlight><highlight class="comment">//(force<sp/>per<sp/>unit<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>Fd_n<sp/>=<sp/>0.5*rho_f*<ref refid="classcpp_cable_1aa32cc99eb80081cf0e32bd5c762da74c" kindref="member">Cd_normal</ref>*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*Vn.Length()*Vn;</highlight><highlight class="comment">//(force<sp/>per<sp/>unit<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>Fd<sp/>=<sp/>Fd_a<sp/>+<sp/>Fd_n;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>[i]-&gt;Set(Fd);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898" refid="classcpp_cable_1a5d7268017c7fc26d594b6a1b6a56cb4b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1a5d7268017c7fc26d594b6a1b6a56cb4b" kindref="member">cppCable::setAddedMassForce</ref>()<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/>*<sp/>setFluidVelocityAtNodes<sp/>and<sp/>setFluidDensityAtNodes</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/>*<sp/>must<sp/>be<sp/>called<sp/>before<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>a_ch;<sp/><sp/></highlight><highlight class="comment">//<sp/>acceleration<sp/>from<sp/>chrono</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>a_prot;<sp/><sp/></highlight><highlight class="comment">//<sp/>acceleration<sp/>from<sp/>proteus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>a_rel;<sp/><sp/></highlight><highlight class="comment">//<sp/>relative<sp/>acceleration<sp/>of<sp/>node<sp/>with<sp/>surrounding<sp/>fluid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>t_dir;<sp/><sp/></highlight><highlight class="comment">//<sp/>tangent<sp/>at<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fm_a;<sp/><sp/></highlight><highlight class="comment">//<sp/>axial<sp/>(tangential)<sp/>added<sp/>mass<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fm_n;<sp/><sp/></highlight><highlight class="comment">//<sp/>normal(transversal)<sp/>added<sp/>mass<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fm_f;<sp/><sp/></highlight><highlight class="comment">//<sp/>fluid<sp/>part<sp/>added<sp/>mass<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Fm;<sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>added<sp/>mass<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Va;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>Vn;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_f;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>current<sp/>drag<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length_elem<sp/>=<sp/><ref refid="classcpp_cable_1aee8538399b8f348a7b3edeab2560b694" kindref="member">length</ref><sp/>/<sp/>(<ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_dir<sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i]-&gt;GetD();</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_ch<sp/>=<sp/><ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i]-&gt;GetPos_dtdt();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t_dir<sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i]-&gt;GetRot().GetVector();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_ch<sp/>=<sp/><ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i]-&gt;GetPos_dtdt();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>velocity<sp/>u_prot<sp/>from<sp/>proteus<sp/>//<sp/>TO<sp/>CHANGE<sp/>!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ax_prot<sp/>=<sp/><ref refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" kindref="member">fluid_acceleration</ref>[i][0];</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ay_prot<sp/>=<sp/><ref refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" kindref="member">fluid_acceleration</ref>[i][1];</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>az_prot<sp/>=<sp/><ref refid="classcpp_cable_1a261eea33d13dcfe2410f0fd0be6c8107" kindref="member">fluid_acceleration</ref>[i][2];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>a_prot<sp/>=<sp/>ChVector&lt;&gt;(ax_prot,<sp/>ay_prot,<sp/>az_prot);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>a_rel<sp/>=<sp/>a_prot<sp/>-<sp/>a_ch;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>rho_f<sp/>=<sp/><ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref>[i];</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dot<sp/>=<sp/>a_rel^t_dir;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>Va<sp/>=<sp/>t_dir*dot;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>Vn<sp/>=<sp/>a_rel-Va;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>Fm_a<sp/>=<sp/>rho_f*<ref refid="classcpp_cable_1a7585df9378ecbe1139245598c20bf68b" kindref="member">Cm_axial</ref>*M_PI*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>/4.*Va;</highlight><highlight class="comment">//(force<sp/>per<sp/>unit<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>Fm_n<sp/>=<sp/>rho_f*<ref refid="classcpp_cable_1a488818539a1396116eaf003103ea9d37" kindref="member">Cm_normal</ref>*M_PI*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>/4.*Vn;</highlight><highlight class="comment">//(force<sp/>per<sp/>unit<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>Fm_f<sp/>=<sp/>rho_f*M_PI*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>*<ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>/4.*a_prot;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>Fm<sp/>=<sp/>Fm_a<sp/>+<sp/>Fm_n<sp/>+<sp/>Fm_f;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>[i]-&gt;Set(Fm);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943" refid="classcpp_cable_1ae4d48f9e790c7dd29505831fdfe96fdf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1ae4d48f9e790c7dd29505831fdfe96fdf" kindref="member">cppCable::applyForces</ref>()<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;&gt;<sp/>Fa<sp/>=<sp/>ChVector&lt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;&gt;<sp/>Fb<sp/>=<sp/>ChVector&lt;&gt;(0.,0.,0.);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1a2fe64545b3e0ace4ef802f6b00912c01" kindref="member">applyDrag</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Fa<sp/>=<sp/>Fa+*<ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>[i].get();</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Fb<sp/>=<sp/>Fb+*<ref refid="classcpp_cable_1aa9d128c47e1d9862b4de138f60a7ad03" kindref="member">forces_drag</ref>[i+1].get();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1abd2ed7f279ebbbe195db353008b071e9" kindref="member">applyAddedMass</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Fa<sp/>=<sp/>Fa+*<ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>[i].get();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Fb<sp/>=<sp/>Fb+*<ref refid="classcpp_cable_1a839746caf132363226121f99e42e0566" kindref="member">forces_addedmass</ref>[i+1].get();</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a9ecc09e99c40840557425c30d9a0ddd1" kindref="member">elems_loads_triangular</ref>[i]-&gt;loader.SetF(Fa,<sp/>Fb);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buoyancy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1a2625d2d46b41e7bcefd7537bd9727fed" kindref="member">applyBuoyancy</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1a69111440455982d24f53e964945d053e" kindref="member">mesh</ref>-&gt;GetAutomaticGravity()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>[i]-&gt;loader.Set_G_acc(-<ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref>[i]/<ref refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" kindref="member">rho</ref>*<ref refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" kindref="member">system</ref>-&gt;Get_G_acc());</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_cable_1a5c81afd379504ab182c49f2932644e5c" kindref="member">elems_loads_volumetric</ref>[i]-&gt;loader.Set_G_acc((1-<ref refid="classcpp_cable_1ab2e46a9b415d8b39059af0e0a632c581" kindref="member">fluid_density</ref>[i]/<ref refid="classcpp_cable_1ad40947b824c2d203238910a2252d7315" kindref="member">rho</ref>)*<ref refid="classcpp_cable_1abf6a207bbe6e4a601c75921c9ad5040a" kindref="member">system</ref>-&gt;Get_G_acc());</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal">};</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968" refid="classcpp_cable_1ab37a3d2f1419cbdb105d116264c0d9a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_cable_1ab37a3d2f1419cbdb105d116264c0d9a4" kindref="member">cppCable::addNodestoContactCloud</ref>(std::shared_ptr&lt;ChContactSurfaceNodeCloud&gt;<sp/>cloud)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_cable_1a53c155d590332a97c35970fc03639b1a" kindref="member">nb_nodes</ref>-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;BeamEuler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cloud-&gt;AddNode(<ref refid="classcpp_cable_1a175d53c16eed799a76309c838a107be9" kindref="member">nodesRot</ref>[i],<sp/><ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_cable_1ad5c86f4899704a1feb8617acf7802ed2" kindref="member">beam_type</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CableANCF&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cloud-&gt;AddNode(<ref refid="classcpp_cable_1a746456de6a19d310176bf9f675bf3a0b" kindref="member">nodes</ref>[i],<sp/><ref refid="classcpp_cable_1a3e6d901316cd79a4fb690c02ac753956" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal">};</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979" refid="_prot_ch_moorings_8h_1ae4f8c960f5677c889d6a1c0606c767c3" refkind="member"><highlight class="normal"><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref><sp/>*<sp/><ref refid="_prot_ch_moorings_8h_1ae4f8c960f5677c889d6a1c0606c767c3" kindref="member">newMoorings</ref>(std::shared_ptr&lt;ChSystem&gt;<sp/>system,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChMesh&gt;<sp/>mesh,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>length,</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>nb_elems,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>d,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>E,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>beam_type)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>(system,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb_elems,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beam_type);</highlight></codeline>
<codeline lineno="996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="_prot_ch_moorings_8h_1ae9a2807dd7597d5bbbabd33eff8f1ed0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_prot_ch_moorings_8h_1ae9a2807dd7597d5bbbabd33eff8f1ed0" kindref="member">cppAttachNodeToNodeFEAxyzD</ref>(<ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>*<sp/>cable1,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node1,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>*<sp/>cable2,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node2)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>con1<sp/>=<sp/>std::make_shared&lt;ChLinkPointPoint&gt;();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeA<sp/>=<sp/>cable1-&gt;<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>[node1];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeB<sp/>=<sp/>cable2-&gt;<ref refid="classcpp_multi_segmented_cable_1a4c3c6be121d718378bbf039e2332cb5e" kindref="member">nodes</ref>[node2];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>con1-&gt;Initialize(nodeA,<sp/>nodeB);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>cable1-&gt;<ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(con1);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="_prot_ch_moorings_8h_1a126b50d227c64c86eba5fffd4bcbf9da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_prot_ch_moorings_8h_1a126b50d227c64c86eba5fffd4bcbf9da" kindref="member">cppAttachNodeToNodeFEAxyzrot</ref>(<ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>*<sp/>cable1,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node1,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_multi_segmented_cable" kindref="compound">cppMultiSegmentedCable</ref>*<sp/>cable2,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node2)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>con1<sp/>=<sp/>std::make_shared&lt;ChLinkMateSpherical&gt;();</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeA<sp/>=<sp/>cable1-&gt;<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>[node1];</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nodeB<sp/>=<sp/>cable2-&gt;<ref refid="classcpp_multi_segmented_cable_1a28a4c60a8593bcb2b756226ed6a8bb47" kindref="member">nodesRot</ref>[node2];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>con1-&gt;Initialize(nodeA,<sp/>nodeB,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>nodeA-&gt;GetPos(),<sp/>nodeA-&gt;GetPos());</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>cable1-&gt;<ref refid="classcpp_multi_segmented_cable_1a9094f4f5a73a7c791a3972e096b511ca" kindref="member">system</ref>-&gt;Add(con1);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChMoorings.h"/>
  </compounddef>
</doxygen>
