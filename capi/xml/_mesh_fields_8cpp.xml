<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_mesh_fields_8cpp" kind="file" language="C++">
    <compoundname>MeshFields.cpp</compoundname>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">apfMesh.h</includes>
    <includes local="no">apfShape.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="8">
        <label>list</label>
      </node>
      <node id="18">
        <label>apfMesh.h</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>queue</label>
      </node>
      <node id="19">
        <label>apfShape.h</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="21">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="16">
        <label>apfNumbering.h</label>
      </node>
      <node id="14">
        <label>apf.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>apfMesh2.h</label>
      </node>
      <node id="2">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>MeshFields.cpp</label>
        <link refid="_mesh_fields_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::freeField(apf::Field*&amp;<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MeshAdaptPUMIDrvr::freeNumbering(apf::Numbering*&amp;<sp/><ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyNumbering(<ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a08a4b8173deed2dbe6993d906ff006cb" kindref="member">n</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="class_mesh_adapt_p_u_m_i_drvr_1ac167218f32db834c739e89e6cfed2560" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac167218f32db834c739e89e6cfed2560" kindref="member">MeshAdaptPUMIDrvr::transferFieldToPUMI</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>inArray,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nVar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>assert(nN<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m-&gt;count(0)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>apf::Field*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;findField(name);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);<sp/></highlight><highlight class="comment">/*<sp/>coordinates<sp/>are<sp/>special,<sp/>not<sp/>found<sp/>by<sp/>regular<sp/>findField<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;getCoordinateField();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nVar<sp/>==<sp/>1<sp/>||<sp/>nVar<sp/>==<sp/>3<sp/>||<sp/>nVar<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valueType;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nVar<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueType<sp/>=<sp/>apf::SCALAR;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nVar<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueType<sp/>=<sp/>apf::MATRIX;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueType<sp/>=<sp/>apf::VECTOR;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>apf::createFieldOn(m,<sp/>name,<sp/>valueType);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>apf::NewArray&lt;double&gt;<sp/>tmp(nVar);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nVar;<sp/>j++)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp[j]<sp/>=<sp/>inArray[i<sp/>*<sp/>nVar<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setComponents(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>&amp;tmp[0]);<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="class_mesh_adapt_p_u_m_i_drvr_1a171dedf702dd8c87f1aaf8fc8b32d7d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a171dedf702dd8c87f1aaf8fc8b32d7d5" kindref="member">MeshAdaptPUMIDrvr::transferFieldToProteus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>outArray,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nVar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>assert(nN<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m-&gt;count(0)));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>apf::Field*<sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref><sp/>=<sp/>m-&gt;findField(name);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;couldn&apos;t<sp/>find<sp/>field<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>assert(apf::countComponents(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>==<sp/>nVar);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>apf::NewArray&lt;double&gt;<sp/>tmp(nVar);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref><sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(<ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getComponents(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>,<sp/><ref refid="_headers_8h_1abb6e996fea4e5f276fdcec0c7d809274" kindref="member">v</ref>,<sp/>0,<sp/>&amp;tmp[0]);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nVar;<sp/>j++)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outArray[i<sp/>*<sp/>nVar<sp/>+<sp/>j]<sp/>=<sp/>tmp[j];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="class_mesh_adapt_p_u_m_i_drvr_1a8858e270790faf4702fdfffd67b0faf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a8858e270790faf4702fdfffd67b0faf4" kindref="member">MeshAdaptPUMIDrvr::transferPropertiesToPUMI</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rho_p,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>nu_p,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*g_p,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaT,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interfaceBandSize)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>rho[0]<sp/>=<sp/>rho_p[0];<sp/>rho[1]<sp/>=<sp/>rho_p[1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>nu[0]<sp/>=<sp/>nu_p[0];<sp/>nu[1]<sp/>=<sp/>nu_p[1];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0]<sp/>=<sp/>g_p[0];<sp/>g[1]<sp/>=<sp/>g_p[1];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==3){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>g[0]<sp/>=<sp/>g_p[0];<sp/>g[1]<sp/>=<sp/>g_p[1];<sp/>g[2]<sp/>=<sp/>g_p[2];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa3eddefb9c31b31e2b8c91cdd01ea40a" kindref="member">N_interface_band</ref><sp/>=<sp/>interfaceBandSize;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>delta_T<sp/>=<sp/>deltaT;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="146"><highlight class="comment">int<sp/>MeshAdaptPUMIDrvr::transferBCtagsToProteus(int*<sp/>tagArray,int<sp/>idx,<sp/>int*<sp/>ebN,<sp/>int*eN_global,double*<sp/>fluxBC)</highlight></codeline>
<codeline lineno="147"><highlight class="comment">{</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>//Suppose<sp/>I<sp/>have<sp/>a<sp/>list<sp/>of<sp/>identifiers<sp/>from<sp/>Proteus<sp/>that<sp/>classifies<sp/>each<sp/>boundary<sp/>element</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>apf::MeshIterator*<sp/>it=<sp/>m-&gt;begin(2);</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/>apf::MeshEntity*<sp/>f;</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>apf::ModelEntity*<sp/>me;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>apf::ModelEntity*<sp/>boundary_face;</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>int<sp/>tag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>int<sp/>fID,type,boundary_ID;</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>int<sp/>numqpt;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>char<sp/>label[9],labelflux[6],type_flag;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//assign<sp/>a<sp/>label<sp/>to<sp/>the<sp/>BC<sp/>type<sp/>tag</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>if(idx<sp/>==<sp/>0)<sp/>sprintf(&amp;type_flag,&quot;p&quot;);</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>else<sp/>if(idx<sp/>==<sp/>1)<sp/>sprintf(&amp;type_flag,&quot;u&quot;);</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>else<sp/>if(idx<sp/>==<sp/>2)<sp/>sprintf(&amp;type_flag,&quot;v&quot;);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>else<sp/>if(idx<sp/>==<sp/>3)<sp/>sprintf(&amp;type_flag,&quot;w&quot;);</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>sprintf(&amp;label[0],&quot;BCtype_%c&quot;,type_flag);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>BCtag[idx]<sp/>=<sp/>m-&gt;createIntTag(label,1);</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>std::cout&lt;&lt;&quot;Boundary<sp/>label<sp/>&quot;&lt;&lt;label&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//assign<sp/>a<sp/>label<sp/>to<sp/>the<sp/>flux<sp/>tag</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>if(idx&gt;0)<sp/>sprintf(labelflux,&quot;%c_flux&quot;,type_flag);</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>while(f=m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>if(count==0){<sp/>//happens<sp/>only<sp/>once</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>sample_elem<sp/>=<sp/>apf::createMeshElement(m,f);</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>numqpt<sp/>=<sp/>apf::countIntPoints(sample_elem,integration_order);</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyMeshElement(sample_elem);</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(idx&gt;0)fluxtag[idx]=<sp/>m-&gt;createDoubleTag(labelflux,numqpt);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>me=m-&gt;toModel(f);</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>tag<sp/>=<sp/>m-&gt;getModelTag(me);</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(2,tag);<sp/>//faces</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>if(me==boundary_face){<sp/>//is<sp/>on<sp/>model<sp/>entity</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//Assign<sp/>a<sp/>tag<sp/>to<sp/>the<sp/>face<sp/>for<sp/>the<sp/>given<sp/>type<sp/>of<sp/>boundary<sp/>condition</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>fID=localNumber(f);</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>boundary_ID<sp/>=<sp/>exteriorGlobaltoLocalElementBoundariesArray[fID];</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>tagArray[numqpt*boundary_ID<sp/>+<sp/>0<sp/>];</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(f,BCtag[idx],&amp;type);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(idx&gt;0){</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(f,fluxtag[idx],&amp;fluxBC[numqpt*boundary_ID]);<sp/>//set<sp/>the<sp/>quadrature<sp/>points</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>//end<sp/>if<sp/>boundary<sp/>face</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>}<sp/>//end<sp/>face<sp/>loop</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="197"><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>std::cout&lt;&lt;&quot;Finished<sp/>Transfer<sp/>of<sp/>BC<sp/>Tags<sp/>&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="comment">}</highlight></codeline>
<codeline lineno="201"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="204"><highlight class="comment">int<sp/>MeshAdaptPUMIDrvr::transferBCsToProteus()</highlight></codeline>
<codeline lineno="205"><highlight class="comment">{</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/>//Want<sp/>to<sp/>use<sp/>some<sp/>sort<sp/>of<sp/>Hierarchic<sp/>projection</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>apf::FieldShape*<sp/>BC_shape<sp/>=<sp/>apf::getHierarchic(2);</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>apf::MeshEntity*<sp/>v;</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>int<sp/>nVar<sp/>=<sp/>4;<sp/>//pressure<sp/>+<sp/>3<sp/>velocity<sp/>components</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/>//DBC<sp/>=<sp/>apf::createPackedField(m,<sp/>&quot;proteus_DBC&quot;,<sp/>nVar);</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>fluxBC<sp/>=<sp/>apf::createField(m,<sp/>&quot;proteus_fluxBC&quot;,apf::VECTOR,<sp/>BC_shape);</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/>//iterate<sp/>through<sp/>faces,<sp/>find<sp/>adjacent<sp/>vertices<sp/>and<sp/>edges<sp/>and<sp/>then<sp/>construct<sp/>the<sp/>linear<sp/>system<sp/>to<sp/>solve<sp/>for<sp/>the<sp/>coefficients</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>apf::MeshIterator*<sp/>it=<sp/>m-&gt;begin(2);</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>apf::MeshEntity*<sp/>f;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>apf::ModelEntity*<sp/>me;</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>apf::ModelEntity*<sp/>boundary_face;</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>int<sp/>tag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>int<sp/>numqpt;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>apf::Adjacent<sp/>adjvtx,<sp/>adjedg;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>while(f=m-&gt;iterate(it)){</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/>if(count==0){<sp/>//happens<sp/>only<sp/>once</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>sample_elem<sp/>=<sp/>apf::createMeshElement(m,f);</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>numqpt<sp/>=<sp/>apf::countIntPoints(sample_elem,integration_order);</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>fluxtag[1]=<sp/>m-&gt;createDoubleTag(&quot;u_flux&quot;,numqpt);</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>fluxtag[2]=<sp/>m-&gt;createDoubleTag(&quot;v_flux&quot;,numqpt);</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>fluxtag[3]=<sp/>m-&gt;createDoubleTag(&quot;w_flux&quot;,numqpt);</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyMeshElement(sample_elem);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>me=m-&gt;toModel(f);</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>tag=m-&gt;getModelTag(me);</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(2,tag);<sp/>//faces</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>if(me==boundary_face){</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>test[numqpt];</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;numqpt;i++){test[i]=i;}</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(f,fluxtag[1],test);</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>data[numqpt];</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(f,fluxtag[1],&amp;data[0]);</highlight></codeline>
<codeline lineno="243"><highlight class="comment">//std::cout&lt;&lt;&quot;What<sp/>is<sp/>the<sp/>data?<sp/>&quot;&lt;&lt;data[0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;data[5]&lt;&lt;&quot;<sp/>numqpt<sp/>&quot;&lt;&lt;numqpt&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//get<sp/>adjacent<sp/>vertices</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(f,0,adjvtx);</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//evaluate<sp/>boundary<sp/>condition<sp/>and<sp/>set<sp/>value</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//get<sp/>adjacent<sp/>edges</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(f,1,adjedg);</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>std::cout&lt;&lt;&quot;Finished<sp/>Transferring<sp/>BC<sp/>&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="comment">}</highlight></codeline>
<codeline lineno="256"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/MeshFields.cpp"/>
  </compounddef>
</doxygen>
