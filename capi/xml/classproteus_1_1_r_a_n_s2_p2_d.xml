<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classproteus_1_1_r_a_n_s2_p2_d" kind="class" language="C++" prot="public">
    <compoundname>proteus::RANS2P2D</compoundname>
    <basecompoundref refid="classproteus_1_1_r_a_n_s2_p2_d__base" prot="public" virt="non-virtual">proteus::RANS2P2D_base</basecompoundref>
    <includes refid="_r_a_n_s2_p2_d_8h" local="no">/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>class CompKernelType_v</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_v_trial_element</declname>
        <defname>nDOF_v_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_v_test_element</declname>
        <defname>nDOF_v_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1acb2cdc2ed65f4e14992d78e9c8a5eb75" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="560" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1a59908f68086f5069801cf814a4051f97" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_v_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_v_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="561" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1a95c54d7ae3624721716a287fa0e6f383" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_v_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_v_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="562" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1a8d61edc565e143891b5ca5c5222b2093" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_v_test_X_v_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_v_test_X_v_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="563" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1ad5aa0e708b1831c881f6be0a2233e62f" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="564" column="22" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1aef1aea6839dd8f40b4ecc6e2bdb65895" prot="public" static="no" mutable="no">
        <type>CompKernelType_v</type>
        <definition>CompKernelType_v proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ck_v</definition>
        <argsstring></argsstring>
        <name>ck_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="565" column="24" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1a67dcd36995f396f5ee4578761dac2788" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::gf</definition>
        <argsstring></argsstring>
        <name>gf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="566" column="28" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p2_d_1a13f99cef31c45d6c33ff549127ca27d3" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::gf_s</definition>
        <argsstring></argsstring>
        <name>gf_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="567" column="28" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a83c4d09a2f95390f6e545cab40a49b6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::RANS2P2D</definition>
        <argsstring>()</argsstring>
        <name>RANS2P2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="568" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="568" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ad23409ee54411488bed4dffef67608d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const double eps_rho, const double eps_mu, const double sigma, const double rho_0, double nu_0, const double rho_1, double nu_1, const double h_e, const double smagorinskyConstant, const int turbulenceClosureModel, const double g[nSpace], const double useVF, const double &amp;vf, const double &amp;phi, const double n[nSpace], const double &amp;kappa, const double porosity, const double phi_solid, const double p_old, const double u_old, const double v_old, const double w_old, const double grad_p_old[nSpace], const double grad_u_old[nSpace], const double grad_v_old[nSpace], const double grad_w_old[nSpace], const int use_pseudo_penalty, const double &amp;p, const double grad_p[nSpace], const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], const double &amp;u, const double &amp;v, const double &amp;w, const double LAG_LES, double &amp;eddy_viscosity, double &amp;eddy_viscosity_last, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w, double mass_adv[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double dmass_adv_w[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double dmom_u_adv_w[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_v_adv_w[nSpace], double mom_w_adv[nSpace], double dmom_w_adv_u[nSpace], double dmom_w_adv_v[nSpace], double dmom_w_adv_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double &amp;mom_u_ham, double dmom_u_ham_grad_p[nSpace], double dmom_u_ham_grad_u[nSpace], double &amp;dmom_u_ham_u, double &amp;dmom_u_ham_v, double &amp;dmom_u_ham_w, double &amp;mom_v_ham, double dmom_v_ham_grad_p[nSpace], double dmom_v_ham_grad_v[nSpace], double &amp;dmom_v_ham_u, double &amp;dmom_v_ham_v, double &amp;dmom_v_ham_w, double &amp;mom_w_ham, double dmom_w_ham_grad_p[nSpace], double dmom_w_ham_grad_w[nSpace], double &amp;dmom_w_ham_u, double &amp;dmom_w_ham_v, double &amp;dmom_w_ham_w, double &amp;rho, double forcex, double forcey, double forcez)</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>h_e</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>kappa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcez</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="590" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="590" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a1a2239203e6fc4a97a8086dcaac057f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double x, const double y, const double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1020" column="11" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1020" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1adfa567734ea1e6bd5df90aea10203181" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, int I, const double x, const double y, const double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1038" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1038" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1aea589875104b0751941f64ad1d9ce56b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_normal_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, int I, const double x, const double y, const double z, double &amp;nx, double &amp;ny)</argsstring>
        <name>get_normal_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1047" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1047" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ae0ea891a61f92f4c07070a2f18a14aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_velocity_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, int I, const double x, const double y, const double z, double &amp;vx, double &amp;vy)</argsstring>
        <name>get_velocity_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1058" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1058" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a8df5dc91b0ab71f7807be4b63db08209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_acceleration_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, const double *ball_center_acceleration, const double *ball_angular_acceleration, int I, const double x, const double y, const double z, double &amp;ax, double &amp;ay)</argsstring>
        <name>get_acceleration_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1067" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1067" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ada1a427ed35aceaff1c175a1e30e60e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateSolidParticleTerms</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, bool element_owned, const double particle_nitsche, const double dV, const int nParticles, const int sd_offset, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, const int use_ball_as_particle, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, const double *ball_center_acceleration, const double *ball_angular_acceleration, const double *ball_density, const double porosity, const double penalty, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double x, const double y, const double z, const double p, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double mom_u_adv[nSpace], double mom_v_adv[nSpace], double mom_w_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_w_adv_w[nSpace], double &amp;mom_u_ham, double dmom_u_ham_grad_u[nSpace], double &amp;dmom_u_ham_u, double &amp;dmom_u_ham_v, double &amp;dmom_u_ham_w, double &amp;mom_v_ham, double dmom_v_ham_grad_v[nSpace], double &amp;dmom_v_ham_u, double &amp;dmom_v_ham_v, double &amp;dmom_v_ham_w, double &amp;mom_w_ham, double dmom_w_ham_grad_w[nSpace], double &amp;dmom_w_ham_u, double &amp;dmom_w_ham_v, double &amp;dmom_w_ham_w, double &amp;mass_ham, double &amp;dmass_ham_u, double &amp;dmass_ham_v, double &amp;dmass_ham_w, double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea, const int use_pseudo_penalty)</argsstring>
        <name>updateSolidParticleTerms</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>element_owned</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sd_offset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mass_ham</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1079" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1079" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1affb1c1858e4a989dab79519733b72c08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateDarcyForchheimerTerms_Ergun</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double phi_s, const double u_s, const double v_s, const double w_s, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace])</argsstring>
        <name>updateDarcyForchheimerTerms_Ergun</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1312" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1312" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ad5d69bd0c98c6da0dca7f825ab4f3edb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateTurbulenceClosure</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int turbulenceClosureModel, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double porosity, const double eddy_visc_coef_0, const double turb_var_0, const double turb_var_1, const double turb_grad_0[nSpace], double &amp;eddy_viscosity, double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source)</argsstring>
        <name>updateTurbulenceClosure</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eddy_visc_coef_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_grad_0</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1385" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1385" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ae29a5de34858ff304d2a11f134888f67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dmt, const double &amp;dm, const double df[nSpace], const double &amp;a, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1480" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1480" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1adc829cb674a9e56ac1ba54c617734cab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double &amp;Cd_sge, const double G[nSpace *nSpace], const double &amp;G_dd_G, const double &amp;tr_G, const double &amp;A0, const double Ai[nSpace], const double &amp;Kij, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;q_cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>G_dd_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tr_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Kij</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1507" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1507" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a4d37202374d8ef1e9a89bf4ad00666cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double &amp;pdeResidualP, const double &amp;pdeResidualU, const double &amp;pdeResidualV, const double &amp;pdeResidualW, double &amp;subgridErrorP, double &amp;subgridErrorU, double &amp;subgridErrorV, double &amp;subgridErrorW)</argsstring>
        <name>calculateSubgridError_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualP</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualU</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualV</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualW</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorP</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorU</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorV</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1529" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1529" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1af95cfbe461879b61d7ad0a5f35e88e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridErrorDerivatives_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double dpdeResidualP_du[nDOF_v_trial_element], const double dpdeResidualP_dv[nDOF_v_trial_element], const double dpdeResidualP_dw[nDOF_v_trial_element], const double dpdeResidualU_dp[nDOF_trial_element], const double dpdeResidualU_du[nDOF_v_trial_element], const double dpdeResidualV_dp[nDOF_trial_element], const double dpdeResidualV_dv[nDOF_v_trial_element], const double dpdeResidualW_dp[nDOF_trial_element], const double dpdeResidualW_dw[nDOF_v_trial_element], double dsubgridErrorP_du[nDOF_v_trial_element], double dsubgridErrorP_dv[nDOF_v_trial_element], double dsubgridErrorP_dw[nDOF_v_trial_element], double dsubgridErrorU_dp[nDOF_trial_element], double dsubgridErrorU_du[nDOF_v_trial_element], double dsubgridErrorV_dp[nDOF_trial_element], double dsubgridErrorV_dv[nDOF_v_trial_element], double dsubgridErrorW_dp[nDOF_trial_element], double dsubgridErrorW_dw[nDOF_v_trial_element])</argsstring>
        <name>calculateSubgridErrorDerivatives_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1548" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1548" bodyend="1588"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1acb733f0262d56a6ae583bf65304d689c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double &amp;bc_oneByRho, const double n[nSpace], const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double dham_grad[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double &amp;flux_wmom, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dham_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_wmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1591" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1591" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a454ae159330f6e647983bdb079b6b355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double n[nSpace], const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;dmom_u_acc_u, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double dham_grad[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_mass_dw, double &amp;dflux_umom_dp, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_umom_dw, double &amp;dflux_vmom_dp, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv, double &amp;dflux_vmom_dw, double &amp;dflux_wmom_dp, double &amp;dflux_wmom_du, double &amp;dflux_wmom_dv, double &amp;dflux_wmom_dw)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dham_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1762" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1762" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1acba9c3f8a455d85f9641568eb9179c1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="1967" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="1967" bodyend="2013"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1ad90bb42d5e55d84d815899c1fe03f558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="2017" column="16" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="2017" bodyend="2048"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a5d363ec4c2874bd2a2529fe58e91fe08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, double *numerical_viscosity, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *x_ref, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const double *eps_solid, double *phi_solid, const double *q_velocity_solid, const double *q_porosity, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, const double LAG_LES, double *q_eddy_viscosity, double *q_eddy_viscosity_last, double *ebqe_eddy_viscosity, double *ebqe_eddy_viscosity_last, int *p_l2g, int *vel_l2g, int *rp_l2g, int *rvel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *p_old_dof, double *u_old_dof, double *v_old_dof, double *w_old_dof, double *g, const double useVF, double *q_rho, double *vf, double *phi, double *phi_nodes, double *normal_phi, double *kappa_phi, double *q_mom_u_acc, double *q_mom_v_acc, double *q_mom_w_acc, double *q_mass_adv, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *q_cfl, double *q_numDiff_u, double *q_numDiff_v, double *q_numDiff_w, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, double *globalResidual, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_porosity_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, double *q_x, double *q_velocity, double *ebqe_velocity, double *flux, double *elementResidual_p_save, int *elementFlags, int *boundaryFlags, double *barycenters, double *wettedAreas, double *netForces_p, double *netForces_v, double *netMoments, double *velocityError, double *velocityErrorNodal, double *forcex, double *forcey, double *forcez, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, double *ball_center_acceleration, double *ball_angular_acceleration, double *ball_density, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double *ebq_global_phi_s, double *ebq_global_grad_phi_s, double *ebq_particle_velocity_s, int nParticles, double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, double *phi_solid_nodes, double *distance_to_solids, const int use_pseudo_penalty, bool useExact)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1a29ef6fa82e5b6789e006f5bce793d621">calculateResidual</reimplements>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rp_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rvel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementResidual_p_save</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityError</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityErrorNodal</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="2050" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="2050" bodyend="3885"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a9310eeb0997fe82a925920a3180e8127" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *x_ref, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const double *eps_solid, const double *phi_solid, const double *q_velocity_solid, const double *q_porosity, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, const double LAG_LES, double *q_eddy_viscosity_last, double *ebqe_eddy_viscosity_last, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *p_old_dof, double *u_old_dof, double *v_old_dof, double *w_old_dof, double *g, const double useVF, double *vf, double *phi, double *phi_nodes, double *normal_phi, double *kappa_phi, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *q_cfl, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_p_u, int *csrColumnOffsets_p_u, int *csrRowIndeces_p_v, int *csrColumnOffsets_p_v, int *csrRowIndeces_p_w, int *csrColumnOffsets_p_w, int *csrRowIndeces_u_p, int *csrColumnOffsets_u_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_u_v, int *csrColumnOffsets_u_v, int *csrRowIndeces_u_w, int *csrColumnOffsets_u_w, int *csrRowIndeces_v_p, int *csrColumnOffsets_v_p, int *csrRowIndeces_v_u, int *csrColumnOffsets_v_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_v_w, int *csrColumnOffsets_v_w, int *csrRowIndeces_w_p, int *csrColumnOffsets_w_p, int *csrRowIndeces_w_u, int *csrColumnOffsets_w_u, int *csrRowIndeces_w_v, int *csrColumnOffsets_w_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *globalJacobian, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_porosity_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, int *csrColumnOffsets_eb_p_p, int *csrColumnOffsets_eb_p_u, int *csrColumnOffsets_eb_p_v, int *csrColumnOffsets_eb_p_w, int *csrColumnOffsets_eb_u_p, int *csrColumnOffsets_eb_u_u, int *csrColumnOffsets_eb_u_v, int *csrColumnOffsets_eb_u_w, int *csrColumnOffsets_eb_v_p, int *csrColumnOffsets_eb_v_u, int *csrColumnOffsets_eb_v_v, int *csrColumnOffsets_eb_v_w, int *csrColumnOffsets_eb_w_p, int *csrColumnOffsets_eb_w_u, int *csrColumnOffsets_eb_w_v, int *csrColumnOffsets_eb_w_w, int *elementFlags, int *boundaryFlags, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, double *ball_center_acceleration, double *ball_angular_acceleration, double *ball_density, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double *ebq_global_phi_s, double *ebq_global_grad_phi_s, double *ebq_particle_velocity_s, double *phi_solid_nodes, double *distance_to_solids, int nParticles, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, const int use_pseudo_penalty, bool useExact)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1ab98e23c023c0351873585cbc97791b67">calculateJacobian</reimplements>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="3887" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="3887" bodyend="5768"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a4c253b1030d69b63bb6d7898a02b44f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, int *interiorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *normal_ref, double *boundaryJac_ref, int *vel_l2g, double *u_dof, double *v_dof, double *w_dof, double *vel_trial_trace_ref, double *ebqe_velocity, double *velocityAverage)</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1a948e31f9f4907e309e8f13c469cbe786">calculateVelocityAverage</reimplements>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityAverage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="5770" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="5770" bodyend="5927"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a28ff654807fcf26817de1745733cd9bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPAdvectionCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;u, const double &amp;v, double dmass_adv_p[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace])</argsstring>
        <name>evaluateTPAdvectionCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="5929" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="5929" bodyend="5956"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a6912bf07c893b39d92f86946384e1e11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPInvViscosityMassCoefficients</definition>
        <argsstring>(const int use_numerical_viscosity, const double numerical_viscosity, const double eps_rho, const double eps_mu, const double rho_0, double nu_0, const double rho_1, double nu_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;p, const double &amp;u, const double &amp;v, double &amp;mom_p_acc, double &amp;dmom_p_acc_p, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v)</argsstring>
        <name>evaluateTPInvViscosityMassCoefficients</name>
        <param>
          <type>const int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_p_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_p_acc_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="5958" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="5958" bodyend="6001"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a0f6dfbc800e96aec404e86a417a60a23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPDensityMassCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;p, const double &amp;u, const double &amp;v, double &amp;mom_p_acc, double &amp;dmom_p_acc_p, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v)</argsstring>
        <name>evaluateTPDensityMassCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_p_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_p_acc_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="6003" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="6003" bodyend="6034"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a4e8113e559e9115502cb2095b749d2da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPInvDensityLaplaceCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, double mom_p_diff_ten[nSpace], double mom_u_diff_ten[nSpace], double mom_v_diff_ten[nSpace])</argsstring>
        <name>evaluateTPInvDensityLaplaceCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_p_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="6036" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="6036" bodyend="6062"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a1633ca8c969a28b56343baa17a5c23fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseAdvectionOperator</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *vel_trial_ref, double *vel_grad_trial_ref, double *elementDiameter, double *nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *vel_l2g, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *advection_matrix)</argsstring>
        <name>getTwoPhaseAdvectionOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1a9fdfc028ecb26472f1b229aae3931f25">getTwoPhaseAdvectionOperator</reimplements>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>advection_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="6064" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="6064" bodyend="6211"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1aa58dd67ffbf6beaacdcea58142a49361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseInvScaledLaplaceOperator</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_grad_trial_ref, double *vel_grad_trial_ref, double *elementDiameter, double *nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *sdInfo_p_p_rowptr, int *sdInfo_p_p_colind, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *laplace_matrix)</argsstring>
        <name>getTwoPhaseInvScaledLaplaceOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1af445d0a876dc146566ae5a465968811c">getTwoPhaseInvScaledLaplaceOperator</reimplements>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_p_p_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_p_p_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>laplace_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="6213" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="6213" bodyend="6383"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p2_d_1a945d50e0f1f3bad720971c769bcafb0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseScaledMassOperator</definition>
        <argsstring>(int scale_type, int use_numerical_viscosity, int lumped, double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, int *mesh_l2g, double *dV_ref, double *p_trial_ref, double *p_test_ref, double *vel_trial_ref, double *vel_test_ref, double *elementDiameter, double *nodeDiametersArray, double *numerical_viscosity, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, const double useVF, double *vf, double *phi, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *mass_matrix)</argsstring>
        <name>getTwoPhaseScaledMassOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p2_d__base_1aec4f0fffc0d4e6ebb758b782cd38f5e0">getTwoPhaseScaledMassOperator</reimplements>
        <param>
          <type>int</type>
          <declname>scale_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lumped</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mass_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="6385" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="6385" bodyend="6575"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>proteus::RANS2P2D_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p2_d__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>equivalent_polynomials::GeneralizedFunctions_mix&lt; nSpace, 1, nQuadraturePoints_element &gt;</label>
        <link refid="classequivalent__polynomials_1_1_generalized_functions__mix"/>
      </node>
      <node id="1">
        <label>proteus::RANS2P2D&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>gf_s</edgelabel>
          <edgelabel>gf</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>proteus::RANS2P2D_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p2_d__base"/>
      </node>
    </collaborationgraph>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" line="558" column="1" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS2P2D.h" bodystart="557" bodyend="6577"/>
    <listofallmembers>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a9310eeb0997fe82a925920a3180e8127" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a5d363ec4c2874bd2a2529fe58e91fe08" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ae29a5de34858ff304d2a11f134888f67" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1adc829cb674a9e56ac1ba54c617734cab" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a4d37202374d8ef1e9a89bf4ad00666cb" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>calculateSubgridError_tauRes</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1af95cfbe461879b61d7ad0a5f35e88e08" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>calculateSubgridErrorDerivatives_tauRes</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a4c253b1030d69b63bb6d7898a02b44f8" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ad5aa0e708b1831c881f6be0a2233e62f" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>ck</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1aef1aea6839dd8f40b4ecc6e2bdb65895" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>ck_v</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ad23409ee54411488bed4dffef67608d0" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a28ff654807fcf26817de1745733cd9bb" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>evaluateTPAdvectionCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a0f6dfbc800e96aec404e86a417a60a23" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>evaluateTPDensityMassCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a4e8113e559e9115502cb2095b749d2da" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>evaluateTPInvDensityLaplaceCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a6912bf07c893b39d92f86946384e1e11" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>evaluateTPInvViscosityMassCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1acb733f0262d56a6ae583bf65304d689c" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a454ae159330f6e647983bdb079b6b355" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1acba9c3f8a455d85f9641568eb9179c1e" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ad90bb42d5e55d84d815899c1fe03f558" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a8df5dc91b0ab71f7807be4b63db08209" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>get_acceleration_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a1a2239203e6fc4a97a8086dcaac057f5" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>get_distance_to_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1adfa567734ea1e6bd5df90aea10203181" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>get_distance_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1aea589875104b0751941f64ad1d9ce56b" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>get_normal_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ae0ea891a61f92f4c07070a2f18a14aa5" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>get_velocity_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a1633ca8c969a28b56343baa17a5c23fd" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>getTwoPhaseAdvectionOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1aa58dd67ffbf6beaacdcea58142a49361" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>getTwoPhaseInvScaledLaplaceOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a945d50e0f1f3bad720971c769bcafb0c" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>getTwoPhaseScaledMassOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a67dcd36995f396f5ee4578761dac2788" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>gf</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a13f99cef31c45d6c33ff549127ca27d3" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>gf_s</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1acb2cdc2ed65f4e14992d78e9c8a5eb75" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a59908f68086f5069801cf814a4051f97" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>nDOF_test_X_v_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a95c54d7ae3624721716a287fa0e6f383" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>nDOF_v_test_X_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a8d61edc565e143891b5ca5c5222b2093" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>nDOF_v_test_X_v_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1a83c4d09a2f95390f6e545cab40a49b6d" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>RANS2P2D</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1affb1c1858e4a989dab79519733b72c08" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>updateDarcyForchheimerTerms_Ergun</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ada1a427ed35aceaff1c175a1e30e60e0" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>updateSolidParticleTerms</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d_1ad5d69bd0c98c6da0dca7f825ab4f3edb" prot="public" virt="non-virtual"><scope>proteus::RANS2P2D</scope><name>updateTurbulenceClosure</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p2_d__base_1a774ac266500763494cc413b7552c4c98" prot="public" virt="virtual"><scope>proteus::RANS2P2D</scope><name>~RANS2P2D_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
