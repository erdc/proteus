<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="partitioning_8cpp" kind="file" language="C++">
    <compoundname>partitioning.cpp</compoundname>
    <includes refid="partitioning_8h" local="yes">partitioning.h</includes>
    <incdepgraph>
      <node id="14">
        <label>list</label>
      </node>
      <node id="4">
        <label>valarray</label>
      </node>
      <node id="15">
        <label>iomanip</label>
      </node>
      <node id="2">
        <label>partitioning.h</label>
        <link refid="partitioning_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cmath</label>
      </node>
      <node id="17">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="16">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>partitioning.cpp</label>
        <link refid="partitioning_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="7">
        <label>petsc.h</label>
      </node>
      <node id="6">
        <label>hdf5.h</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>petscsys.h</label>
      </node>
      <node id="19">
        <label>meshio.h</label>
        <link refid="meshio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mpi.h</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceproteus">proteus</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="partitioning_8cpp_1a4e76a9ce86d91fa75775a7ae3f8d3aa5" prot="public" static="no">
        <name>RANK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/partitioning.cpp" line="1739" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="partitioning_8h" kindref="compound">partitioning.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus" kindref="compound">proteus</ref></highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//todo<sp/>add<sp/>overlap<sp/>for<sp/>element<sp/>based<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespaceproteus_1add82470d4c0cfc04c1844575a09a3cc6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1add82470d4c0cfc04c1844575a09a3cc6" kindref="member">partitionElementsOriginal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_overlap)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Partition<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>&quot;default&quot;<sp/>partition<sp/>(contiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//chunks<sp/>in<sp/>given<sp/>ordering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Partition<sp/>the<sp/>elementNeighbors<sp/>based<sp/>on<sp/>this<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Pass<sp/>to<sp/>Parmetis<sp/>to<sp/>build<sp/>a<sp/>better<sp/>partition<sp/>of<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>Tag<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>nodes<sp/>on<sp/>the<sp/>subdomain<sp/>elements<sp/>as<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>a<sp/>mark<sp/>and<sp/>pass<sp/>approach.**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>Extract<sp/>the<sp/>nodes<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//overlapping<sp/>elements.**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Build<sp/>the<sp/>subdomain<sp/>mesh<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//subdomain<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//**To<sp/>be<sp/>more<sp/>general<sp/>we<sp/>could<sp/>get<sp/>all<sp/>the<sp/>support<sp/>(i.e.<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>edges)<sp/>and<sp/>partitiong<sp/>them,<sp/>but<sp/>the<sp/>main<sp/>reason<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//partitioning<sp/>is<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>a<sp/>global<sp/>numbering<sp/>for<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>freedom<sp/>that<sp/>live<sp/>on<sp/>each<sp/>type<sp/>of<sp/>geometric<sp/>entity.<sp/>We<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>node<sp/>and<sp/>element<sp/>based<sp/>DOFs<sp/>so<sp/>I<sp/>just<sp/>rebuild<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//information<sp/>once<sp/>we<sp/>have<sp/>elements<sp/>and<sp/>nodes<sp/>partitioned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\todo<sp/>check<sp/>that<sp/>I<sp/>restore<sp/>all<sp/>data<sp/>that<sp/>PETSc<sp/>expects<sp/>to<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>back,<sp/>add<sp/>PETSc<sp/>error<sp/>checking<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Build<sp/>default<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>offsets<sp/>so<sp/>we<sp/>can<sp/>calculate<sp/>the<sp/>processor<sp/>to<sp/>global<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>elements<sp/>in<sp/>the<sp/>old<sp/>(default)<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementOffsets_old(size+1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>elementOffsets_old[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_old[sdN+1]<sp/>=<sp/>elementOffsets_old[sdN]<sp/>+</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>)/size<sp/>+</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(int(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>)%size<sp/>&gt;<sp/>sdN);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Extract<sp/>subdomain<sp/>element<sp/>adjacency<sp/>information<sp/>could<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//only<sp/>the<sp/>required<sp/>portion<sp/>from<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_subdomain<sp/>=<sp/>(elementOffsets_old[rank+1]<sp/>-<sp/>elementOffsets_old[rank]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>PetscInt<sp/>*elementNeighborsOffsets_subdomain,*elementNeighbors_subdomain,*weights_subdomain;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain+1),&amp;elementNeighborsOffsets_subdomain);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),&amp;elementNeighbors_subdomain);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),&amp;weights_subdomain);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this<sp/>wastes<sp/>a<sp/>little<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>elementNeighborsOffsets_subdomain[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0,offset=0;<sp/>eN<sp/>&lt;<sp/>nElements_subdomain;<sp/>eN++)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>elementOffsets_old[rank]<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offsetStart=offset;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_neighbor_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_neighbor_global<sp/>&gt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighbors_subdomain[offset++]<sp/>=<sp/>eN_neighbor_global;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsOffsets_subdomain[eN+1]=offset;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sort(&amp;elementNeighbors_subdomain[offsetStart],&amp;elementNeighbors_subdomain[offset]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>(elementNeighborsOffsets_subdomain[eN+1]<sp/>-<sp/>elementNeighborsOffsets_subdomain[eN]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=elementNeighborsOffsets_subdomain[eN];k<sp/>&lt;<sp/>elementNeighborsOffsets_subdomain[eN+1];k++)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_subdomain[k]<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>o<sp/>=<sp/>offsetStart;<sp/>o<sp/>&lt;<sp/>offset;<sp/>o++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;elementNeighbors_subdomain[o]&lt;&lt;&apos;\t&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Generate<sp/>the<sp/><sp/>new<sp/>partitiong<sp/>using<sp/>PETSc,<sp/>this<sp/>is<sp/>done<sp/>in<sp/>parallel<sp/>using<sp/>parmetis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>Mat<sp/>petscAdjacency;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain,<sp/>mesh.nElements_global,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;elementNeighborsOffsets_subdomain[0],<sp/>&amp;elementNeighbors_subdomain[0],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;weights_subdomain[0],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsOffsets_subdomain,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighbors_subdomain,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSC_NULL,</highlight><highlight class="comment">//weights_subdomain,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>MatPartitioning<sp/>petscPartition;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>MatPartitioningCreate(PROTEUS_COMM_WORLD,&amp;petscPartition);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>MatPartitioningSetAdjacency(petscPartition,petscAdjacency);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>MatPartitioningSetFromOptions(petscPartition);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>a<sp/>petsc<sp/>index<sp/>set<sp/>that<sp/>has<sp/>the<sp/>new<sp/>submdomain<sp/>number<sp/>for<sp/>each<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>IS<sp/>elementPartitioningIS_new;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>MatPartitioningApply(petscPartition,&amp;elementPartitioningIS_new);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>MatPartitioningDestroy(&amp;petscPartition);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//MatDestroy(petscAdjacency);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ISView(elementPartitioningIS_new,PETSC_VIEWER_STDOUT_WORLD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//experiment<sp/>with<sp/>metis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>set<sp/>some<sp/>defaults<sp/>and<sp/>not<sp/>call<sp/>if<sp/>size<sp/>==<sp/>1<sp/>since<sp/>metis<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cek<sp/>commenting<sp/>out<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>etype=1,edgecut=0,base=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//epart<sp/>assign<sp/>everything<sp/>to<sp/>processor<sp/>zero<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//valarray&lt;int&gt;<sp/>epart(0,mesh.nElements_global),npart(mesh.nNodes_global);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(size<sp/>&gt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>METIS_PartMeshNodal(&amp;mesh.nElements_global,&amp;mesh.nNodes_global,mesh.elementNodesArray,&amp;etype,&amp;base,&amp;size,&amp;edgecut,&amp;epart[0],&amp;npart[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ISCreateGeneralWithArray(PETSC_COMM_SELF,mesh.nElements_global,&amp;epart[0],&amp;elementPartitioningIS_new);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>mesh<sp/>to<sp/>view<sp/>with<sp/>showme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>nodeout(&quot;mesh.node&quot;),eleout(&quot;mesh.ele&quot;),partout(&quot;mesh.part&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;<sp/>3<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;\t&quot;&lt;&lt;size&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eN=0;eN&lt;mesh.nElements_global;eN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[eN])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eleout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>nodeout&lt;&lt;mesh.nNodes_global&lt;&lt;&quot;<sp/>2<sp/>0<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN=0;nN&lt;mesh.nNodes_global;nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>nodeout&lt;&lt;(nN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;mesh.nodeArray[nN*3+0]&lt;&lt;&quot;\t&quot;&lt;&lt;mesh.nodeArray[nN*3+1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//count<sp/>the<sp/>new<sp/>number<sp/>of<sp/>elements<sp/>on<sp/>each<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new(size);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ISPartitioningCount(elementPartitioningIS_new,size,&amp;nElements_subdomain_new[0]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>offsets<sp/>for<sp/>the<sp/>subdomain<sp/>to<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementOffsets_new(size+1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>elementOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new[sdN+1]<sp/>=<sp/>elementOffsets_new[sdN]<sp/>+<sp/>nElements_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>element<sp/>numbers<sp/>for<sp/>the<sp/>elements<sp/>on<sp/>this<sp/><sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_subdomain_old2new;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>ISPartitioningToNumbering(elementPartitioningIS_new,&amp;elementNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>the<sp/>new<sp/>element<sp/>numbers<sp/>for<sp/>the<sp/>whole<sp/>mesh<sp/>so<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//can<sp/>just<sp/>read<sp/>this<sp/>processors<sp/>elements,<sp/>reorder,<sp/>and<sp/>renumber**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//**We<sp/>could<sp/>do<sp/>this<sp/>in<sp/>parallel<sp/>by<sp/>scattering<sp/>all<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_global_old2new;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>ISAllGather(elementNumberingIS_subdomain_old2new,&amp;elementNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ISView(elementNumberingIS_global_old2new,PETSC_VIEWER_STDOUT_SELF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementNumbering_global_old2new;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>ISGetIndices(elementNumberingIS_global_old2new,&amp;elementNumbering_global_old2new);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_global_new2old(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>elementNumbering_global_new2old[elementNumbering_global_old2new[eN]]<sp/>=<sp/>eN;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>element<sp/>based<sp/>arrays,<sp/>maybe<sp/>I<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this,<sp/>maybe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//I<sp/>just<sp/>need<sp/>to<sp/>start<sp/>writing<sp/>into<sp/>the<sp/>subdomain<sp/>mesh<sp/>here<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//preserve<sp/>subdomain2old<sp/>and<sp/>subdomain2global<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNodesArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>elementNeighborsArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>elementMaterialTypes_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryNodesArray_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeNodesArray_new(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryMaterialTypes_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]<sp/>=</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementMaterialTypes_new[eN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[elementNumbering_global_new2old[eN]];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//renumber<sp/>references<sp/>to<sp/>element<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_global_old2new[eN_ebN];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_L_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN*2+0],</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_R_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN*2+1];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new[ebN*2+0]<sp/>=<sp/>elementNumbering_global_old2new[eN_L_old];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eN_R_old<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new[ebN*2+1]<sp/>=<sp/>elementNumbering_global_old2new[eN_R_old];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>assume<sp/>same<sp/>numbering<sp/>scheme<sp/>for<sp/>element<sp/>boundaries<sp/>for<sp/>now?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryMaterialTypes_new[ebN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>now<sp/>we<sp/>need<sp/>to<sp/>build<sp/>a<sp/>new<sp/>node<sp/>ordering<sp/>with<sp/>better<sp/>data<sp/>locality<sp/>for<sp/>C0<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//otherwise<sp/>we<sp/>could<sp/>just<sp/>grab<sp/>the<sp/>nodes<sp/>on<sp/>the<sp/>subdomain<sp/>and<sp/>not<sp/>worry<sp/>about<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in<sp/>the<sp/>long<sp/>run<sp/>it<sp/>wouldn&apos;t<sp/>be<sp/>bad<sp/>to<sp/>do<sp/>a<sp/>global<sp/>repartition<sp/>of<sp/>faces<sp/>and<sp/>edges<sp/>for<sp/>mixed<sp/>hybrid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>non-conforming<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>PetscBT<sp/>nodeMask;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>,&amp;nodeMask);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(nodeMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>nodes<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>the<sp/>node<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>nodes_subdomain_owned;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PetscBTLookupSet(nodeMask,nN_global))</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_subdomain_owned.insert(nN_global);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ship<sp/>off<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(nodeMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;nodeMask);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new(size),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain_new[sdN]<sp/>=<sp/>nodes_subdomain_owned.size();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new_send=nNodes_subdomain_new;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nNodes_subdomain_new_send[0],&amp;nNodes_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>nodeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeOffsets_new[sdN+1]<sp/>=<sp/>nodeOffsets_new[sdN]+nNodes_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elements<sp/>build<sp/>a<sp/>global<sp/>node<sp/>numbering,<sp/>sort<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//based<sp/>information,<sp/>and<sp/>renumber<sp/>references<sp/>to<sp/>node<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_new2old(nodes_subdomain_owned.size());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_ownedp=nodes_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;int(nodes_subdomain_owned.size());nN++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_new2old[nN]<sp/>=<sp/>*nN_ownedp++;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_new2old;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nodes_subdomain_owned.size(),&amp;nodeNumbering_new2old[0],PETSC_COPY_VALUES,&amp;nodeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>ISAllGather(nodeNumberingIS_new2old,&amp;nodeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*nodeNumbering_global_new2old;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_old2new_global(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ISGetIndices(nodeNumberingIS_global_new2old,&amp;nodeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_old2new_global[nodeNumbering_global_new2old[nN]]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_old<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;i++)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNodesArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2;i++)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[i];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarArray_new(mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];i++)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[i];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeStarArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>valarray&lt;double&gt;<sp/>nodeArray_new(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/><sp/>nodeMaterialTypes_new(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_new<sp/>=<sp/>nodeNumbering_old2new_global[nN];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeMaterialTypes_new[nN_new]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>partitioned<sp/>mesh<sp/>to<sp/>view<sp/>with<sp/>&quot;showme&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>nodeout(&quot;mesh.node&quot;),eleout(&quot;mesh.ele&quot;),partout(&quot;mesh.part&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;<sp/>3<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;\t&quot;&lt;&lt;size&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eN=0;eN&lt;mesh.nElements_global;eN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[elementNumbering_global_new2old[eN]])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[eN])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eleout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>nodeout&lt;&lt;mesh.nNodes_global&lt;&lt;&quot;<sp/>2<sp/>0<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN=0;nN&lt;mesh.nNodes_global;nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>nodeout&lt;&lt;(nN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;nodeArray_new[nN*3+0]&lt;&lt;&quot;\t&quot;&lt;&lt;nodeArray_new[nN*3+1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>At<sp/>this<sp/>point<sp/>we<sp/>have<sp/>new,<sp/>renumbered<sp/>and<sp/>sorted<sp/>the<sp/>global<sp/>element<sp/>and<sp/>node<sp/>based<sp/>information,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>have<sp/>it<sp/>all<sp/>on<sp/>each<sp/>processor<sp/>so<sp/>we<sp/>can<sp/>add<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_overlap,nodes_overlap;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nElements_overlap<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>node<sp/>stars<sp/>and<sp/>their<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>nN_new=nodeOffsets_new[rank];<sp/>nN_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN_new++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>nN<sp/>=<sp/>nodeNumbering_global_new2old[nN_new];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>offset<sp/>=mesh.nodeElementOffsets[nN];offset&lt;mesh.nodeElementOffsets[nN+1];offset++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>eN<sp/>=<sp/>mesh.nodeElementsArray[offset];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>eN_new<sp/>=<sp/>elementNumbering_global_old2new[eN];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eN_new<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>or<sp/>eN_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_new);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN_element=0;nN_element&lt;mesh.nNodes_element;nN_element++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.nNodes_element+nN_element];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>or<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>node<sp/>stars<sp/>of<sp/>owned<sp/>nodes<sp/>and<sp/>those<sp/>elements&apos;<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN=nodes_subdomain_owned.begin();nN<sp/>!=<sp/>nodes_subdomain_owned.end();nN++)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[*nN];offset&lt;mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[(*nN)+1];offset++)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_new<sp/>=<sp/>elementNumbering_global_old2new[eN];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_new<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>or<sp/>eN_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_new);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_element=0;nN_element&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN_element++)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN_element];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>or<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>the<sp/>element<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eN_ebN<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>||<sp/>eN_ebN<sp/>&gt;=<sp/>elementOffsets_new[rank+1]))</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_ebN);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer=1;layer&lt;nElements_overlap;layer++)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>eN_p=elements_overlap.begin();eN_p<sp/>!=<sp/>elements_overlap.end();eN_p++)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>*eN_p;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eN_ebN<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>||<sp/>eN_ebN<sp/>&gt;=<sp/>elementOffsets_new[rank+1]))</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_ebN);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Now<sp/>build<sp/>subdomain<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>what<sp/>we<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>elements_overlap.size();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>=<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>nodes_overlap.size();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//load<sp/>the<sp/>elements<sp/>and<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>nodeNumbering_global2subdomain;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;nNodes_subdomain_new[rank];nN++)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>nN<sp/>+<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>nodeArray_new[nN_global*3+0];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>nodeArray_new[nN_global*3+1];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>nodeArray_new[nN_global*3+2];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]=<sp/>nodeMaterialTypes_new[nN_global];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//note:<sp/>sets<sp/>in<sp/>C++<sp/>are<sp/>sorted<sp/>so<sp/>the<sp/>overlap<sp/>is<sp/>laid<sp/>out<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//contiguous<sp/>chunks<sp/>corresponding<sp/>to<sp/>the<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_p=nodes_overlap.begin();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=nNodes_subdomain_new[rank];nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>int(nodes_overlap.size());<sp/>nN++)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>*nN_p++;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>nodeArray_new[nN_global*3+0];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>nodeArray_new[nN_global*3+1];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>nodeArray_new[nN_global*3+2];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]=<sp/>nodeMaterialTypes_new[nN_global];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>];</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;nElements_subdomain_new[rank];eN++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>eN+elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypes_new[eN_global];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[elementNodesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_p=elements_overlap.begin();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=nElements_subdomain_new[rank];eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]+int(elements_overlap.size());eN++)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>*eN_p++;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypes_new[eN_global];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[elementNodesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga0ca99f07f47c3775a54c126aa5b1cace" kindref="member">constructElementBoundaryElementsArray_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga8b4def6a8ea5675441b05b5a7061713b" kindref="member">allocateGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga88041ad8d6afe29f23c6e30837b777db" kindref="member">computeGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga99583103d5f83c1d3b073b917c782d69" kindref="member">constructElementBoundaryElementsArray_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga1ad1cf0d175b08dec8e1ed161e065295" kindref="member">allocateGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaad90ffdf6bb84d92b74bf824f8662a4b" kindref="member">computeGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga82076ed1124688014a6bc263ac24d3ae" kindref="member">constructElementBoundaryElementsArray_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gad97db4b6e238c242afedd5fa8b914e3e" kindref="member">allocateGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaff191b3e806b335cd6d0916218132c96" kindref="member">computeGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwftodo<sp/>need<sp/>to<sp/>copy<sp/>over<sp/>elementBoundaryMaterialTypes<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_element<sp/>=<sp/>0;<sp/>ebN_element<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN_element++)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN_global_old*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_subdomain]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_global_old];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>we&apos;ve<sp/>got<sp/>the<sp/>old<sp/>mesh<sp/>in<sp/>the<sp/>old<sp/>ordering<sp/>and<sp/>the<sp/>subdomain<sp/>mesh<sp/>in<sp/>the<sp/>new<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>first<sp/>chunk<sp/>of<sp/>nodes<sp/>and<sp/>elements<sp/>are<sp/>the<sp/>owned<sp/>elements<sp/>so<sp/>we<sp/>need<sp/>to<sp/>know<sp/>how<sp/>many<sp/>of<sp/>those<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>first<sp/>one<sp/>so<sp/>we<sp/>can<sp/>compute<sp/>subdomain2global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size+1;sdN++)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>nodeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementOffsets_new[sdN];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>also<sp/>need<sp/>the<sp/>subdomain<sp/>2<sp/>new<sp/>global<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[nN]<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>[eN]<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementNumberingIS_global_old2new,&amp;elementNumbering_global_old2new);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementPartitioningIS_new);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>ISRestoreIndices(nodeNumberingIS_global_new2old,&amp;nodeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="namespaceproteus_1ad76a320dedee422e8e0064e7dd9d0912" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1ad76a320dedee422e8e0064e7dd9d0912" kindref="member">partitionNodes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_overlap)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/***********************************************************************</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/>partition<sp/>domain<sp/>based<sp/>on<sp/>nodes<sp/>rather<sp/>than<sp/>elements,<sp/>basically<sp/>repeats</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/>partitionElements<sp/>with<sp/>this<sp/>one<sp/>modification</highlight></codeline>
<codeline lineno="549"><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/>right<sp/>now<sp/>generates<sp/>equivalent<sp/>of<sp/>1<sp/>layer<sp/>of<sp/>overlap<sp/>regardless<sp/>of<sp/>input</highlight></codeline>
<codeline lineno="551"><highlight class="comment"></highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>Partition<sp/>nodes<sp/>in<sp/>the<sp/>default<sp/>partition<sp/>of<sp/>contiguous<sp/>chunks<sp/>with</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>ordering</highlight></codeline>
<codeline lineno="554"><highlight class="comment"></highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Determine<sp/>nodal<sp/>connectivity<sp/>on<sp/>local<sp/>processor</highlight></codeline>
<codeline lineno="556"><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>Generate<sp/>new<sp/>nodal<sp/>partition<sp/>using<sp/>PETSc<sp/>interface</highlight></codeline>
<codeline lineno="558"><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/>4.<sp/>Collect<sp/>elements<sp/>containing<sp/>locally<sp/>owned<sp/>nodes<sp/>and<sp/>assign<sp/>ownership</highlight></codeline>
<codeline lineno="560"><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>5.<sp/>Generate<sp/>global<sp/>element<sp/>numbering<sp/>for<sp/>new<sp/>subdomain<sp/>ownership</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/>6.<sp/>Create<sp/>overlap<sp/>(ghost)<sp/>information<sp/>for<sp/>nodes<sp/>and<sp/>elements</highlight></codeline>
<codeline lineno="564"><highlight class="comment"></highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/>7.<sp/>March<sp/>through<sp/>additional<sp/>layers<sp/>of<sp/>overlap<sp/>if<sp/>requested,</highlight></codeline>
<codeline lineno="566"><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>8.<sp/>Build<sp/>subdomain<sp/>meshes<sp/>in<sp/>new<sp/>numbering</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/>***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Build<sp/>default<sp/>nodal<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//compute<sp/>offsets<sp/>to<sp/>build<sp/>processor<sp/>(local)<sp/>to<sp/>global<sp/>ordering<sp/>for<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in<sp/>default<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeOffsets_old(size+1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>nodeOffsets_old[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeOffsets_old[sdN+1]<sp/>=<sp/>nodeOffsets_old[sdN]<sp/>+</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>)/size<sp/>+<sp/>(int(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>)%size<sp/>&gt;<sp/>sdN);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Determine<sp/>nodal<sp/>connectivity<sp/>on<sp/>local<sp/>processor,<sp/>(local<sp/>node<sp/>star<sp/>array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_subdomain<sp/>=<sp/>(nodeOffsets_old[rank+1]<sp/>-<sp/>nodeOffsets_old[rank]);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>PetscInt<sp/>*nodeNeighborsOffsets_subdomain,*nodeNeighbors_subdomain,*weights_subdomain;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain+1),&amp;nodeNeighborsOffsets_subdomain);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>),&amp;nodeNeighbors_subdomain);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>),&amp;weights_subdomain);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>nodeNeighborsOffsets_subdomain[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0,offset=0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain;<sp/>nN++)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>nodeOffsets_old[rank]<sp/>+<sp/>nN;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_global<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global+1];<sp/>offset_global++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighbors_subdomain[offset++]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[offset_global];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighborsOffsets_subdomain[nN+1]=offset;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sort(&amp;nodeNeighbors_subdomain[nodeNeighborsOffsets_subdomain[nN]],&amp;nodeNeighbors_subdomain[nodeNeighborsOffsets_subdomain[nN+1]]);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight=<sp/>(nodeNeighborsOffsets_subdomain[nN+1]<sp/>-<sp/>nodeNeighborsOffsets_subdomain[nN]);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=nodeNeighborsOffsets_subdomain[nN];k&lt;nodeNeighborsOffsets_subdomain[nN+1];k++)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_subdomain[k]<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Generate<sp/>new<sp/>nodal<sp/>partition<sp/>using<sp/>PETSc<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>Mat<sp/>petscAdjacency;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain,<sp/>mesh.nNodes_global,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;nodeNeighborsOffsets_subdomain[0],<sp/>&amp;nodeNeighbors_subdomain[0],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;weights_subdomain[0],//PETSC_NULL,//ignore<sp/>weighting<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighborsOffsets_subdomain,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighbors_subdomain,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSC_NULL,</highlight><highlight class="comment">//weights_subdomain,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>MatPartitioning<sp/>petscPartition;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>MatPartitioningCreate(PROTEUS_COMM_WORLD,&amp;petscPartition);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>MatPartitioningSetAdjacency(petscPartition,petscAdjacency);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>MatPartitioningSetFromOptions(petscPartition);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>petsc<sp/>index<sp/>set<sp/>that<sp/>has<sp/>the<sp/>new<sp/>subdomain<sp/>number<sp/>for<sp/>each<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>IS<sp/>nodePartitioningIS_new;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>MatPartitioningApply(petscPartition,&amp;nodePartitioningIS_new);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>MatPartitioningDestroy(&amp;petscPartition);<sp/></highlight><highlight class="comment">//gets<sp/>petscAdjacency<sp/>too<sp/>I<sp/>believe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//determine<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>per<sp/>subdomain<sp/>in<sp/>new<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new(size);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>ISPartitioningCount(nodePartitioningIS_new,size,&amp;nNodes_subdomain_new[0]);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>new<sp/>offsets<sp/>for<sp/>subdomain<sp/>to<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>nodeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeOffsets_new[sdN+1]<sp/>=<sp/>nodeOffsets_new[sdN]<sp/>+<sp/>nNodes_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>node<sp/>numbers<sp/>for<sp/>nodes<sp/>on<sp/>this<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_subdomain_old2new;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>ISPartitioningToNumbering(nodePartitioningIS_new,&amp;nodeNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//collect<sp/>new<sp/>node<sp/>numbers<sp/>for<sp/>whole<sp/>mesh<sp/>so<sp/>that<sp/>subdomain<sp/>reordering<sp/>and<sp/>renumbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//can<sp/>be<sp/>done<sp/>easily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_global_old2new;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>ISAllGather(nodeNumberingIS_subdomain_old2new,&amp;nodeNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>original<sp/>and<sp/>correct<sp/>I<sp/>believe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*<sp/>nodeNumbering_global_old2new;</highlight><highlight class="comment">//needs<sp/>restore<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>ISGetIndices(nodeNumberingIS_global_old2new,&amp;nodeNumbering_global_old2new);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reverse<sp/>mapping<sp/>for<sp/>node<sp/>numbers<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_global_new2old(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeNumbering_global_new2old[nodeNumbering_global_old2new[nN]]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;partitionNodes<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nodeOffset[&quot;&lt;&lt;sdN&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;nodeOffsets_new[sdN]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.nNodes_global;<sp/>nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;partitionNodes<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>old2new=<sp/>&quot;&lt;&lt;nodeNumbering_global_old2new[nN]&lt;&lt;&quot;<sp/>new2old=<sp/>&quot;&lt;&lt;nodeNumbering_global_new2old[nN]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;============&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;partitionNodes<sp/>rank=<sp/>&quot;&lt;&lt;sdN&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nodeOffsets_new[sdN+1]-nodeOffsets_new[sdN]&lt;&lt;&quot;<sp/>=<sp/>&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN<sp/>=<sp/>nodeOffsets_new[sdN];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[sdN+1];<sp/>nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;new<sp/>number=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>&lt;--&gt;<sp/>old<sp/>number<sp/>&quot;&lt;&lt;nodeNumbering_global_new2old[nN]&lt;&lt;&quot;<sp/>x,y,z=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;mesh.nodeArray[nodeNumbering_global_new2old[nN]*3+0]&lt;&lt;&quot;<sp/>,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;mesh.nodeArray[nodeNumbering_global_new2old[nN]*3+1]&lt;&lt;&quot;<sp/>,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;mesh.nodeArray[nodeNumbering_global_new2old[nN]*3+2]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>To<sp/>build<sp/>subdomain<sp/>meshes,<sp/>go<sp/>through<sp/>and<sp/>collect<sp/>elements<sp/>containing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>locally<sp/>owned<sp/>nodes.<sp/>Assign<sp/>processor<sp/>ownership<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>PetscBT<sp/>elementMask;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>,&amp;elementMask);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>owned<sp/>element<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(elementMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>elements<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>element<sp/>numbers<sp/>(in<sp/>old<sp/>numbering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_subdomain_owned;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nodeOffsets_new[rank];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN++)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_offset<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star_offset<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old+1];<sp/>eN_star_offset++)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[eN_star_offset];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PetscBTLookupSet(elementMask,eN_star_old))</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_subdomain_owned.insert(eN_star_old);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>nN<sp/>=<sp/><sp/>nodeOffsets_new[rank];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nElements_owned_nN<sp/>=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eN_star_offset<sp/>=<sp/>mesh.nodeElementOffsets[nN_global_old];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star_offset<sp/>&lt;<sp/>mesh.nodeElementOffsets[nN_global_old+1];<sp/>eN_star_offset++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>eN_star_old<sp/>=<sp/>mesh.nodeElementsArray[eN_star_offset];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(elements_subdomain_owned.find(eN_star_old)<sp/>!=<sp/>elements_subdomain_owned.end())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_owned_nN++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nElements_owned_nN<sp/>&lt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Problem?<sp/>proc<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN_new<sp/>=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>nN_old=<sp/>&quot;&lt;&lt;nN_global_old&lt;&lt;&quot;<sp/>nElements_owned_for_nN<sp/>=<sp/>&quot;&lt;&lt;nElements_owned_nN&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//find<sp/>out<sp/>processor<sp/>owners<sp/>for<sp/>node<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>offset<sp/>=<sp/>mesh.nodeStarOffsets[nN_global_old];<sp/>offset<sp/>&lt;<sp/>mesh.nodeStarOffsets[nN_global_old+1];<sp/>offset++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nN_neig_old<sp/>=<sp/>mesh.nodeStarArray[offset];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\t<sp/>neig<sp/>node<sp/>old<sp/>&quot;&lt;&lt;nN_neig_old&lt;&lt;&quot;<sp/>neig<sp/>node<sp/>new<sp/>&quot;&lt;&lt;nodeNumbering_global_old2new[nN_neig_old]&lt;&lt;&quot;<sp/>this<sp/>proc<sp/>offsets=<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;nodeOffsets_new[rank]&lt;&lt;&quot;,&quot;&lt;&lt;nodeOffsets_new[rank+1]&lt;&lt;&quot;];&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//pass<sp/>off<sp/>newly<sp/>marked<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(elementMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;elementMask);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>Generate<sp/>global<sp/>element<sp/>numbering<sp/>corresponding<sp/>to<sp/>new<sp/>subdomain<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new(size),</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new(size+1);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain_new[sdN]<sp/>=<sp/>int(elements_subdomain_owned.size());</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new_send<sp/>=<sp/>nElements_subdomain_new;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElements_subdomain_new_send[0],&amp;nElements_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//new<sp/>size<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>elementOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new[sdN+1]<sp/>=<sp/>elementOffsets_new[sdN]<sp/>+<sp/>nElements_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//map<sp/>to<sp/>old<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain_new2old(elements_subdomain_owned.size());</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_ownedp<sp/>=<sp/>elements_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>int(elements_subdomain_owned.size());<sp/>eN++)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain_new2old[eN]<sp/>=<sp/>*eN_ownedp++;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//use<sp/>Petsc<sp/>IS<sp/>to<sp/>get<sp/>global<sp/>new2old<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,elements_subdomain_owned.size(),&amp;elementNumbering_subdomain_new2old[0],PETSC_COPY_VALUES,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;elementNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>ISAllGather(elementNumberingIS_subdomain_new2old,&amp;elementNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementNumbering_global_new2old;</highlight><highlight class="comment">//needs<sp/>to<sp/>be<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>ISGetIndices(elementNumberingIS_global_new2old,&amp;elementNumbering_global_new2old);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reverse<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_global_old2new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_global_old2new[elementNumbering_global_new2old[eN]]<sp/>=<sp/>eN;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4b,5b.<sp/>repeat<sp/>process<sp/>to<sp/>build<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>get<sp/>element<sp/>--&gt;<sp/>element<sp/>boundaries<sp/>array<sp/>for<sp/>new<sp/>element<sp/>but<sp/>old<sp/>element<sp/>boundary<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundariesArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status_elementBoundaries;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>PetscBT<sp/>elementBoundaryMask;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>,&amp;elementBoundaryMask);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(elementBoundaryMask,PetscBTLength(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status_elementBoundaries);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>faces<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>the<sp/>global<sp/>face<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//going<sp/>through<sp/>owned<sp/>elements<sp/>can<sp/>pick<sp/>up<sp/>owned<sp/>elementBoundaries<sp/>on<sp/>&quot;outside&quot;<sp/>of<sp/>owned<sp/>nodes<sp/>nodeStars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elementBoundaries_subdomain_owned;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lface[6][4]<sp/>=<sp/>{{0,1,2,3},</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,1,5,4},</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,2,6,5},</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,3,7,6},</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,0,4,7},</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,5,6,7}};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nodeOffsets_new[rank];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN++)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN];</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>elements<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_new<sp/>=<sp/>elementNumbering_global_old2new[eN_star_old];</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>element<sp/>boundaries<sp/>on<sp/>each<sp/>element,<sp/>want<sp/>but<sp/>want<sp/>to<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>element<sp/>boundary<sp/>across<sp/>from<sp/>the<sp/>owned<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundNode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNl=0;<sp/>nNl&lt;mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>;nNl++)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old_across<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>lface[ebN][nNl]];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_old_across<sp/>==<sp/>nN_global_old)<sp/>foundNode<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foundNode)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_star_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PetscBTLookupSet(elementBoundaryMask,ebN_global))</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_subdomain_owned.insert(ebN_global);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nodeOffsets_new[rank];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN++)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>elements<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_new<sp/>=<sp/>elementNumbering_global_old2new[eN_star_old];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>element<sp/>boundaries<sp/>on<sp/>each<sp/>element,<sp/>want<sp/>but<sp/>want<sp/>to<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>element<sp/>boundary<sp/>across<sp/>from<sp/>the<sp/>owned<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old_across<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+ebN];</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_old_across<sp/>!=<sp/>nN_global_old)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_star_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PetscBTLookupSet(elementBoundaryMask,ebN_global))</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_subdomain_owned.insert(ebN_global);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ship<sp/>off<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(elementBoundaryMask,PetscBTLength(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;elementBoundaryMask);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy<sp/>for<sp/>elementBoundaries&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>elementBoundaries<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new(size),</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new(size+1);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>elementBoundaries_subdomain_owned.size();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new_send=nElementBoundaries_subdomain_new;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElementBoundaries_subdomain_new_send[0],&amp;nElementBoundaries_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>elementBoundaryOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new[sdN+1]<sp/>=<sp/>elementBoundaryOffsets_new[sdN]+nElementBoundaries_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elements<sp/>and<sp/>nodes<sp/>build<sp/>a<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//resetting<sp/>the<sp/>face<sp/>based<sp/>information<sp/>is<sp/>a<sp/>little<sp/>different<sp/>since<sp/>much<sp/>of<sp/>this<sp/>is<sp/>currently<sp/>built<sp/>below<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>element<sp/>and<sp/>node<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_new2old(elementBoundaries_subdomain_owned.size());</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_ownedp=elementBoundaries_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;int(elementBoundaries_subdomain_owned.size());ebN++)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_new2old[ebN]<sp/>=<sp/>*ebN_ownedp++;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,elementBoundaries_subdomain_owned.size(),&amp;elementBoundaryNumbering_new2old[0],PETSC_COPY_VALUES,&amp;elementBoundaryNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>ISAllGather(elementBoundaryNumberingIS_subdomain_new2old,&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementBoundaryNumbering_global_new2old;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_old2new_global(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>ISGetIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_old2new_global[elementBoundaryNumbering_global_new2old[ebN]]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_old;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_old<sp/>=<sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=<sp/>elementBoundaryNumbering_old2new_global[ebN_old];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4c,5c.<sp/>Build<sp/>global<sp/>edge<sp/>numbering<sp/>as<sp/>well<sp/>ownership<sp/>is<sp/>determined<sp/>by<sp/>who<sp/>owns<sp/>the<sp/>left<sp/>(0)<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>of<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>nodesEdgeMap_global;<sp/></highlight><highlight class="comment">//new<sp/>global<sp/>node<sp/>numbers<sp/>--&gt;<sp/>original<sp/>edge<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>edges_subdomain_owned;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>0;<sp/>ig<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>ig++)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*ig];</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*ig+1];</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN0_global_old];</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN1_global_old];</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN0_global;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN1_global;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_global[et]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeOffsets_new[rank]<sp/>&lt;=<sp/>et.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[0]<sp/>&amp;&amp;<sp/>et.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[0]<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_subdomain_owned.insert(ig);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new(size),</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>edges_subdomain_owned.size();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//collect<sp/>ownership<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new_send=nEdges_subdomain_new;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nEdges_subdomain_new_send[0],&amp;nEdges_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>edgeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new[sdN+1]<sp/>=<sp/>edgeOffsets_new[sdN]+nEdges_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>new<sp/>petsc<sp/>numbering<sp/>and<sp/>global<sp/>maps<sp/>from<sp/>old2new<sp/>and<sp/>new2old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_new2old(edges_subdomain_owned.size());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edges_ownedp<sp/>=<sp/>edges_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>int(edges_subdomain_owned.size());i++)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeNumbering_new2old[i]<sp/>=<sp/>*edges_ownedp++;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,edges_subdomain_owned.size(),&amp;edgeNumbering_new2old[0],PETSC_COPY_VALUES,&amp;edgeNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>ISAllGather(edgeNumberingIS_subdomain_new2old,&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*edgeNumbering_global_new2old;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_old2new_global(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>ISGetIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig=0;ig&lt;mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;ig++)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_old2new_global[edgeNumbering_global_new2old[ig]]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/><sp/>array<sp/>with<sp/>(new<sp/>edge)<sp/>--&gt;<sp/>(new<sp/>node<sp/>0,<sp/>new<sp/>node<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>map<sp/>from<sp/>(new<sp/>node<sp/>0,<sp/>new<sp/>node<sp/>1)<sp/>--&gt;<sp/>(new<sp/>global<sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNodesArray_newNodesAndEdges(2*mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;<sp/>nodesEdgeMap_global_new;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>0;<sp/>ig<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>ig++)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*ig];</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*ig+1];</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN0_global_old];</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN1_global_old];</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_new<sp/>=<sp/>edgeNumbering_old2new_global[ig];</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_newNodesAndEdges[edge_new*2+0]<sp/>=<sp/>nN0_global;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_newNodesAndEdges[edge_new*2+1]<sp/>=<sp/>nN1_global;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN0_global;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN1_global;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_global_new[et]<sp/>=<sp/>edge_new;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Figure<sp/>out<sp/>which<sp/>elements<sp/>are<sp/>in<sp/>node<sp/>stars<sp/>but<sp/>are<sp/>not<sp/>locally<sp/>owned,<sp/>create<sp/>ghost<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>these,<sp/>do<sp/>the<sp/>same<sp/>for<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_overlap,nodes_overlap,elementBoundaries_overlap,edges_overlap;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nodeOffsets_new[rank];<sp/>nN<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN++)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nodes<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_new<sp/>=<sp/>nodeNumbering_global_old2new[nN_neig_old];</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>nN_neig_new<sp/>&gt;=<sp/><sp/>nodeOffsets_new[rank+1]<sp/>||<sp/>nN_neig_new<sp/>&lt;<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_neig_new);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>elements,<sp/>elementBoundaries,<sp/>and<sp/>edges<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_new<sp/>=<sp/>elementNumbering_global_old2new[eN_star_old];</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>eN_star_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1]<sp/>||<sp/>eN_star_new<sp/>&lt;<sp/>elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_star_new);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_star_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;partitionNode<sp/>default<sp/>overlap<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN_new=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>eN_star_new=<sp/>&quot;&lt;&lt;eN_star_new&lt;&lt;&quot;<sp/>ebN=<sp/>&quot;&lt;&lt;ebN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>ebN_global=<sp/>&quot;&lt;&lt;ebN_global&lt;&lt;&quot;<sp/>ghost=<sp/>&quot;&lt;&lt;(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>offsets=<sp/>[&quot;&lt;&lt;elementBoundaryOffsets_new[rank]&lt;&lt;&quot;,&quot;&lt;&lt;elementBoundaryOffsets_new[rank+1]&lt;&lt;&quot;]&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN0_global_old];</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN1_global_old];</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundEdge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN0_global;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN1_global;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//elements<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//nodes<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//7.<sp/>If<sp/>we<sp/>want<sp/>more<sp/>layers<sp/>of<sp/>overlap,<sp/>do<sp/>we<sp/>have<sp/>to<sp/>build<sp/>connectivity<sp/>info<sp/>in<sp/>new<sp/>numbering<sp/>then<sp/>march<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>or<sp/>can<sp/>we<sp/>just<sp/>march<sp/>through<sp/>nodes<sp/>in<sp/>node_overlap<sp/>and<sp/>grab<sp/>all<sp/>of<sp/>their<sp/>elements<sp/>that<sp/>aren&apos;t<sp/>owned?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overlap_remaining<sp/>=<sp/>nNodes_overlap<sp/>-1;<sp/></highlight><highlight class="comment">//default<sp/>gives<sp/>1<sp/>layer<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//last<sp/>set<sp/>of<sp/>overlap<sp/>nodes<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>last_nodes_added2overlap<sp/>=<sp/>nodes_overlap;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(overlap_remaining<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;int&gt;<sp/>new_nodes_overlap,new_elements_overlap,new_elementBoundaries_overlap,new_edges_overlap;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_p<sp/>=<sp/>last_nodes_added2overlap.begin();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nN_p<sp/>!=<sp/>last_nodes_added2overlap.end())</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>*nN_p;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN_global_new];</highlight><highlight class="comment">//need<sp/>old<sp/>numbering<sp/>for<sp/>connectivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_new<sp/>=<sp/>nodeNumbering_global_old2new[nN_neig_old];</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//just<sp/>need<sp/>to<sp/>check<sp/>if<sp/>neighbor<sp/>is<sp/>offprocessor,<sp/>may<sp/>already<sp/>be<sp/>in<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//but<sp/>set<sp/>merge<sp/>will<sp/>take<sp/>care<sp/>of<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>nN_neig_new<sp/>&gt;=<sp/><sp/>nodeOffsets_new[rank+1]<sp/>||<sp/>nN_neig_new<sp/>&lt;<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_nodes_overlap.insert(nN_neig_new);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//node<sp/>neighbor<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_p++;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//loop<sp/>adding<sp/>new<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>added<sp/>nodes,<sp/>grab<sp/>elements<sp/>only<sp/>check<sp/>if<sp/>not<sp/>on<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_newp<sp/>=<sp/>last_nodes_added2overlap.begin();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nN_newp<sp/>!=<sp/>last_nodes_added2overlap.end())</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>*nN_newp;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN_global_new];</highlight><highlight class="comment">//need<sp/>old<sp/>numbering<sp/>for<sp/>connectivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_old<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN_global_old+1];<sp/>offset_old++)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset_old];</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_new<sp/>=<sp/>elementNumbering_global_old2new[eN_star_old];</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>eN_star_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1]<sp/>||<sp/>eN_star_new<sp/>&lt;<sp/>elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_elements_overlap.insert(eN_star_new);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//element<sp/>boundaries<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_star_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;partitionNode<sp/>overlap_remaining=<sp/>&quot;&lt;&lt;overlap_remaining&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN_global_new=<sp/>&quot;&lt;&lt;nN_global_new&lt;&lt;&quot;<sp/>eN_star_new=<sp/>&quot;&lt;&lt;eN_star_new&lt;&lt;&quot;<sp/>ebN=<sp/>&quot;&lt;&lt;ebN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>ebN_global=<sp/>&quot;&lt;&lt;ebN_global&lt;&lt;&quot;<sp/>ghost=<sp/>&quot;&lt;&lt;(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>offsets=<sp/>[&quot;&lt;&lt;elementBoundaryOffsets_new[rank]&lt;&lt;&quot;,&quot;&lt;&lt;elementBoundaryOffsets_new[rank+1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_star_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN0_global_old];</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/><sp/><sp/><sp/><sp/>=<sp/>nodeNumbering_global_old2new[nN1_global_old];</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundEdge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN0_global;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN1_global;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//elements<sp/>in<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_newp++;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//new<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_nodes_added2overlap.clear();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_difference(new_nodes_overlap.begin(),new_nodes_overlap.end(),</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.begin(),nodes_overlap.end(),</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_iterator&lt;set&lt;int&gt;<sp/>&gt;(last_nodes_added2overlap,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_nodes_added2overlap.begin()));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//could<sp/>do<sp/>a<sp/>set_merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN_addedp<sp/>=<sp/>new_nodes_overlap.begin();</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_addedp<sp/>!=<sp/>new_nodes_overlap.end();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_addedp++)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(*nN_addedp);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>eN_addedp<sp/>=<sp/>new_elements_overlap.begin();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_addedp<sp/>!=<sp/>new_elements_overlap.end();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_addedp++)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(*eN_addedp);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>ebN_addedp<sp/>=<sp/>new_elementBoundaries_overlap.begin();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_addedp<sp/>!=<sp/>new_elementBoundaries_overlap.end();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_addedp++)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(*ebN_addedp);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>edge_addedp<sp/>=<sp/>new_edges_overlap.begin();</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_addedp<sp/>!=<sp/>new_edges_overlap.end();</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_addedp++)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(*edge_addedp);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//example<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overlap_remaining--;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//ovelap<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//8.<sp/>Build<sp/>subdomain<sp/>meshes<sp/>in<sp/>new<sp/>numbering,<sp/>assumes<sp/>memory<sp/>not<sp/>allocated<sp/>in<sp/>subdomain<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>elements_overlap.size();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/><sp/><sp/><sp/>=<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>nodes_overlap.size();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>nElementBoundaries_subdomain_new[rank]+elementBoundaries_overlap.size();</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/><sp/><sp/>=<sp/>nEdges_subdomain_new[rank]+edges_overlap.size();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/><sp/><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//subdomain<sp/>2<sp/>global<sp/>mappings<sp/>(including<sp/>ghost<sp/>info)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>nodeNumbering_global2subdomain;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>elementBoundaryNumbering_global2subdomain;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3];</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//locally<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>nN<sp/>+<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN_global_new];</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global_new;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global_new]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+0];</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+1];</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+2];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//note:<sp/>sets<sp/>in<sp/>C++<sp/>are<sp/>sorted<sp/>so<sp/>the<sp/>overlap<sp/>is<sp/>laid<sp/>out<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//contiguous<sp/>chunks<sp/>corresponding<sp/>to<sp/>the<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_p<sp/>=<sp/>nodes_overlap.begin();</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nNodes_subdomain_new[rank];<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>int(nodes_overlap.size());<sp/>nN++)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>*nN_p++;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>nodeNumbering_global_new2old[nN_global_new];</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global_new;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global_new]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+0];</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+1];</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_old*3+2];</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN_global_old];</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>];</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//locally<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank];<sp/>eN++)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>elementOffsets_new[rank]<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global_new;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN_global_old];</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/><sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_global_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>nodeNumbering_global_old2new[nN_global_old];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_subdomain<sp/><sp/>=<sp/>nodeNumbering_global2subdomain[nN_global_new];</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]=<sp/>nN_subdomain;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_p<sp/>=<sp/>elements_overlap.begin();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>nElements_subdomain_new[rank];<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>int(elements_overlap.size());<sp/>eN++)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>*eN_p++;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global_new;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN_global_old];</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/><sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN_global_old*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>nodeNumbering_global_old2new[nN_global_old];</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_subdomain<sp/><sp/>=<sp/>nodeNumbering_global2subdomain[nN_global_new];</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]=<sp/>nN_subdomain;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//locally<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank];<sp/>ebN++)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>ebN<sp/>+<sp/>elementBoundaryOffsets_new[rank];</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]=ebN_global;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_p<sp/>=<sp/>elementBoundaries_overlap.begin();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=nElementBoundaries_subdomain_new[rank];ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank]<sp/>+<sp/>int(elementBoundaries_overlap.size());<sp/>ebN++)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>*ebN_p++;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]<sp/>=<sp/>ebN_global;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>elementBoundariesArray<sp/>to<sp/>assign<sp/>consistent<sp/>numbering<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;nElements_subdomain_new[rank];eN++)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>eN+elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[elementBoundariesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN]];</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_p2<sp/>=<sp/>elements_overlap.begin();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>nElements_subdomain_new[rank];<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>int(elements_overlap.size());<sp/>eN++)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>*eN_p2++;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[elementBoundariesArray_new[eN_global_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN]];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2];</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//locally<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>nEdges_subdomain_new[rank];<sp/>i++)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>i+edgeOffsets_new[rank];</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+0];</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+1];</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>todo<sp/>double<sp/>check<sp/>can<sp/>always<sp/>count<sp/>on<sp/>having<sp/>nodes<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN0_global];</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN1_global];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+0]=nN0_subdomain;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1]=nN1_subdomain;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[i]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edge_p<sp/>=<sp/>edges_overlap.begin();</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=nEdges_subdomain_new[rank];<sp/>i<sp/>&lt;<sp/>nEdges_subdomain_new[rank]<sp/>+<sp/>int(edges_overlap.size());<sp/>i++)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=*edge_p++;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+0];</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+1];</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>todo<sp/>make<sp/>sure<sp/>always<sp/>have<sp/>nodes<sp/>for<sp/>the<sp/>edge<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN0_global];</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN1_global];</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+0]=nN0_subdomain;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1]=nN1_subdomain;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[i]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>build<sp/>rest<sp/>of<sp/>subdomain<sp/>mesh<sp/>connectivity<sp/>information<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref>;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7fdce7c323f95480164d26da8bd73b65" kindref="member">py</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7fdce7c323f95480164d26da8bd73b65" kindref="member">py</ref>;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a84f3e389f9666f4e40a65cb50499d712" kindref="member">pz</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a84f3e389f9666f4e40a65cb50499d712" kindref="member">pz</ref>;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArray_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga928d08a58ffb5a778e738d6847115f47" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gad36c6af3da3b8edd3b32f5dd8f7b5f18" kindref="member">allocateGeometricInfo_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga0f4f89b6fc203f8443bc671f2ce24c2e" kindref="member">computeGeometricInfo_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArray_edge(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_edge(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga71bd5b1f46b653a7be9c65b2af9499b4" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga8b4def6a8ea5675441b05b5a7061713b" kindref="member">allocateGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga88041ad8d6afe29f23c6e30837b777db" kindref="member">computeGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArray_triangle(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_triangle(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga8fca2274c01965e94bc8855f7391332a" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga1ad1cf0d175b08dec8e1ed161e065295" kindref="member">allocateGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaad90ffdf6bb84d92b74bf824f8662a4b" kindref="member">computeGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>4<sp/>&amp;&amp;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArray_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaa187306a2346aeb53640156d1e1890fe" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga7a5874cc209a0c576ed8391e77111a9c" kindref="member">allocateGeometricInfo_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaad2c7d05554f0bb51a7ccfb6855baeb5" kindref="member">computeGeometricInfo_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>4<sp/>&amp;&amp;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArray_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaf0f4c6fcb9b418b4096b9fe1a62329d3" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gad97db4b6e238c242afedd5fa8b914e3e" kindref="member">allocateGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaff191b3e806b335cd6d0916218132c96" kindref="member">computeGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga11c306c06b8fe371531389373dac48d5" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga0d4a836f32fdf0cacb6250884aafe10b" kindref="member">allocateGeometricInfo_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gafdde7ba7852d7a8a4da1e3dc6bf91b36" kindref="member">computeGeometricInfo_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_element<sp/>=<sp/>0;<sp/>ebN_element<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN_element++)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN_global_old*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_subdomain]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_global_old];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//transfer<sp/>information<sp/>about<sp/>owned<sp/>nodes<sp/>and<sp/>elements<sp/>to<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[sdN]<sp/><sp/><sp/><sp/>=<sp/>nodeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementOffsets_new[sdN];</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementBoundaryOffsets_new[sdN];</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>edgeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[nN]<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>if<sp/>(mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>[eN]<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>if<sp/>(mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>0;<sp/>ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>[ebN]<sp/>=<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>if<sp/>(mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>];</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>[i]<sp/>=<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>ISRestoreIndices(nodeNumberingIS_global_old2new,&amp;nodeNumbering_global_old2new);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodePartitioningIS_new);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementNumberingIS_global_new2old,&amp;elementNumbering_global_new2old);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>ISRestoreIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464" refid="namespaceproteus_1a84bde2e556d60a8bd93bede8bbdfd053" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1a84bde2e556d60a8bd93bede8bbdfd053" kindref="member">partitionNodesFromTetgenFiles</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filebase,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indexBase,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>newMesh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_overlap)</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>PetscErrorCode<sp/>ierr;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>PetscMPIInt<sp/>size,rank;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>PetscLogStage<sp/>partitioning_stage;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>PetscLogStageRegister(</highlight><highlight class="stringliteral">&quot;Mesh<sp/>Partition&quot;</highlight><highlight class="normal">,&amp;partitioning_stage);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>PetscLogStagePush(partitioning_stage);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/***********************************************************************</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/><sp/><sp/><sp/>partition<sp/>domain<sp/>based<sp/>on<sp/>the<sp/>nodes<sp/>without<sp/>reading<sp/>in<sp/>the<sp/>global<sp/>mesh.</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"></highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>Partition<sp/>nodes<sp/>in<sp/>the<sp/>default<sp/>partition<sp/>of<sp/>contiguous<sp/>chunks<sp/>with</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>ordering</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"></highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Determine<sp/>nodal<sp/>connectivity<sp/>on<sp/>local<sp/>processor</highlight></codeline>
<codeline lineno="1483"><highlight class="comment"></highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>Generate<sp/>new<sp/>nodal<sp/>partition<sp/>using<sp/>PETSc<sp/>interface</highlight></codeline>
<codeline lineno="1485"><highlight class="comment"></highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/><sp/><sp/><sp/>4.<sp/>Collect<sp/>subdomain<sp/>elements:<sp/>any<sp/>that<sp/>contain<sp/>owned<sp/>nodes;<sp/>tag<sp/>ownership</highlight></codeline>
<codeline lineno="1487"><highlight class="comment"></highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/><sp/><sp/><sp/>4a,b.<sp/>Collect<sp/>element<sp/>boundaries<sp/>and<sp/>edges<sp/>on<sp/>the<sp/>subdomain<sp/>elements<sp/>and<sp/>tag<sp/>ownership</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"></highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/><sp/><sp/><sp/>5.<sp/>Generate<sp/>global<sp/>element,<sp/>element<sp/>boundary,<sp/>and<sp/>edge<sp/><sp/>numbering<sp/>for<sp/>new<sp/>subdomain<sp/>ownership</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/><sp/><sp/>6.<sp/>Create<sp/>overlap<sp/>(ghost)<sp/>information<sp/>for<sp/>nodes<sp/>and<sp/>elements</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"></highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/><sp/><sp/>7.<sp/>March<sp/>through<sp/>additional<sp/>layers<sp/>of<sp/>overlap<sp/>if<sp/>requested,</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"></highlight></codeline>
<codeline lineno="1496"><highlight class="comment"><sp/><sp/><sp/><sp/>8.<sp/>Build<sp/>subdomain<sp/>meshes<sp/>in<sp/>new<sp/>numbering</highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/><sp/>***********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//0.<sp/>Set<sp/>up<sp/>tetgen<sp/>files.<sp/>Note,<sp/>tetgen<sp/>should<sp/>have<sp/>been<sp/>run<sp/>with<sp/>-feen<sp/>to<sp/>get<sp/>alll<sp/>the<sp/>faces<sp/>and<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>simplexDim<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertexDim<sp/><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_i_outils" kindref="compound">IOutils</ref>;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>std::string<sp/>vertexFileName<sp/><sp/>=<sp/>std::string(filebase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.node&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>std::string<sp/>elementFileName<sp/>=<sp/>std::string(filebase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.ele&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>std::string<sp/>elementBoundaryFileName<sp/><sp/>=<sp/>std::string(filebase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.face&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>std::string<sp/>edgeFileName<sp/><sp/>=<sp/>std::string(filebase)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.edge&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Build<sp/>default<sp/>nodal<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//compute<sp/>offsets<sp/>to<sp/>build<sp/>subdomain2global<sp/>ordering<sp/>for<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in<sp/>default<sp/>partitioning<sp/>of<sp/>the<sp/>domain<sp/>into<sp/>subdomains.<sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>need<sp/>is<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>the<sp/>global<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>nodes<sp/>for<sp/>tetgen<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>just<sp/>read<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>and<sp/>whether<sp/>or<sp/>not<sp/>there<sp/>are<sp/>node<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_elements_event;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Read<sp/>eles&quot;</highlight><highlight class="normal">,0,&amp;read_elements_event);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(read_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>vertexFile(vertexFileName.c_str());</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vertexFile.good())</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>Tetgen<sp/>node<sp/>file<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;vertexFileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hasVertexMarkers(0),hasVertexAttributes(0),nSpace(3),nNodes_global;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>number<sp/>of<sp/>vertices<sp/>and<sp/>whether<sp/>node<sp/>flags<sp/>are<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>vertexFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nNodes_global<sp/>&gt;&gt;<sp/>nSpace<sp/>&gt;&gt;<sp/>hasVertexAttributes<sp/>&gt;&gt;<sp/>hasVertexMarkers<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref><sp/>;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>assert(nNodes_global<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>assert(nSpace<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>=<sp/>nNodes_global;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>=<sp/>simplexDim;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>simplexDim-1;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>simplexDim;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasVertexAttributes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;WARNING<sp/>Tetgen<sp/>nodes<sp/>hasAttributes=<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;hasVertexAttributes</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&gt;<sp/>0<sp/>will<sp/>treat<sp/>first<sp/>value<sp/>as<sp/>integer<sp/>id<sp/>for<sp/>boundary!!&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasVertexMarkers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//don&apos;t<sp/>need<sp/>to<sp/>read<sp/>anymore<sp/>from<sp/>nodes<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//offsets<sp/>provide<sp/>the<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>for<sp/>the<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>we<sp/>just<sp/>partition<sp/>the<sp/>nodes<sp/>approximately<sp/>equally<sp/>ignoring<sp/>connectivity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeOffsets_old(size+1);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>nodeOffsets_old[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeOffsets_old[sdN+1]<sp/>=<sp/>nodeOffsets_old[sdN]<sp/>+</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int(nNodes_global)/size<sp/>+<sp/>(int(nNodes_global)%size<sp/>&gt;<sp/>sdN);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_subdomain_old<sp/>=<sp/>nodeOffsets_old[rank+1]<sp/>-<sp/>nodeOffsets_old[rank];</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Determine<sp/>nodal<sp/>connectivity<sp/>(nodeStarArray)<sp/>for<sp/>nodes<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//connectivty<sp/>commes<sp/>from<sp/>the<sp/>topology<sp/>(elements)<sp/>file.<sp/>We<sp/>just<sp/>grab<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//that<sp/>contain<sp/>currently<sp/>owned<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>elementFile(elementFileName.c_str());</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!elementFile.good())</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>Tetgen<sp/>element<sp/>file<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;elementFileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//read<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodesPerSimplex(simplexDim),hasElementMarkers<sp/>=<sp/>0,nElements_global;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>elementFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nElements_global<sp/>&gt;&gt;<sp/>nNodesPerSimplex<sp/>&gt;&gt;<sp/>hasElementMarkers<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>assert(nElements_global<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>assert(nNodesPerSimplex<sp/>==<sp/>simplexDim);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>nElements_global;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>element_nodes_old(4);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeStar(nNodes_subdomain_old);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>map&lt;int,vector&lt;int&gt;<sp/>&gt;<sp/>elements_old;</highlight><highlight class="comment">//elementNodesMap_old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie<sp/>=<sp/>0;<sp/>ie<sp/>&lt;<sp/>nElements_global;<sp/>ie++)</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ne,<sp/>nv;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>ne;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ne<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>ne<sp/>&amp;&amp;<sp/>ne<sp/>&lt;<sp/>nElements_global<sp/>&amp;&amp;<sp/>elementFile.good());</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>simplexDim;<sp/>iv++)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementFile<sp/>&gt;&gt;<sp/>nv;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>nv<sp/>&amp;&amp;<sp/>nv<sp/>&lt;<sp/>nNodes_global);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_old[iv]<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>each<sp/>node<sp/>on<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>simplexDim;<sp/>iv++)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>the<sp/>node<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_star<sp/>=<sp/>element_nodes_old[iv];</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSubdomain=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_star<sp/>&gt;=<sp/>nodeOffsets_old[rank]<sp/>&amp;&amp;<sp/>nN_star<sp/>&lt;<sp/>nodeOffsets_old[rank+1])</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>node<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>subdomain<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inSubdomain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jv<sp/>=<sp/>0;<sp/>jv<sp/>&lt;<sp/>simplexDim;<sp/>jv++)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iv<sp/>!=<sp/>jv)</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_star_subdomain<sp/>=<sp/>nN_star-nodeOffsets_old[rank];</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeStar[nN_star_subdomain].insert(element_nodes_old[jv]);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inSubdomain)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_old[ie]<sp/>=<sp/>element_nodes_old;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>ie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>elementFile.close();</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(read_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repartition_nodes_event;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Repart<sp/>nodes&quot;</highlight><highlight class="normal">,0,&amp;repartition_nodes_event);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(repartition_nodes_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//done<sp/>reading<sp/>element<sp/>file<sp/>for<sp/>first<sp/>time;<sp/>will<sp/>need<sp/>to<sp/>read<sp/>again<sp/>after<sp/>node<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>compact<sp/>data<sp/>structure<sp/>for<sp/>nodeStar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarOffsets(nNodes_subdomain_old+1);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>nodeStarOffsets[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=1;nN&lt;nNodes_subdomain_old+1;nN++)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeStarOffsets[nN]<sp/>=<sp/>nodeStarOffsets[nN-1]<sp/>+<sp/>nodeStar[nN-1].size();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarArray(nodeStarOffsets[nNodes_subdomain_old]);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;nN&lt;nNodes_subdomain_old;nN++)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN_star=nodeStar[nN].begin();nN_star!=nodeStar[nN].end();nN_star++,offset++)</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeStarArray[offset]<sp/>=<sp/>*nN_star;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//find<sp/>maximum<sp/>number<sp/>of<sp/>nodes<sp/>in<sp/>any<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_nNodeNeighbors_node=0;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;nNodes_subdomain_old;nN++)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>max_nNodeNeighbors_node=<ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(max_nNodeNeighbors_node,nodeStarOffsets[nN+1]-nodeStarOffsets[nN]);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>connectivity<sp/>data<sp/>structures<sp/>for<sp/>PETSc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>PetscBool<sp/>isInitialized;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>PetscInitialized(&amp;isInitialized);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>PetscInt<sp/>*nodeNeighborsOffsets_subdomain,*nodeNeighbors_subdomain,*weights_subdomain,*vertex_weights_subdomain;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>PetscReal<sp/>*partition_weights;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain_old+1),&amp;nodeNeighborsOffsets_subdomain);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain_old*max_nNodeNeighbors_node),&amp;nodeNeighbors_subdomain);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain_old*max_nNodeNeighbors_node),&amp;weights_subdomain);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nNodes_subdomain_old),&amp;vertex_weights_subdomain);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscReal)*(size),&amp;partition_weights);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sd=0;sd&lt;size;sd++)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>partition_weights[sd]<sp/>=<sp/>1.0/</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>nodeNeighborsOffsets_subdomain[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//I<sp/>think<sp/>we<sp/>can<sp/>simplify<sp/>this<sp/>now<sp/>that<sp/>nodeStarArray<sp/>is<sp/>local<sp/>to<sp/>the<sp/>subdomain,<sp/>could<sp/>just<sp/>use<sp/>nodeStar<sp/>instead<sp/>of<sp/>nodeStarArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0,offset=0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_old;<sp/>nN++)</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_subdomain<sp/>=<sp/>nodeStarOffsets[nN];</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_subdomain<sp/>&lt;<sp/>nodeStarOffsets[nN+1];</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_subdomain++)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighbors_subdomain[offset++]<sp/>=<sp/>nodeStarArray[offset_subdomain];</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighborsOffsets_subdomain[nN+1]=offset;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sort(&amp;nodeNeighbors_subdomain[nodeNeighborsOffsets_subdomain[nN]],&amp;nodeNeighbors_subdomain[nodeNeighborsOffsets_subdomain[nN+1]]);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//weight<sp/>nodes<sp/>by<sp/>size<sp/>of<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight=<sp/>(nodeNeighborsOffsets_subdomain[nN+1]<sp/>-<sp/>nodeNeighborsOffsets_subdomain[nN]);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertex_weights_subdomain[nN]<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=nodeNeighborsOffsets_subdomain[nN];k&lt;nodeNeighborsOffsets_subdomain[nN+1];k++)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_subdomain[k]<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Generate<sp/>new<sp/>nodal<sp/>partition<sp/>using<sp/>PETSc<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>Mat<sp/>petscAdjacency;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_subdomain_max=0;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nNodes_subdomain_old,</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;nNodes_subdomain_max,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_MAX,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/><sp/>0)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Max<sp/>nNodes_subdomain<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nNodes_subdomain_max&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>nNodes_global<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nNodes_global&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain_old,</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_global,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighborsOffsets_subdomain,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNeighbors_subdomain,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_subdomain,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//const<sp/>double<sp/>max_rss_gb(0.75*3.25);//half<sp/>max<sp/>mem<sp/>per<sp/><sp/>core<sp/><sp/>on<sp/>topaz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_rss_gb(0.9*3.25);</highlight><highlight class="comment">//half<sp/>max<sp/>mem<sp/>per<sp/><sp/>core<sp/><sp/>on<sp/>topaz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>allocating<sp/>MPIAdj&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>MatPartitioning<sp/>petscPartition;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningCreate(PROTEUS_COMM_WORLD,&amp;petscPartition);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningSetAdjacency(petscPartition,petscAdjacency);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningSetFromOptions(petscPartition);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningSetVertexWeights(petscPartition,vertex_weights_subdomain);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningSetPartitionWeights(petscPartition,partition_weights);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>petsc<sp/>index<sp/>set<sp/>that<sp/>has<sp/>the<sp/>new<sp/>subdomain<sp/>number<sp/>for<sp/>each<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>IS<sp/>nodePartitioningIS_new;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningApply(petscPartition,&amp;nodePartitioningIS_new);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatPartitioningDestroy(&amp;petscPartition);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);<sp/></highlight><highlight class="comment">//gets<sp/>petscAdjacency<sp/>too<sp/>I<sp/>believe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>applying<sp/>partition&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//determine<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>per<sp/>subdomain<sp/>in<sp/>new<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new(size);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>ISPartitioningCount(nodePartitioningIS_new,size,&amp;nNodes_subdomain_new[0]);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>new<sp/>offsets<sp/>for<sp/>subdomain<sp/>to<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>nodeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeOffsets_new[sdN+1]<sp/>=<sp/>nodeOffsets_new[sdN]<sp/>+<sp/>nNodes_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>node<sp/>numbers<sp/>for<sp/>nodes<sp/>on<sp/>this<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_subdomain_old2new;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>ISPartitioningToNumbering(nodePartitioningIS_new,&amp;nodeNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//try<sp/>out<sp/>of<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Set<sp/>up<sp/>file<sp/>access<sp/>property<sp/>list<sp/>with<sp/>parallel<sp/>I/O<sp/>access</highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>MPI_Info<sp/>info<sp/><sp/>=<sp/>MPI_INFO_NULL;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>hid_t<sp/>plist_id<sp/>=<sp/>H5Pcreate(H5P_FILE_ACCESS);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>H5Pset_fapl_mpio(plist_id,<sp/>PROTEUS_COMM_WORLD,<sp/>info);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Create<sp/>a<sp/>new<sp/>file<sp/>collectively<sp/>and<sp/>release<sp/>property<sp/>list<sp/>identifier.</highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>H5FILE_NAME(</highlight><highlight class="stringliteral">&quot;mappings.h5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/>hid_t<sp/>file_id<sp/>=<sp/>H5Fcreate(H5FILE_NAME,<sp/>H5F_ACC_TRUNC,<sp/>H5P_DEFAULT,<sp/>plist_id);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/>H5Pclose(plist_id);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Create<sp/>the<sp/>dataspace<sp/>for<sp/>the<sp/>dataset.</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>hsize_t<sp/><sp/><sp/><sp/><sp/>dimsf[1];</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/>dimsf[0]<sp/>=<sp/>nNodes_global;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RANK<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>hid_t<sp/>filespace<sp/>=<sp/>H5Screate_simple(<ref refid="partitioning_8cpp_1a4e76a9ce86d91fa75775a7ae3f8d3aa5" kindref="member">RANK</ref>,<sp/>dimsf,<sp/>NULL);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Create<sp/>the<sp/>dataset<sp/>with<sp/>default<sp/>properties<sp/>and<sp/>close<sp/>filespace.</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>hid_t<sp/>dset_id<sp/>=<sp/>H5Dcreate(file_id,<sp/></highlight><highlight class="stringliteral">&quot;nodeNumbering_old2new&quot;</highlight><highlight class="normal">,<sp/>H5T_NATIVE_INT,<sp/>filespace,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H5P_DEFAULT,<sp/>H5P_DEFAULT,<sp/>H5P_DEFAULT);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>H5Sclose(filespace);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Each<sp/>process<sp/>defines<sp/>dataset<sp/>in<sp/>memory<sp/>and<sp/>writes<sp/>it<sp/>to<sp/>the<sp/>hyperslab</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>hsize_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>count[1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>hyperslab<sp/>selection<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>hsize_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset[1];</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>count[0]<sp/>=<sp/>nNodes_subdomain_old;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>offset[0]<sp/>=<sp/>nodeOffsets_old[rank];</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>hid_t<sp/>memspace<sp/>=<sp/>H5Screate_simple(<ref refid="partitioning_8cpp_1a4e76a9ce86d91fa75775a7ae3f8d3aa5" kindref="member">RANK</ref>,<sp/>count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Select<sp/>hyperslab<sp/>in<sp/>the<sp/>file.</highlight></codeline>
<codeline lineno="1761"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>filespace<sp/>=<sp/>H5Dget_space(dset_id);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>H5Sselect_hyperslab(filespace,<sp/>H5S_SELECT_SET,<sp/>offset,<sp/>NULL,<sp/>count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1766"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Initialize<sp/>data<sp/>buffer</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>=<sp/>(int<sp/>*)<sp/>malloc(sizeof(int)*count[0]*count[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count[0]*count[1];<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>data[i]<sp/>=<sp/>mpi_rank<sp/>+<sp/>10;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt*<sp/>data;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>ISGetIndices(nodeNumberingIS_subdomain_old2new,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1776"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Create<sp/>property<sp/>list<sp/>for<sp/>collective<sp/>dataset<sp/>write.</highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>plist_id<sp/>=<sp/>H5Pcreate(H5P_DATASET_XFER);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>H5Pset_dxpl_mpio(plist_id,<sp/>H5FD_MPIO_COLLECTIVE);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>herr_t<sp/>status<sp/>=<sp/>H5Dwrite(dset_id,<sp/>H5T_NATIVE_INT,<sp/>memspace,<sp/>filespace,</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plist_id,<sp/>data);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//free(data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>ISRestoreIndices(nodeNumberingIS_subdomain_old2new,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1786"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Close/release<sp/>resources.</highlight></codeline>
<codeline lineno="1787"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>H5Dclose(dset_id);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//end<sp/>try<sp/>out<sp/>of<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//collect<sp/>new<sp/>node<sp/>numbers<sp/>for<sp/>whole<sp/>mesh<sp/>so<sp/>that<sp/>subdomain<sp/>reordering<sp/>and<sp/>renumbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//can<sp/>be<sp/>done<sp/>easily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_global_old2new;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>ISAllGather(nodeNumberingIS_subdomain_old2new,&amp;nodeNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*<sp/>nodeNumbering_global_old2new;</highlight><highlight class="comment">//needs<sp/>restore<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>ISGetIndices(nodeNumberingIS_global_old2new,&amp;nodeNumbering_global_old2new);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//test<sp/>out<sp/>of<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hid_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataset_id;<sp/><sp/></highlight><highlight class="comment">/*<sp/>identifiers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>herr_t<sp/><sp/><sp/><sp/><sp/><sp/>status;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dset_data[nNodes_global];</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Open<sp/>an<sp/>existing<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//file_id<sp/>=<sp/>H5Fopen(&quot;mappings.h5&quot;,<sp/>H5F_ACC_RDONLY,<sp/>H5P_DEFAULT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Open<sp/>an<sp/>existing<sp/>dataset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dataset_id<sp/>=<sp/>H5Dopen2(file_id,<sp/></highlight><highlight class="stringliteral">&quot;/nodeNumbering_old2new&quot;</highlight><highlight class="normal">,<sp/>H5P_DEFAULT);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>H5Dread(dataset_id,<sp/>H5T_NATIVE_INT,<sp/>H5S_ALL,<sp/>H5S_ALL,<sp/>H5P_DEFAULT,</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dset_data);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>the<sp/>dataset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>H5Dclose(dataset_id);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nNodes_global;i++)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodeNumbering_global_old2new[i]<sp/>==<sp/>dset_data[i]);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;==================out<sp/>of<sp/>core<sp/>old2new<sp/>is<sp/>correct!====================&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//end<sp/>test<sp/>out<sp/>of<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//reverse<sp/>mapping<sp/>for<sp/>node<sp/>numbers<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cek<sp/>hack,<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/><sp/><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_global_new2old(nNodes_global);</highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_global;<sp/>nN++)</highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/><sp/><sp/>nodeNumbering_global_new2old[nodeNumbering_global_old2new[nN]]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="1833"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(repartition_nodes_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>receive_element_mask_event;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Recv.<sp/>ele<sp/>mask&quot;</highlight><highlight class="normal">,0,&amp;receive_element_mask_event);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(receive_element_mask_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>To<sp/>build<sp/>subdomain<sp/>meshes,<sp/>go<sp/>through<sp/>and<sp/>collect<sp/>elements<sp/>containing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>locally<sp/>owned<sp/>nodes.<sp/>Assign<sp/>processor<sp/>ownership<sp/>of<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(receive_element_mask_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>with<sp/>masks&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_reread_elements_event;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Reread<sp/>eles&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_reread_elements_event);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_reread_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>elements<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>element<sp/>numbers<sp/>(in<sp/>old<sp/>numbering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//We<sp/>need<sp/>to<sp/>find<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>support<sp/>of<sp/>nodes<sp/>in<sp/>the<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//partitioning,<sp/>so<sp/>we&apos;ll<sp/>need<sp/>to<sp/>re-read<sp/>the<sp/>elements<sp/>file<sp/>to<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>the<sp/>elements<sp/>for<sp/>the<sp/>nodes<sp/>in<sp/>the<sp/>new<sp/>partitioning.<sp/>We<sp/>will<sp/>be<sp/>collecting<sp/>OLD<sp/>element<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>elementFile2(elementFileName.c_str());</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!elementFile2.good())</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>Tetgen<sp/>elements<sp/>file&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;elementFileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>elementFile2<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nElements_global<sp/>&gt;&gt;<sp/>nNodesPerSimplex<sp/>&gt;&gt;<sp/>hasElementMarkers<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>assert(nElements_global<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>assert(nNodesPerSimplex<sp/>==<sp/>simplexDim);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_subdomain_owned;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>element_nodes_new(4);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element_nodes_new_array[4];</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeElementsStar(nNodes_subdomain_new[rank]);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeStarNew(nNodes_subdomain_new[rank]);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/>map&lt;int,vector&lt;int&gt;<sp/>&gt;<sp/>elementNodesArrayMap;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>map&lt;int,long<sp/>int&gt;<sp/>elementMaterialTypesMap;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;3&gt;,<ref refid="class_element_neighbors" kindref="compound">ElementNeighbors</ref>&gt;<sp/>elementBoundaryElementsMap;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,set&lt;pair&lt;int,int&gt;<sp/>&gt;<sp/>&gt;<sp/>edgeElementsMap;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//note<sp/>any<sp/>element<sp/>index<sp/>containers<sp/>are<sp/>in<sp/>the<sp/>old<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie<sp/>=<sp/>0;<sp/>ie<sp/>&lt;<sp/>nElements_global;<sp/>ie++)</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ne,<sp/>nv,<sp/>elementId(0);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elementId_double;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementFile2<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>ne;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ne<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>ne<sp/>&amp;&amp;<sp/>ne<sp/>&lt;<sp/>nElements_global<sp/>&amp;&amp;<sp/>elementFile.good());</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>simplexDim;<sp/>iv++)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementFile2<sp/>&gt;&gt;<sp/>nv<sp/>;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>nv<sp/>&amp;&amp;<sp/>nv<sp/>&lt;<sp/>nNodes_global);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_old[iv]<sp/>=<sp/>nv;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_new[iv]<sp/>=<sp/>nodeNumbering_global_old2new[nv];</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_new_array[iv]<sp/>=<sp/>element_nodes_new[iv];</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;4&gt;</ref><sp/>nodeTuple(element_nodes_new_array);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>simplexDim;<sp/>iv++)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_star_new<sp/>=<sp/>element_nodes_new[iv];</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inSubdomain=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_star_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nN_star_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inSubdomain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>all<sp/>the<sp/>element<sp/>boundaries<sp/>of<sp/>this<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN<sp/>&lt;<sp/>4<sp/>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[3]<sp/>=<sp/>{<sp/>element_nodes_new[(ebN+1)<sp/>%<sp/>4],</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_new[(ebN+2)<sp/>%<sp/>4],</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_new[(ebN+3)<sp/>%<sp/>4]};</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;3&gt;</ref><sp/>nodeTuple(nodes);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(elementBoundaryElementsMap.find(nodeTuple)<sp/>!=<sp/>elementBoundaryElementsMap.end())</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementBoundaryElementsMap[nodeTuple].right<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>ne<sp/>!=<sp/>elementBoundaryElementsMap[nodeTuple].left)</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsMap[nodeTuple].right=ne;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsMap[nodeTuple].right_ebN_element=ebN;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsMap[nodeTuple]<sp/>=<sp/><ref refid="class_element_neighbors" kindref="compound">ElementNeighbors</ref>(ne,ebN);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>all<sp/>the<sp/>edges<sp/>of<sp/>this<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNL=0,edN=0;nNL<sp/>&lt;<sp/>4<sp/>;<sp/>nNL++)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNR=nNL+1;nNR<sp/>&lt;<sp/>4;nNR++,edN++)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2]<sp/>=<sp/>{<sp/>element_nodes_new[nNL],</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_nodes_new[nNR]};</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>nodeTuple(nodes);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgeElementsMap[nodeTuple].insert(pair&lt;int,int&gt;(ne,edN));</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>all<sp/>the<sp/>nodes<sp/>to<sp/>the<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_star_new_subdomain<sp/>=<sp/>nN_star_new<sp/>-<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementsStar[nN_star_new_subdomain].insert(ne);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jv<sp/>=<sp/>0;<sp/>jv<sp/>&lt;<sp/>simplexDim;<sp/>jv++)</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iv<sp/>!=<sp/>jv)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_point_new<sp/>=<sp/>element_nodes_new[jv];</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeStarNew[nN_star_new_subdomain].insert(nN_point_new);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inSubdomain)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNodesArrayMap[ne]<sp/>=<sp/>element_nodes_new;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementNodesArrayMap.find(ne)<sp/>!=<sp/>elementNodesArrayMap.end())</highlight><highlight class="comment">//this<sp/>element<sp/>contains<sp/>a<sp/>node<sp/>owned<sp/>by<sp/>this<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[1]<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[1]<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_subdomain_owned.insert(ne);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasElementMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementFile2<sp/>&gt;&gt;<sp/>elementId_double;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementId<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(elementId_double);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementMaterialTypesMap[ne]<sp/>=<sp/>elementId;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementFile2<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>elementFile2.close();</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_owned_subdomain(elements_subdomain_owned.size()),</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>nElements_owned_new=0;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElements_owned_subdomain,&amp;nElements_owned_new,1,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>assert(nElements_owned_new<sp/>==<sp/>nElements_global);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_reread_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_send_marked_elements_event;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Mark/send<sp/>eles&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_send_marked_elements_event);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_send_marked_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>marking<sp/>elements&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//done<sp/>with<sp/>the<sp/>element<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>compact<sp/>nodeElementsArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeElementOffsets(nNodes_subdomain_new[rank]+1);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>nodeElementOffsets[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeElementOffsets[nN+1]<sp/>=<sp/>nodeElementOffsets[nN]+nodeElementsStar[nN].size();</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeElementsArray(nodeElementOffsets[nNodes_subdomain_new[rank]]);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>eN_star<sp/>=<sp/>nodeElementsStar[nN].begin();<sp/>eN_star<sp/>!=<sp/>nodeElementsStar[nN].end();</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star++,offset++)</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementsArray[offset]<sp/>=<sp/>*eN_star;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>compact<sp/>nodeStarArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarOffsetsNew(nNodes_subdomain_new[rank]+1);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>nodeStarOffsetsNew[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=1;nN&lt;nNodes_subdomain_new[rank]+1;nN++)</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeStarOffsetsNew[nN]<sp/>=<sp/>nodeStarOffsetsNew[nN-1]<sp/>+<sp/>nodeStarNew[nN-1].size();</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarArrayNew(nodeStarOffsetsNew[nNodes_subdomain_new[rank]]);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;nN&lt;nNodes_subdomain_new[rank];nN++)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN_star=nodeStarNew[nN].begin();nN_star!=nodeStarNew[nN].end();nN_star++,offset++)</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeStarArrayNew[offset]<sp/>=<sp/>*nN_star;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_send_marked_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_global_numbering_elements_event;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Global<sp/>ele<sp/>nmbr&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_global_numbering_elements_event);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_global_numbering_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>Generate<sp/>global<sp/>element<sp/>numbering<sp/>corresponding<sp/>to<sp/>new<sp/>subdomain<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new(size),</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new(size+1);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain_new[sdN]<sp/>=<sp/>int(elements_subdomain_owned.size());</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new_send<sp/>=<sp/>nElements_subdomain_new;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElements_subdomain_new_send[0],&amp;nElements_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>new<sp/>offsets<sp/>for<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>elementOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new[sdN+1]<sp/>=<sp/>elementOffsets_new[sdN]<sp/>+<sp/>nElements_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//map<sp/>to<sp/>old<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain_new2old(elements_subdomain_owned.size());</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_ownedp<sp/>=<sp/>elements_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>int(elements_subdomain_owned.size());<sp/>eN++,eN_ownedp++)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain_new2old[eN]<sp/>=<sp/>*eN_ownedp;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//use<sp/>Petsc<sp/>IS<sp/>to<sp/>get<sp/>global<sp/>new2old<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,elements_subdomain_owned.size(),&amp;elementNumbering_subdomain_new2old[0],PETSC_COPY_VALUES,</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;elementNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>ISAllGather(elementNumberingIS_subdomain_new2old,&amp;elementNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementNumbering_global_new2old;</highlight><highlight class="comment">//needs<sp/>to<sp/>be<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>ISGetIndices(elementNumberingIS_global_new2old,&amp;elementNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>reverse<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_global_old2new(nElements_global);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>nElements_global;<sp/>eN++)</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_global_old2new[elementNumbering_global_new2old[eN]]<sp/>=<sp/>eN;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_global_numbering_elements_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>allocating<sp/>element<sp/>numbering<sp/>new2old/old2new&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_faces_event;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Subd<sp/>faces&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_faces_event);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_faces_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4b,5b.<sp/>repeat<sp/>process<sp/>to<sp/>build<sp/>global<sp/>face<sp/>(elementBoundary)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//first<sp/>read<sp/>element<sp/>boundaries<sp/>to<sp/>create<sp/>nodeElementBoundariesArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>all<sp/>element<sp/>boundaries<sp/>on<sp/>this<sp/>subdomain,<sp/>which<sp/>we&apos;ll<sp/>use<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//grab<sp/>element<sp/>boundaries<sp/>from<sp/>the<sp/>bit<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>elementBoundaryFile(elementBoundaryFileName.c_str());</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!elementBoundaryFile.good())</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>Tetgen<sp/>face<sp/>file<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;elementBoundaryFileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasElementBoundaryMarkers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElementBoundaries_global;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ihasElementBoundaryMarkers(0);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>elementBoundaryFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nElementBoundaries_global<sp/>&gt;&gt;<sp/>ihasElementBoundaryMarkers<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref><sp/>;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>assert(nElementBoundaries_global<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasElementBoundaryMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasElementBoundaryMarkers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>nElementBoundaries_global;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//note,<sp/>these<sp/>will<sp/>be<sp/>in<sp/>the<sp/>new<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elementBoundaries_subdomain_owned;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeElementBoundariesStar(nNodes_subdomain_new[rank]);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>elementBoundaryMaterialTypesMap;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>map&lt;int,vector&lt;int&gt;<sp/>&gt;<sp/>elementBoundariesMap;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>supportedElementBoundaries;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ieb<sp/>=<sp/>0;<sp/>ieb<sp/>&lt;<sp/>nElementBoundaries_global;<sp/>ieb++)</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neb,nn0,nn1,nn2;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebId(0);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>neb<sp/>&gt;&gt;<sp/>nn0<sp/>&gt;&gt;<sp/>nn1<sp/>&gt;&gt;<sp/>nn2;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasElementBoundaryMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryFile<sp/>&gt;&gt;<sp/>ebId;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>neb<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nn0<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nn1<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nn2<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>neb<sp/>&amp;&amp;<sp/>neb<sp/>&lt;<sp/>nElementBoundaries_global<sp/>&amp;&amp;<sp/>elementBoundaryFile.good());</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//grab<sp/>the<sp/>element<sp/>boundaries<sp/>for<sp/>the<sp/>node<sp/>if<sp/>the<sp/>node<sp/>is<sp/>owned<sp/>by<sp/>the<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>miss<sp/>the<sp/>element<sp/>boundaries<sp/>on<sp/>the<sp/>&quot;outside<sp/>boundary&quot;<sp/>of<sp/>the<sp/>star,<sp/>which<sp/>will<sp/>grab<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn0_new<sp/>=<sp/>nodeNumbering_global_old2new[nn0];</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nn0_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nn0_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementBoundariesStar[nn0_new-nodeOffsets_new[rank]].insert(neb);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>supportedElementBoundaries.insert(neb);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn1_new<sp/>=<sp/>nodeNumbering_global_old2new[nn1];</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nn1_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nn1_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementBoundariesStar[nn1_new-nodeOffsets_new[rank]].insert(neb);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>supportedElementBoundaries.insert(neb);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn2_new<sp/>=<sp/>nodeNumbering_global_old2new[nn2];</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nn2_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nn2_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementBoundariesStar[nn2_new-nodeOffsets_new[rank]].insert(neb);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>supportedElementBoundaries.insert(neb);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[3]<sp/>=<sp/>{nn0_new,nn1_new,nn2_new};</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;3&gt;</ref><sp/>nodeTuple(nodes);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementBoundaryElementsMap.find(nodeTuple)<sp/>!=<sp/>elementBoundaryElementsMap.end())</highlight><highlight class="comment">//this<sp/>element<sp/>boundary<sp/>is<sp/>on<sp/>an<sp/>element<sp/>in<sp/>the<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[1]<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[1]<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_subdomain_owned.insert(neb);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasElementBoundaryMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryMaterialTypesMap[neb]=ebId;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_left<sp/>=<sp/>elementNumbering_global_old2new[elementBoundaryElementsMap[nodeTuple].left];</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementBoundariesMap.find(eN_left)<sp/>!=<sp/>elementBoundariesMap.end())</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_left][elementBoundaryElementsMap[nodeTuple].left_ebN_element]<sp/>=<sp/>neb;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>elementBoundaries_element(4,-1);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_left]<sp/>=<sp/>elementBoundaries_element;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_left][elementBoundaryElementsMap[nodeTuple].left_ebN_element]<sp/>=<sp/>neb;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementBoundaryElementsMap[nodeTuple].right<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_right<sp/>=<sp/>elementNumbering_global_old2new[elementBoundaryElementsMap[nodeTuple].right];</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementBoundariesMap.find(eN_right)<sp/>!=<sp/>elementBoundariesMap.end())</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_right][elementBoundaryElementsMap[nodeTuple].right_ebN_element]<sp/>=<sp/>neb;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>elementBoundaries_element(4,-1);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_right]<sp/>=<sp/>elementBoundaries_element;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesMap[eN_right][elementBoundaryElementsMap[nodeTuple].right_ebN_element]<sp/>=<sp/>neb;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//done<sp/>reading<sp/>element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>elementBoundaryFile.close();</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>reading<sp/>element<sp/>boundaries&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElementBoundaries_owned_subdomain=elementBoundaries_subdomain_owned.size(),</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>nElementBoundaries_owned_new=0;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElementBoundaries_owned_subdomain,&amp;nElementBoundaries_owned_new,1,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>assert(nElementBoundaries_owned_new<sp/>==<sp/>nElementBoundaries_global);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>the<sp/>element<sp/>boundaries<sp/>on<sp/>the<sp/>outside<sp/>of<sp/>the<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,vector&lt;int&gt;<sp/>&gt;::iterator<sp/>elementBoundariesp=elementBoundariesMap.begin();</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesp!=elementBoundariesMap.end();</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesp++)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>the<sp/>nodes<sp/>of<sp/>this<sp/>element<sp/>for<sp/>the<sp/>owned<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv=0;iv&lt;4;iv++)</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>elementNodesArrayMap<sp/>is<sp/>in<sp/>the<sp/>old<sp/>element<sp/>numbering<sp/>while<sp/>the<sp/>elementBoundariesMap<sp/>is<sp/>in<sp/>the<sp/>new<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArrayMap[elementNumbering_global_new2old[elementBoundariesp-&gt;first]][iv];</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>all<sp/>the<sp/>faces<sp/>to<sp/>this<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eb=0;eb&lt;4;eb++)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementBoundariesStar[nN_global-nodeOffsets_new[rank]].insert(elementBoundariesp-&gt;second[eb]);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>compact<sp/>structures<sp/>for<sp/>nodeElementBoundariesArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeElementBoundaryOffsets(nNodes_subdomain_new[rank]+1);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/>nodeElementBoundaryOffsets[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeElementBoundaryOffsets[nN+1]<sp/>=<sp/>nodeElementBoundaryOffsets[nN]+nodeElementBoundariesStar[nN].size();</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeElementBoundariesArray(nodeElementBoundaryOffsets[nNodes_subdomain_new[rank]]);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>ebN_star<sp/>=<sp/>nodeElementBoundariesStar[nN].begin();<sp/>ebN_star<sp/>!=<sp/>nodeElementBoundariesStar[nN].end();</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_star++,offset++)</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementBoundariesArray[offset]<sp/>=<sp/>*ebN_star;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>elementBoundaries<sp/>owned<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new(size),</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new(size+1);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>elementBoundaries_subdomain_owned.size();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new_send=nElementBoundaries_subdomain_new;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElementBoundaries_subdomain_new_send[0],&amp;nElementBoundaries_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>elementBoundaryOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new[sdN+1]<sp/>=<sp/>elementBoundaryOffsets_new[sdN]+nElementBoundaries_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elements<sp/>and<sp/>nodes<sp/>build<sp/>a<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//resetting<sp/>the<sp/>face-based<sp/>information<sp/>is<sp/>a<sp/>little<sp/>different<sp/>since<sp/>much<sp/>of<sp/>this<sp/>is<sp/>currently<sp/>built<sp/>below<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>element<sp/>and<sp/>node<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_new2old(elementBoundaries_subdomain_owned.size());</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_ownedp=elementBoundaries_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;int(elementBoundaries_subdomain_owned.size());ebN++)</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_new2old[ebN]<sp/>=<sp/>*ebN_ownedp++;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,elementBoundaries_subdomain_owned.size(),&amp;elementBoundaryNumbering_new2old[0],PETSC_COPY_VALUES,&amp;elementBoundaryNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>ISAllGather(elementBoundaryNumberingIS_subdomain_new2old,&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementBoundaryNumbering_global_new2old;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_global_old2new(newMesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/>ISGetIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Allocating<sp/>elementBoudnary<sp/>old2new/new2old&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;newMesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global_old2new[elementBoundaryNumbering_global_new2old[ebN]]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_faces_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>allocating<sp/>elementBoudnary<sp/>old2new/new2old&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_edges_event;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Subd<sp/>edges&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_edges_event);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_edges_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4c,5c.<sp/>Repeate<sp/>the<sp/>process<sp/>for<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>edgeFile(edgeFileName.c_str());</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!edgeFile.good())</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>Tetgen<sp/>edge<sp/>file&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;edgeFileName&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasEdgeMarkers<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEdges_global;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ihasEdgeMarkers(0);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/>edgeFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nEdges_global<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight><highlight class="comment">//<sp/>edge<sp/>file<sp/>doesn<sp/>currently<sp/>contain<sp/>markers<sp/>&gt;&gt;<sp/>ihasEdgeMarkers<sp/>&gt;&gt;<sp/>eatline<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>assert(nEdges_global<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasEdgeMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasEdgeMarkers<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>=<sp/>nEdges_global;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>edges_subdomain_owned;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeEdgesStar(nNodes_subdomain_new[rank]);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>edgeMaterialTypesMap;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>map&lt;int,vector&lt;int&gt;<sp/>&gt;<sp/>elementEdgesMap;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>map&lt;int,pair&lt;int,int&gt;<sp/>&gt;<sp/>edgeNodesMap;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>supportedEdges;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ied<sp/>=<sp/>0;<sp/>ied<sp/>&lt;<sp/>nEdges_global;<sp/>ied++)</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ned,nn0,nn1;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edId(0);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>ned<sp/>&gt;&gt;<sp/>nn0<sp/>&gt;&gt;<sp/>nn1;</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasEdgeMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgeFile<sp/>&gt;&gt;<sp/>edId;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ned<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nn0<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nn1<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>ned<sp/>&amp;&amp;<sp/>ned<sp/>&lt;<sp/>nEdges_global<sp/>&amp;&amp;<sp/>edgeFile.good());</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn0_new<sp/>=<sp/>nodeNumbering_global_old2new[nn0];</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nn0_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nn0_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeEdgesStar.at(nn0_new-nodeOffsets_new[rank]).insert(ned);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>supportedEdges.insert(ned);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn1_new<sp/>=<sp/>nodeNumbering_global_old2new[nn1];</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nn1_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nn1_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeEdgesStar.at(nn1_new-nodeOffsets_new[rank]).insert(ned);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>supportedEdges.insert(ned);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2]<sp/>=<sp/>{nn0_new,nn1_new};</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>nodeTuple(nodes);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edgeElementsMap.find(nodeTuple)<sp/>!=<sp/>edgeElementsMap.end())</highlight><highlight class="comment">//this<sp/>edge<sp/>is<sp/>on<sp/>an<sp/>element<sp/>in<sp/>the<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[0]<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[0]<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_subdomain_owned.insert(ned);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pick<sp/>up<sp/>all<sp/>the<sp/>edges<sp/>on<sp/>the<sp/>subdomain<sp/>and<sp/>store<sp/>their<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesMap[ned].first<sp/>=<sp/>nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[0];</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesMap[ned].second<sp/>=<sp/>nodeTuple.<ref refid="class_node_tuple_1a98190f7d23c18d48b64d61112ffed25a" kindref="member">nodes</ref>[1];</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ihasEdgeMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgeMaterialTypesMap[ned]=edId;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;pair&lt;int,int&gt;<sp/>&gt;::iterator<sp/>elementp=edgeElementsMap[nodeTuple].begin();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementp<sp/>!=<sp/>edgeElementsMap[nodeTuple].end();</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementp++)</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>elementNumbering_global_old2new[elementp-&gt;first];</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elementEdgesMap.find(eN)<sp/>!=<sp/>elementEdgesMap.end())</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementEdgesMap[eN][elementp-&gt;second]<sp/>=<sp/>ned;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="_fourier_8cpp_1a2858154e2009b0e6e616f313177762bc" kindref="member">init</ref>(6,-1);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementEdgesMap[eN]<sp/>=<sp/><ref refid="_fourier_8cpp_1a2858154e2009b0e6e616f313177762bc" kindref="member">init</ref>;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementEdgesMap[eN][elementp-&gt;second]<sp/>=<sp/>ned;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>iv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/>edgeFile.close();</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEdges_owned_subdomain=edges_subdomain_owned.size(),</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>nEdges_owned_new=0;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nEdges_owned_subdomain,&amp;nEdges_owned_new,1,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>assert(nEdges_owned_new<sp/>==<sp/>nEdges_global);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>reading<sp/>edges&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//done<sp/>with<sp/>edge<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//just<sp/>as<sp/>with<sp/>faces,<sp/>we<sp/>need<sp/>to<sp/>add<sp/>edges<sp/>along<sp/>outer<sp/>boundaries<sp/>of<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//not<sp/>sure<sp/>if<sp/>we<sp/>need<sp/>to<sp/>collect<sp/>nodeEdges<sp/>star<sp/>above<sp/>anymore,<sp/>since<sp/>we&apos;re<sp/>doing<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,vector&lt;int&gt;<sp/>&gt;::iterator<sp/>edgesp=elementEdgesMap.begin();</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgesp!=elementEdgesMap.end();</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgesp++)</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>the<sp/>nodes<sp/>of<sp/>this<sp/>element<sp/>for<sp/>the<sp/>owned<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv=0;iv&lt;4;iv++)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>elementNodesArrayMap<sp/>is<sp/>in<sp/>the<sp/>old<sp/>elemetn<sp/>numbering<sp/>while<sp/>the<sp/>elementEdgesMap<sp/>is<sp/>in<sp/>the<sp/>new<sp/>element<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArrayMap[elementNumbering_global_new2old[edgesp-&gt;first]][iv];</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>all<sp/>the<sp/>edges<sp/>to<sp/>this<sp/>node<sp/>star</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ed=0;ed&lt;6;ed++)</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeEdgesStar.at(nN_global-nodeOffsets_new[rank]).insert(edgesp-&gt;second[ed]);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>compact<sp/>data<sp/>structures<sp/>for<sp/>nodeEdgesArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeEdgeOffsets(nNodes_subdomain_new[rank]+1);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>nodeEdgeOffsets[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeEdgeOffsets[nN+1]<sp/>=<sp/>nodeEdgeOffsets[nN]+nodeEdgesStar.at(nN).size();</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeEdgesArray(nodeEdgeOffsets[nNodes_subdomain_new[rank]]);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>edN_star<sp/>=<sp/>nodeEdgesStar.at(nN).begin();</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edN_star<sp/>!=<sp/>nodeEdgesStar.at(nN).end();</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edN_star++,offset++)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeEdgesArray[offset]<sp/>=<sp/>*edN_star;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>=<sp/>edgeNodesMap.size();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>edges<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new(size),</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>edges_subdomain_owned.size();</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new_send=nEdges_subdomain_new;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nEdges_subdomain_new_send[0],&amp;nEdges_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//construct<sp/>new<sp/>offsets<sp/>for<sp/>owned<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/>edgeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new[sdN+1]<sp/>=<sp/>edgeOffsets_new[sdN]+nEdges_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elementBoundaries,<sp/>build<sp/>a<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//resetting<sp/>the<sp/>edge<sp/>based<sp/>information<sp/>is<sp/>a<sp/>little<sp/>different<sp/>since<sp/>much<sp/>of<sp/>this<sp/>is<sp/>currently<sp/>built<sp/>below<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>element<sp/>and<sp/>node<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_new2old(edges_subdomain_owned.size());</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edN_ownedp=edges_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN=0;edN&lt;int(edges_subdomain_owned.size());edN++,edN_ownedp++)</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_new2old[edN]<sp/>=<sp/>*edN_ownedp;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_subdomain_new2old;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,edges_subdomain_owned.size(),&amp;edgeNumbering_new2old[0],PETSC_COPY_VALUES,&amp;edgeNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>ISAllGather(edgeNumberingIS_subdomain_new2old,&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*edgeNumbering_global_new2old;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_global_old2new(newMesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>ISGetIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Setting<sp/>edgeNumering<sp/>old2new/new2old&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN=0;edN&lt;newMesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;edN++)</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_global_old2new[edgeNumbering_global_new2old[edN]]<sp/>=<sp/>edN;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>ISRestoreIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>allocating<sp/>edgeNumering<sp/>old2new/new2old&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Figure<sp/>out<sp/>what<sp/>is<sp/>in<sp/>the<sp/>node<sp/>stars<sp/>but<sp/>not<sp/>locally<sp/>owned,<sp/>create<sp/>ghost<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_overlap,nodes_overlap,elementBoundaries_overlap,edges_overlap;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank];<sp/>nN++)</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>nodeStarOffsetsNew[nN];offset&lt;nodeStarOffsetsNew[nN+1];offset++)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_point_global<sp/>=<sp/>nodeStarArrayNew[offset];</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>nN_point_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_point_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1];</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_point_global);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_offset<sp/>=<sp/>nodeElementOffsets[nN];</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star_offset<sp/>&lt;<sp/>nodeElementOffsets[nN+1];<sp/>eN_star_offset++)</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_old<sp/>=<sp/>nodeElementsArray[eN_star_offset];</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_star_new<sp/>=<sp/>elementNumbering_global_old2new[eN_star_old];</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>eN_star_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1]<sp/>||<sp/>eN_star_new<sp/>&lt;<sp/>elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_star_new);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_star_offset<sp/>=<sp/>nodeElementBoundaryOffsets[nN];</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_star_offset<sp/>&lt;<sp/>nodeElementBoundaryOffsets[nN+1];<sp/>ebN_star_offset++)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_star_old<sp/>=<sp/>nodeElementBoundariesArray[ebN_star_offset];</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_star_new<sp/>=<sp/>elementBoundaryNumbering_global_old2new[ebN_star_old];</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>ebN_star_new<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1]<sp/>||<sp/>ebN_star_new<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank];</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_star_new);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>in<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_star_offset<sp/>=<sp/>nodeEdgeOffsets[nN];</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edN_star_offset<sp/>&lt;<sp/>nodeEdgeOffsets[nN+1];<sp/>edN_star_offset++)</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_star_old<sp/>=<sp/>nodeEdgesArray[edN_star_offset];</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_star_new<sp/>=<sp/>edgeNumbering_global_old2new[edN_star_old];</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>offproc<sp/>=<sp/>edN_star_new<sp/>&gt;=<sp/>edgeOffsets_new[rank+1]<sp/>||<sp/>edN_star_new<sp/>&lt;<sp/>edgeOffsets_new[rank];</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offproc)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edN_star_new);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//nodes<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>elementNumbering_global_old2new.resize(0);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cek<sp/>debugging,<sp/>edge<sp/>overlap<sp/>seems<sp/>to<sp/>be<sp/>messed<sp/>up.<sp/>Check<sp/>global<sp/>node<sp/>tuples<sp/>of<sp/>edges<sp/>vs<sp/>global<sp/>edge<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/>assert(edges_overlap.size()<sp/>+<sp/>nEdges_subdomain_new[rank]<sp/>==<sp/>edgeNodesMap.size());</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//enumerate<sp/>the<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_subdomain<sp/>=<sp/>nNodes_subdomain_new[rank];</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>nodes_overlap_global2subdomainMap;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN_globalp=nodes_overlap.begin();nN_globalp<sp/>!=<sp/>nodes_overlap.end();<sp/>nN_globalp++,nN_subdomain++)</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes_overlap_global2subdomainMap[*nN_globalp]<sp/>=<sp/>nN_subdomain;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;int,int&gt;<sp/>elements_overlap_global2subdomainMap;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(set&lt;int&gt;::iterator<sp/>eN_globalp=elements_overlap.begin();eN_globalp<sp/>!=<sp/>elements_overlap.end();<sp/>eN_globalp++,eN_subdomain++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>elements_overlap_global2subdomainMap[*eN_globalp]<sp/>=<sp/>eN_subdomain;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>ebN_subdomain<sp/>=<sp/>nElementBoundaries_subdomain_new[rank];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;int,int&gt;<sp/>elementBoundaries_overlap_global2subdomainMap;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(set&lt;int&gt;::iterator<sp/>ebN_globalp=elementBoundaries_overlap.begin();ebN_globalp<sp/>!=<sp/>elementBoundaries_overlap.end();<sp/>ebN_globalp++,ebN_subdomain++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>elementBoundaries_overlap_global2subdomainMap[*ebN_globalp]<sp/>=<sp/>ebN_subdomain;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>edN_subdomain<sp/>=<sp/>nEdges_subdomain_new[rank];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map&lt;int,int&gt;<sp/>edges_overlap_global2subdomainMap;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(set&lt;int&gt;::iterator<sp/>edN_globalp=edges_overlap.begin();edN_globalp<sp/>!=<sp/>edges_overlap.end();<sp/>edN_globalp++,edN_subdomain++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>edges_overlap_global2subdomainMap[*edN_globalp]<sp/>=<sp/>edN_subdomain;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//7.<sp/>add<sp/>any<sp/>addtional<sp/>overlap,<sp/>skip<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_edges_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_renumber_event;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Subd&apos;s<sp/>renumber&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_renumber_event);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_renumber_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//8.<sp/>Build<sp/>subdomain<sp/>meshes<sp/>in<sp/>new<sp/>numbering,<sp/>assumes<sp/>memory<sp/>not<sp/>allocated<sp/>in<sp/>subdomain<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rank==0){</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;USER<sp/>WARNING:<sp/>In<sp/>order<sp/>to<sp/>avoid<sp/>a<sp/>segmentation<sp/>fault,<sp/>you<sp/>need<sp/>to<sp/>have<sp/>supplied<sp/>the<sp/>&apos;f&apos;<sp/>flag<sp/>to<sp/>the<sp/>triangleOptions<sp/>input.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;USER<sp/>WARNING:<sp/>In<sp/>order<sp/>to<sp/>avoid<sp/>an<sp/>edge<sp/>assertion<sp/>error,<sp/>you<sp/>need<sp/>to<sp/>have<sp/>supplied<sp/>the<sp/>&apos;ee&apos;<sp/>flag<sp/>to<sp/>the<sp/>triangleOptions<sp/>input.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>();</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>elements_overlap.size();</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/><sp/><sp/><sp/>=<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>nodes_overlap.size();</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>nElementBoundaries_subdomain_new[rank]+elementBoundaries_overlap.size();</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>assert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(edges_subdomain_owned.size()+edges_overlap.size())<sp/>==<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//newMesh.subdomainp-&gt;nEdges_global<sp/><sp/><sp/>=<sp/>edges_subdomain_owned.size()+edges_overlap.size();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/><sp/><sp/>=<sp/>newMesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>newMesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>newMesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//subdomain<sp/>2<sp/>global<sp/>mappings<sp/>(including<sp/>ghost<sp/>info)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_subdomain2global(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain2global(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_subdomain2global(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_subdomain2global(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>nodeNumbering_global2subdomainMap;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>elementBoundaryNumbering_global2subdomainMap;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>edgeNumbering_global2subdomainMap;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3];</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>finally<sp/>finish<sp/>reading<sp/>node<sp/>coordinates<sp/>and<sp/>node<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iv<sp/>=<sp/>0;<sp/>iv<sp/>&lt;<sp/>nNodes_global;<sp/>iv++)</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,y,<ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeId(0);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertexFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a6864bd589ffd5c8a9609b2f776b7acee" kindref="member">eatcomments</ref><sp/>&gt;&gt;<sp/>nv<sp/>&gt;&gt;<sp/>x<sp/>&gt;&gt;<sp/>y<sp/>&gt;&gt;<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasVertexMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexFile<sp/>&gt;&gt;<sp/>nodeId;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nv<sp/>-=<sp/>indexBase;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>nv<sp/>&amp;&amp;<sp/>nv<sp/>&lt;<sp/>nNodes_global<sp/>&amp;&amp;<sp/>vertexFile.good());</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>nodeNumbering_global_old2new[nv];</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_new<sp/>&gt;=<sp/>nodeOffsets_new[rank]<sp/>&amp;&amp;<sp/>nN_global_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv_subdomain_new<sp/>=<sp/>nN_global_new<sp/>-<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nv_subdomain_new]<sp/>=<sp/>nN_global_new;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomainMap[nN_global_new]<sp/>=<sp/>nv_subdomain_new;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>0]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>2]<sp/>=<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasVertexMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nv_subdomain_new]<sp/>=<sp/>nodeId;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodes_overlap.count(nN_global_new)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nv_subdomain_new<sp/>=<sp/>nodes_overlap_global2subdomainMap[nN_global_new];</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nv_subdomain_new]<sp/>=<sp/>nN_global_new;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomainMap[nN_global_new]<sp/>=<sp/>nv_subdomain_new;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>0]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>1]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[vertexDim*nv_subdomain_new<sp/>+<sp/>2]<sp/>=<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasVertexMarkers<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nv_subdomain_new]<sp/>=<sp/>nodeId;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertexFile<sp/>&gt;&gt;<sp/><ref refid="namespace_i_outils_1a88095cfa87223a722ffb84ce3f8e82d2" kindref="member">eatline</ref>;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>iv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>vertexFile.close();</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>ISRestoreIndices(nodeNumberingIS_global_old2new,&amp;nodeNumbering_global_old2new);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodePartitioningIS_new);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//done<sp/>with<sp/>vertex<sp/>file<sp/>(and<sp/>all<sp/>file<sp/>reads<sp/>at<sp/>this<sp/>point)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>reading<sp/>vertices&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>];</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//locally<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank];<sp/>eN++)</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>elementOffsets_new[rank]<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global_new;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypesMap[eN_global_old];</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/><sp/>0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>elementNodesArrayMap[eN_global_old][nN];</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_subdomain<sp/><sp/>=<sp/>nodeNumbering_global2subdomainMap[nN_global_new];</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]=<sp/>nN_subdomain;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_p<sp/>=<sp/>elements_overlap.begin();</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>nElements_subdomain_new[rank];<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>int(elements_overlap.size());<sp/>eN++,eN_p++)</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>*eN_p;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global_new;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypesMap[eN_global_old];</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/><sp/>0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_new<sp/>=<sp/>elementNodesArrayMap[eN_global_old][nN];</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_subdomain<sp/><sp/>=<sp/>nodeNumbering_global2subdomainMap[nN_global_new];</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]=<sp/>nN_subdomain;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementNumberingIS_global_new2old,&amp;elementNumbering_global_new2old);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_subdomain_new2old);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank];<sp/>ebN++)</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>ebN<sp/>+<sp/>elementBoundaryOffsets_new[rank];</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]=ebN_global;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomainMap[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_p<sp/>=<sp/>elementBoundaries_overlap.begin();</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=nElementBoundaries_subdomain_new[rank];ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank]<sp/>+<sp/>int(elementBoundaries_overlap.size());<sp/>ebN++,ebN_p++)</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>*ebN_p;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]<sp/>=<sp/>ebN_global;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomainMap[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>elementBoundariesArray<sp/>to<sp/>assign<sp/>consistent<sp/>numbering<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;nElements_subdomain_new[rank];eN++)</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>eN+elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomainMap[elementBoundaryNumbering_global_old2new[elementBoundariesMap[eN_global][ebN]]];</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>eN_p<sp/>=<sp/>elements_overlap.begin();</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>nElements_subdomain_new[rank];<sp/>eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>int(elements_overlap.size());<sp/>eN++,eN_p++)</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>*eN_p;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomainMap[elementBoundaryNumbering_global_old2new[elementBoundariesMap[eN_global_new][ebN]]];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN=0;<sp/>edN<sp/>&lt;<sp/>nEdges_subdomain_new[rank];<sp/>edN++)</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_global<sp/>=<sp/>edN<sp/>+<sp/>edgeOffsets_new[rank];</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[edN]=edN_global;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_global2subdomainMap[edN_global]<sp/>=<sp/>edN;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ghost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edN_p<sp/>=<sp/>edges_overlap.begin();</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN=nEdges_subdomain_new[rank];edN<sp/>&lt;<sp/>nEdges_subdomain_new[rank]<sp/>+<sp/>int(edges_overlap.size());<sp/>edN++,edN_p++)</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_global<sp/>=<sp/>*edN_p;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[edN]<sp/>=<sp/>edN_global;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_global2subdomainMap[edN_global]<sp/>=<sp/>edN;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>build<sp/>edgeNodes<sp/>array<sp/>in<sp/>new<sp/>numberings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2];</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2;i++)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>for<sp/>(map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,pair&lt;int,int&gt;<sp/>&gt;::iterator<sp/>edgep=edgeNodesMap.begin();</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgep!=edgeNodesMap.end();</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edgep++)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_global_old<sp/>=<sp/>edgep-&gt;first;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_global_new<sp/>=<sp/>edgeNumbering_global_old2new[edN_global_old];</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(edgeNumbering_global2subdomainMap.find(edN_global_new)<sp/>!=<sp/>edgeNumbering_global2subdomainMap.end());</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edN_subdomain<sp/><sp/>=<sp/>edgeNumbering_global2subdomainMap[edN_global_new];</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edN_subdomain*2+0]<sp/>=<sp/>nodeNumbering_global2subdomainMap[edgep-&gt;second.first];</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edN_subdomain*2+1]<sp/>=<sp/>nodeNumbering_global2subdomainMap[edgep-&gt;second.second];</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>edgeNumbering_global_old2new.resize(0);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//end<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>build<sp/>rest<sp/>of<sp/>subdomain<sp/>mesh<sp/>connectivity<sp/>information<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callOld=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callOld)</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaf0f4c6fcb9b418b4096b9fe1a62329d3" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_tetrahedron</ref>(*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>int<sp/>DEFAULT_ELEMENT_MATERIAL=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1ac5eb1896979304d2cb81a648238fc653" kindref="member">DEFAULT_NODE_MATERIAL</ref>=-1;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1ad35607ea8a680ffaf21a6a635c89cfe5" kindref="member">INTERIOR_NODE_MATERIAL</ref>=0;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1a8d3678ad75d9c618bf644fe028adef39" kindref="member">EXTERIOR_NODE_MATERIAL</ref>=1;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1a69c2eeb926c4caa012dd05cfc225af24" kindref="member">INTERIOR_ELEMENT_BOUNDARY_MATERIAL</ref>=0;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mesh_8cpp_1aec3cd3b92573b27832f6c9d2d97f93cf" kindref="member">EXTERIOR_ELEMENT_BOUNDARY_MATERIAL</ref>=1;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>start,stop;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;NodeTuple&lt;3&gt;,</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_element_neighbors" kindref="compound">ElementNeighbors</ref>&gt;<sp/>elementBoundaryElements;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;NodeTuple&lt;3&gt;,</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>elementBoundaryIds;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start=CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Extracting<sp/>boundary<sp/>elements&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[3];</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*4+((ebN+1)%4)];</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*4+((ebN+2)%4)];</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[2]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*4+((ebN+3)%4)];</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;3&gt;</ref><sp/>ebt(nodes);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(elementBoundaryElements.find(ebt)<sp/>!=<sp/>elementBoundaryElements.end())</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElements[ebt].right=eN;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElements[ebt].right_ebN_element=ebN;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(elementBoundaryIds[ebt]<sp/>==<sp/>ebN_global);</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElements.insert(elementBoundaryElements.end(),make_pair(ebt,<ref refid="class_element_neighbors" kindref="compound">ElementNeighbors</ref>(eN,ebN)));</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryIds.insert(elementBoundaryIds.end(),make_pair(ebt,ebN_global));</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stop<sp/>=<sp/>CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Elapsed<sp/>time<sp/>for<sp/>building<sp/>element<sp/>boundary<sp/>elements<sp/>map=<sp/>&quot;&lt;&lt;(stop-start)&lt;&lt;&quot;s&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>elementBoundaryElements.size();</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;nElementBoundaries_global<sp/>=<sp/>&quot;&lt;&lt;newMesh.subdomainp-&gt;nElementBoundaries_global&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Allocating<sp/>Arrays&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>=<sp/>CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;int&gt;<sp/>interiorElementBoundaries,exteriorElementBoundaries;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref><sp/>=<sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>];</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2];</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stop<sp/>=<sp/>CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Elapsed<sp/>time<sp/>for<sp/>allocating<sp/>arrays<sp/>=<sp/>&quot;&lt;&lt;(stop-start)&lt;&lt;&quot;s&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Generating<sp/>elementBoundaryElementsArray<sp/>and<sp/>elementBoundaryNodesArray&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>=<sp/>CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(map&lt;<ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;3&gt;</ref>,<ref refid="class_element_neighbors" kindref="compound">ElementNeighbors</ref>&gt;::iterator<sp/>eb=elementBoundaryElements.begin();</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eb<sp/>!=<sp/>elementBoundaryElements.end();</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eb++)</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>elementBoundaryIds[eb-&gt;first];</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*3<sp/>+<sp/>0]<sp/>=<sp/>eb-&gt;first.nodes[0];</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*3<sp/>+<sp/>1]<sp/>=<sp/>eb-&gt;first.nodes[1];</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*3<sp/>+<sp/>2]<sp/>=<sp/>eb-&gt;first.nodes[2];</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN*2<sp/>+<sp/>0]<sp/>=<sp/>eb-&gt;second.left;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref>[ebN*2<sp/>+<sp/>0]<sp/>=<sp/>eb-&gt;second.left_ebN_element;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN*2<sp/>+<sp/>1]<sp/>=<sp/>eb-&gt;second.right;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref>[ebN*2<sp/>+<sp/>1]<sp/>=<sp/>eb-&gt;second.right_ebN_element;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[eb-&gt;second.left*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>eb-&gt;second.left_ebN_element]<sp/>=<sp/>eb-&gt;second.right;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eb-&gt;second.right<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interiorElementBoundaries.insert(ebN);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[eb-&gt;second.right*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>eb-&gt;second.right_ebN_element]<sp/>=<sp/>eb-&gt;second.left;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exteriorElementBoundaries.insert(ebN);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eb-&gt;second.left*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>eb-&gt;second.left_ebN_element]<sp/>==<sp/>ebN);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eb-&gt;second.right<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eb-&gt;second.right*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>eb-&gt;second.right_ebN_element]<sp/>==<sp/>ebN);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac4c81e5919b922684341f2e9f4fe1054" kindref="member">nInteriorElementBoundaries_global</ref><sp/>=<sp/>interiorElementBoundaries.size();</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ada24a4a97b51d0796ef5d7041a538baa" kindref="member">interiorElementBoundariesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac4c81e5919b922684341f2e9f4fe1054" kindref="member">nInteriorElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref><sp/>=<sp/>exteriorElementBoundaries.size();</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebNI=0,ebNE=0;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>ebN=interiorElementBoundaries.begin();ebN<sp/>!=<sp/>interiorElementBoundaries.end();<sp/>ebN++,ebNI++)</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ada24a4a97b51d0796ef5d7041a538baa" kindref="member">interiorElementBoundariesArray</ref>[ebNI]<sp/>=<sp/>*ebN;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>ebN=exteriorElementBoundaries.begin();ebN<sp/>!=<sp/>exteriorElementBoundaries.end();<sp/>ebN++,ebNE++)</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[ebNE]<sp/>=<sp/>*ebN;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;NodeTuple&lt;2&gt;<sp/>&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_L=0;nN_L&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN_L++)</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_R=nN_L+1;nN_R&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN_R++)</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*4+nN_L];</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*4+nN_R];</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges.insert(<ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref>(nodes));</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>==<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(edges.size()));</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeStar(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edgeN=0;edgeN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;edgeN++)</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeStar[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN*2+0]].insert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN*2+1]);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeStar[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN*2+1]].insert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[edgeN*2+0]);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+1];</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=1;nN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+1;nN++)</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN-1]<sp/>+<sp/>nodeStar[nN-1].size();</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]];</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;nN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN_star=nodeStar[nN].begin();nN_star!=nodeStar[nN].end();nN_star++,offset++)</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[offset]<sp/>=<sp/>*nN_star;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stop<sp/>=<sp/>CurrentTime();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>=0;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>=<ref refid="group__analytical_solutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>,newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN+1]-newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[nN]);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>repeat<sp/>for<sp/>node--&gt;elements<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>nodeElementsStar(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeElementsStar[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]].insert(eN);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+1];</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN+1]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[nN]+nodeElementsStar[nN].size();</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]];</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0,offset=0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>eN_star<sp/>=<sp/>nodeElementsStar[nN].begin();<sp/>eN_star<sp/>!=<sp/>nodeElementsStar[nN].end();</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_star++,offset++)</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset]<sp/>=<sp/>*eN_star;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>end<sp/>node--&gt;elements<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>nodeMaterial<sp/>is<sp/>DEFAULT,<sp/>go<sp/>ahead<sp/>and<sp/>set<sp/>to<sp/>interior<sp/>or<sp/>exterior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//depending<sp/>on<sp/>which<sp/>boundary<sp/>node<sp/>belongs<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>node<sp/>on<sp/>at<sp/>least<sp/>one<sp/>exterior<sp/>boundary<sp/>then<sp/>it&apos;s<sp/>exterior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebNE<sp/>=<sp/>0;<sp/>ebNE<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>;<sp/>ebNE++)</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[ebNE];</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN]<sp/>=<sp/><ref refid="mesh_8cpp_1aec3cd3b92573b27832f6c9d2d97f93cf" kindref="member">EXTERIOR_ELEMENT_BOUNDARY_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_local<sp/>=<sp/>0;<sp/>nN_local<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;<sp/>nN_local++)</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN_local];</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>==<sp/><ref refid="mesh_8cpp_1ac5eb1896979304d2cb81a648238fc653" kindref="member">DEFAULT_NODE_MATERIAL</ref>)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>=<sp/><ref refid="mesh_8cpp_1a8d3678ad75d9c618bf644fe028adef39" kindref="member">EXTERIOR_NODE_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebNI<sp/>=<sp/>0;<sp/>ebNI<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac4c81e5919b922684341f2e9f4fe1054" kindref="member">nInteriorElementBoundaries_global</ref>;<sp/>ebNI++)</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ada24a4a97b51d0796ef5d7041a538baa" kindref="member">interiorElementBoundariesArray</ref>[ebNI];</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN]<sp/>=<sp/><ref refid="mesh_8cpp_1a69c2eeb926c4caa012dd05cfc225af24" kindref="member">INTERIOR_ELEMENT_BOUNDARY_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_local<sp/>=<sp/>0;<sp/>nN_local<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;<sp/>nN_local++)</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN_local];</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>==<sp/><ref refid="mesh_8cpp_1ac5eb1896979304d2cb81a648238fc653" kindref="member">DEFAULT_NODE_MATERIAL</ref>)</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>=<sp/><ref refid="mesh_8cpp_1ad35607ea8a680ffaf21a6a635c89cfe5" kindref="member">INTERIOR_NODE_MATERIAL</ref>;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout&lt;&lt;&quot;Elapsed<sp/>time<sp/>for<sp/>populating<sp/>arrays<sp/>=<sp/>&quot;&lt;&lt;(stop-start)&lt;&lt;&quot;s&quot;&lt;&lt;endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>local<sp/>geometric<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><ref refid="group__mesh_1gad97db4b6e238c242afedd5fa8b914e3e" kindref="member">allocateGeometricInfo_tetrahedron</ref>(*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><ref refid="group__mesh_1gaff191b3e806b335cd6d0916218132c96" kindref="member">computeGeometricInfo_tetrahedron</ref>(*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasElementBoundaryMarkers)</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;int,int&gt;::iterator<sp/>ebmp<sp/>=<sp/>elementBoundaryMaterialTypesMap.begin();<sp/>ebmp<sp/>!=<sp/>elementBoundaryMaterialTypesMap.end();ebmp++)</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global_new<sp/>=<sp/>elementBoundaryNumbering_global_old2new[ebmp-&gt;first];</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(elementBoundaryNumbering_global2subdomainMap.find(ebN_global_new)<sp/>!=<sp/>elementBoundaryNumbering_global2subdomainMap.end());</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_subdomain<sp/><sp/>=<sp/>elementBoundaryNumbering_global2subdomainMap[ebN_global_new];</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_subdomain]<sp/>=<sp/>ebmp-&gt;second;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hasVertexMarkers)</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebNE<sp/>=<sp/>0;<sp/>ebNE<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a82b53fc6597fe4f29edddeb858bd716d" kindref="member">nExteriorElementBoundaries_global</ref>;<sp/>ebNE++)</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a80b82e649bdf89cfb40a4d63128dfe8f" kindref="member">exteriorElementBoundariesArray</ref>[ebNE];</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_local<sp/>=<sp/>0;<sp/>nN_local<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;<sp/>nN_local++)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN*newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN_local];</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]<sp/>=<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN];</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>elementBoundaryNumbering_global_old2new.resize(0);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>with<sp/>material<sp/>types&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_renumber_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_subdomains_cleanup_event;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>PetscLogEventRegister(</highlight><highlight class="stringliteral">&quot;Cleanup&quot;</highlight><highlight class="normal">,0,&amp;build_subdomains_cleanup_event);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>PetscLogEventBegin(build_subdomains_cleanup_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//transfer<sp/>information<sp/>about<sp/>owned<sp/>nodes<sp/>and<sp/>elements<sp/>to<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>)</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN<sp/>=<sp/>0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[sdN]<sp/><sp/><sp/><sp/>=<sp/>nodeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementOffsets_new[sdN];</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementBoundaryOffsets_new[sdN];</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>edgeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[nN]<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>if<sp/>(newMesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>[eN]<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/>if<sp/>(newMesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>0;<sp/>ebN<sp/>&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>[ebN]<sp/>=<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/>if<sp/>(newMesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>)</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>newMesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>newMesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>];</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>newMesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>newMesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>[i]<sp/>=<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>core*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>H5Sclose(filespace);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/>H5Sclose(memspace);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>H5Pclose(plist_id);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>H5Fclose(file_id);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>out<sp/>of<sp/>core<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>PetscLogEventEnd(build_subdomains_cleanup_event,0,0,0,0);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>PetscLogStagePop();</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>PetscLogView(PETSC_VIEWER_STDOUT_WORLD);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/><ref refid="namespaceproteus_1afa9f1b379dd528d249097642bacf85b9" kindref="member">enforceMemoryLimit</ref>(PROTEUS_COMM_WORLD,<sp/>rank,<sp/>max_rss_gb,</highlight><highlight class="stringliteral">&quot;Done<sp/>with<sp/>partitioning!&quot;</highlight><highlight class="normal">);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="comment">//todo<sp/>add<sp/>overlap<sp/>for<sp/>element<sp/>based<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960" refid="namespaceproteus_1ac704dbcca07e0565d2a9b74ae01c6e4e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1ac704dbcca07e0565d2a9b74ae01c6e4e" kindref="member">partitionElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_overlap)</highlight></codeline>
<codeline lineno="2961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Partition<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>&quot;default&quot;<sp/>partition<sp/>(contiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//chunks<sp/>in<sp/>given<sp/>ordering)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Partition<sp/>the<sp/>elementNeighbors<sp/>based<sp/>on<sp/>this<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Pass<sp/>to<sp/>Parmetis<sp/>to<sp/>build<sp/>a<sp/>better<sp/>partition<sp/>of<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>Tag<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>nodes<sp/>and<sp/>faces<sp/>on<sp/>the<sp/>subdomain<sp/>elements<sp/>as<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//using<sp/>a<sp/>mark<sp/>and<sp/>pass<sp/>approach.**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>Extract<sp/>the<sp/>nodes<sp/>and<sp/>faces<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//overlapping<sp/>elements.**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Build<sp/>the<sp/>subdomain<sp/>mesh<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//subdomain<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//**To<sp/>be<sp/>more<sp/>general<sp/>we<sp/>could<sp/>get<sp/>all<sp/>the<sp/>support<sp/>(i.e.<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>edges)<sp/>and<sp/>partitiong<sp/>them,<sp/>but<sp/>the<sp/>main<sp/>reason<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//partitioning<sp/>is<sp/>to<sp/>keep<sp/>track<sp/>of<sp/>a<sp/>global<sp/>numbering<sp/>for<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//of<sp/>freedom<sp/>that<sp/>live<sp/>on<sp/>each<sp/>type<sp/>of<sp/>geometric<sp/>entity.<sp/>We<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//have<sp/>node<sp/>and<sp/>element<sp/>based<sp/>DOFs<sp/>so<sp/>I<sp/>just<sp/>rebuild<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//information<sp/>once<sp/>we<sp/>have<sp/>elements<sp/>and<sp/>nodes<sp/>partitioned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>\todo<sp/>check<sp/>that<sp/>I<sp/>restore<sp/>all<sp/>data<sp/>that<sp/>PETSc<sp/>expects<sp/>to<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>back,<sp/>add<sp/>PETSc<sp/>error<sp/>checking<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//1.<sp/>Build<sp/>default<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>offsets<sp/>so<sp/>we<sp/>can<sp/>calculate<sp/>the<sp/>processor<sp/>to<sp/>global<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>elements<sp/>in<sp/>the<sp/>old<sp/>(default)<sp/>partitioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementOffsets_old(size+1);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/>elementOffsets_old[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_old[sdN+1]<sp/>=<sp/>elementOffsets_old[sdN]<sp/>+</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>)/size<sp/>+</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(int(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>)%size<sp/>&gt;<sp/>sdN);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//2.<sp/>Extract<sp/>subdomain<sp/>element<sp/>adjacency<sp/>information<sp/>could<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//only<sp/>the<sp/>required<sp/>portion<sp/>from<sp/>a<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_subdomain<sp/>=<sp/>(elementOffsets_old[rank+1]<sp/>-<sp/>elementOffsets_old[rank]);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/>PetscInt<sp/>*elementNeighborsOffsets_subdomain,*elementNeighbors_subdomain,*weights_subdomain;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain+1),&amp;elementNeighborsOffsets_subdomain);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),&amp;elementNeighbors_subdomain);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>PetscMalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PetscInt)*(nElements_subdomain*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),&amp;weights_subdomain);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this<sp/>wastes<sp/>a<sp/>little<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/>elementNeighborsOffsets_subdomain[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0,offset=0;<sp/>eN<sp/>&lt;<sp/>nElements_subdomain;<sp/>eN++)</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>elementOffsets_old[rank]<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offsetStart=offset;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_neighbor_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN];</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_neighbor_global<sp/>&gt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighbors_subdomain[offset++]<sp/>=<sp/>eN_neighbor_global;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsOffsets_subdomain[eN+1]=offset;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sort(&amp;elementNeighbors_subdomain[offsetStart],&amp;elementNeighbors_subdomain[offset]);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>(elementNeighborsOffsets_subdomain[eN+1]<sp/>-<sp/>elementNeighborsOffsets_subdomain[eN]);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=elementNeighborsOffsets_subdomain[eN];k&lt;elementNeighborsOffsets_subdomain[eN+1];k++)</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_subdomain[k]<sp/>=<sp/>weight;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//3.<sp/>Generate<sp/>the<sp/><sp/>new<sp/>partitiong<sp/>using<sp/>PETSc,<sp/>this<sp/>is<sp/>done<sp/>in<sp/>parallel<sp/>using<sp/>parmetis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/>Mat<sp/>petscAdjacency;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain,<sp/>mesh.nElements_global,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;elementNeighborsOffsets_subdomain[0],<sp/>&amp;elementNeighbors_subdomain[0],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;weights_subdomain[0],//PETSC_NULL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MatCreateMPIAdj(PROTEUS_COMM_WORLD,</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nElements_subdomain,</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>,</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsOffsets_subdomain,</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighbors_subdomain,</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSC_NULL,</highlight><highlight class="comment">//weights_subdomain,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;petscAdjacency);CHKERRABORT(PROTEUS_COMM_WORLD,<sp/>ierr);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>PetscFree(weights_subdomain);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>MatPartitioning<sp/>petscPartition;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/>MatPartitioningCreate(PROTEUS_COMM_WORLD,&amp;petscPartition);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/>MatPartitioningSetAdjacency(petscPartition,petscAdjacency);</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>MatPartitioningSetFromOptions(petscPartition);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>a<sp/>petsc<sp/>index<sp/>set<sp/>that<sp/>has<sp/>the<sp/>new<sp/>submdomain<sp/>number<sp/>for<sp/>each<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>IS<sp/>elementPartitioningIS_new;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/>MatPartitioningApply(petscPartition,&amp;elementPartitioningIS_new);</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/>MatPartitioningDestroy(&amp;petscPartition);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>MatDestroy(&amp;petscAdjacency);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ISView(elementPartitioningIS_new,PETSC_VIEWER_STDOUT_WORLD);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//experiment<sp/>with<sp/>metis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>set<sp/>some<sp/>defaults<sp/>and<sp/>not<sp/>call<sp/>if<sp/>size<sp/>==<sp/>1<sp/>since<sp/>metis<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cek<sp/>commenting<sp/>out<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>etype=1,edgecut=0,base=0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//epart<sp/>assign<sp/>everything<sp/>to<sp/>processor<sp/>zero<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//valarray&lt;int&gt;<sp/>epart(0,mesh.nElements_global),npart(mesh.nNodes_global);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(size<sp/>&gt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>METIS_PartMeshNodal(&amp;mesh.nElements_global,&amp;mesh.nNodes_global,mesh.elementNodesArray,&amp;etype,&amp;base,&amp;size,&amp;edgecut,&amp;epart[0],&amp;npart[0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ISCreateGeneralWithArray(PETSC_COMM_SELF,mesh.nElements_global,&amp;epart[0],&amp;elementPartitioningIS_new);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>mesh<sp/>to<sp/>view<sp/>with<sp/>showme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>nodeout(&quot;mesh.node&quot;),eleout(&quot;mesh.ele&quot;),partout(&quot;mesh.part&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;<sp/>3<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;\t&quot;&lt;&lt;size&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eN=0;eN&lt;mesh.nElements_global;eN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[eN])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eleout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+mesh.elementNodesArray[eN*3+2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>nodeout&lt;&lt;mesh.nNodes_global&lt;&lt;&quot;<sp/>2<sp/>0<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN=0;nN&lt;mesh.nNodes_global;nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>nodeout&lt;&lt;(nN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;mesh.nodeArray[nN*3+0]&lt;&lt;&quot;\t&quot;&lt;&lt;mesh.nodeArray[nN*3+1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//count<sp/>the<sp/>new<sp/>number<sp/>of<sp/>elements<sp/>on<sp/>each<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElements_subdomain_new(size);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>ISPartitioningCount(elementPartitioningIS_new,size,&amp;nElements_subdomain_new[0]);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>offsets<sp/>for<sp/>the<sp/>subdomain<sp/>to<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementOffsets_new(size+1);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>elementOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>elementOffsets_new[sdN+1]<sp/>=<sp/>elementOffsets_new[sdN]<sp/>+<sp/>nElements_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>new<sp/>element<sp/>numbers<sp/>for<sp/>the<sp/>elements<sp/>on<sp/>this<sp/><sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_subdomain_old2new;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>ISPartitioningToNumbering(elementPartitioningIS_new,&amp;elementNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>get<sp/>the<sp/>new<sp/>element<sp/>numbers<sp/>for<sp/>the<sp/>whole<sp/>mesh<sp/>so<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//can<sp/>just<sp/>read<sp/>this<sp/>processors<sp/>elements,<sp/>reorder,<sp/>and<sp/>renumber**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//**We<sp/>could<sp/>do<sp/>this<sp/>in<sp/>parallel<sp/>by<sp/>scattering<sp/>all<sp/>the<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/>IS<sp/>elementNumberingIS_global_old2new;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/>ISAllGather(elementNumberingIS_subdomain_old2new,&amp;elementNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementNumbering_global_old2new;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/>ISGetIndices(elementNumberingIS_global_old2new,&amp;elementNumbering_global_old2new);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_global_new2old(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>elementNumbering_global_new2old[elementNumbering_global_old2new[eN]]<sp/>=<sp/>eN;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sort<sp/>element<sp/>based<sp/>arrays,<sp/>maybe<sp/>I<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this,<sp/>maybe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//I<sp/>just<sp/>need<sp/>to<sp/>start<sp/>writing<sp/>into<sp/>the<sp/>subdomain<sp/>mesh<sp/>here<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//preserve<sp/>subdomain2old<sp/>and<sp/>subdomain2global<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNodesArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>),</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>elementNeighborsArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>elementMaterialTypes_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>),</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundariesArray_new(mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>),</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2),</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryLocalElementBoundariesArray_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2),</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryNodesArray_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>),</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeNodesArray_new(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryMaterialTypes_new(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]<sp/>=</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//need<sp/>new<sp/>elements<sp/>--&gt;<sp/>old<sp/>element<sp/>boundary<sp/>numbers<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[elementNumbering_global_new2old[eN]*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementMaterialTypes_new[eN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[elementNumbering_global_new2old[eN]];</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//renumber<sp/>references<sp/>to<sp/>element<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_global_old2new[eN_ebN];</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4.<sp/>now<sp/>we<sp/>need<sp/>to<sp/>build<sp/>a<sp/>new<sp/>node<sp/>ordering<sp/>with<sp/>better<sp/>data<sp/>locality<sp/>for<sp/>C0<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//otherwise<sp/>we<sp/>could<sp/>just<sp/>grab<sp/>the<sp/>nodes<sp/>on<sp/>the<sp/>subdomain<sp/>and<sp/>not<sp/>worry<sp/>about<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in<sp/>the<sp/>long<sp/>run<sp/>it<sp/>wouldn&apos;t<sp/>be<sp/>bad<sp/>to<sp/>do<sp/>a<sp/>global<sp/>repartition<sp/>of<sp/>faces<sp/>and<sp/>edges<sp/>for<sp/>mixed<sp/>hybrid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>non-conforming<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/>PetscBT<sp/>nodeMask;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>,&amp;nodeMask);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(nodeMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status);</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>nodes<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>the<sp/>node<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>nodes_subdomain_owned;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PetscBTLookupSet(nodeMask,nN_global))</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_subdomain_owned.insert(nN_global);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ship<sp/>off<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(nodeMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;nodeMask);</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>nodes<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new(size),</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain_new[sdN]<sp/>=<sp/>nodes_subdomain_owned.size();</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nNodes_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nNodes_subdomain_new_send=nNodes_subdomain_new;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nNodes_subdomain_new_send[0],&amp;nNodes_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>nodeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeOffsets_new[sdN+1]<sp/>=<sp/>nodeOffsets_new[sdN]+nNodes_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>assert(nodeOffsets_new[size]==mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elements<sp/>build<sp/>a<sp/>global<sp/>node<sp/>numbering,<sp/>sort<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//based<sp/>information,<sp/>and<sp/>renumber<sp/>references<sp/>to<sp/>node<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_new2old(nodes_subdomain_owned.size());</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_ownedp=nodes_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;int(nodes_subdomain_owned.size());nN++)</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_new2old[nN]<sp/>=<sp/>*nN_ownedp++;</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_new2old;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nodes_subdomain_owned.size(),&amp;nodeNumbering_new2old[0],PETSC_COPY_VALUES,&amp;nodeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>IS<sp/>nodeNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>ISAllGather(nodeNumberingIS_new2old,&amp;nodeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*nodeNumbering_global_new2old;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_old2new_global(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/>ISGetIndices(nodeNumberingIS_global_new2old,&amp;nodeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_old2new_global[nodeNumbering_global_new2old[nN]]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_old<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>postpone<sp/>until<sp/>after<sp/>element<sp/>boundary<sp/>renumbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;i&lt;mesh.nElementBoundaries_global*mesh.nNodes_elementBoundary;i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nN_old<sp/>=<sp/>mesh.elementBoundaryNodesArray[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNodesArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2;i++)</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[i];</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeStarArray_new(mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>]);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];i++)</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[i];</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeStarArray_new[i]<sp/>=<sp/>nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>valarray&lt;double&gt;<sp/>nodeArray_new(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/><sp/>nodeMaterialTypes_new(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_new<sp/>=<sp/>nodeNumbering_old2new_global[nN];</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0];</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1];</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeArray_new[nN_new*3+2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2];</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeMaterialTypes_new[nN_new]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN];</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4b.<sp/>repeat<sp/>process<sp/>to<sp/>build<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status_elementBoundaries;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>PetscBT<sp/>elementBoundaryMask;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>,&amp;elementBoundaryMask);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(elementBoundaryMask,PetscBTLength(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status_elementBoundaries);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>faces<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>the<sp/>global<sp/>face<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elementBoundaries_subdomain_owned;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PetscBTLookup(elementBoundaryMask,ebN_global))</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>notFound=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;nN++)</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN_global*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN];</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodes_subdomain_owned.count(nN_global_old)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notFound=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notFound)</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;=========================Face<sp/>has<sp/>no<sp/>owned<sp/>nodes&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PetscBTSet(elementBoundaryMask,ebN_global);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_subdomain_owned.insert(ebN_global);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PetscBTSet(elementBoundaryMask,ebN_global);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_subdomain_owned.insert(ebN_global);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;Done<sp/>marking<sp/>element<sp/>boundares<sp/>&quot;&lt;&lt;elementBoundaries_subdomain_owned.size()&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ship<sp/>off<sp/>the<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(elementBoundaryMask,PetscBTLength(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;elementBoundaryMask);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy<sp/>for<sp/>elementBoundaries&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>number<sp/>of<sp/>elementBoundaries<sp/>on<sp/>each<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new(size),</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new(size+1);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>elementBoundaries_subdomain_owned.size();</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nElementBoundaries_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nElementBoundaries_subdomain_new_send=nElementBoundaries_subdomain_new;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nElementBoundaries_subdomain_new_send[0],&amp;nElementBoundaries_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>elementBoundaryOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>elementBoundaryOffsets_new[sdN+1]<sp/>=<sp/>elementBoundaryOffsets_new[sdN]+nElementBoundaries_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Now<sp/>as<sp/>with<sp/>elements<sp/>and<sp/>nodes<sp/>build<sp/>a<sp/>global<sp/>face<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//resetting<sp/>the<sp/>face<sp/>based<sp/>information<sp/>is<sp/>a<sp/>little<sp/>different<sp/>since<sp/>much<sp/>of<sp/>this<sp/>is<sp/>currently<sp/>built<sp/>below<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//on<sp/>the<sp/>element<sp/>and<sp/>node<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_new2old(elementBoundaries_subdomain_owned.size());</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_ownedp=elementBoundaries_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;int(elementBoundaries_subdomain_owned.size());ebN++)</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_new2old[ebN]<sp/>=<sp/>*ebN_ownedp++;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_new2old;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,elementBoundaries_subdomain_owned.size(),&amp;elementBoundaryNumbering_new2old[0],PETSC_COPY_VALUES,&amp;elementBoundaryNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>IS<sp/>elementBoundaryNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/>ISAllGather(elementBoundaryNumberingIS_new2old,&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*elementBoundaryNumbering_global_new2old;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_old2new_global(mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/>ISGetIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_old2new_global[elementBoundaryNumbering_global_new2old[ebN]]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_old;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_old<sp/>=<sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=<sp/>elementBoundaryNumbering_old2new_global[ebN_old];</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//redo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_old=elementBoundaryNumbering_global_new2old[ebN];</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;<sp/>nN&lt;mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[ebN_old*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN];</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNodesArray_new[ebN*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>+nN]=nodeNumbering_old2new_global[nN_old];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_L_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN_old*2+0],</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_R_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[ebN_old*2+1];</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new[ebN*2+0]<sp/>=<sp/>elementNumbering_global_old2new[eN_L_old];</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eN_R_old<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryElementsArray_new[ebN*2+1]<sp/>=<sp/>elementNumbering_global_old2new[eN_R_old];</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryMaterialTypes_new[ebN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_old];</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug<sp/>check<sp/>constistency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ebN=0;<sp/>ebN&lt;mesh.nElementBoundaries_global;ebN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>eN_left=elementBoundaryElementsArray_new[ebN*2+0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>eN_right=elementBoundaryElementsArray_new[ebN*2+1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>assert(eN_left&gt;=0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bool<sp/>found_ebN_left=false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ebN_element=0;<sp/>ebN_element&lt;mesh.nElementBoundaries_element;<sp/>ebN_element++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ebN<sp/>==<sp/>elementBoundariesArray_new[eN_left*mesh.nElementBoundaries_element+ebN_element])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ebN_element==elementBoundaryLocalElementBoundariesArray_new[ebN*2+0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_ebN_left=true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>assert(found_ebN_left);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(eN_right&gt;=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>found_ebN_right=false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>ebN_element=0;<sp/>ebN_element&lt;mesh.nElementBoundaries_element;<sp/>ebN_element++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ebN<sp/>==<sp/>elementBoundariesArray_new[eN_right*mesh.nElementBoundaries_element+ebN_element])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ebN_element==elementBoundaryLocalElementBoundariesArray_new[ebN*2+1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_ebN_right=true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(found_ebN_right);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//do<sp/>not<sp/>renumber<sp/>interior<sp/>and<sp/>exterior<sp/>element<sp/>boundary<sp/>arrays<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//write<sp/>partitioned<sp/>mesh<sp/>to<sp/>view<sp/>with<sp/>&quot;showme&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>nodeout(&quot;mesh.node&quot;),eleout(&quot;mesh.ele&quot;),partout(&quot;mesh.part&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;<sp/>3<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout&lt;&lt;mesh.nElements_global&lt;&lt;&quot;\t&quot;&lt;&lt;size&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>eN=0;eN&lt;mesh.nElements_global;eN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[elementNumbering_global_new2old[eN]])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//partout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+epart[eN])&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>eleout&lt;&lt;(eN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;(1+elementNodesArray_new[eN*3+2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>nodeout&lt;&lt;mesh.nNodes_global&lt;&lt;&quot;<sp/>2<sp/>0<sp/>0&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN=0;nN&lt;mesh.nNodes_global;nN++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>nodeout&lt;&lt;(nN+1)&lt;&lt;&quot;\t&quot;&lt;&lt;nodeArray_new[nN*3+0]&lt;&lt;&quot;\t&quot;&lt;&lt;nodeArray_new[nN*3+1]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eleout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>partout.close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//4c.<sp/>Build<sp/>global<sp/>edge<sp/>numbering<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ownership<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>edges<sp/>on<sp/>owned<sp/>elements,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>who<sp/>owns<sp/>the<sp/>left<sp/>(0)<sp/>node<sp/><sp/>of<sp/>the<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/>MPI_Status<sp/>status_edges;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>PetscBT<sp/>edgesMask;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>PetscBTCreate(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>,&amp;edgesMask);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Recv(edgesMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>),MPI_CHAR,rank-1,0,PROTEUS_COMM_WORLD,&amp;status_edges);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mark<sp/>the<sp/>unmarked<sp/>faces<sp/>on<sp/>this<sp/>subdomain<sp/>and<sp/>store<sp/>the<sp/>global<sp/>face<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>nodesEdgeMap_global;<sp/></highlight><highlight class="comment">//new<sp/>global<sp/>node<sp/>numbers<sp/>--&gt;<sp/>original<sp/>edge<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>edges_subdomain_owned;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>0;<sp/>ig<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>ig++)</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>edgeNodesArray_new[2*ig];</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>edgeNodesArray_new[2*ig+1];</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_global[et]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight><highlight class="comment">//assume<sp/>all<sp/>nodes<sp/>in<sp/>element<sp/>may<sp/>be<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodesEdgeMap_global.find(et)<sp/>!=<sp/>nodesEdgeMap_global.end())</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global[et];</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!PetscBTLookup(edgesMask,edge_global))</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PetscBTSet(edgesMask,edge_global);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_subdomain_owned.insert(nodesEdgeMap_global[et]);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rank<sp/>&lt;<sp/>size-1)</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Send(edgesMask,PetscBTLength(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>),MPI_CHAR,rank+1,0,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>PetscBTDestroy(&amp;edgesMask);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ierr)</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>PetscBTDestroy<sp/>for<sp/>edges&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new(size),</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new(size+1);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size;<sp/>sdN++)</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sdN<sp/>==<sp/>rank)</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>edges_subdomain_owned.size();</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nEdges_subdomain_new[sdN]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//collect<sp/>ownership<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nEdges_subdomain_new_send=nEdges_subdomain_new;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>MPI_Allreduce(&amp;nEdges_subdomain_new_send[0],&amp;nEdges_subdomain_new[0],size,MPI_INT,MPI_SUM,PROTEUS_COMM_WORLD);</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/>edgeOffsets_new[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size;sdN++)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeOffsets_new[sdN+1]<sp/>=<sp/>edgeOffsets_new[sdN]+nEdges_subdomain_new[sdN];</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>new<sp/>petsc<sp/>numbering<sp/>and<sp/>global<sp/>maps<sp/>from<sp/>old2new<sp/>and<sp/>new2old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_new2old(edges_subdomain_owned.size());</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edges_ownedp<sp/>=<sp/>edges_subdomain_owned.begin();</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>int(edges_subdomain_owned.size());i++)</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/>edgeNumbering_new2old[i]<sp/>=<sp/>*edges_ownedp++;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_new2old;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,edges_subdomain_owned.size(),&amp;edgeNumbering_new2old[0],PETSC_COPY_VALUES,&amp;edgeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>IS<sp/>edgeNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>ISAllGather(edgeNumberingIS_new2old,&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*edgeNumbering_global_new2old;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_old2new_global(mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>ISGetIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig=0;ig&lt;mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;ig++)</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_old2new_global[edgeNumbering_global_new2old[ig]]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/><sp/>array<sp/>with<sp/>(new<sp/>edge)<sp/>--&gt;<sp/>(new<sp/>node<sp/>0,<sp/>new<sp/>node<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>map<sp/>from<sp/>(new<sp/>node<sp/>0,<sp/>new<sp/>node<sp/>1)<sp/>--&gt;<sp/>(new<sp/>global<sp/>edge)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNodesArray_newNodesAndEdges(2*mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&gt;<sp/>nodesEdgeMap_global_new;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>0;<sp/>ig<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>ig++)</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_old<sp/>=<sp/>edgeNumbering_global_new2old[ig];</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>edgeNodesArray_new[edge_old*2+0];</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>edgeNodesArray_new[edge_old*2+1];</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_newNodesAndEdges[ig*2+0]<sp/>=<sp/>edgeNodesArray_new[edge_old*2+0];</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNodesArray_newNodesAndEdges[ig*2+1]<sp/>=<sp/>edgeNodesArray_new[edge_old*2+1];</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodesEdgeMap_global_new.find(et)<sp/>==<sp/>nodesEdgeMap_global_new.end());</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_global_new[et]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//5.<sp/>At<sp/>this<sp/>point<sp/>we<sp/>have<sp/>new,<sp/>renumbered<sp/>and<sp/>sorted<sp/>the<sp/>global<sp/>element,<sp/>and<sp/>node<sp/>based<sp/>information,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>have<sp/>it<sp/>all<sp/>on<sp/>each<sp/>processor<sp/>so<sp/>we<sp/>can<sp/>add<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>elements_overlap,nodes_overlap,elementBoundaries_overlap,edges_overlap;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight><highlight class="comment">//assume<sp/>all<sp/>nodes<sp/>in<sp/>element<sp/>may<sp/>be<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>elementNodesArray_new[eN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN0_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN0_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodes_overlap.find(nN0_global)<sp/>!=<sp/>nodes_overlap.end());</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN1_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN1_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodes_overlap.find(nN1_global)<sp/>!=<sp/>nodes_overlap.end());</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodesEdgeMap_global_new.find(et)<sp/>!=<sp/>nodesEdgeMap_global_new.end())</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nElements_overlap<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>node<sp/>stars<sp/>and<sp/>their<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>nN_new=nodeOffsets_new[rank];<sp/>nN_new<sp/>&lt;<sp/>nodeOffsets_new[rank+1];<sp/>nN_new++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>nN<sp/>=<sp/>nodeNumbering_global_new2old[nN_new];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>offset<sp/>=mesh.nodeElementOffsets[nN];offset&lt;mesh.nodeElementOffsets[nN+1];offset++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>eN<sp/>=<sp/>mesh.nodeElementsArray[offset];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>eN_new<sp/>=<sp/>elementNumbering_global_old2new[eN];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(eN_new<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>or<sp/>eN_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_new);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>nN_element=0;nN_element&lt;mesh.nNodes_element;nN_element++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.nNodes_element+nN_element];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>or<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>node<sp/>stars<sp/>of<sp/>owned<sp/>nodes<sp/>and<sp/>those<sp/>elements&apos;<sp/>nodes<sp/>and<sp/>faces<sp/>and<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>nN=nodes_subdomain_owned.begin();nN<sp/>!=<sp/>nodes_subdomain_owned.end();nN++)</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[*nN];offset&lt;mesh.<ref refid="struct_mesh_1a50cba320e431088d67f5567d80308a05" kindref="member">nodeElementOffsets</ref>[(*nN)+1];offset++)</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a60c946aca5fb10c00847f2595024f645" kindref="member">nodeElementsArray</ref>[offset];</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_new<sp/>=<sp/>elementNumbering_global_old2new[eN];</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_new<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>or<sp/>eN_new<sp/>&gt;=<sp/>elementOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_new);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_element=0;nN_element&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN_element++)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN_element];</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>or<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>elementNodesArray_new[eN_new*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodesEdgeMap_global_new.find(et)<sp/>!=<sp/>nodesEdgeMap_global_new.end())</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>all<sp/>the<sp/>element<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=elementOffsets_new[rank];eN&lt;elementOffsets_new[rank+1];eN++)</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eN_ebN<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>||<sp/>eN_ebN<sp/>&gt;=<sp/>elementOffsets_new[rank+1]))</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_ebN);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_element=0;<sp/>ebN_element&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN_element++)</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundEdge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>layer=1;layer&lt;nElements_overlap;layer++)</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>eN_p=elements_overlap.begin();eN_p<sp/>!=<sp/>elements_overlap.end();eN_p++)</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>*eN_p;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_ebN<sp/>=<sp/>elementNeighborsArray_new[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN];</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN_ebN<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eN_ebN<sp/>&lt;<sp/>elementOffsets_new[rank]<sp/>||<sp/>eN_ebN<sp/>&gt;=<sp/>elementOffsets_new[rank+1]))</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_overlap.insert(eN_ebN);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN];</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global<sp/>&lt;<sp/>nodeOffsets_new[rank]<sp/>||<sp/>nN_global<sp/>&gt;=<sp/>nodeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_overlap.insert(nN_global);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_element=0;<sp/>ebN_element&lt;mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN_element++)</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global=elementBoundariesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>elementBoundaryOffsets_new[rank]<sp/>||<sp/>ebN_global<sp/>&gt;=<sp/>elementBoundaryOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaries_overlap.insert(ebN_global);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//edges<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0=0;nN0&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN0++)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1=nN0+1;<sp/>nN1&lt;mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN1++)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN0];</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>elementNodesArray_new[eN_ebN*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN1];</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>foundEdge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodesEdgeMap_global_new.find(et)<sp/>!=<sp/>nodesEdgeMap_global_new.end())</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/>=<sp/>nodesEdgeMap_global_new[et];</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_global<sp/>&lt;<sp/>edgeOffsets_new[rank]<sp/>||<sp/>edge_global<sp/>&gt;=<sp/>edgeOffsets_new[rank+1])</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_overlap.insert(edge_global);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//6.<sp/>Now<sp/>build<sp/>subdomain<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>what<sp/>we<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>();</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref><sp/>=<sp/>nElements_subdomain_new[rank]<sp/>+<sp/>elements_overlap.size();</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>=<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>nodes_overlap.size();</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//better<sp/>be<sp/>true<sp/>...<sp/>check<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>=<sp/>nElementBoundaries_subdomain_new[rank]+elementBoundaries_overlap.size();</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>=<sp/>nEdges_subdomain_new[rank]<sp/>+<sp/>edges_overlap.size();</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//load<sp/>the<sp/>elements,<sp/>nodes.<sp/>and<sp/>elementBoundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>nodeNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>nodeNumbering_global2subdomain;</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3];</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;nNodes_subdomain_new[rank];nN++)</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>nN<sp/>+<sp/>nodeOffsets_new[rank];</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>nodeArray_new[nN_global*3+0];</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>nodeArray_new[nN_global*3+1];</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>nodeArray_new[nN_global*3+2];</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]=<sp/>nodeMaterialTypes_new[nN_global];</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//note:<sp/>sets<sp/>in<sp/>C++<sp/>are<sp/>sorted<sp/>so<sp/>the<sp/>overlap<sp/>is<sp/>laid<sp/>out<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//contiguous<sp/>chunks<sp/>corresponding<sp/>to<sp/>the<sp/>partitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>nN_p=nodes_overlap.begin();</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=nNodes_subdomain_new[rank];nN<sp/>&lt;<sp/>nNodes_subdomain_new[rank]<sp/>+<sp/>int(nodes_overlap.size());<sp/>nN++)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global<sp/>=<sp/>*nN_p++;</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_subdomain2global[nN]<sp/>=<sp/>nN_global;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[nN_global]<sp/>=<sp/>nN;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+0]<sp/>=<sp/>nodeArray_new[nN_global*3+0];</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+1]<sp/>=<sp/>nodeArray_new[nN_global*3+1];</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN*3+2]<sp/>=<sp/>nodeArray_new[nN_global*3+2];</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae91c6279fa8161e18e52543079aa8cf6" kindref="member">nodeMaterialTypes</ref>[nN]=<sp/>nodeMaterialTypes_new[nN_global];</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//see<sp/>what<sp/>we<sp/>must/can<sp/>set<sp/>for<sp/>element<sp/>boundaries<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementBoundaryNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>map&lt;int,int&gt;<sp/>elementBoundaryNumbering_global2subdomain;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank];<sp/>ebN++)</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>ebN<sp/>+<sp/>elementBoundaryOffsets_new[rank];</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]=ebN_global;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>ebN_p<sp/>=<sp/>elementBoundaries_overlap.begin();</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=nElementBoundaries_subdomain_new[rank];ebN<sp/>&lt;<sp/>nElementBoundaries_subdomain_new[rank]<sp/>+<sp/>int(elementBoundaries_overlap.size());<sp/>ebN++)</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>*ebN_p++;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_subdomain2global[ebN]<sp/>=<sp/>ebN_global;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[ebN_global]<sp/>=<sp/>ebN;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>];</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//try<sp/>to<sp/>use<sp/>elementBoundariesArray<sp/>to<sp/>set<sp/>unique<sp/>element<sp/>boundary<sp/>id<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>=</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>];</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>elementNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;nElements_subdomain_new[rank];eN++)</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>eN+elementOffsets_new[rank];</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypes_new[eN_global];</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[elementNodesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]];</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[elementBoundariesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN]];</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>eN_p=elements_overlap.begin();</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=nElements_subdomain_new[rank];eN<sp/>&lt;<sp/>nElements_subdomain_new[rank]+int(elements_overlap.size());eN++)</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global<sp/>=<sp/>*eN_p++;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[eN]<sp/>=<sp/>elementMaterialTypes_new[eN_global];</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elementNumbering_subdomain2global[eN]<sp/>=<sp/>eN_global;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;nN++)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+nN]<sp/>=</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodeNumbering_global2subdomain[elementNodesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN]];</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;ebN++)</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN]<sp/>=</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryNumbering_global2subdomain[elementBoundariesArray_new[eN_global*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>+<sp/>ebN]];</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//set<sp/>edge<sp/>information,<sp/>main<sp/>piece<sp/>necessary<sp/>for<sp/>setting<sp/>subdomain<sp/>data<sp/>structures<sp/>consistently<sp/>is<sp/>a<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//from<sp/>(nN0,nN1)<sp/>--&gt;<sp/>edge_subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>edgeNumbering_subdomain2global(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>);</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2];</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>nEdges_subdomain_new[rank];<sp/>i++)</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=<sp/>i+edgeOffsets_new[rank];</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+0];</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+1];</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>todo<sp/>double<sp/>check<sp/>can<sp/>always<sp/>count<sp/>on<sp/>having<sp/>nodes<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodeNumbering_global2subdomain.find(nN0_global)<sp/>!=<sp/>nodeNumbering_global2subdomain.end());</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodeNumbering_global2subdomain.find(nN1_global)<sp/>!=<sp/>nodeNumbering_global2subdomain.end());</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN0_global];</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN1_global];</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+0]=nN0_subdomain;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1]=nN1_subdomain;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[i]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>set&lt;int&gt;::iterator<sp/>edge_p<sp/>=<sp/>edges_overlap.begin();</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=nEdges_subdomain_new[rank];<sp/>i<sp/>&lt;<sp/>nEdges_subdomain_new[rank]<sp/>+<sp/>int(edges_overlap.size());<sp/>i++)</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ig<sp/>=*edge_p++;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+0];</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_global<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[ig*2+1];</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>todo<sp/>make<sp/>sure<sp/>always<sp/>have<sp/>nodes<sp/>for<sp/>the<sp/>edge<sp/>on<sp/>this<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN0_global];</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1_subdomain<sp/>=<sp/>nodeNumbering_global2subdomain[nN1_global];</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+0]=nN0_subdomain;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1]=nN1_subdomain;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[i]<sp/>=<sp/>ig;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>fill<sp/>in<sp/>rest<sp/>of<sp/>boundary<sp/>information,<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref>;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7fdce7c323f95480164d26da8bd73b65" kindref="member">py</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7fdce7c323f95480164d26da8bd73b65" kindref="member">py</ref>;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a84f3e389f9666f4e40a65cb50499d712" kindref="member">pz</ref><sp/>=<sp/>mesh.<ref refid="struct_mesh_1a84f3e389f9666f4e40a65cb50499d712" kindref="member">pz</ref>;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abc76092e9f0d48b311c47122dd847d92" kindref="member">px</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga928d08a58ffb5a778e738d6847115f47" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gad36c6af3da3b8edd3b32f5dd8f7b5f18" kindref="member">allocateGeometricInfo_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga0f4f89b6fc203f8443bc671f2ce24c2e" kindref="member">computeGeometricInfo_NURBS</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_edge(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga71bd5b1f46b653a7be9c65b2af9499b4" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga8b4def6a8ea5675441b05b5a7061713b" kindref="member">allocateGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga88041ad8d6afe29f23c6e30837b777db" kindref="member">computeGeometricInfo_edge</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_triangle(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga8fca2274c01965e94bc8855f7391332a" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga1ad1cf0d175b08dec8e1ed161e065295" kindref="member">allocateGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaad90ffdf6bb84d92b74bf824f8662a4b" kindref="member">computeGeometricInfo_triangle</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>4<sp/>&amp;&amp;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref><sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaa187306a2346aeb53640156d1e1890fe" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga7a5874cc209a0c576ed8391e77111a9c" kindref="member">allocateGeometricInfo_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaad2c7d05554f0bb51a7ccfb6855baeb5" kindref="member">computeGeometricInfo_quadrilateral</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructElementBoundaryElementsArrayWithGivenElementBoundaryNumbers_tetrahedron(*mesh.subdomainp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaf0f4c6fcb9b418b4096b9fe1a62329d3" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gad97db4b6e238c242afedd5fa8b914e3e" kindref="member">allocateGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gaff191b3e806b335cd6d0916218132c96" kindref="member">computeGeometricInfo_tetrahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga11c306c06b8fe371531389373dac48d5" kindref="member">constructElementBoundaryElementsArrayWithGivenElementBoundaryAndEdgeNumbers_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1ga0d4a836f32fdf0cacb6250884aafe10b" kindref="member">allocateGeometricInfo_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__mesh_1gafdde7ba7852d7a8a4da1e3dc6bf91b36" kindref="member">computeGeometricInfo_hexahedron</ref>(*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo<sp/>need<sp/>to<sp/>check<sp/>that<sp/>local<sp/>element<sp/>boundary<sp/>numbering<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//element<sp/>boundaries<sp/>stays<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_new<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN_global_old<sp/>=<sp/>elementNumbering_global_new2old[eN_global_new];</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_element<sp/>=<sp/>0;<sp/>ebN_element<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN_element++)</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN_global_old*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+ebN_element];</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_subdomain]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[ebN_global_old];</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//now<sp/>we&apos;ve<sp/>got<sp/>the<sp/>old<sp/>mesh<sp/>in<sp/>the<sp/>old<sp/>ordering<sp/>and<sp/>the<sp/>subdomain<sp/>mesh<sp/>in<sp/>the<sp/>new<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//the<sp/>first<sp/>chunk<sp/>of<sp/>nodes<sp/>and<sp/>elements<sp/>are<sp/>the<sp/>owned<sp/>elements<sp/>so<sp/>we<sp/>need<sp/>to<sp/>know<sp/>how<sp/>many<sp/>of<sp/>those<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//and<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>first<sp/>one<sp/>so<sp/>we<sp/>can<sp/>compute<sp/>subdomain2global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[size+1];</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;sdN&lt;size+1;sdN++)</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9c5445d99949e9311ff67a900cf40a3a" kindref="member">nodeOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>nodeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementOffsets_new[sdN];</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>elementBoundaryOffsets_new[sdN];</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aad6fb618bfc1b53f688723ae41b0ce3f" kindref="member">edgeOffsets_subdomain_owned</ref>[sdN]<sp/>=<sp/>edgeOffsets_new[sdN];</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>also<sp/>need<sp/>the<sp/>subdomain<sp/>2<sp/>new<sp/>global<sp/>mappings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;nN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;nN++)</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a26d2763692e6a60ebdd57fe5b985c569" kindref="member">nodeNumbering_subdomain2global</ref>[nN]<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>];</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;eN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;eN++)</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>[eN]<sp/>=<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>];</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;ebN&lt;mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;ebN++)</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>[ebN]<sp/>=<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/>mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>];</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a087e6d20726837e45bd1caaf1f4bd404" kindref="member">edgeNumbering_subdomain2global</ref>[i]<sp/>=<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//go<sp/>ahead<sp/>and<sp/>renumber<sp/>global<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;nodeArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>*3;i++)</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[i]<sp/>=<sp/>nodeArray_new[i];</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementNodesArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;i++)</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[i]<sp/>=<sp/>elementNodesArray_new[i];</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementBoundaryNodesArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*mesh.<ref refid="struct_mesh_1a23828f68c8378cc9cba4f12da8efab1c" kindref="member">nNodes_elementBoundary</ref>;i++)</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i]<sp/>=<sp/>elementBoundaryNodesArray_new[i];</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;edgeNodesArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>*2;i++)</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[i]<sp/>=<sp/>edgeNodesArray_newNodesAndEdges[i];</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;nodeStarArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;mesh.<ref refid="struct_mesh_1a0d6da5259c422d0a0e7725f7f4194fd4" kindref="member">nodeStarOffsets</ref>[mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>];i++)</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a74dac6068c1cd0a5224d70dff687541f" kindref="member">nodeStarArray</ref>[i]<sp/>=<sp/>nodeStarArray_new[i];</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementNeighborsArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a7dc84c8761e788b972cadef8126c3714" kindref="member">elementNeighborsArray</ref>[i]<sp/>=<sp/>elementNeighborsArray_new[i];</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementBoundariesArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[i]<sp/>=<sp/>elementBoundariesArray_new[i];</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementBoundaryElementsArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2;<sp/>i++)</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a42b5669b961653b62ad86094940ff599" kindref="member">elementBoundaryElementsArray</ref>[i]<sp/>=<sp/>elementBoundaryElementsArray_new[i];</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementBoundaryLocalElementBoundariesArray&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>*2;<sp/>i++)</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a80fee2f34a4f1ce046b8d238ca6eb44d" kindref="member">elementBoundaryLocalElementBoundariesArray</ref>[i]<sp/>=<sp/>elementBoundaryLocalElementBoundariesArray_new[i];</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>material<sp/>properties<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>if<sp/>(mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementMaterialTypes&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1aa7d0c5c7194c72ae5673282fd26f80e6" kindref="member">elementMaterialTypes</ref>[i]<sp/>=<sp/>elementMaterialTypes_new[i];</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;elementBoundaryMaterialTypes&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1a9d8f135ebe113d6c9d1ef60e2ea56cb1" kindref="member">elementBoundaryMaterialTypes</ref>[i]<sp/>=<sp/>elementBoundaryMaterialTypes_new[i];</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementNumberingIS_global_old2new,&amp;elementNumbering_global_old2new);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementPartitioningIS_new);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_subdomain_old2new);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementNumberingIS_global_old2new);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>ISRestoreIndices(nodeNumberingIS_global_new2old,&amp;nodeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;nodeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>ISRestoreIndices(elementBoundaryNumberingIS_global_new2old,&amp;elementBoundaryNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;elementBoundaryNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>ISRestoreIndices(edgeNumberingIS_global_new2old,&amp;edgeNumbering_global_new2old);</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_new2old);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;edgeNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995" refid="namespaceproteus_1a7d697516d1d1a1f9828c3a6f9077a857" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1a7d697516d1d1a1f9828c3a6f9077a857" kindref="member">buildQuadraticSubdomain2GlobalMappings_1d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_all_processes,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>whole<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_subdomain,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>max_dof_neighbors,</highlight><highlight class="comment">//maximum<sp/>number<sp/>of<sp/>neighbors<sp/>for<sp/>connectivity<sp/>of<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets_subdomain_owned,<sp/></highlight><highlight class="comment">//starting<sp/>point<sp/>of<sp/>local<sp/>dofs<sp/>on<sp/>each<sp/>processor<sp/>(nProcs+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>subdomain_l2g,<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>global<sp/>dof<sp/>mapping<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>subdomain2global,</highlight><highlight class="comment">//subdomain<sp/>dof<sp/>to<sp/>global<sp/>(parallel)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>lagrangeNodesArray)</highlight><highlight class="comment">//location<sp/>of<sp/>nodes<sp/>corresponding<sp/>to<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>1d<sp/>the<sp/>quadratic<sp/>dofs<sp/>can<sp/>be<sp/>associated<sp/>with<sp/>nodes<sp/>and<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assuming<sp/>have<sp/>ownership<sp/>info<sp/>and<sp/>consistent<sp/>local/global<sp/>mappings<sp/>for<sp/>nodes,<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>mapping<sp/>from<sp/>local<sp/>quadratic<sp/>dofs<sp/>to<sp/>global<sp/>quadratic<sp/>dofs<sp/>for<sp/>petsc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>a<sp/>processor<sp/>owns<sp/>a<sp/>dof<sp/>if<sp/>it<sp/>owns<sp/>that<sp/>node<sp/>or<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>assert(elementOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/>assert(nodeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>assert(elementNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>assert(nodeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_owned<sp/><sp/><sp/><sp/>=<sp/>nodeOffsets_subdomain_owned[rank+1]-nodeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_owned<sp/>=<sp/>elementOffsets_subdomain_owned[rank+1]-elementOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//start<sp/>with<sp/>a<sp/>logical<sp/>global<sp/>ordering<sp/>of<sp/>dofs<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[global<sp/>nodes,<sp/>global<sp/>elements]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//want<sp/>to<sp/>create<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[nodes<sp/>proc<sp/>0,elements<sp/>proc<sp/>0,nodes<sp/>proc<sp/>1,<sp/>elements<sp/>proc<sp/>1,...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_new2old(nNodes_owned<sp/>+<sp/>nElements_owned);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>nElements_owned;<sp/>eN++)</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>eN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>an<sp/>index<sp/>set<sp/>for<sp/>new<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_new2old;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nNodes_owned<sp/>+<sp/>nElements_owned,&amp;quadraticNumbering_new2old[0],PETSC_COPY_VALUES,&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>ISAllGather(quadraticNumberingIS_new2old,&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>old<sp/>2<sp/>new<sp/>mapping<sp/>for<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*quadraticNumbering_global_new2old;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_old2new_global(mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>ISGetIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++)</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]]<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>id<sp/>=<sp/>0;<sp/>id<sp/>&lt;<sp/>mesh.nNodes_global<sp/>+<sp/>mesh.nElements_global;<sp/>id++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>build<sp/>c0p2<sp/>mappings<sp/>new2old[&quot;&lt;&lt;id&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_global_new2old[id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>old2new[&quot;&lt;&lt;quadraticNumbering_global_new2old[id]&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[id]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>assert(offsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/>assert(subdomain2global);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/>assert(subdomain_l2g);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>assert(lagrangeNodesArray);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/>nDOF_all_processes<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/>nDOF_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/>max_dof_neighbors<sp/>=<sp/>2*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_subdomain_owned[sdN]<sp/>=<sp/>nodeOffsets_subdomain_owned[sdN]+elementOffsets_subdomain_owned[sdN];</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>owned<sp/>and<sp/>ghost<sp/>dofs<sp/>build<sp/>subdomain<sp/>mapping<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//going<sp/>from<sp/>old<sp/>--&gt;<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>nElements_owned;<sp/>eN++)</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>eN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+eN&lt;&lt;&quot;<sp/>nElements_owned=<sp/>&quot;&lt;&lt;nElements_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nNodes_owned;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN<sp/>-nNodes_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN-nNodes_owned&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>nElements_owned;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementNumbering_subdomain2global[eN];</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>eN-nElements_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+eN-nElements_owned&lt;&lt;&quot;<sp/>nElements_owned=<sp/>&quot;&lt;&lt;nElements_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setup<sp/>local<sp/>to<sp/>global<sp/>mapping<sp/>on<sp/>the<sp/>subdomain<sp/>for<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOF_element<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostNodeOffset<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostElementOffset<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>-nNodes_owned;</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>lagrange<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain[2];</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_global_subdomain[nN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_subdomain[nN]<sp/>&lt;<sp/>nNodes_owned)</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+nN]<sp/>=<sp/>nN_global_subdomain[nN];</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+nN]<sp/>=<sp/>nN_global_subdomain[nN]-nNodes_owned<sp/>+<sp/>ghostNodeOffset;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vertex<sp/>dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+nN]*3+eI]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[nN]+eI];</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN<sp/>&lt;<sp/>nElements_owned)</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+2]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+2]<sp/>=<sp/>eN<sp/>-<sp/>nElements_owned<sp/>+<sp/>ghostElementOffset;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vertex<sp/>dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+2]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[0]+eI]+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[1]+eI]);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>ISRestoreIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147" refid="namespaceproteus_1ae3b0032832415b3d23047133de4f44e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1ae3b0032832415b3d23047133de4f44e2" kindref="member">buildQuadraticSubdomain2GlobalMappings_2d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementBoundaryOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementBoundaryNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_all_processes,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>whole<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_subdomain,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>max_dof_neighbors,</highlight><highlight class="comment">//maximum<sp/>number<sp/>of<sp/>neighbors<sp/>for<sp/>connectivity<sp/>of<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets_subdomain_owned,<sp/></highlight><highlight class="comment">//starting<sp/>point<sp/>of<sp/>local<sp/>dofs<sp/>on<sp/>each<sp/>processor<sp/>(nProcs+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain_l2g,<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>global<sp/>dof<sp/>mapping<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain2global,</highlight><highlight class="comment">//subdomain<sp/>dof<sp/>to<sp/>global<sp/>(parallel)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>lagrangeNodesArray)</highlight><highlight class="comment">//location<sp/>of<sp/>nodes<sp/>corresponding<sp/>to<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>2d<sp/>the<sp/>quadratic<sp/>dofs<sp/>can<sp/>be<sp/>associated<sp/>with<sp/>nodes<sp/>and<sp/>element<sp/>Boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assuming<sp/>have<sp/>ownership<sp/>info<sp/>and<sp/>consistent<sp/>local/global<sp/>mappings<sp/>for<sp/>nodes,<sp/>elementBoundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>mapping<sp/>from<sp/>local<sp/>quadratic<sp/>dofs<sp/>to<sp/>global<sp/>quadratic<sp/>dofs<sp/>for<sp/>petsc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>a<sp/>processor<sp/>owns<sp/>a<sp/>dof<sp/>if<sp/>it<sp/>owns<sp/>that<sp/>node<sp/>or<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>assert(elementBoundaryOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/>assert(nodeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>assert(elementBoundaryNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>assert(nodeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_owned<sp/><sp/><sp/><sp/>=<sp/>nodeOffsets_subdomain_owned[rank+1]-nodeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElementBoundaries_owned<sp/>=<sp/>elementBoundaryOffsets_subdomain_owned[rank+1]-elementBoundaryOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_owned<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nElementBoundaries_owned;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_global=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//start<sp/>with<sp/>a<sp/>logical<sp/>global<sp/>ordering<sp/>of<sp/>dofs<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[global<sp/>nodes,<sp/>global<sp/>elementBoundaries]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//want<sp/>to<sp/>create<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[nodes<sp/>proc<sp/>0,elementBoundaries<sp/>proc<sp/>0,nodes<sp/>proc<sp/>1,<sp/>elementBoundaries<sp/>proc<sp/>1,...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_new2old(nDOFs_owned);</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>0;<sp/>ebN<sp/>&lt;<sp/>nElementBoundaries_owned;<sp/>ebN++)</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>ebN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>an<sp/>index<sp/>set<sp/>for<sp/>new<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_new2old;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nDOFs_owned,&amp;quadraticNumbering_new2old[0],PETSC_COPY_VALUES,&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/>ISAllGather(quadraticNumberingIS_new2old,&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>old<sp/>2<sp/>new<sp/>mapping<sp/>for<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*quadraticNumbering_global_new2old;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_old2new_global(nDOFs_global);</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/>ISGetIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>nDOFs_global;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]]<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>id<sp/>=<sp/>0;<sp/>id<sp/>&lt;<sp/>nDOFs_global;<sp/>id++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>build<sp/>2d<sp/>c0p2<sp/>mappings<sp/>new2old[&quot;&lt;&lt;id&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_global_new2old[id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>old2new[&quot;&lt;&lt;quadraticNumbering_global_new2old[id]&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[id]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/>assert(offsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>assert(subdomain2global);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>assert(subdomain_l2g);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>assert(lagrangeNodesArray);</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_subdomain_owned[sdN]<sp/>=<sp/>nodeOffsets_subdomain_owned[sdN]+elementBoundaryOffsets_subdomain_owned[sdN];</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/>nDOF_all_processes<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>nDOF_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>max_dof_neighbors<sp/>=<sp/>2*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>owned<sp/>and<sp/>ghost<sp/>dofs<sp/>build<sp/>subdomain<sp/>mapping<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//going<sp/>from<sp/>old<sp/>--&gt;<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>0;<sp/>ebN<sp/>&lt;<sp/>nElementBoundaries_owned;<sp/>ebN++)</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>ebN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>ebN=<sp/>&quot;&lt;&lt;ebN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+ebN&lt;&lt;&quot;<sp/>nElementBoundaries_owned=<sp/>&quot;&lt;&lt;nElementBoundaries_owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nElementBoundaries_owned;</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nNodes_owned;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN<sp/>-nNodes_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN-nNodes_owned&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN<sp/>=<sp/>nElementBoundaries_owned;<sp/>ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>elementBoundaryNumbering_subdomain2global[ebN];</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>ebN-nElementBoundaries_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>ebN=<sp/>&quot;&lt;&lt;ebN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+ebN-nElementBoundaries_owned&lt;&lt;&quot;<sp/>nElementBoundaries_owned=<sp/>&quot;&lt;&lt;nElementBoundaries_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setup<sp/>local<sp/>to<sp/>global<sp/>mapping<sp/>on<sp/>the<sp/>subdomain<sp/>for<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOF_element<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostNodeOffset<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nElementBoundaries_owned;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostElementBoundaryOffset<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>-nNodes_owned;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>lagrange<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain[3];</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nN_global_subdomain[nN]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_subdomain[nN]<sp/>&lt;<sp/>nNodes_owned)</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+nN]<sp/>=<sp/>nN_global_subdomain[nN];</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+nN]<sp/>=<sp/>nN_global_subdomain[nN]-nNodes_owned<sp/>+<sp/>ghostNodeOffset;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vertex<sp/>dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+nN]*3+eI]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[nN]+eI];</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN=0;<sp/>ebN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>ebN++)</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>into<sp/>account<sp/>numbering<sp/>of<sp/>edges<sp/>according<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vertex<sp/>they<sp/>are<sp/>across<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ebN_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ac7e8f6ef5efc37bb959e4811f1d19f0d" kindref="member">elementBoundariesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>+((ebN+2)%3)];</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ebN_global<sp/>&lt;<sp/>nElementBoundaries_owned)</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+3+ebN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>ebN_global;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+3+ebN]<sp/>=<sp/>ebN_global<sp/>-<sp/>nElementBoundaries_owned<sp/>+<sp/>ghostElementBoundaryOffset;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//center<sp/>of<sp/>edge<sp/>dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+3+ebN]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[(ebN+0)%3]+eI]+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[3*nN_global_subdomain[(ebN+1)%3]+eI]);</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//eN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>ISRestoreIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight></codeline>
<codeline lineno="4306" refid="namespaceproteus_1abd6874e2f56d12ee95a6d1ada134b922" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1abd6874e2f56d12ee95a6d1ada134b922" kindref="member">buildQuadraticSubdomain2GlobalMappings_3d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*edgeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*edgeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_all_processes,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>whole<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_subdomain,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>max_dof_neighbors,</highlight><highlight class="comment">//maximum<sp/>number<sp/>of<sp/>neighbors<sp/>for<sp/>connectivity<sp/>of<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets_subdomain_owned,<sp/></highlight><highlight class="comment">//starting<sp/>point<sp/>of<sp/>local<sp/>dofs<sp/>on<sp/>each<sp/>processor<sp/>(nProcs+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain_l2g,<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>global<sp/>dof<sp/>mapping<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain2global,</highlight><highlight class="comment">//subdomain<sp/>dof<sp/>to<sp/>global<sp/>(parallel)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>lagrangeNodesArray)</highlight><highlight class="comment">//location<sp/>of<sp/>nodes<sp/>corresponding<sp/>to<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>2d<sp/>the<sp/>quadratic<sp/>dofs<sp/>can<sp/>be<sp/>associated<sp/>with<sp/>nodes<sp/>and<sp/>element<sp/>Boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assuming<sp/>have<sp/>ownership<sp/>info<sp/>and<sp/>consistent<sp/>local/global<sp/>mappings<sp/>for<sp/>nodes,<sp/>elementBoundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>mapping<sp/>from<sp/>local<sp/>quadratic<sp/>dofs<sp/>to<sp/>global<sp/>quadratic<sp/>dofs<sp/>for<sp/>petsc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>a<sp/>processor<sp/>owns<sp/>a<sp/>dof<sp/>if<sp/>it<sp/>owns<sp/>that<sp/>node<sp/>or<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>assert(edgeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>assert(nodeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/>assert(edgeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/>assert(nodeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_owned<sp/>=<sp/>nodeOffsets_subdomain_owned[rank+1]-nodeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEdges_owned<sp/>=<sp/>edgeOffsets_subdomain_owned[rank+1]-edgeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_owned<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_global=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//start<sp/>with<sp/>a<sp/>logical<sp/>global<sp/>ordering<sp/>of<sp/>dofs<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[global<sp/>nodes,<sp/>global<sp/>edges]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//want<sp/>to<sp/>create<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[nodes<sp/>proc<sp/>0,edges<sp/>proc<sp/>0,nodes<sp/>proc<sp/>1,<sp/>edges<sp/>proc<sp/>1,...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_new2old(nDOFs_owned);</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEdges_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>i]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>an<sp/>index<sp/>set<sp/>for<sp/>new<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_new2old;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nDOFs_owned,&amp;quadraticNumbering_new2old[0],PETSC_COPY_VALUES,&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>ISAllGather(quadraticNumberingIS_new2old,&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>old<sp/>2<sp/>new<sp/>mapping<sp/>for<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*quadraticNumbering_global_new2old;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_old2new_global(nDOFs_global);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/>ISGetIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>nDOFs_global;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++)</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/>quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]]<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>id<sp/>=<sp/>0;<sp/>id<sp/>&lt;<sp/>nDOFs_global;<sp/>id++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>build<sp/>2d<sp/>c0p2<sp/>mappings<sp/>new2old[&quot;&lt;&lt;id&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_global_new2old[id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>old2new[&quot;&lt;&lt;quadraticNumbering_global_new2old[id]&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[id]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/>assert(offsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>assert(subdomain2global);</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>assert(subdomain_l2g);</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>assert(lagrangeNodesArray);</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_subdomain_owned[sdN]<sp/>=<sp/>nodeOffsets_subdomain_owned[sdN]+edgeOffsets_subdomain_owned[sdN];</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>nDOF_all_processes<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>nDOF_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/>max_dof_neighbors<sp/>=<sp/>2*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>owned<sp/>and<sp/>ghost<sp/>dofs<sp/>build<sp/>subdomain<sp/>mapping<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//going<sp/>from<sp/>old<sp/>--&gt;<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEdges_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nNodes_owned;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN<sp/>-nNodes_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN-nNodes_owned&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nEdges_owned;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i-nEdges_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i-nEdges_owned&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setup<sp/>local<sp/>to<sp/>global<sp/>mapping<sp/>on<sp/>the<sp/>subdomain<sp/>for<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOF_element<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostNodeOffset<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostEdgeOffset<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>-nNodes_owned;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>mapping<sp/>from<sp/>nodes<sp/>to<sp/>edge<sp/>to<sp/>setup<sp/>element<sp/>based<sp/>relationship</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>nodesEdgeMap_subdomain;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i];</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1];</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN0<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i];</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN1<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1];</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_subdomain[et]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>local_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//node_i<sp/>--&gt;<sp/>unique<sp/>subdomain<sp/>node<sp/><sp/>0<sp/>&lt;=<sp/>i<sp/>&lt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_subdomain<sp/>&lt;<sp/>nNodes_owned)</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nN_global_subdomain;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>nN_global_subdomain<sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>nodeNumbering_subdomain2global[nN_global_subdomain];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>node=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+nN]*3+eI]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_subdomain*3+eI];</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(node_i,node_{i+1})<sp/>--&gt;<sp/>unique<sp/>subdomain<sp/>edge,<sp/>0<sp/>&lt;=<sp/>i<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>-1;<sp/>nN++)</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig<sp/>=<sp/>(nN+1)%mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain<sp/><sp/><sp/><sp/><sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_global_subdomain=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN_neig];</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>edge<sp/>subdomain<sp/>id<sp/>and<sp/>global<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_subdomain<sp/>=<sp/>-1,edge_global=-1;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//see<sp/>if<sp/>edge<sp/>is<sp/>(nN,nN_neig)<sp/>or<sp/>vice<sp/>versa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN_global_subdomain;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN_neig_global_subdomain;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_subdomain<sp/>=<sp/>nodesEdgeMap_subdomain[et];</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_global<sp/><sp/><sp/><sp/>=<sp/>edgeNumbering_subdomain2global[edge_subdomain];</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge_subdomain<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>edge_global<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_subdomain<sp/>&lt;<sp/>nEdges_owned)</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>edge_subdomain;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostEdgeOffset<sp/>+<sp/>edge_subdomain<sp/>-<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>above<sp/>could<sp/>do<sp/>here<sp/>subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset+nN]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_subdomain*3+eI]+</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_neig_global_subdomain*3+eI]);</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>-1;</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(node_i,node_{i+2})<sp/>--&gt;<sp/>unique<sp/>subdomain<sp/>edge,<sp/>0<sp/>&lt;=<sp/>i<sp/>&lt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>-2;<sp/>nN++)</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig<sp/>=<sp/>(nN+2)%mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain<sp/><sp/><sp/><sp/><sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_global_subdomain=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN_neig];</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>edge<sp/>subdomain<sp/>id<sp/>and<sp/>global<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_subdomain<sp/>=<sp/>-1,<sp/>edge_global<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//see<sp/>if<sp/>edge<sp/>is<sp/>(nN,nN_neig)<sp/>or<sp/>vice<sp/>versa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN_global_subdomain;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN_neig_global_subdomain;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_subdomain<sp/>=<sp/>nodesEdgeMap_subdomain[et];</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_global<sp/>=<sp/><sp/><sp/><sp/>edgeNumbering_subdomain2global[edge_subdomain];</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge_subdomain<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>edge_global<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_subdomain<sp/>&lt;<sp/>nEdges_owned)</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/><sp/>edge_subdomain;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostEdgeOffset<sp/>+<sp/>edge_subdomain<sp/>-<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset+nN]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_subdomain*3+eI]+</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_neig_global_subdomain*3+eI]);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>-2;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(node_i,node_{i+3})<sp/>--&gt;<sp/>unique<sp/>subdomain<sp/>edge,<sp/>0<sp/>=<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>-3;<sp/>nN++)</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig<sp/>=<sp/>(nN+3)%mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain<sp/><sp/><sp/><sp/><sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_neig_global_subdomain=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN_neig];</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>edge<sp/>subdomain<sp/>id<sp/>and<sp/>global<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_subdomain<sp/>=<sp/>-1,<sp/>edge_global<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//see<sp/>if<sp/>edge<sp/>is<sp/>(nN,nN_neig)<sp/>or<sp/>vice<sp/>versa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>nN_global_subdomain;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>nN_neig_global_subdomain;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>et(nodes);</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_subdomain<sp/>=<sp/>nodesEdgeMap_subdomain[et];</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_global<sp/><sp/><sp/><sp/>=<sp/>edgeNumbering_subdomain2global[edge_subdomain];</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge_subdomain<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>edge_global<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_subdomain<sp/>&lt;<sp/>nEdges_owned)</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/><sp/>edge_subdomain;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostEdgeOffset<sp/>+<sp/>edge_subdomain<sp/>-<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/><sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset+nN]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_subdomain*3+eI]+</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_neig_global_subdomain*3+eI]);</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//eN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/>ISRestoreIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585" refid="namespaceproteus_1a99665ca027f2bc715a648c4b7c981dbf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1a99665ca027f2bc715a648c4b7c981dbf" kindref="member">buildQuadraticCubeSubdomain2GlobalMappings_3d</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*edgeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*edgeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*nodeNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_all_processes,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>whole<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_subdomain,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>max_dof_neighbors,</highlight><highlight class="comment">//maximum<sp/>number<sp/>of<sp/>neighbors<sp/>for<sp/>connectivity<sp/>of<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets_subdomain_owned,<sp/></highlight><highlight class="comment">//starting<sp/>point<sp/>of<sp/>local<sp/>dofs<sp/>on<sp/>each<sp/>processor<sp/>(nProcs+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain_l2g,<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>global<sp/>dof<sp/>mapping<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*subdomain2global,</highlight><highlight class="comment">//subdomain<sp/>dof<sp/>to<sp/>global<sp/>(parallel)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>lagrangeNodesArray)</highlight><highlight class="comment">//location<sp/>of<sp/>nodes<sp/>corresponding<sp/>to<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//In<sp/>2d<sp/>the<sp/>quadratic<sp/>dofs<sp/>can<sp/>be<sp/>associated<sp/>with<sp/>nodes<sp/>and<sp/>element<sp/>Boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assuming<sp/>have<sp/>ownership<sp/>info<sp/>and<sp/>consistent<sp/>local/global<sp/>mappings<sp/>for<sp/>nodes,<sp/>elementBoundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>a<sp/>mapping<sp/>from<sp/>local<sp/>quadratic<sp/>dofs<sp/>to<sp/>global<sp/>quadratic<sp/>dofs<sp/>for<sp/>petsc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>a<sp/>processor<sp/>owns<sp/>a<sp/>dof<sp/>if<sp/>it<sp/>owns<sp/>that<sp/>node<sp/>or<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/>assert(edgeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>assert(nodeOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/>assert(edgeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>assert(nodeNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementBoundaryOffsets_subdomain_owned=mesh.<ref refid="struct_mesh_1a5806b14e322aa308b7b2332137195d0e" kindref="member">elementBoundaryOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementOffsets_subdomain_owned=mesh.<ref refid="struct_mesh_1a6d8c1e8a3743ccf2b9ac61d79d2aed42" kindref="member">elementOffsets_subdomain_owned</ref>;</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementBoundaryNumbering_subdomain2global=mesh.<ref refid="struct_mesh_1a18cf197b92cbab062e2a294849766cf1" kindref="member">elementBoundaryNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementNumbering_subdomain2global=mesh.<ref refid="struct_mesh_1a9a62f7c5208b688193ad82dfb8cc3b4c" kindref="member">elementNumbering_subdomain2global</ref>;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes_owned<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>nodeOffsets_subdomain_owned[rank+1]-nodeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEdges_owned<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>edgeOffsets_subdomain_owned[rank+1]-edgeOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBoundaries_owned<sp/>=<sp/>elementBoundaryOffsets_subdomain_owned[rank+1]-elementBoundaryOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_owned<sp/><sp/><sp/>=<sp/>elementOffsets_subdomain_owned[rank+1]-elementOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_owned<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>nBoundaries_owned<sp/>+<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOFs_global=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//start<sp/>with<sp/>a<sp/>logical<sp/>global<sp/>ordering<sp/>of<sp/>dofs<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[global<sp/>nodes,<sp/>global<sp/>edges]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//want<sp/>to<sp/>create<sp/>global<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[nodes<sp/>proc<sp/>0,edges<sp/>proc<sp/>0,nodes<sp/>proc<sp/>1,<sp/>edges<sp/>proc<sp/>1,...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_new2old(nDOFs_owned);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nN]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEdges_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>i]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBoundaries_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/><sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/>elementBoundaryNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>i]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nElements_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/><sp/>+<sp/>elementNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadraticNumbering_new2old[nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>nBoundaries_owned<sp/>+<sp/>i]<sp/>=<sp/>dof_global;</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//build<sp/>an<sp/>index<sp/>set<sp/>for<sp/>new<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_new2old;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>ISCreateGeneral(PROTEUS_COMM_WORLD,nDOFs_owned,&amp;quadraticNumbering_new2old[0],PETSC_COPY_VALUES,&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/>IS<sp/>quadraticNumberingIS_global_new2old;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/>ISAllGather(quadraticNumberingIS_new2old,&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>old<sp/>2<sp/>new<sp/>mapping<sp/>for<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PetscInt<sp/>*quadraticNumbering_global_new2old;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>valarray&lt;int&gt;<sp/>quadraticNumbering_old2new_global(nDOFs_global);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/>ISGetIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>nDOFs_global;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">++)</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]]<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>id<sp/>=<sp/>0;<sp/>id<sp/>&lt;<sp/>nDOFs_global;<sp/>id++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>build<sp/>2d<sp/>c0p2<sp/>mappings<sp/>new2old[&quot;&lt;&lt;id&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_global_new2old[id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>old2new[&quot;&lt;&lt;quadraticNumbering_global_new2old[id]&lt;&lt;&quot;]=<sp/>&quot;&lt;&lt;quadraticNumbering_old2new_global[quadraticNumbering_global_new2old[id]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>assert(offsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/>assert(subdomain2global);</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/>assert(subdomain_l2g);</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/>assert(lagrangeNodesArray);</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_subdomain_owned[sdN]<sp/>=<sp/>nodeOffsets_subdomain_owned[sdN]+edgeOffsets_subdomain_owned[sdN]+elementBoundaryOffsets_subdomain_owned[sdN]+elementOffsets_subdomain_owned[sdN];</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/>nDOF_all_processes<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>+<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>+mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/>nDOF_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>+mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>max_dof_neighbors<sp/>=<sp/>2*mesh.<ref refid="struct_mesh_1aa4f5f67da601632a68e00c0aea778c14" kindref="member">max_nNodeNeighbors_node</ref>;</highlight><highlight class="comment">//8*27?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>owned<sp/>and<sp/>ghost<sp/>dofs<sp/>build<sp/>subdomain<sp/>mapping<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//going<sp/>from<sp/>old<sp/>--&gt;<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nNodes_owned;<sp/>nN++)</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nEdges_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBoundaries_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/><sp/>elementBoundaryNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nBoundaries_owned;</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nElements_owned;<sp/>i++)</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/><sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>+<sp/>elementNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>nNodes_owned;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>nodeNumbering_subdomain2global[nN];</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>nN<sp/>-<sp/>nNodes_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>nN=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+nN-nNodes_owned&lt;&lt;&quot;<sp/>nNodes_owned=<sp/>&quot;&lt;&lt;nNodes_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nEdges_owned;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>edgeNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i<sp/>-<sp/>nEdges_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i-nEdges_owned&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>-<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nBoundaries_owned;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/>elementBoundaryNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i<sp/>-<sp/>nBoundaries_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i-nEdges_owned&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>localOffset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>-<sp/>nBoundaries_owned;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nElements_owned;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_old<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref><sp/>+<sp/>mesh.<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref><sp/>+<sp/>elementNumbering_subdomain2global[i];</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dof_global_new<sp/>=<sp/>quadraticNumbering_old2new_global[dof_global_old];</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[localOffset<sp/>+<sp/>i<sp/>-<sp/>nElements_owned]<sp/>=<sp/>dof_global_new;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>i=<sp/>&quot;&lt;&lt;i&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+i-nEdges_owned&lt;&lt;&quot;<sp/>nEdges_owned=<sp/>&quot;&lt;&lt;nEdges_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//setup<sp/>local<sp/>to<sp/>global<sp/>mapping<sp/>on<sp/>the<sp/>subdomain<sp/>for<sp/>finite<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOF_element<sp/>=<sp/>27;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostNodeOffset<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>nBoundaries_owned<sp/>+<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostEdgeOffset<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a7038fb145b0b7b77e5fd0cd162ae2fed" kindref="member">nNodes_global</ref>-nNodes_owned;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostBoundaryOffset<sp/>=<sp/>ghostEdgeOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>-nEdges_owned;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ghostElementOffset<sp/>=<sp/>ghostBoundaryOffset<sp/>+<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>-nBoundaries_owned;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ledge[12][2]<sp/>=<sp/>{{0,1},{1,2},{2,3},{3,0},</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,4},{1,5},{2,6},{3,7},</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,5},{5,6},{6,7},{7,4}};</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEdges_element<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lface[6][4]<sp/>=<sp/>{{0,1,2,3},</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0,1,5,4},</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,2,6,5},</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,3,7,6},</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,0,4,7},</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,5,6,7}};</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref><sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//need<sp/>mapping<sp/>from<sp/>nodes<sp/>to<sp/>edge<sp/>to<sp/>setup<sp/>element<sp/>based<sp/>relationship</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;2&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>nodesEdgeMap_subdomain;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a1ab38b6ade39987726268e990e3e24e7" kindref="member">nEdges_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+0];</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1aabe8196d403a4e08ab8ae82add6c95ad" kindref="member">edgeNodesArray</ref>[2*i+1];</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>nt(nodes);</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesEdgeMap_subdomain[nt]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/>map&lt;NodeTuple&lt;4&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>nodesBoundaryMap_subdomain;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1ae88b87eca5860ae8f0faf5ddf8edd55e" kindref="member">nElementBoundaries_global</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[4];</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i*4+0];</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i*4+1];</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i*4+2];</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[3]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a005d4b8e1dde115eea69745da68ce51e" kindref="member">elementBoundaryNodesArray</ref>[i*4+3];</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;4&gt;</ref><sp/>ebt(nodes);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(nodesBoundaryMap_subdomain.find(ebt)<sp/>==<sp/>nodesBoundaryMap_subdomain.end());</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodesBoundaryMap_subdomain[ebt]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN=0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>local_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN=0;<sp/>nN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//node_i<sp/>--&gt;<sp/>unique<sp/>subdomain<sp/>node<sp/><sp/>0<sp/>&lt;=<sp/>i<sp/>&lt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN_global_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>nN];</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nN_global_subdomain<sp/>&lt;<sp/>nNodes_owned)</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nN_global_subdomain;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostNodeOffset<sp/>+<sp/>nN_global_subdomain<sp/>-<sp/>nNodes_owned;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>nodeNumbering_subdomain2global[nN_global_subdomain];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>node=<sp/>&quot;&lt;&lt;nN&lt;&lt;&quot;<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+nN]*3+eI]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nN_global_subdomain*3+eI];</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/>nEdges_element;<sp/>nN++)</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[2];</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>ledge[nN][0]];</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>ledge[nN][1]];</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;2&gt;</ref><sp/>nt(nodes);</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_subdomain<sp/>=<sp/>nodesEdgeMap_subdomain[nt];</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_global<sp/><sp/><sp/><sp/>=<sp/>edgeNumbering_subdomain2global[edge_subdomain];</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(edge_subdomain<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>edge_global<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge_subdomain<sp/>&lt;<sp/>nEdges_owned)</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>edge_subdomain;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostEdgeOffset<sp/>+<sp/>edge_subdomain<sp/>-<sp/>nEdges_owned;</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>above<sp/>could<sp/>do<sp/>here<sp/>subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset+nN]*3+eI]<sp/>=<sp/>0.5*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[0]*3+eI]+</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[1]*3+eI]);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/>nEdges_element;</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nN<sp/>=<sp/>0;<sp/>nN<sp/>&lt;<sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;<sp/>nN++)</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes[4];</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[0]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+lface[nN][0]];</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[1]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+lface[nN][1]];</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[2]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+lface[nN][2]];</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes[3]<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref>+lface[nN][3]];</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_node_tuple" kindref="compound">NodeTuple&lt;4&gt;</ref><sp/>ebt(nodes);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundary_subdomain<sp/>=<sp/>nodesBoundaryMap_subdomain[ebt];</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundary_global<sp/><sp/><sp/><sp/>=<sp/>elementBoundaryNumbering_subdomain2global[boundary_subdomain];</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(boundary_subdomain<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>boundary_global<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assign<sp/>unique<sp/>subdomain<sp/>id<sp/>based<sp/>on<sp/>|owned<sp/>nodes|owned<sp/>edges|ghost<sp/>nodes|ghost<sp/>edges|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundary_subdomain<sp/>&lt;<sp/>nBoundaries_owned)</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>boundary_subdomain;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]<sp/>=<sp/>ghostBoundaryOffset<sp/>+<sp/>boundary_subdomain<sp/>-<sp/>nBoundaries_owned;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>above<sp/>could<sp/>do<sp/>here<sp/>subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset+nN]*3+eI]<sp/>=<sp/>0.25*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[0]*3+eI]+</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[1]*3+eI]+</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[2]*3+eI]+</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[nodes[3]*3+eI]);</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"></highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>local_offset<sp/>+=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interior<sp/>node!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eN<sp/>&lt;<sp/>nElements_owned)</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset]<sp/>=<sp/>nNodes_owned<sp/>+<sp/>nEdges_owned<sp/>+<sp/>nBoundaries_owned<sp/>+<sp/>eN;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset]<sp/>=<sp/>ghostElementOffset<sp/>+<sp/>eN<sp/>-<sp/>nElements_owned;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unique<sp/>subdomain<sp/>id<sp/>--&gt;<sp/>unique<sp/>cross<sp/>processor<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>above<sp/>could<sp/>do<sp/>here<sp/>subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]<sp/>=<sp/>mesh.nNodes_global<sp/>+<sp/>edge_global;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rank<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;build<sp/>loc2glob<sp/>c0p2<sp/>3d<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>edge(&quot;&lt;&lt;nN&lt;&lt;&quot;,&quot;&lt;&lt;nN_neig&lt;&lt;&quot;)<sp/>sub_dof=<sp/>&quot;&lt;&lt;<sp/>subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&quot;<sp/>glob_dof=<sp/>&quot;&lt;&lt;subdomain2global[subdomain_l2g[eN*nDOF_element<sp/>+<sp/>local_offset<sp/>+<sp/>nN]]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eI=0;<sp/>eI<sp/>&lt;<sp/>3;<sp/>eI++)</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lagrangeNodesArray[subdomain_l2g[eN*nDOF_element+local_offset]*3+eI]<sp/>=<sp/>0.125*(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>0]*3+eI]+</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>1]*3+eI]+</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>2]*3+eI]+</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>3]*3+eI]+</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>4]*3+eI]+</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>5]*3+eI]+</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>6]*3+eI]+</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a22b669f60fea89c7f47dfbe0ee4fd80c" kindref="member">nodeArray</ref>[mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a75f9e7d19dc4a7e7589f712f2e8fe849" kindref="member">elementNodesArray</ref>[eN*mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a410907bc17e0cf51e268e4db2b8be459" kindref="member">nNodes_element</ref><sp/>+<sp/>7]*3+eI]);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//eN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/>ISRestoreIndices(quadraticNumberingIS_global_new2old,&amp;quadraticNumbering_global_new2old);</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_new2old);</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/>ISDestroy(&amp;quadraticNumberingIS_global_new2old);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959" refid="namespaceproteus_1aadf24948dcd2edecf8a923495153c3f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1aadf24948dcd2edecf8a923495153c3f3" kindref="member">buildDiscontinuousGalerkinSubdomain2GlobalMappings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPI_Comm&amp;<sp/>PROTEUS_COMM_WORLD,<sp/><ref refid="struct_mesh" kindref="compound">Mesh</ref>&amp;<sp/>mesh,</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementOffsets_subdomain_owned,</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*elementNumbering_subdomain2global,</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDOF_element,</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_all_processes,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>whole<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nDOF_subdomain,</highlight><highlight class="comment">//total<sp/>number<sp/>of<sp/>dofs<sp/>in<sp/>sub-domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>max_dof_neighbors,</highlight><highlight class="comment">//maximum<sp/>number<sp/>of<sp/>neighbors<sp/>for<sp/>connectivity<sp/>of<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets_subdomain_owned,<sp/></highlight><highlight class="comment">//starting<sp/>point<sp/>of<sp/>local<sp/>dofs<sp/>on<sp/>each<sp/>processor<sp/>(nProcs+1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>subdomain_l2g,<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>global<sp/>dof<sp/>mapping<sp/>on<sp/>subdomain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>subdomain2global)</highlight><highlight class="comment">//subdomain<sp/>dof<sp/>to<sp/>global<sp/>(parallel)<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ierr,size,rank;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_size(PROTEUS_COMM_WORLD,&amp;size);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/>ierr<sp/>=<sp/>MPI_Comm_rank(PROTEUS_COMM_WORLD,&amp;rank);</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//DG<sp/>dofs<sp/>stored<sp/>element<sp/>wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[...,eN_0,eN_1,..,eN_ndof_local,...]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>a<sp/>processor<sp/>owns<sp/>a<sp/>dof<sp/>if<sp/>it<sp/>owns<sp/>that<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>assert(elementOffsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/>assert(elementNumbering_subdomain2global);</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/>assert(mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>);</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nElements_owned<sp/>=<sp/>elementOffsets_subdomain_owned[rank+1]-elementOffsets_subdomain_owned[rank];</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/>assert(offsets_subdomain_owned);</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/>assert(subdomain2global);</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/>assert(subdomain_l2g);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/>nDOF_all_processes<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*nDOF_element;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/>nDOF_subdomain<sp/>=<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>*nDOF_element;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/>max_dof_neighbors<sp/>=<sp/>mesh.<ref refid="struct_mesh_1a8bef0eb2839ee8e5e520471073ccc893" kindref="member">nElementBoundaries_element</ref>*nDOF_element;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sdN=0;<sp/>sdN<sp/>&lt;<sp/>size+1;<sp/>sdN++)</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_subdomain_owned[sdN]<sp/>=<sp/>elementOffsets_subdomain_owned[sdN]*nDOF_element;</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>owned<sp/>and<sp/>ghost<sp/>dofs<sp/>build<sp/>subdomain<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eN<sp/>=<sp/>0;<sp/>eN<sp/>&lt;<sp/>mesh.<ref refid="struct_mesh_1abb9c745014c9e5efdc6f9545592b8d9e" kindref="member">subdomainp</ref>-&gt;<ref refid="struct_mesh_1a67e33052617d0e53ebe053d71412dee8" kindref="member">nElements_global</ref>;<sp/>eN++)</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDOF_element;<sp/>i++)</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global[eN*nDOF_element<sp/>+<sp/>i]<sp/>=<sp/>elementNumbering_subdomain2global[eN]*nDOF_element<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mwf<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>rank=<sp/>&quot;&lt;&lt;rank&lt;&lt;&quot;<sp/>eN=<sp/>&quot;&lt;&lt;eN&lt;&lt;&quot;<sp/>local<sp/>dof=<sp/>&quot;&lt;&lt;localOffset+eN&lt;&lt;&quot;<sp/>nElements_owned=<sp/>&quot;&lt;&lt;nElements_owned&lt;&lt;&quot;<sp/>dof_old=<sp/>&quot;&lt;&lt;dof_global_old&lt;&lt;&quot;<sp/>new=<sp/>&quot;&lt;&lt;dof_global_new&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain_l2g[eN*nDOF_element+i]<sp/>=<sp/>eN*nDOF_element<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/partitioning.cpp"/>
  </compounddef>
</doxygen>
