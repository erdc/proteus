<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="c_mesh_adapt_p_u_m_i_8cpp" kind="file" language="C++">
    <compoundname>cMeshAdaptPUMI.cpp</compoundname>
    <includes local="no">gmi.h</includes>
    <includes local="no">gmi_mesh.h</includes>
    <includes local="no">gmi_null.h</includes>
    <includes local="no">ma.h</includes>
    <includes local="no">maShape.h</includes>
    <includes local="no">apfMDS.h</includes>
    <includes local="no">PCU.h</includes>
    <includes local="no">apf.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">sam.h</includes>
    <includes local="no">samSz.h</includes>
    <incdepgraph>
      <node id="20">
        <label>list</label>
      </node>
      <node id="1">
        <label>cMeshAdaptPUMI.cpp</label>
        <link refid="c_mesh_adapt_p_u_m_i_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>iomanip</label>
      </node>
      <node id="26">
        <label>queue</label>
      </node>
      <node id="6">
        <label>maShape.h</label>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>gmi_null.h</label>
      </node>
      <node id="19">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>PCU.h</label>
      </node>
      <node id="13">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>apfMDS.h</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
      <node id="25">
        <label>apfNumbering.h</label>
      </node>
      <node id="9">
        <label>apf.h</label>
      </node>
      <node id="27">
        <label>sam.h</label>
      </node>
      <node id="3">
        <label>gmi_mesh.h</label>
      </node>
      <node id="28">
        <label>samSz.h</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>apfMesh2.h</label>
      </node>
      <node id="14">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>set</label>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ma.h</label>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>gmi.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="c_mesh_adapt_p_u_m_i_8cpp_1a14465bb7b6f8693fcdce781f1eb91245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ends_with</definition>
        <argsstring>(std::string const &amp;str, std::string const &amp;ext)</argsstring>
        <name>ends_with</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/cMeshAdaptPUMI.cpp" line="121" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/cMeshAdaptPUMI.cpp" bodystart="121" bodyend="125"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gmi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi_mesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gmi_null.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;maShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMDS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sam.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;samSz.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTEUS_USE_SIMMETRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//PROTEUS_USE_SIMMETRIX<sp/>is<sp/>a<sp/>compiler<sp/>macro<sp/>that<sp/>indicates<sp/>whether<sp/>Simmetrix<sp/>libraries<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//This<sp/>is<sp/>defined<sp/>in<sp/>proteus/config/default.py<sp/>and<sp/>is<sp/>contingent<sp/>on<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>SIM_INCLUDE_DIR<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;gmi_sim.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;SimUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;SimModel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;MeshSim.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;SimMeshTools.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>FACE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>pAManager<sp/>SModel_attManager(pModel<sp/>model);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_mesh_adapt_p_u_m_i_drvr_1afc0d6c608b186d83a19f5af99855d3f4" refkind="member"><highlight class="normal"><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afc0d6c608b186d83a19f5af99855d3f4" kindref="member">MeshAdaptPUMIDrvr::MeshAdaptPUMIDrvr</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Hmax,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Hmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HPhi,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AdaptMesh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumAdaptSteps,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sfConfig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>maType,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>logType,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>targetError,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>targetElementCount,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reconstructedFlag,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxAspectRatio,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gradingFact)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>PCU_Comm_Init();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>PCU_Protect();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTEUS_USE_SIMMETRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>Sim_readLicenseFile(0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>SimModel_start();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>gmi_register_sim();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>=Hmin;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>=Hmax;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>=HPhi;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a10079fecbff8a243a52cc7160db07548" kindref="member">numIter</ref>=NumIter;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a39b6a3862d3fa543b38f408cf3af8697" kindref="member">adaptMesh</ref><sp/>=<sp/>AdaptMesh;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>=0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a696a6f4c51c5138c70e21efa594c7b1d" kindref="member">numAdaptSteps</ref><sp/>=<sp/>NumAdaptSteps;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a457dfc5023eff43c9a56bfbefd2f0a5f" kindref="member">nEstimate</ref>=0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;MeshAdapt:<sp/>Setting<sp/>hmax=%lf,<sp/>hmin=%lf,<sp/>numIters(meshadapt)=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a55f731fc27f23d9560fb4778b7f1741e" kindref="member">hmax</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa8f0f76c30250e076414981543f84802" kindref="member">hmin</ref>,<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a10079fecbff8a243a52cc7160db07548" kindref="member">numIter</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>global[0]<sp/>=<sp/>global[1]<sp/>=<sp/>global[2]<sp/>=<sp/>global[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>local[0]<sp/>=<sp/>local[1]<sp/>=<sp/>local[2]<sp/>=<sp/>local[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>size_iso<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>size_scale<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>size_frame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>err_reg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>vmsErrH1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>errRho_reg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>errRel_reg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>gmi_register_mesh();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>gmi_register_null();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1acc45546f4adbd6a6c18c82c432e5dd0e" kindref="member">approximation_order</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1e4333322f04b1b4e0d9b787611d6cce" kindref="member">integration_order</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ae4697439db655efc3b37b9f5953c7f53" kindref="member">errRho_max</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac334de5a67ca2e2dbd26fbe7b10a3d55" kindref="member">rel_err_total</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4babcf12405cab5dcd7af2b85395586d" kindref="member">exteriorGlobaltoLocalElementBoundariesArray</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>=<sp/>sfConfig;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9461bcec67009452ea6e7b1c56ec4318" kindref="member">modelFileName</ref><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref><sp/>=<sp/>maType;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref><sp/>=<sp/>logType;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>has_gBC<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>target_error<sp/>=<sp/>targetError;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>target_element_count<sp/>=<sp/>targetElementCount;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>domainVolume<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>THRESHOLD<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a82c29efd9d3cf097e81daba5b9cdcba9" kindref="member">isReconstructed</ref><sp/>=<sp/>reconstructedFlag;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab30bca7c0adb1965e12d6196b2673d42" kindref="member">initialReconstructed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aae6c68a4a0140f3d2eca1472e10b61d1" kindref="member">maxAspect</ref><sp/>=<sp/>maxAspectRatio;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a2f88d2f12514c80986566d79c9af97cb" kindref="member">gradingFactor</ref><sp/>=<sp/>gradingFact;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="class_mesh_adapt_p_u_m_i_drvr_1a8463481f0a201a57bc92f4ccee58c09d" refkind="member"><highlight class="normal"><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a8463481f0a201a57bc92f4ccee58c09d" kindref="member">MeshAdaptPUMIDrvr::~MeshAdaptPUMIDrvr</ref>()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>freeField(err_reg);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>freeField(vmsErrH1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>freeField(errRho_reg);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>freeField(errRel_reg);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>freeField(size_iso);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>freeField(size_scale);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>freeField(size_frame);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a82c29efd9d3cf097e81daba5b9cdcba9" kindref="member">isReconstructed</ref>){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a09d644b4b8b529f7540bffc5ef25c8db" kindref="member">modelVertexMaterial</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac14021e0c882dff8ec6331cc05661ccf" kindref="member">modelBoundaryMaterial</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a84f27a11492a2a1f3582345bad013a37" kindref="member">modelRegionMaterial</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m-&gt;destroyNative();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gmi_destroy(m-&gt;getModel());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::destroyMesh(m);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>PCU_Comm_Free();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTEUS_USE_SIMMETRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>SimModel_stop();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>Sim_unregisterAllKeys();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ends_with(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ext)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.size()<sp/>&gt;=<sp/>ext.size()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.compare(str.size()<sp/>-<sp/>ext.size(),<sp/>ext.size(),<sp/>ext)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135" refid="class_mesh_adapt_p_u_m_i_drvr_1a1d628142283d46bedcf08f1e937cd9fa" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1d628142283d46bedcf08f1e937cd9fa" kindref="member">MeshAdaptPUMIDrvr::loadModelAndMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>modelFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>meshFile)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>comm_size<sp/>=<sp/>PCU_Comm_Peers();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>comm_rank<sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends_with(meshFile,<sp/></highlight><highlight class="stringliteral">&quot;.msh&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>apf::loadMdsFromGmsh(gmi_load(modelFile),<sp/>meshFile);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Boundary<sp/>Condition<sp/>functionality<sp/>has<sp/>not<sp/>been<sp/>built<sp/>in<sp/>for<sp/>gmsh<sp/>yet.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ends_with(modelFile,</highlight><highlight class="stringliteral">&quot;.smd&quot;</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>apf::loadMdsMesh(modelFile,<sp/>meshFile);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9461bcec67009452ea6e7b1c56ec4318" kindref="member">modelFileName</ref>=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>strlen(modelFile));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9461bcec67009452ea6e7b1c56ec4318" kindref="member">modelFileName</ref>,modelFile);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afdc27e39d259578ab1089275f76e77c6" kindref="member">getSimmetrixBC</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>apf::loadMdsMesh(modelFile,<sp/>meshFile);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_mesh_adapt_p_u_m_i_drvr_1a02359f723bbcd3006c1f97a7e7bf4393" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a02359f723bbcd3006c1f97a7e7bf4393" kindref="member">MeshAdaptPUMIDrvr::loadMeshForAnalytic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>meshFile,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>boxDim,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sphereCenter,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assume<sp/>analytic<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>comm_size<sp/>=<sp/>PCU_Comm_Peers();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>comm_rank<sp/>=<sp/>PCU_Comm_Self();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>apf::loadMdsMesh(</highlight><highlight class="stringliteral">&quot;.null&quot;</highlight><highlight class="normal">,<sp/>meshFile);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//create<sp/>analytic<sp/>geometry<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>gmi_model*<sp/>testModel<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1accc0b587f26e40fcd26adad679d69ba2" kindref="member">createSphereInBox</ref>(boxDim,sphereCenter,radius);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>apf::writeVtkFiles(&quot;afterAnalytic&quot;,m);</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>std::cout&lt;&lt;&quot;test<sp/>Model<sp/>&quot;&lt;&lt;testModel&lt;&lt;&quot;<sp/>mesh<sp/>model<sp/>&quot;&lt;&lt;m-&gt;getModel()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="class_mesh_adapt_p_u_m_i_drvr_1afdc27e39d259578ab1089275f76e77c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afdc27e39d259578ab1089275f76e77c6" kindref="member">MeshAdaptPUMIDrvr::getSimmetrixBC</ref>()</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PROTEUS_USE_SIMMETRIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>pGModel<sp/>model<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>model=GM_load(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9461bcec67009452ea6e7b1c56ec4318" kindref="member">modelFileName</ref>,NULL,NULL);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>pAManager<sp/>attmngr<sp/>=<sp/>SModel_attManager(model);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>pACase<sp/>acase<sp/>=<sp/>AMAN_findCaseByType(attmngr,<sp/></highlight><highlight class="stringliteral">&quot;problem<sp/>definition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acase){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Found<sp/>case,<sp/>setting<sp/>the<sp/>model&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>AttCase_setModel(acase,model);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>has_gBC=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>AttCase_associate(acase,NULL);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>pGFace<sp/>gFace;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>GFIter<sp/>gfIter<sp/>=<sp/>GM_faceIter(model);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>pAttribute<sp/>Att[GM_numFaces(model)];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attMap[GM_numFaces(model)];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nF=0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>strAtt[2][25]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;traction<sp/>vector&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;comp3&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>modelEntTag;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(gFace<sp/>=<sp/>GFIter_next(gfIter))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(GEN_attrib((pGEntity)gFace,strAtt[0]))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>modelEntTag=GEN_tag((pGEntity)gFace);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Att[nF]=GEN_attrib((pGEntity)gFace,strAtt[0]);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attMap[nF]<sp/>=<sp/>modelEntTag;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nF++;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>GFIter_delete(gfIter);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>fIter<sp/>=<sp/>m-&gt;begin(FACE);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>fEnt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>evalPt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numqpt=0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bcFlag[<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1]<sp/>=<sp/>{0,1,1,1};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//assign<sp/>a<sp/>label<sp/>to<sp/>the<sp/>BC<sp/>type<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>label[9],labelflux[4][9],type_flag;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>sprintf(label,</highlight><highlight class="stringliteral">&quot;BCtype&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref><sp/>=<sp/>m-&gt;createIntTag(label,4);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=0;idx&lt;4;idx++)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>==<sp/>0)<sp/>sprintf(&amp;type_flag,</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>==<sp/>1)<sp/>sprintf(&amp;type_flag,</highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>==<sp/>2)<sp/>sprintf(&amp;type_flag,</highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>==<sp/>3)<sp/>sprintf(&amp;type_flag,</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx&gt;0)<sp/>sprintf(labelflux[idx],</highlight><highlight class="stringliteral">&quot;%c_flux&quot;</highlight><highlight class="normal">,type_flag);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fEnt<sp/>=<sp/>m-&gt;iterate(fIter))</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>me=m-&gt;toModel(fEnt);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>modelEntTag<sp/>=<sp/>m-&gt;getModelTag(me);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(FACE,modelEntTag);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numqpt==0)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>testElem<sp/>=<sp/>apf::createMeshElement(m,fEnt);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numqpt<sp/>=<sp/>apf::countIntPoints(testElem,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1e4333322f04b1b4e0d9b787611d6cce" kindref="member">integration_order</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=1;idx&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1;idx++)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[idx]=<sp/>m-&gt;createDoubleTag(labelflux[idx],numqpt);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyMeshElement(testElem);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(me==boundary_face)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;nF;i++)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(attMap[i]==modelEntTag)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>testElem<sp/>=<sp/>apf::createMeshElement(m,fEnt);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>data[<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1][numqpt];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;numqpt;k++)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(testElem,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1e4333322f04b1b4e0d9b787611d6cce" kindref="member">integration_order</ref>,k,evalPt);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>evalPtGlobal;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::mapLocalToGlobal(testElem,evalPt,evalPtGlobal);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>evalPtSim[<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evalPtGlobal.toArray(evalPtSim);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;j++)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[j+1][k]=AttributeTensor1_evalDS((pAttributeTensor1)Att[i],<sp/>j,evalPtSim);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(fEnt,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>,&amp;(bcFlag[0]));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=1;idx&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1;idx++)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(fEnt,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[idx],data[idx]);<sp/></highlight><highlight class="comment">//set<sp/>the<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyMeshElement(testElem);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>if<sp/>on<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy[4]<sp/>=<sp/>{0,0,0,0};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(fEnt,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>,&amp;(dummy[0]));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nF==0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy[4]<sp/>=<sp/>{0,0,0,0};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setIntTag(fEnt,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>,&amp;(dummy[0]));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>m-&gt;end(fIter);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>AMAN_release(<sp/>attmngr<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Case<sp/>not<sp/>found,<sp/>no<sp/>BCs?\n&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//exit(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>reading<sp/>and<sp/>storing<sp/>diffusive<sp/>flux<sp/>BCs\n&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="class_mesh_adapt_p_u_m_i_drvr_1a686685b789dec852110157660d50a088" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a686685b789dec852110157660d50a088" kindref="member">MeshAdaptPUMIDrvr::willErrorAdapt</ref>()<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adaptFlag=0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>assertFlag;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>current<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>currentField;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!size_iso)<sp/></highlight><highlight class="comment">//if<sp/>no<sp/>previous<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>currentField<sp/>=<sp/>samSz::isoSize(m);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//otherwise<sp/>use<sp/>previous<sp/>size<sp/>field,<sp/>remember<sp/>to<sp/>reflect<sp/>this<sp/>in<sp/>interfaceAdapt<sp/>or<sp/>collapse<sp/>to<sp/>a<sp/>single<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>currentField<sp/><sp/>=<sp/>apf::createFieldOn(m,<sp/></highlight><highlight class="stringliteral">&quot;currentField&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::copyData(currentField,size_iso);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>error-based<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" kindref="member">getERMSizeField</ref>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>errorField<sp/>=<sp/>sizeFieldList.front();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>sizeFieldList.pop();<sp/></highlight><highlight class="comment">//remove<sp/>this<sp/>size<sp/>field<sp/>from<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//determine<sp/>if<sp/>desired<sp/>mesh<sp/>is<sp/>contained<sp/>in<sp/>current<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(ent<sp/>=<sp/>m-&gt;iterate(it))<sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_current<sp/>=<sp/>apf::getScalar(currentField,ent,0);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_needed<sp/>=<sp/>apf::getScalar(errorField,ent,0);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h_current&gt;h_needed){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptFlag=1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::writeVtkFiles(&quot;willErrorAdapt&quot;,<sp/>m);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;What<sp/>is<sp/>the<sp/>ent?<sp/>&quot;&lt;&lt;localNumber(ent)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::exit(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>assertFlag<sp/>=<sp/>adaptFlag;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(&amp;assertFlag,1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>assert(assertFlag<sp/>==0<sp/>||<sp/>assertFlag<sp/>==<sp/>PCU_Proc_Peers());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>apf::destroyField(currentField);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>apf::destroyField(errorField);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adaptFlag;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="class_mesh_adapt_p_u_m_i_drvr_1a54d9717041c36487816585eb2cfcdb3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a54d9717041c36487816585eb2cfcdb3b" kindref="member">MeshAdaptPUMIDrvr::willAdapt</ref>()<sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//Master<sp/>function<sp/>that<sp/>calls<sp/>other<sp/>adapt-trigger<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adaptFlag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>or<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;isotropic&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>adaptFlag<sp/>+=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a463d0271aeee1bd4a1bf36636fafb647" kindref="member">willInterfaceAdapt</ref>();<sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(size_field_config<sp/>==<sp/>&quot;combined&quot;<sp/>or<sp/>size_field_config<sp/>==<sp/>&quot;VMS&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>adaptFlag<sp/>+=<sp/>willErrorAdapt();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(adaptFlag<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>adaptFlag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adaptFlag;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="class_mesh_adapt_p_u_m_i_drvr_1a463d0271aeee1bd4a1bf36636fafb647" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a463d0271aeee1bd4a1bf36636fafb647" kindref="member">MeshAdaptPUMIDrvr::willInterfaceAdapt</ref>()<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//Does<sp/>banded<sp/>adapt<sp/>need<sp/>to<sp/>happen<sp/>for<sp/>an<sp/>isotropic<sp/>mesh?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//I<sp/>need<sp/>to<sp/>loop<sp/>over<sp/>all<sp/>mesh<sp/>edges<sp/>and<sp/>determine<sp/>if<sp/>the<sp/>edge<sp/>intersects<sp/>the<sp/>blending<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>so,<sp/>need<sp/>to<sp/>check<sp/>the<sp/>size<sp/>values<sp/>on<sp/>the<sp/>edge-adjacent<sp/>vertices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//If<sp/>either<sp/>size<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>h_interface*1.5,<sp/>then<sp/>we<sp/>know<sp/>we<sp/>need<sp/>to<sp/>adapt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adaptFlag=0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>assertFlag;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>current<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>currentField;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/>if(!size_iso)<sp/>//if<sp/>no<sp/>previous<sp/>size<sp/>field</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/>currentField<sp/>=<sp/>samSz::isoSize(m);</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/>else<sp/>//otherwise<sp/>use<sp/>previous<sp/>size<sp/>field,<sp/>remember<sp/>to<sp/>reflect<sp/>this<sp/>in<sp/>interfaceAdapt<sp/>or<sp/>collapse<sp/>to<sp/>a<sp/>single<sp/>function</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/>currentField<sp/><sp/>=<sp/>apf::createFieldOn(m,<sp/>&quot;currentField&quot;,<sp/>apf::SCALAR);</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::copyData(currentField,size_iso);</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>currentField<sp/>=<sp/>samSz::isoSize(m);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edgeRatio<sp/>=<sp/>1.5;<sp/></highlight><highlight class="comment">//need<sp/>to<sp/>be<sp/>taken<sp/>from<sp/>MeshAdapt<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//get<sp/>banded<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_band<sp/>=<sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa3eddefb9c31b31e2b8c91cdd01ea40a" kindref="member">N_interface_band</ref>)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aac549fb381e88d63fc1743b461adb337" kindref="member">calculateSizeField</ref>(L_band);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>interfaceField<sp/>=<sp/>sizeFieldList.front();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>sizeFieldList.pop();<sp/></highlight><highlight class="comment">//destroy<sp/>this<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//determine<sp/>if<sp/>desired<sp/>mesh<sp/>is<sp/>contained<sp/>in<sp/>current<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(ent<sp/>=<sp/>m-&gt;iterate(it))<sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_current<sp/>=<sp/>apf::getScalar(currentField,ent,0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_needed<sp/>=<sp/>apf::getScalar(interfaceField,ent,0);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h_current/h_needed<sp/>&gt;<sp/>edgeRatio){</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptFlag=1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>assertFlag<sp/>=<sp/>adaptFlag;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>PCU_Add_Ints(&amp;assertFlag,1);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>assert(assertFlag<sp/>==0<sp/>||<sp/>assertFlag<sp/>==<sp/>PCU_Proc_Peers());</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>apf::destroyField(currentField);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>apf::destroyField(interfaceField);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assertFlag;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="class_mesh_adapt_p_u_m_i_drvr_1ab0cfeba615d840e3f32c9d6ac295a890" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab0cfeba615d840e3f32c9d6ac295a890" kindref="member">MeshAdaptPUMIDrvr::adaptPUMIMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>inputString)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a7341569125c3eed5cafc6a9aa8524195" kindref="member">calculateAnisoSizeField</ref>();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ERM&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(err_reg);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0decaa7be27e9d9899a16de5839cf750" kindref="member">removeBCData</ref>();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>PCU_Time();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" kindref="member">getERMSizeField</ref>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>PCU_Time();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0<sp/>&amp;&amp;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>myfile;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myfile.open(</highlight><highlight class="stringliteral">&quot;error_estimator_timing.txt&quot;</highlight><highlight class="normal">,<sp/>std::ios::app<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myfile<sp/>&lt;&lt;<sp/>t2-t1&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myfile.close();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;VMS&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vmsErrH1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" kindref="member">getERMSizeField</ref>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;meshQuality&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//size_iso<sp/>=<sp/>samSz::isoSize(m);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a32a3b6ff131f4a36de1c2b2ec9321f78" kindref="member">setSphereSizeField</ref>();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;isotropic&quot;</highlight><highlight class="normal"><sp/>||<sp/>std::string(inputString)==</highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_band<sp/>=<sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa3eddefb9c31b31e2b8c91cdd01ea40a" kindref="member">N_interface_band</ref>+1)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aac549fb381e88d63fc1743b461adb337" kindref="member">calculateSizeField</ref>(L_band);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>&gt;1)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a97c4181cef84b47cd827c0f9214e4903" kindref="member">predictiveInterfacePropagation</ref>();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;isotropicProteus&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>size_iso<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;anisotropicProteus&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_frame<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_sizeFrame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_scale<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;proteus_sizeScale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa48e918a44e6c7e99cd8c88ee7478437" kindref="member">testIsotropicSizeField</ref>();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;uniform&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//special<sp/>situation<sp/>where<sp/>I<sp/>only<sp/>care<sp/>about<sp/>err_reg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeField(errRho_reg);<sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeField(errRel_reg);<sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>std::string(inputString)==</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vmsErrH1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>L_band<sp/>=<sp/>(numAdaptSteps+N_interface_band)*hPhi;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculateSizeField(L_band);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>L_band<sp/>=<sp/>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa3eddefb9c31b31e2b8c91cdd01ea40a" kindref="member">N_interface_band</ref>+1)*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa0c1053cfda5b41ea3eb9dafcf021c7" kindref="member">hPhi</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aac549fb381e88d63fc1743b461adb337" kindref="member">calculateSizeField</ref>(L_band);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>&gt;2)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a97c4181cef84b47cd827c0f9214e4903" kindref="member">predictiveInterfacePropagation</ref>();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a557aeb21cd38eb22d9bcef5acd865ff6" kindref="member">getERMSizeField</ref>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>size<sp/>field<sp/>config<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>isotropicIntersect();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>namebuffer[50];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;pumi_preadapt_%i&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::writeVtkFiles(namebuffer,<sp/>m);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;beforeAnisotropicAdapt%i_.smb&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;writeNative(namebuffer);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;ERM&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MeshAdapt<sp/>error<sp/>will<sp/>be<sp/>thrown<sp/>if<sp/>region<sp/>fields<sp/>are<sp/>not<sp/>freed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeField(err_reg);<sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeField(errRho_reg);<sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freeField(errRel_reg);<sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;VMS&quot;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>freeField(vmsErrH1);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;cleared<sp/>VMS<sp/>field\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>relics<sp/>from<sp/>an<sp/>attempt<sp/>to<sp/>pass<sp/>BCs<sp/>from<sp/>proteus<sp/>into<sp/>the<sp/>error<sp/>estimator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>They<sp/>maybe<sp/>useful<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//m-&gt;destroyTag(fluxtag[1]);<sp/>m-&gt;destroyTag(fluxtag[2]);<sp/>m-&gt;destroyTag(fluxtag[3]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4babcf12405cab5dcd7af2b85395586d" kindref="member">exteriorGlobaltoLocalElementBoundariesArray</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4babcf12405cab5dcd7af2b85395586d" kindref="member">exteriorGlobaltoLocalElementBoundariesArray</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;=<sp/>m-&gt;getDimension();<sp/>++d)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>freeNumbering(local[d]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>adaptSize;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>adaptFrame;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>ma::Input*<sp/>in;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;uniform&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>=<sp/>ma::configureUniformRefine(m);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;shouldFixShape=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(size_iso<sp/>||<sp/>(size_scale<sp/>&amp;&amp;<sp/>size_frame));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref>==</highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==<sp/></highlight><highlight class="stringliteral">&quot;interface&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>=<sp/>ma::configure(m,<sp/>size_scale,<sp/>size_frame);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptSize<sp/><sp/>=<sp/>apf::createFieldOn(m,<sp/></highlight><highlight class="stringliteral">&quot;adapt_size&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptFrame<sp/>=<sp/>apf::createFieldOn(m,<sp/></highlight><highlight class="stringliteral">&quot;adapt_frame&quot;</highlight><highlight class="normal">,<sp/>apf::MATRIX);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::copyData(adaptSize,<sp/>size_scale);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::copyData(adaptFrame,<sp/>size_frame);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>ma::configure(m,<sp/>adaptSize,<sp/>adaptFrame);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adaptSize<sp/><sp/>=<sp/>apf::createFieldOn(m,<sp/></highlight><highlight class="stringliteral">&quot;adapt_size&quot;</highlight><highlight class="normal">,<sp/>apf::SCALAR);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::copyData(adaptSize,<sp/>size_iso);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>ma::configure(m,<sp/>adaptSize);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>ma::validateInput(in);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>in-&gt;shouldRunPreZoltan<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>in-&gt;shouldRunMidZoltan<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>in-&gt;shouldRunPostZoltan<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in-&gt;shouldRunMidParma<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in-&gt;shouldRunPostParma<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>in-&gt;maximumImbalance<sp/>=<sp/>1.05;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>in-&gt;maximumIterations<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a10079fecbff8a243a52cc7160db07548" kindref="member">numIter</ref>;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;meshQuality&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;shouldSnap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;shouldTransferParametric=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>in-&gt;shouldSnap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//in-&gt;goodQuality<sp/>=<sp/>0.16;//0.027;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>mass_before<sp/>=<sp/>getTotalMass();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>PCU_Time();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ma::adapt(in);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>ma::adaptVerbose(in);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>PCU_Time();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>m-&gt;verify();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>mass_after<sp/>=<sp/>getTotalMass();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//PCU_Add_Doubles(&amp;mass_before,1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//PCU_Add_Doubles(&amp;mass_after,1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0<sp/>&amp;&amp;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ios::fmtflags<sp/>saved(std::cout.flags());</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::setprecision(15)&lt;&lt;&quot;Mass<sp/>Before<sp/>&quot;&lt;&lt;mass_before&lt;&lt;&quot;<sp/>After<sp/>&quot;&lt;&lt;mass_after&lt;&lt;&quot;<sp/>diff<sp/>&quot;&lt;&lt;mass_after-mass_before&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout.flags(saved);</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ofstream<sp/>myfile;</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/>myfile.open(&quot;adapt_timing.txt&quot;,<sp/>std::ios::app);</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/><sp/>myfile<sp/>&lt;&lt;<sp/>t2-t1&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/>myfile.close();</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/>std::ofstream<sp/>mymass;</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/>mymass.open(&quot;mass_check.txt&quot;,<sp/>std::ios::app);</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/>mymass<sp/>&lt;&lt;std::setprecision(15)&lt;&lt;mass_before&lt;&lt;&quot;,&quot;&lt;&lt;mass_after&lt;&lt;&quot;,&quot;&lt;&lt;mass_after-mass_before&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/>mymass.close();</highlight></codeline>
<codeline lineno="611"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a048c01a777fa7d2f953a8f32621f16ce" kindref="member">size_field_config</ref>==</highlight><highlight class="stringliteral">&quot;ERM&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_gBC)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afdc27e39d259578ab1089275f76e77c6" kindref="member">getSimmetrixBC</ref>();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>namebuffer[50];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;pumi_postadapt_%i&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::writeVtkFiles(namebuffer,<sp/>m);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;afterAnisotropicAdapt%i_.smb&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;writeNative(namebuffer);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//isReconstructed<sp/>=<sp/>0;<sp/>//this<sp/>is<sp/>needed<sp/>to<sp/>maintain<sp/>consistency<sp/>with<sp/>the<sp/>post-adapt<sp/>conversion<sp/>back<sp/>to<sp/>Proteus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>apf::destroyField(adaptSize);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aeffc8a7d92b18589fb364e0a25166b9c" kindref="member">adapt_type_config</ref>==</highlight><highlight class="stringliteral">&quot;anisotropic&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(adaptFrame);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref>++;<sp/></highlight><highlight class="comment">//counter<sp/>for<sp/>number<sp/>of<sp/>adapt<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;debugRestart&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;writeNative(</highlight><highlight class="stringliteral">&quot;DEBUG_restart.smb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="class_mesh_adapt_p_u_m_i_drvr_1a127c1258e9a3fabb98c9d2a64fd03161" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a127c1258e9a3fabb98c9d2a64fd03161" kindref="member">MeshAdaptPUMIDrvr::getMinimumQuality</ref>()</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>ma::SizeField*<sp/>isf<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ma::IdentitySizeField(m);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(m-&gt;getDimension());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minq<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>minq<sp/>=<sp/><ref refid="jf_8h_1ac6afabdc09a49a433ee19d8a9486056d" kindref="member">std::min</ref>(minq,<sp/>ma::measureElementQuality(m,<sp/>isf,<sp/>e));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>isf;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PCU_Min_Double(minq);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656" refid="class_mesh_adapt_p_u_m_i_drvr_1ac9ee3fb3ccad97e4a7b2ecf33fad6dd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac9ee3fb3ccad97e4a7b2ecf33fad6dd0" kindref="member">MeshAdaptPUMIDrvr::getTotalMass</ref>()</highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>voff<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>assert(voff);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>e;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(m-&gt;getDimension());</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((e<sp/>=<sp/>m-&gt;iterate(it)))<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>elem<sp/>=<sp/>apf::createMeshElement(m,e);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Element*<sp/>voff_elem<sp/>=<sp/>apf::createElement(voff,<sp/>elem);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>apf::countIntPoints(elem,<sp/><ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>);<sp/>++l)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>qpt;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,l,qpt);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vof_val<sp/>=<sp/>apf::getScalar(voff_elem,qpt);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_val<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(vof_val,rho[0],rho[1]);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>apf::getIntWeight(elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,l);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>J;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getJacobian(elem,qpt,J);<sp/></highlight><highlight class="comment">//evaluate<sp/>the<sp/>Jacobian<sp/>at<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Jdet<sp/>=<sp/>apf::getJacobianDeterminant(J,m-&gt;getDimension());</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>+=<sp/>rho_val*weight*Jdet;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(voff_elem);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyMeshElement(elem);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>PCU_Add_Doubles(&amp;mass,1);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mass;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="comment">//Save<sp/>mesh<sp/>with<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="class_mesh_adapt_p_u_m_i_drvr_1a9da337ea66002132204fbffc63533543" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9da337ea66002132204fbffc63533543" kindref="member">MeshAdaptPUMIDrvr::writeMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>meshFile)</highlight></codeline>
<codeline lineno="695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>m-&gt;writeNative(meshFile);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::writeVtkFiles(meshFile,m);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//Clean<sp/>mesh<sp/>of<sp/>all<sp/>fields<sp/>and<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="class_mesh_adapt_p_u_m_i_drvr_1a809118b93e0865561177cf1dae2c1df1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a809118b93e0865561177cf1dae2c1df1" kindref="member">MeshAdaptPUMIDrvr::cleanMesh</ref>()</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//destroy<sp/>all<sp/>fields...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;i&lt;m-&gt;countFields();i++)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Field*<sp/>sample<sp/>=<sp/>m-&gt;getField(i);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;find<sp/>field<sp/>&quot;<sp/>&lt;&lt;m-&gt;getField(m-&gt;countFields())&lt;&lt;&quot;<sp/>how<sp/>many<sp/>fields?<sp/>&quot;&lt;&lt;m-&gt;countFields()&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;is<sp/>velocity_old<sp/>here?<sp/>&quot;&lt;&lt;m-&gt;findField(&quot;velocity_old&quot;)&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;ls_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phi_old_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phid_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phiCorr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phiCorr_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;phiCorr_old_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;p_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;p_old_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;VMSH1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>sample<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;VMSL2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>freeField(sample);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//destroy<sp/>all<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>apf::DynamicArray&lt;apf::MeshTag*&gt;<sp/>listTags;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>m-&gt;getTags(listTags);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTags<sp/>=<sp/>listTags.getSize();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDim<sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>nTags;<sp/>i++)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ignoreString<sp/>(</highlight><highlight class="stringliteral">&quot;proteus_number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tagName<sp/>(m-&gt;getTagName(listTags[i]));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tagName.find(ignoreString)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;(numDim+1);j++)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshIterator*<sp/>it<sp/>=<sp/>m-&gt;begin(j);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(ent<sp/>=<sp/>m-&gt;iterate(it))<sp/>)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;hasTag(ent,listTags[i]))</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;removeTag(ent,listTags[i]);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;end(it);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;destroyTag(listTags[i]);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="class_mesh_adapt_p_u_m_i_drvr_1abdd208d69c0c93a8deee54d46f5926ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1abdd208d69c0c93a8deee54d46f5926ee" kindref="member">MeshAdaptPUMIDrvr::set_nAdapt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberAdapt)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a4a202881ec4b2aa283d34e81d45d1404" kindref="member">nAdapt</ref><sp/>=<sp/>numberAdapt;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/cMeshAdaptPUMI.cpp"/>
  </compounddef>
</doxygen>
