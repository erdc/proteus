<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classproteus_1_1cpp_r_a_n_s3_p_f" kind="class" language="C++" prot="public">
    <compoundname>proteus::cppRANS3PF</compoundname>
    <basecompoundref refid="classproteus_1_1cpp_r_a_n_s3_p_f__base" prot="public" virt="non-virtual">proteus::cppRANS3PF_base</basecompoundref>
    <includes refid="_r_a_n_s3_p_f_8h" local="no">/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a989c4bcace3b92f2379f9700a92f84e1" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundaries</definition>
        <argsstring></argsstring>
        <name>surrogate_boundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="605" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a43f816d4c6a6c682654734f1ba8b2e50" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundary_elements</definition>
        <argsstring></argsstring>
        <name>surrogate_boundary_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="605" column="40" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1ab3dd8dedd210d17b16984c2a739393ed" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundary_particle</definition>
        <argsstring></argsstring>
        <name>surrogate_boundary_particle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="605" column="68" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1abb53f36c316c427224e391dbcf942633" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::C_sbm</definition>
        <argsstring></argsstring>
        <name>C_sbm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="606" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1af12337a2871038a18514634fa9dc1412" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::beta_sbm</definition>
        <argsstring></argsstring>
        <name>beta_sbm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="606" column="20" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a1fa22b0d3283ab66daf708655218177e" prot="public" static="no" mutable="no">
        <type><ref refid="classproteus_1_1cpp_hsu_sed_stress" kindref="compound">cppHsuSedStress</ref>&lt; 3 &gt;</type>
        <definition>cppHsuSedStress&lt;3&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::closure</definition>
        <argsstring></argsstring>
        <name>closure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="607" column="23" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1af5a723517be7103a4819045a44d74c5d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="608" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a9524526217ce8c7797b4cf7fea63848e" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nSpace2</definition>
        <argsstring></argsstring>
        <name>nSpace2</name>
        <initializer>=9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="609" column="9" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1acb19c432fca72e2985f49a1f051afe69" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="610" column="22" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1af93dfb2cec9b51b4cae13c7ca8cf907f" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf</definition>
        <argsstring></argsstring>
        <name>gf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="611" column="28" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a6d58401f08f241cf0d7178690aab7cf0" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf_s</definition>
        <argsstring></argsstring>
        <name>gf_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="612" column="28" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1af4ceffb535913e5e104e94506afa947f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cppRANS3PF</definition>
        <argsstring>()</argsstring>
        <name>cppRANS3PF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="613" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="613" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a5ed23365295539d20e06bd9b8102b724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::setSedClosure</definition>
        <argsstring>(double aDarcy, double betaForch, double grain, double packFraction, double packMargin, double maxFraction, double frFraction, double sigmaC, double C3e, double C4e, double eR, double fContact, double mContact, double nContact, double angFriction, double vos_limiter, double mu_fr_limiter)</argsstring>
        <name>setSedClosure</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a2b9be02c1e570610169feeed129c7b1d">setSedClosure</reimplements>
        <param>
          <type>double</type>
          <declname>aDarcy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>betaForch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packMargin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaC</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C3e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C4e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angFriction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vos_limiter</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu_fr_limiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="649" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="649" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a6b2128b01601bd3dfabd558d58632277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::Dot</definition>
        <argsstring>(const double vec1[nSpace], const double vec2[nSpace])</argsstring>
        <name>Dot</name>
        <param>
          <type>const double</type>
          <declname>vec1</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>vec2</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="686" column="21" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="686" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1ab7618e101c2386afeeb5119e100c600d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateTangentialGradient</definition>
        <argsstring>(const double normal[nSpace], const double vel_grad[nSpace], double vel_tgrad[nSpace])</argsstring>
        <name>calculateTangentialGradient</name>
        <param>
          <type>const double</type>
          <declname>normal</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>vel_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vel_tgrad</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="695" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="695" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a879b37d0bc669877b1ee6e6de14706ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double eps_rho, const double eps_mu, const double eps_s, const double sigma, const double rho_0, double nu_0, const double rho_1, double nu_1, const double h_e, const double smagorinskyConstant, const int turbulenceClosureModel, const double g[nSpace], const double useVF, const double &amp;vf, const double &amp;phi, const double n[nSpace], const double distance_to_omega_solid, const double &amp;kappa, const double porosity, const double &amp;p, const double grad_p[nSpace], const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], const double &amp;u, const double &amp;v, const double &amp;w, const double &amp;uStar, const double &amp;vStar, const double &amp;wStar, double &amp;eddy_viscosity, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w, double mass_adv[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double dmass_adv_w[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double dmom_u_adv_w[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_v_adv_w[nSpace], double mom_w_adv[nSpace], double dmom_w_adv_u[nSpace], double dmom_w_adv_v[nSpace], double dmom_w_adv_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double &amp;mom_u_ham, double dmom_u_ham_grad_p[nSpace], double dmom_u_ham_grad_u[nSpace], double &amp;mom_v_ham, double dmom_v_ham_grad_p[nSpace], double dmom_v_ham_grad_v[nSpace], double &amp;mom_w_ham, double dmom_w_ham_grad_p[nSpace], double dmom_w_ham_grad_w[nSpace], double &amp;rhoSave, double &amp;nuSave, int KILL_PRESSURE_TERM, int MULTIPLY_EXTERNAL_FORCE_BY_DENSITY, double forcex, double forcey, double forcez, int MATERIAL_PARAMETERS_AS_FUNCTION, double density_as_function, double dynamic_viscosity_as_function, int USE_SBM, double x, double y, double z, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, int INT_BY_PARTS_PRESSURE)</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>h_e</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>distance_to_omega_solid</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>kappa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rhoSave</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nuSave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>KILL_PRESSURE_TERM</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MULTIPLY_EXTERNAL_FORCE_BY_DENSITY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MATERIAL_PARAMETERS_AS_FUNCTION</declname>
        </param>
        <param>
          <type>double</type>
          <declname>density_as_function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SBM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>INT_BY_PARTS_PRESSURE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="705" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="705" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a9048b0c2b777e91ab561b41544a01166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateDarcyForchheimerTerms_Ergun</definition>
        <argsstring>(const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, double nu_t, const double useVF, const double vf, const double phi, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double phi_s, const double u_s, const double v_s, const double w_s, const double uStar_s, const double vStar_s, const double wStar_s, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double gradC_x, double gradC_y, double gradC_z)</argsstring>
        <name>updateDarcyForchheimerTerms_Ergun</name>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_t</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar_s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1025" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1025" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a0efb772551df2473c4a20e711b5b47db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateSolidParticleTerms</definition>
        <argsstring>(bool element_owned, const double particle_nitsche, const double dV, const int nParticles, const int sd_offset, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, const double porosity, const double penalty, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double x, const double y, const double z, const double p, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double mom_u_adv[nSpace], double mom_v_adv[nSpace], double mom_w_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_w_adv_w[nSpace], double &amp;mom_u_ham, double dmom_u_ham_grad_u[nSpace], double &amp;mom_v_ham, double dmom_v_ham_grad_v[nSpace], double &amp;mom_w_ham, double dmom_w_ham_grad_w[nSpace], double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea)</argsstring>
        <name>updateSolidParticleTerms</name>
        <param>
          <type>bool</type>
          <declname>element_owned</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sd_offset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1100" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1100" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1af909fbfd5e48f896f7efae7d3ba6fc98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateCFL</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dm, const double df[nSpace], double &amp;cfl)</argsstring>
        <name>calculateCFL</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1292" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1292" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a14a16f1eb5defe300ab0b820f906f685" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateTurbulenceClosure</definition>
        <argsstring>(const int turbulenceClosureModel, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double porosity, const double eddy_visc_coef_0, const double turb_var_0, const double turb_var_1, const double turb_grad_0[nSpace], double &amp;eddy_viscosity, double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source)</argsstring>
        <name>updateTurbulenceClosure</name>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eddy_visc_coef_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_grad_0</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1311" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1311" bodyend="1405"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a770df1afb5b816594efcfe967a7dc663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dmt, const double &amp;dm, const double df[nSpace], const double &amp;a, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1407" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1407" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a261f031b2d17b339061f26a4812c08e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double &amp;Cd_sge, const double G[nSpace *nSpace], const double &amp;G_dd_G, const double &amp;tr_G, const double &amp;A0, const double Ai[nSpace], const double &amp;Kij, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;q_cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>G_dd_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tr_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Kij</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1435" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1435" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a4a024090531ec61ee9b69623f7229da7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double &amp;pdeResidualP, const double &amp;pdeResidualU, const double &amp;pdeResidualV, const double &amp;pdeResidualW, double &amp;subgridErrorP, double &amp;subgridErrorU, double &amp;subgridErrorV, double &amp;subgridErrorW)</argsstring>
        <name>calculateSubgridError_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualP</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualU</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualV</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualW</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorP</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorU</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorV</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1456" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1456" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1ad55488cc12d7e159236ac6535f7ebed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridErrorDerivatives_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double dpdeResidualP_du[nDOF_trial_element], const double dpdeResidualP_dv[nDOF_trial_element], const double dpdeResidualP_dw[nDOF_trial_element], const double dpdeResidualU_dp[nDOF_trial_element], const double dpdeResidualU_du[nDOF_trial_element], const double dpdeResidualV_dp[nDOF_trial_element], const double dpdeResidualV_dv[nDOF_trial_element], const double dpdeResidualW_dp[nDOF_trial_element], const double dpdeResidualW_dw[nDOF_trial_element], double dsubgridErrorP_du[nDOF_trial_element], double dsubgridErrorP_dv[nDOF_trial_element], double dsubgridErrorP_dw[nDOF_trial_element], double dsubgridErrorU_dp[nDOF_trial_element], double dsubgridErrorU_du[nDOF_trial_element], double dsubgridErrorV_dp[nDOF_trial_element], double dsubgridErrorV_dv[nDOF_trial_element], double dsubgridErrorW_dp[nDOF_trial_element], double dsubgridErrorW_dw[nDOF_trial_element])</argsstring>
        <name>calculateSubgridErrorDerivatives_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1475" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1475" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a6781e947526fe44f749dba17aa85e7eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double &amp;bc_oneByRho, const double n[nSpace], const double &amp;porosity, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double &amp;flux_wmom, double *velocity_star, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_wmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1516" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1516" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a11ebf4cdc4e6d54fbfdf287f076e1e68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double n[nSpace], const double &amp;porosity, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_mass_dw, double &amp;dflux_umom_dp, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_umom_dw, double &amp;dflux_vmom_dp, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv, double &amp;dflux_vmom_dw, double &amp;dflux_wmom_dp, double &amp;dflux_wmom_du, double &amp;dflux_wmom_dv, double &amp;dflux_wmom_dw, double *velocity_star)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1663" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1663" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a4e94a8f7dac6eaecf8ca3c31a108d86c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1820" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1820" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a5a794bfd6cdf9712ea1abb2655c8e6be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1868" column="16" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1868" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1afee6d6b82bc37792f46c48a0b5b9baa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_symmetric_gradient_dot_vec</definition>
        <argsstring>(const double *grad_u, const double *grad_v, const double *grad_w, const double *n, double res[3])</argsstring>
        <name>get_symmetric_gradient_dot_vec</name>
        <param>
          <type>const double *</type>
          <declname>grad_u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>grad_v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>grad_w</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1900" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1900" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1aa8abf18b15e0160438a91cf5a94daa13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_stress_in_n</definition>
        <argsstring>(const double *grad_u, const double *grad_v, const double *grad_w, const double *n, double p, double mu, double f[3])</argsstring>
        <name>get_stress_in_n</name>
        <param>
          <type>const double *</type>
          <declname>grad_u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>grad_v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>grad_w</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1910" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1910" bodyend="1923"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a6edaa3325f3533578174abbb18aa731d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_cross_product</definition>
        <argsstring>(const double *u, const double *v, double res[3])</argsstring>
        <name>get_cross_product</name>
        <param>
          <type>const double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1924" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1924" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1aadbb5e83a12547cfda282398f9c19073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_dot_product</definition>
        <argsstring>(const double *u, const double *v)</argsstring>
        <name>get_dot_product</name>
        <param>
          <type>const double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1930" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1930" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1aa134b0ffe930383dd70687263788a05a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, double x, double y, double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1934" column="11" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1934" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a16676a5336f516a6d9910ec3d36b4a0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, int I, double x, double y, double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1955" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1955" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a965a63347a8729905ecdaf973ae6c61a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_normal_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, int I, double x, double y, double z, double &amp;nx, double &amp;ny, double &amp;nz)</argsstring>
        <name>get_normal_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1967" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1967" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a2ee2b22116d676578ecdd72d50766a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_velocity_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, int I, double x, double y, double z, double &amp;vx, double &amp;vy, double &amp;vz)</argsstring>
        <name>get_velocity_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="1986" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="1986" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a95a5645115ba143785c67f2421236331" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, int *mesh_l2g, double *x_ref, double *dV_ref, int nDOF_per_element_pressure, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *q_p, double *q_grad_p, double *ebqe_p, double *ebqe_grad_p, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_hess_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, int nElements_owned, int nElementBoundaries_global, int nElementBoundaries_owned, int nNodes_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const double *eps_solid, const double *ebq_global_phi_solid, const double *ebq_global_grad_phi_solid, const double *ebq_particle_velocity_solid, double *phi_solid_nodes, double *phi_solid, const double *q_velocity_solid, const double *q_velocityStar_solid, const double *q_vos, const double *q_dvos_dt, const double *q_grad_vos, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, double *q_eddy_viscosity, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *u_dof_old, double *v_dof_old, double *w_dof_old, double *u_dof_old_old, double *v_dof_old_old, double *w_dof_old_old, double *uStar_dof, double *vStar_dof, double *wStar_dof, double *g, const double useVF, double *vf, double *phi, double *phi_dof, double *normal_phi, double *kappa_phi, double *q_mom_u_acc, double *q_mom_v_acc, double *q_mom_w_acc, double *q_mass_adv, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *ebqe_velocity_star, double *q_cfl, double *q_numDiff_u, double *q_numDiff_v, double *q_numDiff_w, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, double *globalResidual, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_vos_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, double *q_x, double *q_velocity, double *ebqe_velocity, double *q_grad_u, double *q_grad_v, double *q_grad_w, double *q_divU, double *ebqe_grad_u, double *ebqe_grad_v, double *ebqe_grad_w, double *flux, double *elementResidual_p_save, int *elementFlags, int *boundaryFlags, double *barycenters, double *wettedAreas, double *netForces_p, double *netForces_v, double *netMoments, double *q_rho, double *ebqe_rho, double *q_nu, double *ebqe_nu, int nParticles, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea, double particle_nitsche, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, double *phisError, double *phisErrorNodal, int USE_SUPG, int ARTIFICIAL_VISCOSITY, double cMax, double cE, int MULTIPLY_EXTERNAL_FORCE_BY_DENSITY, double *forcex, double *forcey, double *forcez, int KILL_PRESSURE_TERM, double dt, double *quantDOFs, int MATERIAL_PARAMETERS_AS_FUNCTION, double *density_as_function, double *dynamic_viscosity_as_function, double *ebqe_density_as_function, double *ebqe_dynamic_viscosity_as_function, double order_polynomial, double *isActiveDOF, int USE_SBM, double *ncDrag, double *betaDrag, double *vos_vel_nodes, double *entropyResidualPerNode, double *laggedEntropyResidualPerNode, double *uStar_dMatrix, double *vStar_dMatrix, double *wStar_dMatrix, int numDOFs_1D, int NNZ_1D, int *csrRowIndeces_1D, int *csrColumnOffsets_1D, int *rowptr_1D, int *colind_1D, double *isBoundary_1D, int INT_BY_PARTS_PRESSURE, bool useExact)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1aa4f7b1d06ccd83a7c761c5c02227202e">calculateResidual</reimplements>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nDOF_per_element_pressure</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_hess_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nNodes_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_global_phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_global_grad_phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_particle_velocity_solid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocityStar_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof_old_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof_old_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof_old_old</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>uStar_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vStar_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wStar_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_grad_u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_grad_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_grad_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_divU</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_grad_u</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_grad_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_grad_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementResidual_p_save</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_nu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_nu</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phisError</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phisErrorNodal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SUPG</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ARTIFICIAL_VISCOSITY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cMax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cE</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MULTIPLY_EXTERNAL_FORCE_BY_DENSITY</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>KILL_PRESSURE_TERM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>quantDOFs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MATERIAL_PARAMETERS_AS_FUNCTION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>density_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_density_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>order_polynomial</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>isActiveDOF</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SBM</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ncDrag</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>betaDrag</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vos_vel_nodes</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>entropyResidualPerNode</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>laggedEntropyResidualPerNode</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>uStar_dMatrix</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vStar_dMatrix</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wStar_dMatrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs_1D</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NNZ_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind_1D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>isBoundary_1D</declname>
        </param>
        <param>
          <type>int</type>
          <declname>INT_BY_PARTS_PRESSURE</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="2004" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="2004" bodyend="4939"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a2c7909912a4caf46e3811e3e96795990" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(double *mesh_trial_ref, double *mesh_grad_trial_ref, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, int *mesh_l2g, double *x_ref, double *dV_ref, double *p_trial_ref, double *p_grad_trial_ref, double *p_test_ref, double *p_grad_test_ref, double *q_p, double *q_grad_p, double *ebqe_p, double *ebqe_grad_p, double *vel_trial_ref, double *vel_grad_trial_ref, double *vel_hess_trial_ref, double *vel_test_ref, double *vel_grad_test_ref, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *p_trial_trace_ref, double *p_grad_trial_trace_ref, double *p_test_trace_ref, double *p_grad_test_trace_ref, double *vel_trial_trace_ref, double *vel_grad_trial_trace_ref, double *vel_test_trace_ref, double *vel_grad_test_trace_ref, double *normal_ref, double *boundaryJac_ref, double eb_adjoint_sigma, double *elementDiameter, double *nodeDiametersArray, double hFactor, int nElements_global, int nElements_owned, int nElementBoundaries_global, int nElementBoundaries_owned, int nNodes_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const double *eps_solid, const double *ebq_global_phi_solid, const double *ebq_global_grad_phi_solid, const double *ebq_particle_velocity_solid, double *phi_solid_nodes, const double *phi_solid, const double *q_velocity_solid, const double *q_velocityStar_solid, const double *q_vos, const double *q_dvos_dt, const double *q_grad_vos, const double *q_dragAlpha, const double *q_dragBeta, const double *q_mass_source, const double *q_turb_var_0, const double *q_turb_var_1, const double *q_turb_var_grad_0, int *p_l2g, int *vel_l2g, double *p_dof, double *u_dof, double *v_dof, double *w_dof, double *g, const double useVF, double *vf, double *phi, double *phi_dof, double *normal_phi, double *kappa_phi, double *q_mom_u_acc_beta_bdf, double *q_mom_v_acc_beta_bdf, double *q_mom_w_acc_beta_bdf, double *q_dV, double *q_dV_last, double *q_velocity_sge, double *ebqe_velocity_star, double *q_cfl, double *q_numDiff_u_last, double *q_numDiff_v_last, double *q_numDiff_w_last, int *sdInfo_u_u_rowptr, int *sdInfo_u_u_colind, int *sdInfo_u_v_rowptr, int *sdInfo_u_v_colind, int *sdInfo_u_w_rowptr, int *sdInfo_u_w_colind, int *sdInfo_v_v_rowptr, int *sdInfo_v_v_colind, int *sdInfo_v_u_rowptr, int *sdInfo_v_u_colind, int *sdInfo_v_w_rowptr, int *sdInfo_v_w_colind, int *sdInfo_w_w_rowptr, int *sdInfo_w_w_colind, int *sdInfo_w_u_rowptr, int *sdInfo_w_u_colind, int *sdInfo_w_v_rowptr, int *sdInfo_w_v_colind, int *csrRowIndeces_p_p, int *csrColumnOffsets_p_p, int *csrRowIndeces_p_u, int *csrColumnOffsets_p_u, int *csrRowIndeces_p_v, int *csrColumnOffsets_p_v, int *csrRowIndeces_p_w, int *csrColumnOffsets_p_w, int *csrRowIndeces_u_p, int *csrColumnOffsets_u_p, int *csrRowIndeces_u_u, int *csrColumnOffsets_u_u, int *csrRowIndeces_u_v, int *csrColumnOffsets_u_v, int *csrRowIndeces_u_w, int *csrColumnOffsets_u_w, int *csrRowIndeces_v_p, int *csrColumnOffsets_v_p, int *csrRowIndeces_v_u, int *csrColumnOffsets_v_u, int *csrRowIndeces_v_v, int *csrColumnOffsets_v_v, int *csrRowIndeces_v_w, int *csrColumnOffsets_v_w, int *csrRowIndeces_w_p, int *csrColumnOffsets_w_p, int *csrRowIndeces_w_u, int *csrColumnOffsets_w_u, int *csrRowIndeces_w_v, int *csrColumnOffsets_w_v, int *csrRowIndeces_w_w, int *csrColumnOffsets_w_w, double *globalJacobian, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *ebqe_vf_ext, double *bc_ebqe_vf_ext, double *ebqe_phi_ext, double *bc_ebqe_phi_ext, double *ebqe_normal_phi_ext, double *ebqe_kappa_phi_ext, const double *ebqe_vos_ext, const double *ebqe_turb_var_0, const double *ebqe_turb_var_1, int *isDOFBoundary_p, int *isDOFBoundary_u, int *isDOFBoundary_v, int *isDOFBoundary_w, int *isAdvectiveFluxBoundary_p, int *isAdvectiveFluxBoundary_u, int *isAdvectiveFluxBoundary_v, int *isAdvectiveFluxBoundary_w, int *isDiffusiveFluxBoundary_u, int *isDiffusiveFluxBoundary_v, int *isDiffusiveFluxBoundary_w, double *ebqe_bc_p_ext, double *ebqe_bc_flux_mass_ext, double *ebqe_bc_flux_mom_u_adv_ext, double *ebqe_bc_flux_mom_v_adv_ext, double *ebqe_bc_flux_mom_w_adv_ext, double *ebqe_bc_u_ext, double *ebqe_bc_flux_u_diff_ext, double *ebqe_penalty_ext, double *ebqe_bc_v_ext, double *ebqe_bc_flux_v_diff_ext, double *ebqe_bc_w_ext, double *ebqe_bc_flux_w_diff_ext, int *csrColumnOffsets_eb_p_p, int *csrColumnOffsets_eb_p_u, int *csrColumnOffsets_eb_p_v, int *csrColumnOffsets_eb_p_w, int *csrColumnOffsets_eb_u_p, int *csrColumnOffsets_eb_u_u, int *csrColumnOffsets_eb_u_v, int *csrColumnOffsets_eb_u_w, int *csrColumnOffsets_eb_v_p, int *csrColumnOffsets_eb_v_u, int *csrColumnOffsets_eb_v_v, int *csrColumnOffsets_eb_v_w, int *csrColumnOffsets_eb_w_p, int *csrColumnOffsets_eb_w_u, int *csrColumnOffsets_eb_w_v, int *csrColumnOffsets_eb_w_w, int *elementFlags, int nParticles, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, double particle_nitsche, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, int USE_SUPG, int KILL_PRESSURE_TERM, double dt, int MATERIAL_PARAMETERS_AS_FUNCTION, double *density_as_function, double *dynamic_viscosity_as_function, double *ebqe_density_as_function, double *ebqe_dynamic_viscosity_as_function, int USE_SBM, int ARTIFICIAL_VISCOSITY, double *uStar_dMatrix, double *vStar_dMatrix, double *wStar_dMatrix, int numDOFs_1D, int offset_u, int offset_v, int offset_w, int stride_u, int stride_v, int stride_w, int *rowptr_1D, int *colind_1D, int *rowptr, int *colind, int INT_BY_PARTS_PRESSURE, bool useExact)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a1b2a640b6a2dedeec532aa1d137ed21d">calculateJacobian</reimplements>
        <param>
          <type>double *</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_hess_trial_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nNodes_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_global_phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_global_grad_phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebq_particle_velocity_solid</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_velocityStar_solid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phi_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SUPG</declname>
        </param>
        <param>
          <type>int</type>
          <declname>KILL_PRESSURE_TERM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MATERIAL_PARAMETERS_AS_FUNCTION</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>density_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_density_as_function</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SBM</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ARTIFICIAL_VISCOSITY</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>uStar_dMatrix</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vStar_dMatrix</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wStar_dMatrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs_1D</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind_1D</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>INT_BY_PARTS_PRESSURE</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="4941" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="4941" bodyend="7278"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1aca5ce4d5a925d65a6f6206576b768d80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, int *interiorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *mesh_dof, double *mesh_velocity_dof, double MOVING_DOMAIN, int *mesh_l2g, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *normal_ref, double *boundaryJac_ref, int *vel_l2g, double *u_dof, double *v_dof, double *w_dof, double *vos_dof, double *vel_trial_trace_ref, double *ebqe_velocity, double *velocityAverage)</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1ae6a1ef2b8b127e8b96a49e79f97898ce">calculateVelocityAverage</reimplements>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vos_dof</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocityAverage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="7280" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="7280" bodyend="7452"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f_1a10fd226e59f47a5086a21c7d0e6c59a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::getBoundaryDOFs</definition>
        <argsstring>(double *mesh_dof, int *mesh_l2g, double *mesh_trial_trace_ref, double *mesh_grad_trial_trace_ref, double *dS_ref, double *vel_test_trace_ref, double *normal_ref, double *boundaryJac_ref, int *vel_l2g, int nExteriorElementBoundaries_global, int *exteriorElementBoundariesArray, int *elementBoundaryElementsArray, int *elementBoundaryLocalElementBoundariesArray, double *isBoundary_1D)</argsstring>
        <name>getBoundaryDOFs</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a0bef6619b1872dcd07f01e514b5c94b9">getBoundaryDOFs</reimplements>
        <param>
          <type>double *</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>isBoundary_1D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="7454" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="7454" bodyend="7539"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::cppRANS3PF_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f__base"/>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>equivalent_polynomials::GeneralizedFunctions_mix&lt; nSpace, 1, nQuadraturePoints_element &gt;</label>
        <link refid="classequivalent__polynomials_1_1_generalized_functions__mix"/>
      </node>
      <node id="3">
        <label>std::valarray&lt; double &gt;</label>
      </node>
      <node id="2">
        <label>proteus::cppRANS3PF_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>wStar_min_hiHe</edgelabel>
          <edgelabel>den_hi</edgelabel>
          <edgelabel>vStar_hi</edgelabel>
          <edgelabel>TransposeTransportMatrix</edgelabel>
          <edgelabel>uStar_hi</edgelabel>
          <edgelabel>wStar_hi</edgelabel>
          <edgelabel>wStar_psi</edgelabel>
          <edgelabel>wStar_gamma</edgelabel>
          <edgelabel>vStar_psi</edgelabel>
          <edgelabel>uStar_psi</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PF&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>closure</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>surrogate_boundary_elements</edgelabel>
          <edgelabel>surrogate_boundaries</edgelabel>
          <edgelabel>surrogate_boundary_particle</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>gf_s</edgelabel>
          <edgelabel>gf</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="4">
        <label>proteus::cppHsuSedStress&lt; 3 &gt;</label>
        <link refid="classproteus_1_1cpp_hsu_sed_stress"/>
      </node>
    </collaborationgraph>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" line="603" column="1" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mprans/RANS3PF.h" bodystart="602" bodyend="7540"/>
    <listofallmembers>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1af12337a2871038a18514634fa9dc1412" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>beta_sbm</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1abb53f36c316c427224e391dbcf942633" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>C_sbm</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1af909fbfd5e48f896f7efae7d3ba6fc98" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateCFL</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a2c7909912a4caf46e3811e3e96795990" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a95a5645115ba143785c67f2421236331" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a770df1afb5b816594efcfe967a7dc663" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a261f031b2d17b339061f26a4812c08e9" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a4a024090531ec61ee9b69623f7229da7" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateSubgridError_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1ad55488cc12d7e159236ac6535f7ebed2" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateSubgridErrorDerivatives_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1ab7618e101c2386afeeb5119e100c600d" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>calculateTangentialGradient</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1aca5ce4d5a925d65a6f6206576b768d80" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1acb19c432fca72e2985f49a1f051afe69" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>ck</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a1fa22b0d3283ab66daf708655218177e" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>closure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1af4ceffb535913e5e104e94506afa947f" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>cppRANS3PF</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a56c916752bd075533fc397c31a9636ef" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>den_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a6b2128b01601bd3dfabd558d58632277" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>Dot</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a879b37d0bc669877b1ee6e6de14706ed" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a6781e947526fe44f749dba17aa85e7eb" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a11ebf4cdc4e6d54fbfdf287f076e1e68" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a4e94a8f7dac6eaecf8ca3c31a108d86c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a5a794bfd6cdf9712ea1abb2655c8e6be" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a6edaa3325f3533578174abbb18aa731d" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_cross_product</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1aa134b0ffe930383dd70687263788a05a" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_distance_to_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a16676a5336f516a6d9910ec3d36b4a0a" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_distance_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1aadbb5e83a12547cfda282398f9c19073" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_dot_product</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a965a63347a8729905ecdaf973ae6c61a" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_normal_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1aa8abf18b15e0160438a91cf5a94daa13" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_stress_in_n</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1afee6d6b82bc37792f46c48a0b5b9baa8" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_symmetric_gradient_dot_vec</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a2ee2b22116d676578ecdd72d50766a03" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>get_velocity_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a10fd226e59f47a5086a21c7d0e6c59a2" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>getBoundaryDOFs</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1af93dfb2cec9b51b4cae13c7ca8cf907f" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>gf</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a6d58401f08f241cf0d7178690aab7cf0" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>gf_s</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1af5a723517be7103a4819045a44d74c5d" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a9524526217ce8c7797b4cf7fea63848e" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>nSpace2</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a5ed23365295539d20e06bd9b8102b724" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>setSedClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a989c4bcace3b92f2379f9700a92f84e1" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>surrogate_boundaries</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a43f816d4c6a6c682654734f1ba8b2e50" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>surrogate_boundary_elements</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1ab3dd8dedd210d17b16984c2a739393ed" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>surrogate_boundary_particle</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a142cddab4a15cf06969379daff86bb6b" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>TransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a31ef2a3a2427cdb9cac4520b09e82fff" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>TransposeTransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a9048b0c2b777e91ab561b41544a01166" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>updateDarcyForchheimerTerms_Ergun</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a0efb772551df2473c4a20e711b5b47db" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>updateSolidParticleTerms</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f_1a14a16f1eb5defe300ab0b820f906f685" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>updateTurbulenceClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a491a037588514aae35e2fa658e41d68c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>uStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a31e60d8f0d921173d7fe698e3ab624a1" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>uStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a322710047d392857170359f4b3d796cc" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>uStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1addef2f7b95be59118eb5608d55246b5a" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>uStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a46f4b0ed3805ed9ae90ebaab0d6b5ae7" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>vStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a857b010f57aa3ee96984f732e15da48f" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>vStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a1b0369f51ca0e6dd551d8a8102ea08ad" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>vStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a927313f70f44ab3a219da5601886db6c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>vStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a3267a20964548e100a590e516eba32d3" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>wStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1ab29c56c92bfdce817264c6ea8bbd442d" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>wStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a348849ef9b932c8287fa9652532553fa" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>wStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1ae604e4ba06e3ac4c091873987d78d41c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF</scope><name>wStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f__base_1a65be2b42220a082b1b9c319a17fe4bf4" prot="public" virt="virtual"><scope>proteus::cppRANS3PF</scope><name>~cppRANS3PF_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
