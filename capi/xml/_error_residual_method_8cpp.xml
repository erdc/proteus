<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_error_residual_method_8cpp" kind="file" language="C++">
    <compoundname>ErrorResidualMethod.cpp</compoundname>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">PCU.h</includes>
    <includes local="no">petscksp.h</includes>
    <includes local="no">apf.h</includes>
    <includes local="no">apfMesh.h</includes>
    <includes local="no">apfShape.h</includes>
    <includes local="no">apfDynamicMatrix.h</includes>
    <includes local="no">apfNumbering.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="8">
        <label>list</label>
      </node>
      <node id="20">
        <label>apfMesh.h</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>queue</label>
      </node>
      <node id="21">
        <label>apfShape.h</label>
      </node>
      <node id="22">
        <label>apfDynamicMatrix.h</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>PCU.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="1">
        <label>ErrorResidualMethod.cpp</label>
        <link refid="_error_residual_method_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>apfNumbering.h</label>
      </node>
      <node id="14">
        <label>apf.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>apfMesh2.h</label>
      </node>
      <node id="2">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>petscksp.h</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="_error_residual_method_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int approx_order</definition>
        <argsstring></argsstring>
        <name>approx_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="20" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int int_order</definition>
        <argsstring></argsstring>
        <name>int_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="21" column="5" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nu_0</definition>
        <argsstring></argsstring>
        <name>nu_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="22" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nu_1</definition>
        <argsstring></argsstring>
        <name>nu_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="22" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rho_0</definition>
        <argsstring></argsstring>
        <name>rho_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="22" column="16" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rho_1</definition>
        <argsstring></argsstring>
        <name>rho_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="22" column="21" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double a_kl</definition>
        <argsstring></argsstring>
        <name>a_kl</name>
        <initializer>= 0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="23" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a130b13be7930b394d5c3a31f25fdd6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void getProps</definition>
        <argsstring>(double *rho, double *nu)</argsstring>
        <name>getProps</name>
        <param>
          <type>double *</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="25" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a908fc4e1ae69704fcfad868293c224da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Vector3</type>
        <definition>apf::Vector3 getFaceNormal</definition>
        <argsstring>(apf::Mesh *mesh, apf::MeshEntity *face)</argsstring>
        <name>getFaceNormal</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="50" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="50" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDotProduct</definition>
        <argsstring>(apf::Vector3 a, apf::Vector3 b)</argsstring>
        <name>getDotProduct</name>
        <param>
          <type>apf::Vector3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>apf::Vector3</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="73" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a503e412b10cc77c37696b4f7a9c8105a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDotProduct</definition>
        <argsstring>(apf::Matrix3x3 a, apf::Matrix3x3 b)</argsstring>
        <name>getDotProduct</name>
        <param>
          <type>apf::Matrix3x3</type>
          <declname>a</declname>
        </param>
        <param>
          <type>apf::Matrix3x3</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="79" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="79" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a3f88ee3310d7b6dcb71aba7826c37acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isInTet</definition>
        <argsstring>(apf::Mesh *mesh, apf::MeshEntity *ent, apf::Vector3 pt)</argsstring>
        <name>isInTet</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>apf::Vector3</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="92" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="92" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1afbe6f873976d7af4352302469356752b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isInSimplex</definition>
        <argsstring>(apf::Mesh *mesh, apf::MeshEntity *ent, apf::Vector3 pt, int dim)</argsstring>
        <name>isInSimplex</name>
        <param>
          <type>apf::Mesh *</type>
          <declname>mesh</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>apf::Vector3</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="127" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="127" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a36f843fa48ae3366833f3f3d2870cb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getLHS</definition>
        <argsstring>(Mat &amp;K, apf::NewArray&lt; apf::DynamicVector &gt; &amp;shdrv, int nsd, double weight, double visc_val, int nshl)</argsstring>
        <name>getLHS</name>
        <param>
          <type>Mat &amp;</type>
          <declname>K</declname>
        </param>
        <param>
          <type>apf::NewArray&lt; apf::DynamicVector &gt; &amp;</type>
          <declname>shdrv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>double</type>
          <declname>visc_val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nshl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="197" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="197" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1aa61849d8c8d61a23ece5e4d79e4a006c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void getRHS</definition>
        <argsstring>(Vec &amp;F, apf::NewArray&lt; double &gt; &amp;shpval, apf::NewArray&lt; apf::DynamicVector &gt; &amp;shdrv, apf::Vector3 vel_vect, apf::Matrix3x3 grad_vel, int nsd, double weight, int nshl, double visc_val, double density, apf::Vector3 grad_density, double pressure, double g[3])</argsstring>
        <name>getRHS</name>
        <param>
          <type>Vec &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>apf::NewArray&lt; double &gt; &amp;</type>
          <declname>shpval</declname>
        </param>
        <param>
          <type>apf::NewArray&lt; apf::DynamicVector &gt; &amp;</type>
          <declname>shdrv</declname>
        </param>
        <param>
          <type>apf::Vector3</type>
          <declname>vel_vect</declname>
        </param>
        <param>
          <type>apf::Matrix3x3</type>
          <declname>grad_vel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nshl</declname>
        </param>
        <param>
          <type>double</type>
          <declname>visc_val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>density</declname>
        </param>
        <param>
          <type>apf::Vector3</type>
          <declname>grad_density</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pressure</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>density;</para>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="244" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="244" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="_error_residual_method_8cpp_1a688c463ebbff0f69ea545eec17e68a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setErrorField</definition>
        <argsstring>(apf::Field *estimate, Vec coef, apf::MeshEntity *ent, int nsd, int nshl)</argsstring>
        <name>setErrorField</name>
        <param>
          <type>apf::Field *</type>
          <declname>estimate</declname>
        </param>
        <param>
          <type>Vec</type>
          <declname>coef</declname>
        </param>
        <param>
          <type>apf::MeshEntity *</type>
          <declname>ent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nshl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" line="601" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="601" bodyend="624"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;petscksp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfDynamicMatrix.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfNumbering.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">//Global<sp/>variables<sp/>used<sp/>to<sp/>make<sp/>it<sp/>easier<sp/>to<sp/>pass<sp/>these<sp/>variables<sp/>from<sp/>MeshAdaptPUMIDrvr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="_v_m_s_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" kindref="member">approx_order</ref>;<sp/></highlight><highlight class="comment">//shape<sp/>function<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>;<sp/></highlight><highlight class="comment">//integration<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref>,<ref refid="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref>,<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>;</highlight></codeline>
<codeline lineno="23" refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" kindref="member">a_kl</ref><sp/>=<sp/>0.5;<sp/></highlight><highlight class="comment">//flux<sp/>term<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="_error_residual_method_8cpp_1a130b13be7930b394d5c3a31f25fdd6ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a130b13be7930b394d5c3a31f25fdd6ff" kindref="member">getProps</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*rho,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*nu)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>transfer<sp/>MeshAdaptPUMIDrvr<sp/>variables<sp/>into<sp/>global<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref><sp/>=<sp/>rho[0];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref><sp/>=<sp/>nu[0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref><sp/>=<sp/>rho[1];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref><sp/>=<sp/>nu[1];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">MeshAdaptPUMIDrvr::getMPvalue</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>field_val,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val_0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val_1)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val_0*(1-field_val)+val_1*field_val;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="_error_residual_method_8cpp_1a908fc4e1ae69704fcfad868293c224da" refkind="member"><highlight class="normal">apf::Vector3<sp/><ref refid="_error_residual_method_8cpp_1a908fc4e1ae69704fcfad868293c224da" kindref="member">getFaceNormal</ref>(apf::Mesh*<sp/>mesh,<sp/>apf::MeshEntity*<sp/>face)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>unit<sp/>vector<sp/>normal<sp/>to<sp/>an<sp/>element<sp/>face</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>normal;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>verts;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>mesh-&gt;getAdjacent(face,0,verts);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::Vector3<sp/>vtxs[verts.getSize()];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>vtxs[3];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;verts.getSize();i++){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;getPoint(verts[i],0,vtxs[i]);<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>a,b;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mesh-&gt;getDimension()==2){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>vtxs[2]<sp/>=<sp/>vtxs[0];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>vtxs[2][2]<sp/>=<sp/>1.0;<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>vtxs[1]-vtxs[0];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>vtxs[2]-vtxs[0];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>normal<sp/>=<sp/>apf::cross(a,b);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normal.normalize();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(apf::Vector3<sp/>a,<sp/>apf::Vector3<sp/>b)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>dot<sp/>product<sp/>between<sp/>two<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a[0]*b[0]<sp/>+<sp/>a[1]*b[1]<sp/>+<sp/>a[2]*b[2]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="_error_residual_method_8cpp_1a503e412b10cc77c37696b4f7a9c8105a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(apf::Matrix3x3<sp/>a,<sp/>apf::Matrix3x3<sp/>b)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//Overloaded<sp/>function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>dot<sp/>product<sp/>analog<sp/>between<sp/>two<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp<sp/>=0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;3;i++){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;3;j++){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>temp<sp/>+<sp/>a[i][j]*b[i][j];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="_error_residual_method_8cpp_1a3f88ee3310d7b6dcb71aba7826c37acd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a3f88ee3310d7b6dcb71aba7826c37acd" kindref="member">isInTet</ref>(apf::Mesh*<sp/>mesh,<sp/>apf::MeshEntity*<sp/>ent,<sp/>apf::Vector3<sp/>pt)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>test<sp/>if<sp/>a<sp/>point<sp/>pt<sp/>is<sp/>inside<sp/>the<sp/>tetrahedron<sp/>ent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>a<sp/>boolean:<sp/>1<sp/>if<sp/>is<sp/>in<sp/>tet,<sp/>0<sp/>if<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isin=0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>verts;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>mesh-&gt;getAdjacent(ent,0,verts);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>vtxs[4];<sp/></highlight><highlight class="comment">//4<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;4;i++){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;getPoint(verts[i],0,vtxs[i]);<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[4];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[0]<sp/>=<sp/>vtxs[1]-vtxs[0];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[1]<sp/>=<sp/>vtxs[2]-vtxs[0];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[2]<sp/>=<sp/>vtxs[3]-vtxs[0];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[3]<sp/>=<sp/>pt-vtxs[0];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>K,Kinv;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>F;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;3;i++){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;3;j++){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>K[i][j]<sp/>=<sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[i],<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[j]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>F[i]<sp/>=<sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[3],<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[i]);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Kinv<sp/>=<sp/>invert(K);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>apf::DynamicMatrix<sp/>Kinv_dyn<sp/>=<sp/>apf::fromMatrix(Kinv);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/>F_dyn<sp/>=<sp/>apf::fromVector(F);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/>uvw;<sp/></highlight><highlight class="comment">//result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>apf::multiply(Kinv_dyn,F_dyn,uvw);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uvw[0]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>uvw[1]<sp/>&gt;=0<sp/>&amp;&amp;<sp/>uvw[2]<sp/>&gt;=0<sp/>&amp;&amp;<sp/>(uvw[0]+uvw[1]+uvw[2])&lt;=1)<sp/>isin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isin;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="_error_residual_method_8cpp_1afbe6f873976d7af4352302469356752b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1afbe6f873976d7af4352302469356752b" kindref="member">isInSimplex</ref>(apf::Mesh*<sp/>mesh,<sp/>apf::MeshEntity*<sp/>ent,<sp/>apf::Vector3<sp/>pt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>test<sp/>if<sp/>a<sp/>point<sp/>pt<sp/>is<sp/>inside<sp/>the<sp/>tetrahedron<sp/>ent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//Returns<sp/>a<sp/>boolean:<sp/>1<sp/>if<sp/>is<sp/>in<sp/>tet,<sp/>0<sp/>if<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isin=0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numverts<sp/>=<sp/>dim+1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>verts;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>mesh-&gt;getAdjacent(ent,0,verts);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>vtxs[4];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numverts;i++){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>mesh-&gt;getPoint(verts[i],0,vtxs[i]);<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[4];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[0]<sp/>=<sp/>vtxs[1]-vtxs[0];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[1]<sp/>=<sp/>vtxs[2]-vtxs[0];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[2]<sp/>=<sp/>pt-vtxs[0];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==3){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[0]<sp/>=<sp/>vtxs[1]-vtxs[0];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[1]<sp/>=<sp/>vtxs[2]-vtxs[0];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[2]<sp/>=<sp/>vtxs[3]-vtxs[0];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[3]<sp/>=<sp/>pt-vtxs[0];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>K(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>Kinv;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>F(0.0,0.0,0.0);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;dim;i++){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;dim;j++){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>K[i][j]<sp/>=<sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[i],<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[j]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>F[i]<sp/>=<sp/><ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[dim],<ref refid="_headers_8h_1aa0903c8c48f55ad539ee4e47f2d020ba" kindref="member">c</ref>[i]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>K[2][2]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>Kinv<sp/>=<sp/>invert(K);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>apf::DynamicMatrix<sp/>Kinv_dyn<sp/>=<sp/>apf::fromMatrix(Kinv);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/>F_dyn<sp/>=<sp/>apf::fromVector(F);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>apf::DynamicVector<sp/>uvw;<sp/></highlight><highlight class="comment">//result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>apf::multiply(Kinv_dyn,F_dyn,uvw);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uvw[0]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>uvw[1]<sp/>&gt;=0<sp/>&amp;&amp;<sp/>(uvw[0]+uvw[1])&lt;=1)<sp/>isin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(uvw[0]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>uvw[1]<sp/>&gt;=0<sp/>&amp;&amp;<sp/>uvw[2]<sp/>&gt;=0<sp/>&amp;&amp;<sp/>(uvw[0]+uvw[1]+uvw[2])&lt;=1)<sp/>isin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isin;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="179"><highlight class="comment">double<sp/>a_k(apf::Matrix3x3<sp/>u,<sp/>apf::Matrix3x3<sp/>v,double<sp/>nu){</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>//u<sp/>and<sp/>v<sp/>are<sp/>gradients<sp/>of<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>apf::Matrix3x3<sp/>temp_u<sp/>=<sp/>u+apf::transpose(u);</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>apf::Matrix3x3<sp/>temp_v<sp/>=<sp/>v+apf::transpose(v);</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>return<sp/>nu*getDotProduct(temp_u,temp_v);</highlight></codeline>
<codeline lineno="184"><highlight class="comment">}<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">double<sp/>b_k(double<sp/>a,<sp/>apf::Matrix3x3<sp/>b){</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>//b<sp/>is<sp/>a<sp/>gradient<sp/>of<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>return<sp/>a*(b[0][0]+b[1][1]+b[1][1]);</highlight></codeline>
<codeline lineno="189"><highlight class="comment">}</highlight></codeline>
<codeline lineno="190"><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">double<sp/>c_k(apf::Vector3<sp/>a,<sp/>apf::Matrix3x3<sp/>b,<sp/>apf::Vector3<sp/>c){</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>//b<sp/>is<sp/>a<sp/>gradient<sp/>of<sp/>a<sp/>vector</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>return<sp/>getDotProduct(b*a,c);</highlight></codeline>
<codeline lineno="194"><highlight class="comment">}</highlight></codeline>
<codeline lineno="195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="_error_residual_method_8cpp_1a36f843fa48ae3366833f3f3d2870cb84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a36f843fa48ae3366833f3f3d2870cb84" kindref="member">getLHS</ref>(Mat<sp/>&amp;K,apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>&amp;shdrv,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsd,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>LHS<sp/>of<sp/>the<sp/>local<sp/>error<sp/>problem.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>LHS<sp/>is<sp/>entirely<sp/>A(\phi,\phi)<sp/>which<sp/>can<sp/>be<sp/>decomposed<sp/>into<sp/>a<sp/>diagonal<sp/>contributions<sp/>and<sp/>off-diagonal<sp/>contributions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//Inputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>shdrv<sp/>is<sp/>the<sp/>set<sp/>of<sp/>shape<sp/>function<sp/>derivatives<sp/>for<sp/>an<sp/>element<sp/>evaluated<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>nsd<sp/>is<sp/>the<sp/>number<sp/>of<sp/>spatial<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>weight<sp/>is<sp/>the<sp/>corresponding<sp/>weight<sp/>for<sp/>a<sp/>given<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>visc_val<sp/>is<sp/>the<sp/>viscosity<sp/>at<sp/>that<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>nshl<sp/>is<sp/>the<sp/>number<sp/>of<sp/>local<sp/>shape<sp/>functions<sp/>in<sp/>an<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//Outputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>K<sp/>is<sp/>the<sp/>matrix<sp/>representing<sp/>the<sp/>LHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PetscScalar<sp/>term1[nshl][nshl],<sp/>term2[nshl][nshl];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>LHS<sp/>Diagonal<sp/>Block<sp/>Term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;<sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>&lt;nshl;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>++){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t=0;<sp/>t&lt;nshl;t++){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp=0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;nsd;j++){</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp+=shdrv[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][j]*shdrv[t][j];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term1[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][t]<sp/>=<sp/>temp*weight*visc_val;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx[nshl];<sp/></highlight><highlight class="comment">//indices<sp/>for<sp/>PETSc<sp/>Mat<sp/>insertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nsd;i++){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;nshl;j++){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[j]<sp/>=<sp/>i*nshl+j;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatSetValues(K,nshl,idx,nshl,idx,term1[0],ADD_VALUES);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idxr[nshl],idxc[nshl];<sp/></highlight><highlight class="comment">//indices<sp/>for<sp/>PETSc<sp/>rows<sp/>and<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;<sp/>nsd;i++){</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;<sp/>nsd;j++){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>&lt;nshl;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>++){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t=0;t&lt;nshl;t++){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term2[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][t]<sp/>=<sp/>shdrv[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][j]*shdrv[t][i]*weight*visc_val;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;count&lt;nshl;count++){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxr[count]<sp/>=<sp/>i*nshl+count;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxc[count]<sp/>=<sp/>j*nshl+count;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatSetValues(K,nshl,idxr,nshl,idxc,term2[0],ADD_VALUES);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>2nd<sp/>term<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="_error_residual_method_8cpp_1aa61849d8c8d61a23ece5e4d79e4a006c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1aa61849d8c8d61a23ece5e4d79e4a006c" kindref="member">getRHS</ref>(Vec<sp/>&amp;F,apf::NewArray<sp/>&lt;double&gt;<sp/>&amp;shpval,apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>&amp;shdrv,apf::Vector3<sp/>vel_vect,apf::Matrix3x3<sp/>grad_vel,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsd,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density,apf::Vector3<sp/>grad_density,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pressure,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g[3])</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>get<sp/>the<sp/>RHS<sp/>of<sp/>the<sp/>local<sp/>error<sp/>problem.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//The<sp/>RHS<sp/>is<sp/>the<sp/>weak<sp/>residual<sp/>of<sp/>the<sp/>N-S<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//Inputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>shpval<sp/>are<sp/>the<sp/>local<sp/>shape<sp/>functions<sp/>evaluated<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>shdrv<sp/>are<sp/>the<sp/>local<sp/>shape<sp/>function<sp/>derivatives<sp/>evaluated<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>vel_vect<sp/>is<sp/>the<sp/>velocity<sp/>vector<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>grad_vel<sp/>is<sp/>the<sp/>velocity<sp/>gradient<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>nsd<sp/>is<sp/>the<sp/>number<sp/>of<sp/>spatial<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>weight<sp/>is<sp/>the<sp/>corresponding<sp/>weight<sp/>for<sp/>a<sp/>given<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>nshl<sp/>is<sp/>the<sp/>number<sp/>of<sp/>local<sp/>shape<sp/>functions<sp/>in<sp/>an<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>visc_val<sp/>is<sp/>the<sp/>viscosity<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>density<sp/>is<sp/>the<sp/>density<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>grad_density<sp/>is<sp/>the<sp/>density<sp/>gradient<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>pressure<sp/>is<sp/>the<sp/>pressure<sp/>at<sp/>a<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>g<sp/>is<sp/>the<sp/>gravity<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//Outputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>F<sp/>is<sp/>the<sp/>vector<sp/>representing<sp/>the<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx[nshl];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;nsd;<sp/>i++){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp_vect[nshl];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>&lt;nshl;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>++){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]<sp/>=<sp/>i*nshl+<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//forcing<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//temp_vect[s]<sp/>=<sp/>(g[i]+0.0)*shpval[s];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//temp_vect[s]<sp/>+=<sp/>pressure/density*shdrv[s][i];<sp/>//pressure<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>force<sp/>=<sp/>(g[i]+0.0)*shpval[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pressure_force<sp/>=<sp/>pressure/density*shdrv[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][i];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_rho_term<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b_rho_term<sp/>=<sp/>-pressure/(density*density)*grad_density[i]*shpval[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_term<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c_term<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//a(u,v)<sp/>and<sp/>c(u,u,v)<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;nsd;j++){</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_term<sp/>+=<sp/>-visc_val*shdrv[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>][j]*(grad_vel[i][j]+grad_vel[j][i]);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_rho_term<sp/>+=<sp/>visc_val*(grad_vel[i][j]+grad_vel[j][i])*shpval[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]*grad_density[j]/(density);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_term<sp/>+=<sp/>-shpval[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]*grad_vel[i][j]*vel_vect[j];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vect[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]<sp/>=<sp/>force+pressure_force+a_term+c_term;<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//temp_vect[s]<sp/>=<sp/>force+pressure_force+a_rho_term+b_rho_term+a_term+c_term;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_vect[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]<sp/>=<sp/>temp_vect[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]*weight;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>number<sp/>of<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VecSetValues(F,nshl,idx,temp_vect,ADD_VALUES);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>spatial<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="class_mesh_adapt_p_u_m_i_drvr_1a15ef6e40927fdbc9af43fa535b563679" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a15ef6e40927fdbc9af43fa535b563679" kindref="member">MeshAdaptPUMIDrvr::computeDiffusiveFlux</ref>(apf::Mesh*m,apf::Field*<sp/>voff,<sp/>apf::Field*<sp/>visc,apf::Field*<sp/>pref,<sp/>apf::Field*<sp/>velf)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Begin<sp/>computeDiffusiveFlux()&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbqpt,<sp/>nshl;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hier_off;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>hier_off=3;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==3)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>hier_off=4;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>bent,*ent;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>iter<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1);<sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Need<sp/>to<sp/>get<sp/>number<sp/>of<sp/>bqpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(bent<sp/>=<sp/>m-&gt;iterate(iter)){</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>b_elem;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>b_elem<sp/>=<sp/>apf::createMeshElement(m,bent);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>numbqpt<sp/>=<sp/>apf::countIntPoints(b_elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyMeshElement(b_elem);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>m-&gt;end(iter);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>diffFlux<sp/>=<sp/>m-&gt;createDoubleTag(</highlight><highlight class="stringliteral">&quot;diffFlux&quot;</highlight><highlight class="normal">,numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>*2);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/>tempelem;<sp/>apf::Element<sp/>*<sp/>tempvelo,*temppres,*tempvoff;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/>b_elem;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>apf::Adjacent<sp/>adjFaces;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>normal,centerdir;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orientation;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempflux[numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*flux;<sp/>flux<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>calloc(numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>*2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval_temp;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>apf::FieldShape*<sp/>err_shape<sp/>=<sp/>apf::getHierarchic(2);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>apf::EntityShape*<sp/>elem_shape;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>bqpt,bqptl,bqptshp;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight,<sp/>Jdet;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>J;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>tempgrad_velo;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>identity(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>iter=m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent=m-&gt;iterate(iter))</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(ent,diffFlux,flux);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>m-&gt;end(iter);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>free(flux);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Initialized<sp/>flux&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>PCU_Comm_Begin();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>iter<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ent_count=0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(iter))</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Shape<sp/>functions<sp/>of<sp/>the<sp/>region<sp/>and<sp/>not<sp/>the<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ent_count==0){</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nshl=apf::countElementNodes(err_shape,m-&gt;getType(ent));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shpval_temp.allocate(nshl);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nshl=<sp/>nshl-hier_off;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shpval.allocate(nshl);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape<sp/>=<sp/>err_shape-&gt;getEntityShape(m-&gt;getType(ent));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1,adjFaces);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adjcount<sp/>=0;adjcount&lt;adjFaces.getSize();adjcount++){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bent<sp/>=<sp/>adjFaces[adjcount];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal=<ref refid="_error_residual_method_8cpp_1a908fc4e1ae69704fcfad868293c224da" kindref="member">getFaceNormal</ref>(m,bent);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>centerdir=apf::getLinearCentroid(m,ent)-apf::getLinearCentroid(m,bent);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(isInTet(m,ent,apf::project(normal,centerdir)*centerdir.getLength()+apf::getLinearCentroid(m,bent)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_error_residual_method_8cpp_1afbe6f873976d7af4352302469356752b" kindref="member">isInSimplex</ref>(m,ent,apf::project(normal,centerdir).normalize()*centerdir.getLength()+apf::getLinearCentroid(m,bent),<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>)){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//begin<sp/>calculation<sp/>of<sp/>flux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b_elem<sp/>=<sp/>apf::createMeshElement(m,bent);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempelem<sp/>=<sp/>apf::createMeshElement(m,ent);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temppres<sp/>=<sp/>apf::createElement(pref,tempelem);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempvelo<sp/>=<sp/>apf::createElement(velf,tempelem);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempvoff<sp/>=<sp/>apf::createElement(voff,tempelem);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;l&lt;numbqpt;l++)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>bflux(0.0,0.0,0.0);<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>tempbflux(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(b_elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,l,bqpt);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>apf::getIntWeight(b_elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,l);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getJacobian(b_elem,bqpt,J);<sp/></highlight><highlight class="comment">//evaluate<sp/>the<sp/>Jacobian<sp/>at<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jdet=fabs(apf::getJacobianDeterminant(J,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bqptl=apf::boundaryToElementXi(m,bent,ent,bqpt);<sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(tempvelo,bqptl,tempgrad_velo);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempgrad_velo<sp/>=<sp/>apf::transpose(tempgrad_velo);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>me=m-&gt;toModel(bent);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag<sp/>=<sp/>m-&gt;getModelTag(me);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1,tag);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(me==boundary_face<sp/>&amp;&amp;<sp/>has_gBC){</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BCtype[4];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fluxdata[4][numbqpt];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(int<sp/>i=1;i&lt;nsd+1;i++){<sp/>//ignores<sp/>0th<sp/>index<sp/>because<sp/>that&apos;s<sp/>pressure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>m-&gt;getIntTag(bent,BCtag[i],&amp;(BCtype[i]));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getIntTag(bent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>,&amp;(BCtype[0]));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((BCtype[1]+BCtype[2]+BCtype[3]<sp/>!=<sp/>3)<sp/>&amp;&amp;<sp/>BCtype[1]<sp/>==<sp/>1<sp/>){</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;diffusive<sp/>flux<sp/>not<sp/>fully<sp/>specified<sp/>on<sp/>face<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a56dab4675d73f26b9decdc7ed6353aa8" kindref="member">localNumber</ref>(bent)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BCtype<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;BCtype[1]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;BCtype[2]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;BCtype[3]&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(BCtype[1]+BCtype[2]+BCtype[3]<sp/>==<sp/>3){</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1;i++)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(bent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[i],&amp;(fluxdata[i][0]));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>apf::Vector3(fluxdata[1][l],fluxdata[2][l],fluxdata[3][l]);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>bflux-identity*apf::getScalar(temppres,bqptl)/<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(tempvoff,bqptl),<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>)*normal;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbflux<sp/>=<sp/>(tempgrad_velo+apf::transpose(tempgrad_velo))*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(tempvoff,bqptl),<ref refid="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref>,<ref refid="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref>)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-identity*apf::getScalar(temppres,bqptl)/<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(tempvoff,bqptl),<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>tempbflux*normal;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempbflux<sp/>=<sp/>(tempgrad_velo+apf::transpose(tempgrad_velo))*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(tempvoff,bqptl),<ref refid="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref>,<ref refid="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-identity*apf::getScalar(temppres,bqptl)/<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(tempvoff,bqptl),<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>tempbflux*normal;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>if<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>bflux*weight*Jdet;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bflux.toArray(&amp;(tempflux[l*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>]));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>calloc(numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>*2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(bent,diffFlux,flux);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flux[orientation*numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+i]<sp/>=<sp/>tempflux[i];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(bent,diffFlux,flux);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(flux);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::destroyMeshElement(tempelem);apf::destroyElement(tempvelo);apf::destroyElement(temppres);<sp/>apf::destroyElement(tempvoff);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parallel<sp/>Communications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>me=m-&gt;toModel(bent);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1,m-&gt;getModelTag(me));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Copies<sp/>remotes;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;isShared(bent))</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getRemotes(bent,remotes);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(apf::Copies::iterator<sp/>it=remotes.begin();<sp/>it!=remotes.end();++it)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,<sp/>it-&gt;second);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,<sp/>orientation);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PCU_COMM_PACK(it-&gt;first,<sp/>tempflux);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ent_count++;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>m-&gt;end(iter);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Sending<sp/>flux&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>PCU_Comm_Send();<sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>flux<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>calloc(numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>*2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(PCU_Comm_Receive())</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(bent);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(orientation);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_COMM_UNPACK(tempflux);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(bent,diffFlux,flux);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flux[orientation*numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+i]<sp/>=<sp/>flux[orientation*numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+i]+tempflux[i];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;setDoubleTag(bent,diffFlux,flux);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>PCU_Barrier();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>free(flux);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;End<sp/>computeDiffusiveFlux()&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="class_mesh_adapt_p_u_m_i_drvr_1ac75ad718d0165cb56ebe96df87083268" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac75ad718d0165cb56ebe96df87083268" kindref="member">MeshAdaptPUMIDrvr::getBoundaryFlux</ref>(apf::Mesh*<sp/>m,<sp/>apf::MeshEntity*<sp/>ent,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>endflux)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval_temp;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>flux;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::FieldShape*<sp/>err_shape<sp/>=<sp/>apf::getHierarchic(2);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::EntityShape*<sp/>elem_shape;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>element<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>boundaries;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshEntity*<sp/>bent;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::MeshElement*<sp/>b_elem;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>bqpt,bqptl,bqptshp;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>normal;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>centerdir;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Shape<sp/>functions<sp/>of<sp/>the<sp/>region<sp/>and<sp/>not<sp/>the<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>nshl=apf::countElementNodes(err_shape,m-&gt;getType(ent));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>shpval_temp.allocate(nshl);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hier_off;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hier_off=3;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==3)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hier_off=4;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>nshl=<sp/>nshl-hier_off;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>shpval.allocate(nshl);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>elem_shape<sp/>=<sp/>err_shape-&gt;getEntityShape(m-&gt;getType(ent));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1,boundaries);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adjcount<sp/>=0;adjcount&lt;boundaries.getSize();adjcount++){</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>bflux(0.0,0.0,0.0);<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bent<sp/>=<sp/>boundaries[adjcount];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b_elem<sp/>=<sp/>apf::createMeshElement(m,bent);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal=<ref refid="_error_residual_method_8cpp_1a908fc4e1ae69704fcfad868293c224da" kindref="member">getFaceNormal</ref>(m,bent);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>centerdir=apf::getLinearCentroid(m,ent)-apf::getLinearCentroid(m,bent);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orientation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_error_residual_method_8cpp_1afbe6f873976d7af4352302469356752b" kindref="member">isInSimplex</ref>(m,ent,apf::project(normal,centerdir).normalize()*centerdir.getLength()+apf::getLinearCentroid(m,bent),<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>)){</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal<sp/>=<sp/>normal*-1.0;<sp/></highlight><highlight class="comment">//normal<sp/>needs<sp/>to<sp/>face<sp/>the<sp/>other<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation=1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>me=m-&gt;toModel(bent);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag<sp/>=<sp/>m-&gt;getModelTag(me);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::ModelEntity*<sp/>boundary_face<sp/>=<sp/>m-&gt;findModelEntity(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1,tag);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>flux_weight[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(me==boundary_face){</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(orientation==0){flux_weight[0]=1;<sp/>flux_weight[1]=0;}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{flux_weight[0]=0;<sp/>flux_weight[1]=-1;}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(orientation==0){flux_weight[0]=(1-<ref refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" kindref="member">a_kl</ref>);<sp/>flux_weight[1]=<ref refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" kindref="member">a_kl</ref>;}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{<sp/>flux_weight[0]=-<ref refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" kindref="member">a_kl</ref>;<sp/>flux_weight[1]=-1*(1-<ref refid="_error_residual_method_8cpp_1a0da913a6204820b7587852430ed809e9" kindref="member">a_kl</ref>);}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbqpt<sp/>=<sp/>apf::countIntPoints(b_elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>);<sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>calloc(numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>*2,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getDoubleTag(bent,diffFlux,flux);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;numbqpt;l++){</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(b_elem,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,l,bqpt);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bqptshp=apf::boundaryToElementXi(m,bent,ent,bqpt);<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape-&gt;getValues(NULL,NULL,bqptshp,shpval_temp);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;nshl;j++){shpval[j]<sp/>=<sp/>shpval_temp[hier_off+j];}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>&lt;nshl;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>++){</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endflux[i*nshl+<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]<sp/>=<sp/>endflux[i*nshl+<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]+(flux_weight[0]*flux[l*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+i]+flux_weight[1]*flux[numbqpt*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+l*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+i])*shpval[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>of<sp/>boundary<sp/>integration<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(flux);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>for<sp/>adjacent<sp/>faces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="class_mesh_adapt_p_u_m_i_drvr_1a772b6ae5b0b80b1f5c4dc270f1cb99b0" refkind="member"><highlight class="normal">apf::Field*<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a772b6ae5b0b80b1f5c4dc270f1cb99b0" kindref="member">MeshAdaptPUMIDrvr::getViscosityField</ref>(apf::Field*<sp/>voff)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>visc<sp/>=<sp/>apf::createLagrangeField(m,</highlight><highlight class="stringliteral">&quot;viscosity&quot;</highlight><highlight class="normal">,apf::SCALAR,1);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>iter<sp/>=<sp/>m-&gt;begin(0);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vof_val,<sp/>visc_val;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(iter)){<sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>all<sp/>vertices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>vof_val=apf::getScalar(voff,ent,0);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>visc_val<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(vof_val,<ref refid="_error_residual_method_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref>,<sp/><ref refid="_error_residual_method_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(visc,<sp/>ent,<sp/>0,visc_val);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>m-&gt;end(iter);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visc;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601" refid="_error_residual_method_8cpp_1a688c463ebbff0f69ea545eec17e68a89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_error_residual_method_8cpp_1a688c463ebbff0f69ea545eec17e68a89" kindref="member">setErrorField</ref>(apf::Field*<sp/>estimate,Vec<sp/>coef,apf::MeshEntity*<sp/>ent,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsd,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>store<sp/>the<sp/>computed<sp/>coefficients<sp/>from<sp/>the<sp/>local<sp/>error<sp/>problem<sp/>onto<sp/>a<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Mesh*<sp/>m<sp/>=<sp/>apf::getMesh(estimate);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coef_ez[nshl*nsd];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ez_idx[nshl*nsd];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ez=0;ez&lt;nshl*nsd;ez++){ez_idx[ez]=ez;}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>VecGetValues(coef,nshl*nsd,ez_idx,coef_ez);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>coefficients<sp/>onto<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>adjvert;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,0,adjvert);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=0;idx&lt;adjvert.getSize();idx++){</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coef_sub[3]={0,0,0};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(estimate,adjvert[idx],0,&amp;coef_sub[0]);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>adjedg;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,1,adjedg);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx=0;idx&lt;nshl;idx++){</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coef_sub[3]<sp/>={coef_ez[idx],coef_ez[nshl+idx],coef_ez[nshl*2+idx]};</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::setVector(estimate,adjedg[idx],0,&amp;coef_sub[0]);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="class_mesh_adapt_p_u_m_i_drvr_1a0decaa7be27e9d9899a16de5839cf750" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0decaa7be27e9d9899a16de5839cf750" kindref="member">MeshAdaptPUMIDrvr::removeBCData</ref>()</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Start<sp/>removing<sp/>BC<sp/>tags/data&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>fIter<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>-1);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent=m-&gt;iterate(fIter))</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_gBC<sp/>&amp;&amp;<sp/>m-&gt;hasTag(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>)){</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;removeTag(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;4;i++)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&gt;0<sp/>&amp;&amp;<sp/>m-&gt;hasTag(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[i]))</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;removeTag(ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[i]);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;hasTag(ent,diffFlux))</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;removeTag(ent,diffFlux);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>m-&gt;end(fIter);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(has_gBC){</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;destroyTag(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1af5a56ca2477894338859d52298b28350" kindref="member">BCtag</ref>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;4;i++)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&gt;0)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;destroyTag(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ad72438ac9f7cb57018dc98271ac6bffa" kindref="member">fluxtag</ref>[i]);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>m-&gt;destroyTag(diffFlux);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)<sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Destroyed<sp/>BC<sp/>and<sp/>flux<sp/>tags&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="class_mesh_adapt_p_u_m_i_drvr_1aecaf9a2b99e00685fec6694d29b6a533" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1aecaf9a2b99e00685fec6694d29b6a533" kindref="member">MeshAdaptPUMIDrvr::get_local_error</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;total_error)<sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1a130b13be7930b394d5c3a31f25fdd6ff" kindref="member">getProps</ref>(rho,nu);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" kindref="member">approx_order</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1acc45546f4adbd6a6c18c82c432e5dd0e" kindref="member">approximation_order</ref>;<sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1e4333322f04b1b4e0d9b787611d6cce" kindref="member">integration_order</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/>Get<sp/>Solution<sp/>Fields<sp/>First<sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>voff<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>assert(voff);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>velf<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>assert(velf);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>pref<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>assert(pref);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/>Compute<sp/>the<sp/>viscosity<sp/>field<sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>visc<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a772b6ae5b0b80b1f5c4dc270f1cb99b0" kindref="member">getViscosityField</ref>(voff);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/>Compute<sp/>diffusive<sp/>flux<sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a15ef6e40927fdbc9af43fa535b563679" kindref="member">computeDiffusiveFlux</ref>(m,voff,visc,pref,velf);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>the<sp/>Error<sp/>Fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>freeField(err_reg);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>freeField(errRho_reg);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>freeField(errRel_reg);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//err_reg<sp/>=<sp/>apf::createField(m,&quot;ErrorRegion&quot;,apf::VECTOR,apf::getConstant(nsd));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>err_reg<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;ErrorRegion&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,1));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>errRho_reg<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;ErrorDensity&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,1));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>errRel_reg<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;RelativeError&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,1));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Start<sp/>computing<sp/>element<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numqpt;<sp/></highlight><highlight class="comment">//number<sp/>of<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl;<sp/></highlight><highlight class="comment">//number<sp/>of<sp/>local<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elem_type;<sp/></highlight><highlight class="comment">//what<sp/>type<sp/>of<sp/>topology</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight;<sp/></highlight><highlight class="comment">//value<sp/>container<sp/>for<sp/>the<sp/>weight<sp/>at<sp/>each<sp/>qpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Jdet;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>apf::FieldShape*<sp/>err_shape<sp/>=<sp/>apf::getHierarchic(<ref refid="_error_residual_method_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" kindref="member">approx_order</ref>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>apf::Field<sp/>*<sp/>estimate<sp/>=<sp/>apf::createField(m,<sp/></highlight><highlight class="stringliteral">&quot;err_est&quot;</highlight><highlight class="normal">,<sp/>apf::VECTOR,<sp/>err_shape);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>apf::EntityShape*<sp/>elem_shape;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>qpt;<sp/></highlight><highlight class="comment">//container<sp/>for<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/>element;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>apf::Element*<sp/>visc_elem,<sp/>*pres_elem,*velo_elem,*vof_elem;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>apf::Element*<sp/>est_elem;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>J;<sp/></highlight><highlight class="comment">//actual<sp/>Jacobian<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>invJ;<sp/></highlight><highlight class="comment">//inverse<sp/>of<sp/>Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval;<sp/></highlight><highlight class="comment">//array<sp/>to<sp/>store<sp/>shape<sp/>function<sp/>values<sp/>at<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;double&gt;<sp/>shpval_temp;<sp/></highlight><highlight class="comment">//array<sp/>to<sp/>store<sp/>shape<sp/>function<sp/>values<sp/>at<sp/>quadrature<sp/>points<sp/>temporarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;apf::Vector3&gt;<sp/>shgval;<sp/></highlight><highlight class="comment">//array<sp/>to<sp/>store<sp/>shape<sp/>function<sp/>values<sp/>at<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>apf::DynamicMatrix<sp/>invJ_copy;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>shdrv;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>shgval_copy;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>iter<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);<sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_est<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_est_total=0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u_norm_total=0;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ae4697439db655efc3b37b9f5953c7f53" kindref="member">errRho_max</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ent<sp/>=<sp/>m-&gt;iterate(iter)){<sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>all<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>elem_type<sp/>=<sp/>m-&gt;getType(ent);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!(elem_type<sp/>!=<sp/>4<sp/>||<sp/>elem_type<sp/>!=<sp/>2)){<sp/></highlight><highlight class="comment">//2|TRI,<sp/>4|TET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>Tri<sp/>or<sp/>Tet<sp/>present&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(0);<sp/></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>apf::createMeshElement(m,ent);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>pres_elem<sp/>=<sp/>apf::createElement(pref,element);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>velo_elem<sp/>=<sp/>apf::createElement(velf,element);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>visc_elem<sp/>=<sp/>apf::createElement(visc,element);<sp/></highlight><highlight class="comment">//at<sp/>vof<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>vof_elem<sp/>=<sp/>apf::createElement(voff,element);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>numqpt=apf::countIntPoints(element,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>);<sp/></highlight><highlight class="comment">//generally<sp/>p*p<sp/>maximum<sp/>for<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>nshl=apf::countElementNodes(err_shape,elem_type);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>shgval.allocate(nshl);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>shpval_temp.allocate(nshl);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hier_off;</highlight><highlight class="comment">//there<sp/>is<sp/>an<sp/>offset<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>made<sp/>to<sp/>isolate<sp/>the<sp/>hierarchic<sp/>edge<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>==2)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hier_off=3;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==3)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hier_off=<sp/>4;<sp/></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>nshl<sp/>=<sp/>nshl<sp/>-<sp/>hier_off;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>shpval.allocate(nshl);<sp/><sp/><sp/>shgval_copy.allocate(nshl);<sp/>shdrv.allocate(nshl);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LHS<sp/>Matrix<sp/>Initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndofs<sp/>=<sp/>nshl*<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>Mat<sp/>K;<sp/></highlight><highlight class="comment">//matrix<sp/>size<sp/>depends<sp/>on<sp/>nshl,<sp/>which<sp/>may<sp/>vary<sp/>from<sp/>element<sp/>to<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>MatCreate(PETSC_COMM_SELF,&amp;K);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>MatSetSizes(K,ndofs,ndofs,ndofs,ndofs);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>MatSetFromOptions(K);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>MatSetUp(K);<sp/></highlight><highlight class="comment">//is<sp/>this<sp/>inefficient?<sp/>check<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//RHS<sp/>Vector<sp/>Initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>Vec<sp/>F;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>VecCreate(PETSC_COMM_SELF,&amp;F);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>VecSetSizes(F,ndofs,ndofs);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>VecSetUp(F);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>all<sp/>qpts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;k&lt;numqpt;k++){</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(element,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k,qpt);<sp/></highlight><highlight class="comment">//get<sp/>a<sp/>quadrature<sp/>point<sp/>and<sp/>store<sp/>in<sp/>qpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getJacobian(element,qpt,J);<sp/></highlight><highlight class="comment">//evaluate<sp/>the<sp/>Jacobian<sp/>at<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>J<sp/>=<sp/>apf::transpose(J);<sp/></highlight><highlight class="comment">//Is<sp/>PUMI<sp/>still<sp/>defined<sp/>in<sp/>this<sp/>way?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[2][2]<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>necessary<sp/>to<sp/>avoid<sp/>singular<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ<sp/>=<sp/>invert(J);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jdet=fabs(apf::getJacobianDeterminant(J,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));<sp/></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>apf::getIntWeight(element,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ_copy<sp/>=<sp/>apf::fromMatrix(invJ);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>get<sp/>the<sp/>shape<sp/>function<sp/>values<sp/>for<sp/>error<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape<sp/>=<sp/>err_shape-&gt;getEntityShape(elem_type);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape-&gt;getValues(NULL,NULL,qpt,shpval_temp);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape-&gt;getLocalGradients(NULL,NULL,qpt,shgval);<sp/></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;i&lt;nshl;i++){<sp/></highlight><highlight class="comment">//get<sp/>the<sp/>true<sp/>derivative<sp/>and<sp/>copy<sp/>only<sp/>the<sp/>edge<sp/>modes<sp/>for<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shgval_copy[i]<sp/>=<sp/>apf::fromVector(shgval[i+hier_off]);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shpval[i]<sp/>=<sp/>shpval_temp[i+hier_off];</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::multiply(shgval_copy[i],invJ_copy,shdrv[i]);<sp/></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//obtain<sp/>needed<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>grad_vel;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(velo_elem,qpt,vel_vect);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(velo_elem,qpt,grad_vel);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grad_vel<sp/>=<sp/>apf::transpose(grad_vel);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_vof;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getGrad(vof_elem,qpt,grad_vof);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(vof_elem,qpt),<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pressure<sp/>=<sp/>apf::getScalar(pres_elem,qpt);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val<sp/>=<sp/>apf::getScalar(visc_elem,qpt);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_rho<sp/>=<sp/>grad_vof*(<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>-<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Left-Hand<sp/>Side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_error_residual_method_8cpp_1a36f843fa48ae3366833f3f3d2870cb84" kindref="member">getLHS</ref>(K,shdrv,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,weight,visc_val,nshl);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_error_residual_method_8cpp_1aa61849d8c8d61a23ece5e4d79e4a006c" kindref="member">getRHS</ref>(F,shpval,shdrv,vel_vect,grad_vel,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,weight,nshl,visc_val,density,grad_rho,pressure,g);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>quadrature<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>complete<sp/>integration,<sp/>scale<sp/>by<sp/>the<sp/>determinant<sp/>of<sp/>the<sp/>Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>MatAssemblyBegin(K,MAT_FINAL_ASSEMBLY);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>MatAssemblyEnd(K,MAT_FINAL_ASSEMBLY);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>MatScale(K,Jdet);<sp/></highlight><highlight class="comment">//must<sp/>be<sp/>done<sp/>after<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>VecAssemblyBegin(F);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>VecAssemblyEnd(F);<sp/></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>VecScale(F,Jdet);<sp/></highlight><highlight class="comment">//must<sp/>be<sp/>done<sp/>after<sp/>assembly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>bflux;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>F_idx[ndofs];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>bflux<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)<sp/>calloc(ndofs,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac75ad718d0165cb56ebe96df87083268" kindref="member">getBoundaryFlux</ref>(m,<sp/>ent,bflux);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>=0;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>&lt;ndofs;<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>++){</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>F_idx[<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>]=<ref refid="_headers_8h_1a7cbe4dbecea8b00e5845e24579f6036d" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>VecSetValues(F,ndofs,F_idx,bflux,ADD_VALUES);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>VecAssemblyBegin(F);<sp/>VecAssemblyEnd(F);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>free(bflux);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>Vec<sp/>coef;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>VecCreate(PETSC_COMM_SELF,&amp;coef);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>VecSetSizes(coef,ndofs,ndofs);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>VecSetUp(coef);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>KSP<sp/>ksp;<sp/></highlight><highlight class="comment">//initialize<sp/>solver<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPCreate(PETSC_COMM_SELF,&amp;ksp);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPSetOperators(ksp,K,K);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPSetType(ksp,KSPPREONLY);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>PC<sp/>pc;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPGetPC(ksp,&amp;pc);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>PCSetType(pc,PCLU);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPSetFromOptions(ksp);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPSolve(ksp,F,coef);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>KSPDestroy(&amp;ksp);<sp/></highlight><highlight class="comment">//destroy<sp/>ksp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_error_residual_method_8cpp_1a688c463ebbff0f69ea545eec17e68a89" kindref="member">setErrorField</ref>(estimate,coef,ent,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,nshl);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>local<sp/>error<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Acomp=0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Bcomp=0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_avg=0;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u_norm<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>phi_ij;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>vel_ij;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_vof;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>est_elem=<sp/>apf::createElement(estimate,element);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;numqpt;k++){<sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(element,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k,qpt);<sp/></highlight><highlight class="comment">//get<sp/>a<sp/>quadrature<sp/>point<sp/>and<sp/>store<sp/>in<sp/>qpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getJacobian(element,qpt,J);<sp/></highlight><highlight class="comment">//evaluate<sp/>the<sp/>Jacobian<sp/>at<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ<sp/>=<sp/>invert(J);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ<sp/>=<sp/>apf::transpose(invJ);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jdet=fabs(apf::getJacobianDeterminant(J,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));<sp/></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>apf::getIntWeight(element,<ref refid="_error_residual_method_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ_copy<sp/>=<sp/>apf::fromMatrix(invJ);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>get<sp/>the<sp/>shape<sp/>function<sp/>values<sp/>for<sp/>error<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape<sp/>=<sp/>err_shape-&gt;getEntityShape(elem_type);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape-&gt;getValues(NULL,NULL,qpt,shpval_temp);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elem_shape-&gt;getLocalGradients(NULL,NULL,qpt,shgval);<sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;i&lt;nshl;i++){<sp/></highlight><highlight class="comment">//get<sp/>the<sp/>true<sp/>derivative<sp/>and<sp/>copy<sp/>only<sp/>the<sp/>edge<sp/>modes<sp/>for<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shgval_copy[i]<sp/>=<sp/>apf::fromVector(shgval[i+hier_off]);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shpval[i]<sp/>=<sp/>shpval_temp[i+hier_off];</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::multiply(shgval_copy[i],invJ_copy,shdrv[i]);<sp/></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val<sp/>=<sp/>apf::getScalar(visc_elem,qpt);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pres_val<sp/>=<sp/>apf::getScalar(pres_elem,qpt);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(vof_elem,qpt),<ref refid="_error_residual_method_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_error_residual_method_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(est_elem,qpt,phi_ij);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getGrad(vof_elem,qpt,grad_vof);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(velo_elem,qpt,vel_vect);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(velo_elem,qpt,vel_ij);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vel_ij<sp/>=<sp/>apf::transpose(vel_ij);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phi_ij<sp/>=<sp/>apf::transpose(phi_ij);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Acomp<sp/>=<sp/>Acomp<sp/>+<sp/>visc_val*<ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(phi_ij,phi_ij+apf::transpose(phi_ij))*weight;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Bcomp<sp/>=<sp/>Bcomp<sp/>+<sp/>apf::getDiv(velo_elem,qpt)*apf::getDiv(velo_elem,qpt)*weight;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visc_avg<sp/>=<sp/>visc_avg<sp/>+<sp/>visc_val*weight;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u_norm<sp/>=<sp/>u_norm<sp/>+<sp/>visc_val*<ref refid="_error_residual_method_8cpp_1a8d6b874d84f4789f02b902effb271d91" kindref="member">getDotProduct</ref>(vel_ij,vel_ij+apf::transpose(vel_ij))*weight;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>compute<sp/>local<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>visc_avg<sp/>=<sp/>visc_avg*Jdet/apf::measure(element);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Acomp<sp/>=<sp/>Acomp*Jdet/visc_avg;<sp/></highlight><highlight class="comment">//nondimensionalize<sp/>with<sp/>average<sp/>viscosity,<sp/>Jacobians<sp/>can<sp/>cancel<sp/>out,<sp/>but<sp/>this<sp/>is<sp/>done<sp/>for<sp/>clarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>Bcomp<sp/>=<sp/>Bcomp*Jdet;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>u_norm<sp/>=<sp/>u_norm/visc_avg*Jdet;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>err_est<sp/>=<sp/>sqrt(Acomp);<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>err_in(err_est,Acomp,Bcomp);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//apf::setVector(err_reg,ent,0,err_in);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(err_reg,ent,0,err_est);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errRho<sp/>=<sp/>err_est/sqrt(apf::measure(element));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(errRho_reg,ent,0,errRho);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errRho&gt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ae4697439db655efc3b37b9f5953c7f53" kindref="member">errRho_max</ref>)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ae4697439db655efc3b37b9f5953c7f53" kindref="member">errRho_max</ref><sp/>=<sp/>errRho;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err_rel<sp/>=<sp/>err_est/sqrt(u_norm);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(errRel_reg,ent,0,err_rel);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>err_est_total<sp/>=<sp/>err_est_total+(Acomp);<sp/></highlight><highlight class="comment">//for<sp/>tracking<sp/>the<sp/>upper<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>u_norm_total<sp/>=<sp/>u_norm_total<sp/>+<sp/>u_norm;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>MatDestroy(&amp;K);<sp/></highlight><highlight class="comment">//destroy<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>VecDestroy(&amp;F);<sp/></highlight><highlight class="comment">//destroy<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>VecDestroy(&amp;coef);<sp/></highlight><highlight class="comment">//destroy<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(visc_elem);apf::destroyElement(pres_elem);apf::destroyElement(velo_elem);apf::destroyElement(est_elem);apf::destroyElement(vof_elem);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>element<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>PCU_Add_Doubles(&amp;err_est_total,1);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>PCU_Add_Doubles(&amp;u_norm_total,1);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref><sp/>=<sp/>sqrt(err_est_total);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>u_norm_total<sp/>=<sp/>sqrt(u_norm_total);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ac334de5a67ca2e2dbd26fbe7b10a3d55" kindref="member">rel_err_total</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>/u_norm_total;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0){</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;std::setprecision(10)&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>estimate<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>&lt;&lt;std::endl;<sp/></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>density<sp/>maximum<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ae4697439db655efc3b37b9f5953c7f53" kindref="member">errRho_max</ref>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;U_norm_total<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;u_norm_total&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1aa97e3f5ebb00ff6620349fa6b3357a36" kindref="member">logging_config</ref>==</highlight><highlight class="stringliteral">&quot;errorOnly&quot;</highlight><highlight class="normal">){<sp/></highlight><highlight class="comment">//feature<sp/>to<sp/>just<sp/>look<sp/>at<sp/>the<sp/>error<sp/>fields<sp/>without<sp/>adapting<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;outputting<sp/>error<sp/>field\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>namebuffer[20];</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(namebuffer,</highlight><highlight class="stringliteral">&quot;err_reg_%i&quot;</highlight><highlight class="normal">,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1a457dfc5023eff43c9a56bfbefd2f0a5f" kindref="member">nEstimate</ref>);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::writeVtkFiles(namebuffer,<sp/>m);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//target_error<sp/>=<sp/>total_error*2;<sp/>//this<sp/>is<sp/>a<sp/>hack<sp/>to<sp/>prevent<sp/>adapting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>THRESHOLD<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref>*2;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a457dfc5023eff43c9a56bfbefd2f0a5f" kindref="member">nEstimate</ref>++;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a0decaa7be27e9d9899a16de5839cf750" kindref="member">removeBCData</ref>();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>m-&gt;end(iter);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>apf::destroyField(visc);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>apf::destroyField(estimate);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(comm_rank==0)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;</highlight><highlight class="stringliteral">&quot;It<sp/>cleared<sp/>the<sp/>ERM<sp/>function.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp"/>
  </compounddef>
</doxygen>
