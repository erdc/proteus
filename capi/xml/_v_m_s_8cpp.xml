<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_v_m_s_8cpp" kind="file" language="C++">
    <compoundname>VMS.cpp</compoundname>
    <includes refid="_mesh_adapt_p_u_m_i_8h" local="yes">MeshAdaptPUMI.h</includes>
    <includes local="no">PCU.h</includes>
    <includes local="no">petscksp.h</includes>
    <includes local="no">apf.h</includes>
    <includes local="no">apfMesh.h</includes>
    <includes local="no">apfShape.h</includes>
    <includes local="no">apfDynamicMatrix.h</includes>
    <includes local="no">apfNumbering.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="8">
        <label>list</label>
      </node>
      <node id="1">
        <label>VMS.cpp</label>
        <link refid="_v_m_s_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>apfMesh.h</label>
      </node>
      <node id="10">
        <label>iomanip</label>
      </node>
      <node id="17">
        <label>queue</label>
      </node>
      <node id="21">
        <label>apfShape.h</label>
      </node>
      <node id="22">
        <label>apfDynamicMatrix.h</label>
      </node>
      <node id="13">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>PCU.h</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="16">
        <label>apfNumbering.h</label>
      </node>
      <node id="14">
        <label>apf.h</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>apfMesh2.h</label>
      </node>
      <node id="2">
        <label>MeshAdaptPUMI.h</label>
        <link refid="_mesh_adapt_p_u_m_i_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>petscksp.h</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_inputs" prot="public">Inputs</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_v_m_s_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int approx_order</definition>
        <argsstring></argsstring>
        <name>approx_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="15" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="20" bodyend="-1" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" declline="15" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int int_order</definition>
        <argsstring></argsstring>
        <name>int_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="16" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="21" bodyend="-1" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" declline="16" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nu_0</definition>
        <argsstring></argsstring>
        <name>nu_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="17" column="15" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp" bodystart="22" bodyend="-1" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" declline="17" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double nu_1</definition>
        <argsstring></argsstring>
        <name>nu_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="17" column="19" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rho_0</definition>
        <argsstring></argsstring>
        <name>rho_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="17" column="23" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double rho_1</definition>
        <argsstring></argsstring>
        <name>rho_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="17" column="28" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dt_err</definition>
        <argsstring></argsstring>
        <name>dt_err</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="18" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_v_m_s_8cpp_1a164fc6e48b9d7449eb3b8468cd6fa97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_nu_err</definition>
        <argsstring>(struct Inputs info)</argsstring>
        <name>get_nu_err</name>
        <param>
          <type>struct <ref refid="struct_inputs" kindref="compound">Inputs</ref></type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="348" column="8" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="348" bodyend="361" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" declline="38" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="_v_m_s_8cpp_1a187bd810025d62ee6656ccb4eb11087b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Vector3</type>
        <definition>apf::Vector3 getResidual</definition>
        <argsstring>(apf::Vector3 qpt, struct Inputs &amp;info)</argsstring>
        <name>getResidual</name>
        <param>
          <type>apf::Vector3</type>
          <declname>qpt</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_inputs" kindref="compound">Inputs</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="363" column="14" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="363" bodyend="396" declfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" declline="39" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_v_m_s_8cpp_1ab452256c5c64bf565b7037f6011a8a3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void getProps</definition>
        <argsstring>(double *rho, double *nu, double deltaT)</argsstring>
        <name>getProps</name>
        <param>
          <type>double *</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>deltaT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="42" column="13" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_v_m_s_8cpp_1ad8c6db273a807a30066ebba3c9a2c175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>apf::Matrix3x3</type>
        <definition>apf::Matrix3x3 getKJ</definition>
        <argsstring>(int nsd)</argsstring>
        <name>getKJ</name>
        <param>
          <type>int</type>
          <declname>nsd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" line="53" column="16" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp" bodystart="53" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mesh_adapt_p_u_m_i_8h" kindref="compound">MeshAdaptPUMI.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCU.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;petscksp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfMesh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfShape.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfDynamicMatrix.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;apfNumbering.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//Global<sp/>variables<sp/>used<sp/>to<sp/>make<sp/>it<sp/>easier<sp/>to<sp/>pass<sp/>these<sp/>variables<sp/>from<sp/>MeshAdaptPUMIDrvr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" kindref="member">approx_order</ref>;<sp/></highlight><highlight class="comment">//shape<sp/>function<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>;<sp/></highlight><highlight class="comment">//integration<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref>,<ref refid="_v_m_s_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref>,<ref refid="_v_m_s_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>;</highlight></codeline>
<codeline lineno="18" refid="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" kindref="member">dt_err</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="struct_inputs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_inputs" kindref="compound">Inputs</ref>{</highlight></codeline>
<codeline lineno="21" refid="struct_inputs_1a4a81972c8e25309ea51622e8edd7d810" refkind="member"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/><ref refid="struct_inputs_1a4a81972c8e25309ea51622e8edd7d810" kindref="member">vel_vect</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="22" refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" refkind="member"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/><ref refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" kindref="member">gij</ref>;</highlight></codeline>
<codeline lineno="23" refid="struct_inputs_1a9f44b03bd09de7d589f6ebadfb126177" refkind="member"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/><ref refid="struct_inputs_1a9f44b03bd09de7d589f6ebadfb126177" kindref="member">grad_vel</ref>;</highlight></codeline>
<codeline lineno="24" refid="struct_inputs_1accc73b5d9c5aadd888db4d9608490c82" refkind="member"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/><ref refid="struct_inputs_1accc73b5d9c5aadd888db4d9608490c82" kindref="member">grad_pres</ref>;</highlight></codeline>
<codeline lineno="25" refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" kindref="member">visc_val</ref>;</highlight></codeline>
<codeline lineno="26" refid="struct_inputs_1afe2a643c71b9258462f0b206b247fa14" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_inputs_1afe2a643c71b9258462f0b206b247fa14" kindref="member">density</ref>;</highlight></codeline>
<codeline lineno="27" refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref>;</highlight></codeline>
<codeline lineno="28" refid="struct_inputs_1a69f07f6905f42ab8bba459e3a125e091" refkind="member"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/><ref refid="struct_inputs_1a69f07f6905f42ab8bba459e3a125e091" kindref="member">element</ref>;</highlight></codeline>
<codeline lineno="29" refid="struct_inputs_1a2ed1f661c9aa4826a4a1d7bfd83c500f" refkind="member"><highlight class="normal"><sp/><sp/>apf::Element*<sp/><ref refid="struct_inputs_1a2ed1f661c9aa4826a4a1d7bfd83c500f" kindref="member">pres_elem</ref>;</highlight></codeline>
<codeline lineno="30" refid="struct_inputs_1a9ae3cc393e100ba21f51b3765582f484" refkind="member"><highlight class="normal"><sp/><sp/>apf::Element*<sp/><ref refid="struct_inputs_1a9ae3cc393e100ba21f51b3765582f484" kindref="member">visc_elem</ref>;</highlight></codeline>
<codeline lineno="31" refid="struct_inputs_1af1db01906bd89542b97c8c61aeae4418" refkind="member"><highlight class="normal"><sp/><sp/>apf::Element*<sp/><ref refid="struct_inputs_1af1db01906bd89542b97c8c61aeae4418" kindref="member">velo_elem</ref>;</highlight></codeline>
<codeline lineno="32" refid="struct_inputs_1acdd86f591638b2a3204432c6b72e76a9" refkind="member"><highlight class="normal"><sp/><sp/>apf::Element*<sp/><ref refid="struct_inputs_1acdd86f591638b2a3204432c6b72e76a9" kindref="member">vof_elem</ref>;</highlight></codeline>
<codeline lineno="33" refid="struct_inputs_1ab6c51b3f4446bbf34fa1c299ab834a97" refkind="member"><highlight class="normal"><sp/><sp/>apf::Element*<sp/><ref refid="struct_inputs_1ab6c51b3f4446bbf34fa1c299ab834a97" kindref="member">velo_elem_old</ref>;</highlight></codeline>
<codeline lineno="34" refid="struct_inputs_1a20af834d8754a9ef74f25f9080c64f21" refkind="member"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/><ref refid="struct_inputs_1a20af834d8754a9ef74f25f9080c64f21" kindref="member">KJ</ref>;</highlight></codeline>
<codeline lineno="35" refid="struct_inputs_1aed55097b1141bf49b0af234cf3c8bf80" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="struct_inputs_1aed55097b1141bf49b0af234cf3c8bf80" kindref="member">g</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a164fc6e48b9d7449eb3b8468cd6fa97d" kindref="member">get_nu_err</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_inputs" kindref="compound">Inputs</ref><sp/>info);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">apf::Vector3<sp/><ref refid="_v_m_s_8cpp_1a187bd810025d62ee6656ccb4eb11087b" kindref="member">getResidual</ref>(apf::Vector3<sp/>qpt,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_inputs" kindref="compound">Inputs</ref><sp/>&amp;info);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="_v_m_s_8cpp_1ab452256c5c64bf565b7037f6011a8a3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1ab452256c5c64bf565b7037f6011a8a3c" kindref="member">getProps</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*rho,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*nu,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaT)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//Function<sp/>used<sp/>to<sp/>transfer<sp/>MeshAdaptPUMIDrvr<sp/>variables<sp/>into<sp/>global<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref><sp/>=<sp/>rho[0];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1a383b07af68441ce2b4adaaf8d8cc9d90" kindref="member">nu_0</ref><sp/>=<sp/>nu[0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref><sp/>=<sp/>rho[1];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1ae5896ebfee35f22242123e4ae82c81d9" kindref="member">nu_1</ref><sp/>=<sp/>nu[1];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" kindref="member">dt_err</ref><sp/>=<sp/>deltaT;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_v_m_s_8cpp_1ad8c6db273a807a30066ebba3c9a2c175" refkind="member"><highlight class="normal">apf::Matrix3x3<sp/><ref refid="_v_m_s_8cpp_1ad8c6db273a807a30066ebba3c9a2c175" kindref="member">getKJ</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsd)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//Jacobian<sp/>correction<sp/>matrix<sp/>for<sp/>proper<sp/>metric<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nsd==2)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>KJtemp(1.0,0.5,0.0,0.5,1.0,0.0,0.0,0.0,1.0);<sp/></highlight><highlight class="comment">//Jacobian<sp/>correction<sp/>matrix<sp/>for<sp/>proper<sp/>metric<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>KJtemp;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>pow(2,1./3.);<sp/></highlight><highlight class="comment">//1.259921049894873e+00;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2<sp/>=<sp/>c1/2.0;<sp/></highlight><highlight class="comment">//6.299605249474365e-01;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>KJtemp(c1,c2,c2,c2,c1,c2,c2,c2,c1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>KJtemp;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_mesh_adapt_p_u_m_i_drvr_1a9aadede4097af6ffdc77d3eea775d5ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a9aadede4097af6ffdc77d3eea775d5ff" kindref="member">MeshAdaptPUMIDrvr::get_VMS_error</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;total_error_out)<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;The<sp/>beginning<sp/>of<sp/>the<sp/>VMS\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1ab452256c5c64bf565b7037f6011a8a3c" kindref="member">getProps</ref>(rho,nu,delta_T);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1a190ff8a4b88c3f62a7da15f5a2b8c227" kindref="member">approx_order</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1acc45546f4adbd6a6c18c82c432e5dd0e" kindref="member">approximation_order</ref>;<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a1e4333322f04b1b4e0d9b787611d6cce" kindref="member">integration_order</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref><sp/>=<sp/>m-&gt;getDimension();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/>Get<sp/>Solution<sp/>Fields<sp/>First<sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>voff<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;vof&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert(voff);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>velf<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>assert(velf);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>pref<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert(pref);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>velf_old;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity_old&quot;</highlight><highlight class="normal">)!=NULL)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>velf_old<sp/>=<sp/>m-&gt;findField(</highlight><highlight class="stringliteral">&quot;velocity_old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>velf_old<sp/>=<sp/>velf;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>old<sp/>velocity<sp/>field<sp/>not<sp/>found.<sp/>Will<sp/>proceed<sp/>as<sp/>if<sp/>unsteady<sp/>term<sp/>is<sp/>0.<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" kindref="member">dt_err</ref><sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>assert(velf_old);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Got<sp/>the<sp/>solution<sp/>fields\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*****<sp/>Compute<sp/>the<sp/>viscosity<sp/>field<sp/>*****//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>visc<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a772b6ae5b0b80b1f5c4dc270f1cb99b0" kindref="member">getViscosityField</ref>(voff);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Got<sp/>viscosity<sp/>fields<sp/>\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>freeField(vmsErrH1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>apf::Field*<sp/>vmsErr<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;VMSL2&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,1));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//vmsErrH1<sp/>=<sp/>apf::createField(m,&quot;VMSH1&quot;,apf::SCALAR,apf::getVoronoiShape(nsd,1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>vmsErrH1<sp/>=<sp/>apf::createField(m,</highlight><highlight class="stringliteral">&quot;VMSH1&quot;</highlight><highlight class="normal">,apf::SCALAR,apf::getVoronoiShape(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>,1));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Created<sp/>the<sp/>error<sp/>fields\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Start<sp/>computing<sp/>element<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numqpt;<sp/></highlight><highlight class="comment">//number<sp/>of<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nshl;<sp/></highlight><highlight class="comment">//number<sp/>of<sp/>local<sp/>shape<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elem_type;<sp/></highlight><highlight class="comment">//what<sp/>type<sp/>of<sp/>topology</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight;<sp/></highlight><highlight class="comment">//value<sp/>container<sp/>for<sp/>the<sp/>weight<sp/>at<sp/>each<sp/>qpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Jdet;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::EntityShape*<sp/>elem_shape;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>apf::Vector3<sp/>qpt;<sp/></highlight><highlight class="comment">//container<sp/>for<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>apf::MeshElement*<sp/>element;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>apf::Element*<sp/>visc_elem,<sp/>*pres_elem,*velo_elem,*vof_elem,*velo_elem_old;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>J;<sp/></highlight><highlight class="comment">//actual<sp/>Jacobian<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>invJ;<sp/></highlight><highlight class="comment">//inverse<sp/>of<sp/>Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>KJ<sp/>=<sp/><ref refid="_v_m_s_8cpp_1ad8c6db273a807a30066ebba3c9a2c175" kindref="member">getKJ</ref>(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>apf::Matrix3x3<sp/>gij;<sp/></highlight><highlight class="comment">//actual<sp/>Jacobian<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::DynamicMatrix<sp/>invJ_copy;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>shdrv;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//apf::NewArray<sp/>&lt;apf::DynamicVector&gt;<sp/>shgval_copy;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>apf::MeshIterator*<sp/>iter<sp/>=<sp/>m-&gt;begin(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>);<sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>apf::MeshEntity*<sp/>ent;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0<sp/>;<sp/></highlight><highlight class="comment">//for<sp/>debugging<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>over<sp/>elements<sp/>and<sp/>compute<sp/>the<sp/>VMS<sp/>error<sp/>in<sp/>the<sp/>L_2<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VMSerrTotalL2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VMSerrTotalH1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(ent<sp/>=<sp/>m-&gt;iterate(iter))<sp/>){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>element<sp/>=<sp/>apf::createMeshElement(m,ent);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>pres_elem<sp/>=<sp/>apf::createElement(pref,element);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>velo_elem<sp/>=<sp/>apf::createElement(velf,element);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>velo_elem_old<sp/>=<sp/>apf::createElement(velf_old,element);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>visc_elem<sp/>=<sp/>apf::createElement(visc,element);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>vof_elem<sp/>=<sp/>apf::createElement(voff,element);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>strongResidualTauL2;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tau_m;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>areaCheck=0.0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>numqpt=apf::countIntPoints(element,<ref refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Start<sp/>the<sp/>quadrature<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;k&lt;numqpt;k++){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getIntPoint(element,<ref refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k,qpt);<sp/></highlight><highlight class="comment">//get<sp/>a<sp/>quadrature<sp/>point<sp/>and<sp/>store<sp/>in<sp/>qpt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getJacobian(element,qpt,J);<sp/></highlight><highlight class="comment">//evaluate<sp/>the<sp/>Jacobian<sp/>at<sp/>the<sp/>quadrature<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>apf::getIntWeight(element,<ref refid="_v_m_s_8cpp_1a79e0fac6a31e27e81ccdf887a707eaaa" kindref="member">int_order</ref>,k);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>J<sp/>=<sp/>apf::transpose(J);<sp/></highlight><highlight class="comment">//Is<sp/>PUMI<sp/>still<sp/>defined<sp/>in<sp/>this<sp/>way?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J[2][2]<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>necessary<sp/>to<sp/>avoid<sp/>singular<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invJ<sp/>=<sp/>invert(J);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jdet=fabs(apf::getJacobianDeterminant(J,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gij<sp/>=<sp/>apf::transpose(invJ)*(KJ*invJ);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>if(count<sp/>==<sp/>10<sp/>&amp;&amp;<sp/>k==0){</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Adjacent<sp/>adj;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getAdjacent(ent,0,adj);</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;adj.getSize();i++){</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(adj[i],0,pt);</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::setprecision(15)&lt;&lt;std::scientific;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;The<sp/>point<sp/>is<sp/>&quot;&lt;&lt;pt[0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;pt[1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;pt[2]&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>testJ;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>pt1,pt2,pt3;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(adj[0],0,pt1);</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(adj[1],0,pt2);</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;getPoint(adj[2],0,pt3);</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>testJ[0][0]<sp/>=<sp/>pt2[0]-pt1[0];<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>testJ[0][1]<sp/>=<sp/>pt3[0]-pt1[0];<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>testJ[1][0]<sp/>=<sp/>pt2[1]-pt1[1];<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>testJ[1][1]<sp/>=<sp/>pt3[1]-pt1[1];<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>testJ[2][2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Jacobian<sp/>&quot;&lt;&lt;J&lt;&lt;&quot;<sp/>inverse<sp/>&quot;&lt;&lt;invJ&lt;&lt;&quot;<sp/>testJ<sp/>&quot;&lt;&lt;testJ&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Jdet<sp/>&quot;&lt;&lt;Jdet&lt;&lt;&quot;<sp/>area<sp/>&quot;&lt;&lt;apf::measure(m,ent)&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;adj.getSize();i++){</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>presCheck<sp/>=<sp/>apf::getScalar(pref,adj[i],0);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Pressure<sp/>is<sp/>&quot;&lt;&lt;presCheck&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>gradCheck;</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getGrad(pres_elem,qpt,gradCheck);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;grad<sp/>pres<sp/>is<sp/>&quot;&lt;&lt;gradCheck&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;adj.getSize();i++){</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>velCheck;<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(velf,adj[i],0,velCheck);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;velocity<sp/>is<sp/>&quot;&lt;&lt;velCheck&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>gradVelCheck;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(velo_elem,qpt,gradVelCheck);</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;grad<sp/>vel<sp/>is<sp/>&quot;&lt;&lt;gradVelCheck&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pressure<sp/>=<sp/>apf::getScalar(pres_elem,qpt);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_pres;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getGrad(pres_elem,qpt,grad_pres);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val<sp/>=<sp/>apf::getScalar(visc_elem,qpt);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVector(velo_elem,qpt,vel_vect);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>grad_vel;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::getVectorGrad(velo_elem,qpt,grad_vel);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grad_vel<sp/>=<sp/>apf::transpose(grad_vel);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C1<sp/>=<sp/>2.0;<sp/></highlight><highlight class="comment">//constants<sp/>for<sp/>stabilization<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C2<sp/>=<sp/>36.0;<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stabTerm1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stabTerm2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;j++){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stabTerm1<sp/>+=<sp/>vel_vect[i]*gij[i][j]*vel_vect[j];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stabTerm2<sp/>+=<sp/>gij[i][j]*gij[i][j];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stabTerm2<sp/>=<sp/>C2*visc_val*visc_val*stabTerm2;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tau_m<sp/>=<sp/>1/sqrt(stabTerm1<sp/>+<sp/>stabTerm2);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(count<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//std::cout&lt;&lt;&quot;This<sp/>is<sp/>the<sp/>tau<sp/>&quot;&lt;&lt;tau_m&lt;&lt;&quot;<sp/>velocity<sp/>&quot;&lt;&lt;vel_vect&lt;&lt;&quot;<sp/>grad<sp/>vel<sp/>&quot;&lt;&lt;grad_vel&lt;&lt;&quot;<sp/>metric<sp/>&quot;&lt;&lt;gij&lt;&lt;&quot;<sp/>numdim<sp/>&quot;&lt;&lt;nsd&lt;&lt;&quot;<sp/>viscosity<sp/>&quot;&lt;&lt;visc_val&lt;&lt;&quot;<sp/>&quot;&lt;&lt;KJ&lt;&lt;&quot;<sp/>gradP&quot;&lt;&lt;<sp/>grad_pres&lt;&lt;&quot;<sp/>stabTerms<sp/>&quot;&lt;&lt;stabTerm1&lt;&lt;&quot;<sp/>&quot;&lt;&lt;stabTerm2&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>areaCheck<sp/>+=<sp/>weight*Jdet;</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempConv;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempDiff;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempConv.zero();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempDiff.zero();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;j++){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempConv[i]<sp/>=<sp/>tempConv[i]<sp/>+<sp/>vel_vect[j]*grad_vel[i][j];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(vof_elem,qpt),<ref refid="_v_m_s_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempResidual<sp/>=<sp/>(tempConv<sp/>+<sp/>grad_pres/density);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempVal<sp/>=<sp/>tempResidual.getLength();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strongResidualTauL2<sp/>=<sp/>tau_m*tau_m*tempVal*tempVal*weight*Jdet;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(count<sp/>==<sp/>10<sp/>&amp;&amp;<sp/>k==0){</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;<sp/>tempConv<sp/>&quot;&lt;&lt;tempConv&lt;&lt;&quot;<sp/>density<sp/>&quot;&lt;&lt;density&lt;&lt;&quot;<sp/>tempResidual<sp/>&quot;&lt;&lt;tempResidual&lt;&lt;&quot;<sp/>tempVal<sp/>&quot;&lt;&lt;tempVal&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>qpt<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VMSerrL2<sp/>=<sp/>sqrt(strongResidualTauL2);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(vmsErr,ent,0,VMSerrL2);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>if(count<sp/>==<sp/>10){</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;This<sp/>is<sp/>the<sp/>error<sp/>&quot;&lt;&lt;<sp/>sqrt(strongResidualTauL2)&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;This<sp/>is<sp/>the<sp/>area<sp/>check<sp/>&quot;&lt;&lt;areaCheck&lt;&lt;&quot;<sp/>true<sp/>area<sp/>is<sp/>&quot;&lt;&lt;apf::measure(m,ent);</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//H1<sp/>error<sp/>compute<sp/>nu_err<sp/>at<sp/>centroid<sp/>and<sp/>compute<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>qpt[0]<sp/>=<sp/>0.0;<sp/>qpt[1]<sp/>=<sp/>0.0;<sp/>qpt[2]<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//ensure<sp/>it<sp/>is<sp/>initialized<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qpt[i]<sp/>=<sp/>1./(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>+1.0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density<sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1a6ddc38c5a78f366b34d764813812ed41" kindref="member">getMPvalue</ref>(apf::getScalar(vof_elem,qpt),<ref refid="_v_m_s_8cpp_1ae5f5d9edb66645eab31a7c8389493ce7" kindref="member">rho_0</ref>,<ref refid="_v_m_s_8cpp_1a751e53c9d8dfaf696b11b86e0c1b42e9" kindref="member">rho_1</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_inputs" kindref="compound">Inputs</ref><sp/>info;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a69f07f6905f42ab8bba459e3a125e091" kindref="member">element</ref><sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a2ed1f661c9aa4826a4a1d7bfd83c500f" kindref="member">pres_elem</ref><sp/>=<sp/>pres_elem;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a9ae3cc393e100ba21f51b3765582f484" kindref="member">visc_elem</ref><sp/>=<sp/>visc_elem;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1af1db01906bd89542b97c8c61aeae4418" kindref="member">velo_elem</ref><sp/>=<sp/>velo_elem;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1acdd86f591638b2a3204432c6b72e76a9" kindref="member">vof_elem</ref><sp/>=<sp/>vof_elem;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1ab6c51b3f4446bbf34fa1c299ab834a97" kindref="member">velo_elem_old</ref><sp/>=<sp/>velo_elem_old;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a20af834d8754a9ef74f25f9080c64f21" kindref="member">KJ</ref><sp/>=<sp/>KJ;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref><sp/>=<sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1afe2a643c71b9258462f0b206b247fa14" kindref="member">density</ref><sp/>=<sp/>density;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1aed55097b1141bf49b0af234cf3c8bf80" kindref="member">g</ref><sp/>=<sp/>&amp;g[0];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>pressure<sp/>=<sp/>apf::getScalar(pres_elem,qpt);</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_pres;</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::getGrad(pres_elem,qpt,grad_pres);</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>visc_val<sp/>=<sp/>apf::getScalar(visc_elem,qpt);</highlight></codeline>
<codeline lineno="291"><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::getVector(velo_elem,qpt,vel_vect);</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>grad_vel;</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/>apf::getVectorGrad(velo_elem,qpt,grad_vel);</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/>grad_vel<sp/>=<sp/>apf::transpose(grad_vel);</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//compute<sp/>residual</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempConv;</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempDiff;</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>tempConv.zero();</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>tempDiff.zero();</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;i&lt;nsd;i++){</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>j=0;j&lt;nsd;j++){</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempConv[i]<sp/>=<sp/>tempConv[i]<sp/>+<sp/>vel_vect[j]*grad_vel[i][j];</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>density<sp/>=<sp/>getMPvalue(apf::getScalar(vof_elem,qpt),rho_0,rho_1);</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempResidual<sp/>=<sp/>(tempConv<sp/>+<sp/>grad_pres/density);</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tempVal<sp/>=<sp/>tempResidual.getLength();</highlight></codeline>
<codeline lineno="310"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempResidual<sp/>=<sp/><ref refid="_v_m_s_8cpp_1a187bd810025d62ee6656ccb4eb11087b" kindref="member">getResidual</ref>(qpt,info);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempVal<sp/>=<sp/>tempResidual.getLength();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getJacobian(element,qpt,J);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>==2)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>J[2][2]<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//this<sp/>is<sp/>necessary<sp/>to<sp/>avoid<sp/>singular<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>invJ<sp/>=<sp/>invert(J);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Jdet=fabs(apf::getJacobianDeterminant(J,<ref refid="class_mesh_adapt_p_u_m_i_drvr_1ab670020f8485275221bf5fa0b8872cad" kindref="member">nsd</ref>));<sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>gij<sp/>=<sp/>apf::transpose(invJ)*(KJ*invJ);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" kindref="member">gij</ref><sp/>=<sp/>gij;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu_err<sp/>=<sp/><ref refid="_v_m_s_8cpp_1a164fc6e48b9d7449eb3b8468cd6fa97d" kindref="member">get_nu_err</ref>(info);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>VMSerrH1<sp/>=<sp/>nu_err*tempVal*sqrt(apf::measure(m,ent));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;std::scientific&lt;&lt;std::setprecision(15)&lt;&lt;&quot;H1<sp/>error<sp/>for<sp/>element<sp/>&quot;&lt;&lt;count&lt;&lt;&quot;<sp/>nu_err<sp/>&quot;&lt;&lt;nu_err&lt;&lt;&quot;<sp/>error<sp/>&quot;&lt;&lt;VMSerrH1&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::setScalar(vmsErrH1,ent,0,VMSerrH1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>VMSerrTotalL2<sp/>=<sp/>VMSerrTotalL2+VMSerrL2*VMSerrL2;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>VMSerrTotalH1<sp/>=<sp/>VMSerrTotalH1+VMSerrH1*VMSerrH1;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(visc_elem);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(pres_elem);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(velo_elem);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(velo_elem_old);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyElement(vof_elem);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyMeshElement(element);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>loop<sp/>over<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Add_Doubles(&amp;VMSerrTotalL2,1);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>PCU_Add_Doubles(&amp;VMSerrTotalH1,1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PCU_Comm_Self()==0)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::scientific&lt;&lt;std::setprecision(15)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Total<sp/>Error<sp/>L2<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;sqrt(VMSerrTotalL2)&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>H1<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;sqrt(VMSerrTotalH1)&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mesh_adapt_p_u_m_i_drvr_1afa325a32876160388cba8f8fe81e0ce0" kindref="member">total_error</ref><sp/>=<sp/>sqrt(VMSerrTotalH1);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>total_error_out<sp/>=<sp/>sqrt(VMSerrTotalH1);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(vmsErr);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::destroyField(visc);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}<sp/></highlight><highlight class="comment">//end<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="_v_m_s_8cpp_1a164fc6e48b9d7449eb3b8468cd6fa97d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_v_m_s_8cpp_1a164fc6e48b9d7449eb3b8468cd6fa97d" kindref="member">get_nu_err</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_inputs" kindref="compound">Inputs</ref><sp/>info){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stabTerm1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stabTerm2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;info.<ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;info.<ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref>;j++){</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stabTerm1<sp/>+=<sp/>info.<ref refid="struct_inputs_1a4a81972c8e25309ea51622e8edd7d810" kindref="member">vel_vect</ref>[i]*info.<ref refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" kindref="member">gij</ref>[i][j]*info.<ref refid="struct_inputs_1a4a81972c8e25309ea51622e8edd7d810" kindref="member">vel_vect</ref>[j];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stabTerm2<sp/>+=<sp/>info.<ref refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" kindref="member">gij</ref>[i][j]*info.<ref refid="struct_inputs_1a7184dc5c353fd5f37d2667996236f05e" kindref="member">gij</ref>[i][j];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C_nu<sp/>=<sp/>3.0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>stabTerm2<sp/>=<sp/>C_nu*info.<ref refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" kindref="member">visc_val</ref>*info.<ref refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" kindref="member">visc_val</ref>*sqrt(stabTerm2);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu_err<sp/>=<sp/>1.0/sqrt(info.<ref refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" kindref="member">visc_val</ref>*sqrt(stabTerm1)<sp/>+<sp/>stabTerm2);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nu_err;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="_v_m_s_8cpp_1a187bd810025d62ee6656ccb4eb11087b" refkind="member"><highlight class="normal">apf::Vector3<sp/><ref refid="_v_m_s_8cpp_1a187bd810025d62ee6656ccb4eb11087b" kindref="member">getResidual</ref>(apf::Vector3<sp/>qpt,</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_inputs" kindref="compound">Inputs</ref><sp/>&amp;info){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>grad_pres;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getGrad(info.<ref refid="struct_inputs_1a2ed1f661c9aa4826a4a1d7bfd83c500f" kindref="member">pres_elem</ref>,qpt,grad_pres);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>visc_val<sp/>=<sp/>apf::getScalar(info.<ref refid="struct_inputs_1a9ae3cc393e100ba21f51b3765582f484" kindref="member">visc_elem</ref>,qpt);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(info.<ref refid="struct_inputs_1af1db01906bd89542b97c8c61aeae4418" kindref="member">velo_elem</ref>,qpt,vel_vect);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>vel_vect_old;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVector(info.<ref refid="struct_inputs_1ab6c51b3f4446bbf34fa1c299ab834a97" kindref="member">velo_elem_old</ref>,qpt,vel_vect_old);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Matrix3x3<sp/>grad_vel;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::getVectorGrad(info.<ref refid="struct_inputs_1af1db01906bd89542b97c8c61aeae4418" kindref="member">velo_elem</ref>,qpt,grad_vel);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_vel<sp/>=<sp/>apf::transpose(grad_vel);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempConv;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempDiff;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>tempConv.zero();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>tempDiff.zero();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;info.<ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref>;i++){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;info.<ref refid="struct_inputs_1aad21fa55f7b792f799d6d734caad56bb" kindref="member">nsd</ref>;j++){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempConv[i]<sp/>=<sp/>tempConv[i]<sp/>+<sp/>vel_vect[j]*grad_vel[i][j];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempConv[i]<sp/>=<sp/>tempConv[i]<sp/>-<sp/>info.<ref refid="struct_inputs_1aed55097b1141bf49b0af234cf3c8bf80" kindref="member">g</ref>[i];<sp/></highlight><highlight class="comment">//body<sp/>force<sp/>contribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>apf::Vector3<sp/>tempResidual<sp/>=<sp/>(tempConv<sp/>+<sp/>grad_pres/info.<ref refid="struct_inputs_1afe2a643c71b9258462f0b206b247fa14" kindref="member">density</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//acceleration<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>tempResidual<sp/>=<sp/>tempResidual<sp/>+<sp/>(vel_vect-vel_vect_old)/<ref refid="_v_m_s_8cpp_1a3b9eac77f31697a0a072c8225eca4c97" kindref="member">dt_err</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;What<sp/>is<sp/>the<sp/>acceleration<sp/>contribution?<sp/>&quot;&lt;&lt;(vel_vect-vel_vect_old)/dt_err&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a4a81972c8e25309ea51622e8edd7d810" kindref="member">vel_vect</ref><sp/>=<sp/>vel_vect;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1a9f44b03bd09de7d589f6ebadfb126177" kindref="member">grad_vel</ref><sp/>=<sp/>grad_vel;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1aeea7fe1dfe532706f2b4503617d5b473" kindref="member">visc_val</ref><sp/>=<sp/>visc_val;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="struct_inputs_1accc73b5d9c5aadd888db4d9608490c82" kindref="member">grad_pres</ref><sp/>=<sp/>grad_pres;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tempResidual;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/MeshAdaptPUMI/VMS.cpp"/>
  </compounddef>
</doxygen>
