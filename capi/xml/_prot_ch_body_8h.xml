<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_prot_ch_body_8h" kind="file" language="C++">
    <compoundname>ProtChBody.h</compoundname>
    <includes local="yes">chrono/physics/ChSystemSMC.h</includes>
    <includes local="yes">chrono/physics/ChSystem.h</includes>
    <includes local="yes">chrono/timestepper/ChTimestepper.h</includes>
    <includes local="yes">chrono/solver/ChSolverMINRES.h</includes>
    <includes local="yes">chrono/core/ChTransform.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="1">
        <label>ProtChBody.h</label>
        <link refid="_prot_ch_body_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>chrono/core/ChTransform.h</label>
      </node>
      <node id="2">
        <label>chrono/physics/ChSystemSMC.h</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="4">
        <label>chrono/timestepper/ChTimestepper.h</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>chrono/physics/ChSystem.h</label>
      </node>
      <node id="5">
        <label>chrono/solver/ChSolverMINRES.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classcpp_system" prot="public">cppSystem</innerclass>
    <innerclass refid="classcpp_rigid_body" prot="public">cppRigidBody</innerclass>
    <innerclass refid="structno__op__delete" prot="public">no_op_delete</innerclass>
    <innernamespace refid="namespacechrono_1_1collision">chrono::collision</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_prot_ch_body_8h_1ade18e0872e1cff444c0048d8dc147dd5" prot="public" static="yes" mutable="no">
        <type>std::map&lt; ChPhysicsItem *, std::shared_ptr&lt; ChPhysicsItem &gt; &gt;</type>
        <definition>std::map&lt;ChPhysicsItem*, std::shared_ptr&lt;ChPhysicsItem&gt; &gt; spans</definition>
        <argsstring></argsstring>
        <name>spans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="645" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="645" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_prot_ch_body_8h_1a701a49aa22daf4e99d17bf17d3f97e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcpp_system" kindref="compound">cppSystem</ref> *</type>
        <definition>cppSystem* newSystem</definition>
        <argsstring>()</argsstring>
        <name>newSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="583" column="12" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="583" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_body_8h_1ace9b5d5b9f8cfd123e992ce498f3bb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcpp_rigid_body" kindref="compound">cppRigidBody</ref> *</type>
        <definition>cppRigidBody* newRigidBody</definition>
        <argsstring>(cppSystem *system)</argsstring>
        <name>newRigidBody</name>
        <param>
          <type><ref refid="classcpp_system" kindref="compound">cppSystem</ref> *</type>
          <declname>system</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="590" column="15" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_body_8h_1a89a07f4ace8a627aed9066831cdba3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ChLinkLockBodies</definition>
        <argsstring>(std::shared_ptr&lt; ChBody &gt; body1, std::shared_ptr&lt; ChBody &gt; body2, std::shared_ptr&lt; ChSystem &gt; system, ChCoordsys&lt;&gt; coordsys, double limit_X=0., double limit_Y=0., double limit_Z=0., double limit_Rx=0., double limit_Ry=0., double limit_Rz=0.)</argsstring>
        <name>ChLinkLockBodies</name>
        <param>
          <type>std::shared_ptr&lt; ChBody &gt;</type>
          <declname>body1</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChBody &gt;</type>
          <declname>body2</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChSystem &gt;</type>
          <declname>system</declname>
        </param>
        <param>
          <type>ChCoordsys&lt;&gt;</type>
          <declname>coordsys</declname>
        </param>
        <param>
          <type>double</type>
          <declname>limit_X</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>limit_Y</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>limit_Z</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>limit_Rx</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>limit_Ry</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>limit_Rz</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="597" column="6" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="597" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_body_8h_1a85af6ee0f78f989a1907ec064dc256ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; ChPhysicsItem &gt;</type>
        <definition>std::shared_ptr&lt;ChPhysicsItem&gt; getPhysicsItemSharedPtr</definition>
        <argsstring>(ChPhysicsItem *item)</argsstring>
        <name>getPhysicsItemSharedPtr</name>
        <param>
          <type>ChPhysicsItem *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="641" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="_prot_ch_body_8h_1a7b6f9e5d6bd50022597ff505970b5f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; ChPhysicsItem &gt;</type>
        <definition>std::shared_ptr&lt;ChPhysicsItem&gt; getPhysicsItemSharedPtr2</definition>
        <argsstring>(ChPhysicsItem *item)</argsstring>
        <name>getPhysicsItemSharedPtr2</name>
        <param>
          <type>ChPhysicsItem *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" line="647" column="17" bodyfile="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h" bodystart="647" bodyend="651"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChSystemSMC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/physics/ChSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/timestepper/ChTimestepper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/solver/ChSolverMINRES.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;chrono/core/ChTransform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacechrono" kindref="compound">chrono</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">chrono::collision;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classcpp_system" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_system" kindref="compound">cppSystem</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17" refid="classcpp_system_1a5416d6e9549a12cbed37e912202011d4" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChSystemSMC&gt;<sp/><ref refid="classcpp_system_1a5416d6e9549a12cbed37e912202011d4" kindref="member">systemSMC</ref>;</highlight></codeline>
<codeline lineno="18" refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChSystem&gt;<sp/><ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>;</highlight></codeline>
<codeline lineno="19" refid="classcpp_system_1a7a23cde8fa53169dad2543172782219d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1a7a23cde8fa53169dad2543172782219d" kindref="member">chrono_dt</ref>;</highlight></codeline>
<codeline lineno="20" refid="classcpp_system_1a78ac9c650ab36dba6c1a68d89e32b41c" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classcpp_system_1a78ac9c650ab36dba6c1a68d89e32b41c" kindref="member">directory</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classcpp_system" kindref="compound">cppSystem</ref>();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>step(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>proteus_dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_substeps);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDirectory(std::string<sp/>dir);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTimestepperType(std::string<sp/>tstype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCollisionEnvelopeMargin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>envelope,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addMesh(std::shared_ptr&lt;ChMesh&gt;<sp/>mesh);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSolverDiagonalPreconditioning(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>boolval);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classcpp_rigid_body" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_rigid_body" kindref="compound">cppRigidBody</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33" refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>;</highlight></codeline>
<codeline lineno="34" refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref>;</highlight></codeline>
<codeline lineno="35" refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="36" refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>;</highlight></codeline>
<codeline lineno="37" refid="classcpp_rigid_body_1a837566013260aa3baca48687c8189d6a" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a837566013260aa3baca48687c8189d6a" kindref="member">pos0</ref>;</highlight></codeline>
<codeline lineno="38" refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" kindref="member">trimesh_pos</ref>;</highlight></codeline>
<codeline lineno="39" refid="classcpp_rigid_body_1a7dac61a7dfb570c4de279a14de7be178" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_rigid_body_1a7dac61a7dfb570c4de279a14de7be178" kindref="member">trimesh_pos_last</ref>;</highlight></codeline>
<codeline lineno="40" refid="classcpp_rigid_body_1a2842108eddb95d34795227a2ed59519d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;ChVector&lt;&gt;&gt;<sp/><ref refid="classcpp_rigid_body_1a2842108eddb95d34795227a2ed59519d" kindref="member">trimesh_pos0</ref>;</highlight></codeline>
<codeline lineno="41" refid="classcpp_rigid_body_1a1856ccbb4d93f07df8fec295483d7b72" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a1856ccbb4d93f07df8fec295483d7b72" kindref="member">pos0_trimesh</ref>;</highlight></codeline>
<codeline lineno="42" refid="classcpp_rigid_body_1a3a886b70b800d878d6b935b4f3c904ac" refkind="member"><highlight class="normal"><sp/><sp/>ChQuaternion&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a3a886b70b800d878d6b935b4f3c904ac" kindref="member">rotq0_trimesh</ref>;</highlight></codeline>
<codeline lineno="43" refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="44" refid="classcpp_rigid_body_1aa591ef008a770fe481ab9c2a469ef48e" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1aa591ef008a770fe481ab9c2a469ef48e" kindref="member">vel_last</ref>;</highlight></codeline>
<codeline lineno="45" refid="classcpp_rigid_body_1a09e23ca3341c3fc1729739747224f591" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a09e23ca3341c3fc1729739747224f591" kindref="member">acc</ref>;</highlight></codeline>
<codeline lineno="46" refid="classcpp_rigid_body_1a53a302b730a63aab8be843d617c611e9" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a53a302b730a63aab8be843d617c611e9" kindref="member">acc_last</ref>;</highlight></codeline>
<codeline lineno="47" refid="classcpp_rigid_body_1a68915b0dc951adba7029fd4b6ce17a7a" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a68915b0dc951adba7029fd4b6ce17a7a" kindref="member">angvel</ref>;</highlight></codeline>
<codeline lineno="48" refid="classcpp_rigid_body_1afd21586e46bc23bf7358d0d334f4a1da" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1afd21586e46bc23bf7358d0d334f4a1da" kindref="member">angvel_last</ref>;</highlight></codeline>
<codeline lineno="49" refid="classcpp_rigid_body_1ae19b9f041a1d9344fac15c3f1f2fa9f8" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1ae19b9f041a1d9344fac15c3f1f2fa9f8" kindref="member">angacc</ref>;</highlight></codeline>
<codeline lineno="50" refid="classcpp_rigid_body_1a8001c2fde7a7dd40a01cbabdd99db045" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a8001c2fde7a7dd40a01cbabdd99db045" kindref="member">angacc_last</ref>;</highlight></codeline>
<codeline lineno="51" refid="classcpp_rigid_body_1a9b041171d3560abc6909372d2c60e10d" refkind="member"><highlight class="normal"><sp/><sp/>ChMatrix33&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1a9b041171d3560abc6909372d2c60e10d" kindref="member">rotm</ref>;</highlight></codeline>
<codeline lineno="52" refid="classcpp_rigid_body_1a0ae80b4489191f508cf11522d2552146" refkind="member"><highlight class="normal"><sp/><sp/>ChMatrix33&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1a0ae80b4489191f508cf11522d2552146" kindref="member">rotm_last</ref>;</highlight></codeline>
<codeline lineno="53" refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" refkind="member"><highlight class="normal"><sp/><sp/>ChQuaternion&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>;</highlight></codeline>
<codeline lineno="54" refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" refkind="member"><highlight class="normal"><sp/><sp/>ChQuaternion&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref>;</highlight></codeline>
<codeline lineno="55" refid="classcpp_rigid_body_1a045646f672d53476810e741a0a57f34e" refkind="member"><highlight class="normal"><sp/><sp/>ChQuaternion&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1a045646f672d53476810e741a0a57f34e" kindref="member">rotq0</ref>;</highlight></codeline>
<codeline lineno="56" refid="classcpp_rigid_body_1a2605ffb5b01b3bbc84dcaaf817ab1423" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a2605ffb5b01b3bbc84dcaaf817ab1423" kindref="member">F</ref>;</highlight></codeline>
<codeline lineno="57" refid="classcpp_rigid_body_1a5be8d10002c675676e2134d613f8da57" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a5be8d10002c675676e2134d613f8da57" kindref="member">F_last</ref>;</highlight></codeline>
<codeline lineno="58" refid="classcpp_rigid_body_1aaff464665e862e49c350a018fa36a5d6" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1aaff464665e862e49c350a018fa36a5d6" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="59" refid="classcpp_rigid_body_1a8e4f2abc5a5ed0483580ac5ef0d92105" refkind="member"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/><ref refid="classcpp_rigid_body_1a8e4f2abc5a5ed0483580ac5ef0d92105" kindref="member">M_last</ref>;</highlight></codeline>
<codeline lineno="60" refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChLinkLockLock&gt;<sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>lock<sp/>for<sp/>prescribed<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classcpp_rigid_body_1aefd86b8ba8a74db0f3c220fbb1c6c6eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1aefd86b8ba8a74db0f3c220fbb1c6c6eb" kindref="member">lock_motion_t_max</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>max<sp/>time<sp/>up<sp/>to<sp/>which<sp/>lock<sp/>motion<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classcpp_rigid_body_1a08ceb9ad768a47644407c50e54788f61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a08ceb9ad768a47644407c50e54788f61" kindref="member">mass</ref>;</highlight></codeline>
<codeline lineno="63" refid="classcpp_rigid_body_1aaceb4aec58cb42db0365c07b3a1c845b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1aaceb4aec58cb42db0365c07b3a1c845b" kindref="member">mooring_restlength</ref>;</highlight></codeline>
<codeline lineno="64" refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChLinkSpring&gt;<sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ChVector<sp/>&lt;&gt;<sp/>inertia;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classcpp_rigid_body_1a7d4a5c3597da582571dfade82bc0f259" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="classcpp_rigid_body_1a7d4a5c3597da582571dfade82bc0f259" kindref="member">inertia</ref>;</highlight></codeline>
<codeline lineno="67" refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" refkind="member"><highlight class="normal"><sp/><sp/>shared_ptr&lt;ChTriangleMeshConnected&gt;<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>;</highlight></codeline>
<codeline lineno="68" refid="classcpp_rigid_body_1ad5e5b33021dd0e79b5060e85ccdb35c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1ad5e5b33021dd0e79b5060e85ccdb35c6" kindref="member">has_trimesh</ref>;</highlight></codeline>
<codeline lineno="69" refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>;</highlight></codeline>
<codeline lineno="70" refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classcpp_system" kindref="compound">cppSystem</ref>*<sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body" kindref="compound">cppRigidBody</ref>(<ref refid="classcpp_system" kindref="compound">cppSystem</ref>*<sp/>system);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>hxyz(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hx(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hz(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculate_init();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prestep(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>force,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>torque);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>poststep();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setConstraints(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>free_x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>free_y);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSpring(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damping,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>fairlead,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>anchor,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rest_length);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPrismaticLinksWithSpring(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris1,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris2,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damping,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rest_length);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPrismaticLinkX(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setName(std::string<sp/>name);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPrescribedMotionPoly(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeff1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPrescribedMotionSine(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPrescribedMotionCustom(std::vector&lt;double&gt;<sp/>t,<sp/>std::vector&lt;double&gt;<sp/>x,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>y,<sp/>std::vector&lt;double&gt;<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ang,<sp/>std::vector&lt;double&gt;<sp/>ang2,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ang3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_max);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getTriangleMeshSDF(ChVector&lt;&gt;<sp/>pos_node,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dist_n);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getTriangleMeshVel(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateTriangleMeshVisualisationPos();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classcpp_system_1acb929b40082b5cc9737173a67b69d531" refkind="member"><highlight class="normal"><ref refid="classcpp_system_1acb929b40082b5cc9737173a67b69d531" kindref="member">cppSystem::cppSystem</ref>()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>systemSMC_sharedptr<sp/>=<sp/>std::make_shared&lt;ChSystemSMC&gt;();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>systemSMC<sp/>=<sp/>systemSMC_sharedptr.get();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system<sp/>=<sp/>systemSMC;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>chrono_dt<sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>directory<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SOLVER<sp/>OPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetSolverType(ChSolver::Type::MINRES);<sp/><sp/>//<sp/>SOLVER_MINRES:<sp/>good<sp/>convergence,<sp/>supports<sp/>FEA,<sp/>does<sp/>not<sp/>support<sp/>DVI<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>auto<sp/>msolver<sp/>=<sp/>std::static_pointer_cast&lt;ChSolverMINRES&gt;(system-&gt;GetSolver());<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>msolver-&gt;SetDiagonalPreconditioning(true);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetSolverWarmStarting(true);<sp/><sp/>//<sp/>this<sp/>helps<sp/>a<sp/>lot<sp/>to<sp/>speedup<sp/>convergence<sp/>in<sp/>this<sp/>class<sp/>of<sp/>problems<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetMaxItersSolverSpeed(100);<sp/>//<sp/>max<sp/>iteration<sp/>for<sp/>iterative<sp/>solvers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetMaxItersSolverStab(100);<sp/>//<sp/>max<sp/>iteration<sp/>for<sp/>stabilization<sp/>(iterative<sp/>solvers)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetTolForce(1e-10);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//system-&gt;SetMaxItersSolverSpeed(100);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//system-&gt;SetMaxItersSolverStab(100);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//system-&gt;SetTolForce(1e-14);<sp/>//<sp/>default:<sp/>0.001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//system-&gt;SetMaxiter(200);<sp/>//<sp/>default:<sp/>6.<sp/>Max<sp/>constraints<sp/>to<sp/>reach<sp/>tolerance<sp/>on<sp/>constraints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//system-&gt;SetTol(1e-10);<sp/>//<sp/>default:<sp/>0.0002.<sp/>Tolerance<sp/>for<sp/>keeping<sp/>constraints<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;SetTimestepperType(ChTimestepper::Type::EULER_IMPLICIT_LINEARIZED);<sp/>//<sp/>used<sp/>before:<sp/>ChSystem::INT_EULER_IMPLICIT_LINEARIZED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>(auto<sp/>mystepper<sp/>=<sp/>std::dynamic_pointer_cast&lt;ChTimestepperHHT&gt;(system-&gt;GetTimestepper()))<sp/>{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>mystepper-&gt;SetAlpha(-0.2);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classcpp_system_1ae49765b17abc7851a6566c64706769bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1ae49765b17abc7851a6566c64706769bc" kindref="member">cppSystem::setSolverDiagonalPreconditioning</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>boolval)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msolver<sp/>=<sp/>std::static_pointer_cast&lt;ChSolverMINRES&gt;(system-&gt;GetSolver());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>msolver-&gt;SetDiagonalPreconditioning(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classcpp_system_1a2df784f0fb6ca919e4cae78501e67ae5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1a2df784f0fb6ca919e4cae78501e67ae5" kindref="member">cppSystem::setTimestepperType</ref>(std::string<sp/>tstype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstype<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;HHT&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>system-&gt;SetTimestepperType(ChTimestepper::Type::HHT);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mystepper<sp/>=<sp/>std::dynamic_pointer_cast&lt;ChTimestepperHHT&gt;(system-&gt;GetTimestepper());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetAlpha(-0.2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetMaxiters(10);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetAbsTolerances(1e-6);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetMode(ChTimestepperHHT::POSITION);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetScaling(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetVerbose(verbose);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mystepper-&gt;SetModifiedNewton(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstype<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Euler&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>system-&gt;SetTimestepperType(ChTimestepper::Type::EULER_IMPLICIT_LINEARIZED);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstype<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Trapezoidal&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>system-&gt;SetTimestepperType(ChTimestepper::Type::TRAPEZOIDAL);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classcpp_system_1a6824ccb57e182a58dee057dbaff0fa8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1a6824ccb57e182a58dee057dbaff0fa8a" kindref="member">cppSystem::step</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>proteus_dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_substeps=1)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt2<sp/>=<sp/>proteus_dt/(double)n_substeps;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_substeps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>system-&gt;DoStepDynamics(dt2);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classcpp_system_1a592f836398e6fd10c473809e1033ee38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1a592f836398e6fd10c473809e1033ee38" kindref="member">cppSystem::addMesh</ref>(std::shared_ptr&lt;ChMesh&gt;<sp/>mesh)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>system-&gt;Add(mesh);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classcpp_rigid_body_1abec9e4306993bc6716eae85cb06862b2" refkind="member"><highlight class="normal"><ref refid="classcpp_rigid_body_1abec9e4306993bc6716eae85cb06862b2" kindref="member">cppRigidBody::cppRigidBody</ref>(<ref refid="classcpp_system" kindref="compound">cppSystem</ref>*<sp/>system):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>system(system)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref><sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>body<sp/>to<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>system-&gt;system-&gt;AddBody(body);<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>now<sp/>added<sp/>externally<sp/>in<sp/>cython</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>basic<sp/>attributes<sp/>of<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a9b041171d3560abc6909372d2c60e10d" kindref="member">rotm</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetA();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a0ae80b4489191f508cf11522d2552146" kindref="member">rotm_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetA();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;SetMass(<ref refid="classcpp_rigid_body_1a08ceb9ad768a47644407c50e54788f61" kindref="member">mass</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref><sp/>=<sp/>ChVector&lt;&gt;(1.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref><sp/>=<sp/>ChVector&lt;&gt;(1.,<sp/>1.,<sp/>1.);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aefd86b8ba8a74db0f3c220fbb1c6c6eb" kindref="member">lock_motion_t_max</ref><sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ad5e5b33021dd0e79b5060e85ccdb35c6" kindref="member">has_trimesh</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classcpp_system_1aa7405571b41d06c9cb4c705a92cbc099" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1aa7405571b41d06c9cb4c705a92cbc099" kindref="member">cppSystem::setDirectory</ref>(std::string<sp/>dir)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_system_1a78ac9c650ab36dba6c1a68d89e32b41c" kindref="member">directory</ref><sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="classcpp_rigid_body_1a8fab301b680ec2c0dcc34f1bf272ef92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a8fab301b680ec2c0dcc34f1bf272ef92" kindref="member">cppRigidBody::updateTriangleMeshVisualisationPos</ref>()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotm<sp/>=<sp/>body-&gt;GetA();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" kindref="member">trimesh_pos</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;double&gt;<sp/>local<sp/>=<sp/>ChTransform&lt;double&gt;::TransformParentToLocal(<ref refid="classcpp_rigid_body_1a2842108eddb95d34795227a2ed59519d" kindref="member">trimesh_pos0</ref>[i],</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a1856ccbb4d93f07df8fec295483d7b72" kindref="member">pos0_trimesh</ref>,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a3a886b70b800d878d6b935b4f3c904ac" kindref="member">rotq0_trimesh</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>ChVector&lt;double&gt;<sp/>xNew<sp/><sp/>=<sp/>ChTransform&lt;double&gt;::TransformLocalToParent(local,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" kindref="member">trimesh_pos</ref>[i].Set(xNew.x(),<sp/>xNew.y(),<sp/>xNew.z());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="classcpp_rigid_body_1adf6c29d168ade6fba62db5c78b9c132b" refkind="member"><highlight class="normal">ChVector&lt;double&gt;<sp/><ref refid="classcpp_rigid_body_1adf6c29d168ade6fba62db5c78b9c132b" kindref="member">cppRigidBody::hxyz</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotm<sp/>=<sp/>body-&gt;GetA();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>xx<sp/>=<sp/>ChVector&lt;double&gt;(x[0],<sp/>x[1],<sp/>x[2]);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>local<sp/>=<sp/>ChTransform&lt;double&gt;::TransformParentToLocal(xx,<sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>,<sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>xNew<sp/><sp/>=<sp/>ChTransform&lt;double&gt;::TransformLocalToParent(local,<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>,<sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNew<sp/>-<sp/>xx;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classcpp_system_1aa2f3e35c0d0dfbbcf501c61ca54029c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_system_1aa2f3e35c0d0dfbbcf501c61ca54029c0" kindref="member">cppSystem::setCollisionEnvelopeMargin</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>envelope,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>collision::ChCollisionModel::SetDefaultSuggestedEnvelope(envelope);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>collision::ChCollisionModel::SetDefaultSuggestedMargin(margin);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classcpp_rigid_body_1a2017406e34e55e3145c0fa864e07391d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a2017406e34e55e3145c0fa864e07391d" kindref="member">cppRigidBody::hx</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotm<sp/>=<sp/>body-&gt;GetA();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>local<sp/>=<sp/>ChTransform&lt;double&gt;::TransformParentToLocal(ChVector&lt;double&gt;(x[0],x[1],x[2]),<sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>,<sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>xNew<sp/><sp/>=<sp/>ChTransform&lt;double&gt;::TransformLocalToParent(local,<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>,<sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNew.x()<sp/>-<sp/>x[0];</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classcpp_rigid_body_1ab2ad84ac36212ad053d5f27c969965a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1ab2ad84ac36212ad053d5f27c969965a8" kindref="member">cppRigidBody::hy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotm<sp/>=<sp/>body-&gt;GetA();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>local<sp/>=<sp/>ChTransform&lt;double&gt;::TransformParentToLocal(ChVector&lt;double&gt;(x[0],x[1],x[2]),<sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>,<sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>xNew<sp/><sp/>=<sp/>ChTransform&lt;double&gt;::TransformLocalToParent(local,<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>,<sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNew.y()<sp/>-<sp/>x[1];</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classcpp_rigid_body_1ade1a06d7bb41f0fe8bdd426509a548b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1ade1a06d7bb41f0fe8bdd426509a548b5" kindref="member">cppRigidBody::hz</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>rotm<sp/>=<sp/>body-&gt;GetA();<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>local<sp/>=<sp/>ChTransform&lt;double&gt;::TransformParentToLocal(ChVector&lt;double&gt;(x[0],x[1],x[2]),<sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>,<sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>ChVector&lt;double&gt;<sp/>xNew<sp/>=<sp/>ChTransform&lt;double&gt;::TransformLocalToParent(local,<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>,<sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNew.z()<sp/>-<sp/>x[2];</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classcpp_rigid_body_1a833d8e7621989a514652dcfbf8963005" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a833d8e7621989a514652dcfbf8963005" kindref="member">cppRigidBody::calculate_init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a837566013260aa3baca48687c8189d6a" kindref="member">pos0</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a045646f672d53476810e741a0a57f34e" kindref="member">rotq0</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetRot();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1ad5e5b33021dd0e79b5060e85ccdb35c6" kindref="member">has_trimesh</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" kindref="member">trimesh_pos</ref>.clear();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a2842108eddb95d34795227a2ed59519d" kindref="member">trimesh_pos0</ref>.clear();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trimesh_coords<sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsVertices();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trimesh_coords.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a2842108eddb95d34795227a2ed59519d" kindref="member">trimesh_pos0</ref>.push_back(ChVector&lt;double&gt;(trimesh_coords[i].x(),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimesh_coords[i].y(),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimesh_coords[i].<ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>()));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a3dfe113b36160edecb2476625d96e0c1" kindref="member">trimesh_pos</ref>.push_back(ChVector&lt;double&gt;(trimesh_coords[i].x(),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimesh_coords[i].y(),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trimesh_coords[i].<ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>()));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="classcpp_rigid_body_1a2cb5af2199b290dcd33ccd80a1f4eb9f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a2cb5af2199b290dcd33ccd80a1f4eb9f" kindref="member">cppRigidBody::prestep</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>force,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>torque)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>step<sp/>to<sp/>call<sp/>before<sp/>running<sp/>chrono<sp/>system<sp/>step<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aa591ef008a770fe481ab9c2a469ef48e" kindref="member">vel_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos_dt();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1ad5e5b33021dd0e79b5060e85ccdb35c6" kindref="member">has_trimesh</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a7dac61a7dfb570c4de279a14de7be178" kindref="member">trimesh_pos_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsVertices();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a53a302b730a63aab8be843d617c611e9" kindref="member">acc_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos_dtdt();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a0ae80b4489191f508cf11522d2552146" kindref="member">rotm_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetA();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a8fb42075d9492e6464b559844930fec0" kindref="member">rotq_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetRot();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a8001c2fde7a7dd40a01cbabdd99db045" kindref="member">angacc_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetWacc_loc();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1afd21586e46bc23bf7358d0d334f4a1da" kindref="member">angvel_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetWvel_loc();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a5be8d10002c675676e2134d613f8da57" kindref="member">F_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Get_Xforce();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a8e4f2abc5a5ed0483580ac5ef0d92105" kindref="member">M_last</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Get_Xtorque();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>external<sp/>forces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Empty_forces_accumulators();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>opposite<sp/>force<sp/>of<sp/>gravity<sp/>if<sp/>free_x<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forceG[3]={0.,0.,0.};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.x()<sp/>==<sp/>0)<sp/>{forceG[0]<sp/>=<sp/>-<ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Get_G_acc().x()*<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetMass();}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.y()<sp/>==<sp/>0)<sp/>{forceG[1]<sp/>=<sp/>-<ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Get_G_acc().y()*<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetMass();}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.z()<sp/>==<sp/>0)<sp/>{forceG[2]<sp/>=<sp/>-<ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Get_G_acc().z()*<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetMass();}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Accumulate_force(ChVector&lt;double&gt;(forceG[0]+force[0]*<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.x(),</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceG[1]+force[1]*<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.y(),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forceG[2]+force[2]*<ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref>.z()),</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a09af5bee58f2f705d057c8ce5c849cce" kindref="member">pos_last</ref>,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Accumulate_torque(ChVector&lt;double&gt;(torque[0]*<ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref>.x(),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque[1]*<ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref>.y(),</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torque[2]*<ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref>.z()),</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>!=0)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spring_length<sp/>=<sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Get_SpringLength();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spring_length<sp/>&lt;<sp/><ref refid="classcpp_rigid_body_1aaceb4aec58cb42db0365c07b3a1c845b" kindref="member">mooring_restlength</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;SetDisabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight><highlight class="comment">//Set_SpringRestLength(spring_length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;SetDisabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight><highlight class="comment">//Set_SpringRestLength(mooring_restlength);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="classcpp_rigid_body_1a88b005aa95f66094a69afa07f9414807" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a88b005aa95f66094a69afa07f9414807" kindref="member">cppRigidBody::poststep</ref>()</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" kindref="member">vel</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos_dt();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a09e23ca3341c3fc1729739747224f591" kindref="member">acc</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos_dtdt();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a9b041171d3560abc6909372d2c60e10d" kindref="member">rotm</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetA();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a2a291e85928eef30e0c4745f5770d9ba" kindref="member">rotq</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetRot();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ae19b9f041a1d9344fac15c3f1f2fa9f8" kindref="member">angacc</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetWacc_loc();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a68915b0dc951adba7029fd4b6ce17a7a" kindref="member">angvel</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetWvel_loc();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a2605ffb5b01b3bbc84dcaaf817ab1423" kindref="member">F</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Get_Xforce();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aaff464665e862e49c350a018fa36a5d6" kindref="member">M</ref><sp/>=<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;Get_Xtorque();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcpp_rigid_body_1aefd86b8ba8a74db0f3c220fbb1c6c6eb" kindref="member">lock_motion_t_max</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;GetChTime();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lock_motion_t_max<sp/>&lt;<sp/>t<sp/>&amp;&amp;<sp/>lock_motion-&gt;IsDisabled()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetDisabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classcpp_rigid_body_1a68b8614f1ebb21b7b938a6f2508e00af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a68b8614f1ebb21b7b938a6f2508e00af" kindref="member">cppRigidBody::setPrescribedMotionCustom</ref>(std::vector&lt;double&gt;<sp/>t,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>x,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>y,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ang,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ang2,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ang3,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t_max)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fixed_body<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetPos(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(fixed_body);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref><sp/>=<sp/>std::make_shared&lt;ChLinkLockLock&gt;();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aefd86b8ba8a74db0f3c220fbb1c6c6eb" kindref="member">lock_motion_t_max</ref><sp/>=<sp/>t_max;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;Initialize(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,<sp/>fixed_body,<sp/>fixed_body-&gt;GetCoord());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(<ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/>x[i]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_X(forced_ptr);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>y.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/>y[i]);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_Y(forced_ptr);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/><ref refid="_headers_8h_1a9d199fcfc162b9ad09d4c9426e713a74" kindref="member">z</ref>[i]);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_Z(forced_ptr);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ang.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ang.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/>ang[i]);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_ang(forced_ptr);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ang2.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ang2.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/>ang2[i]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_ang2(forced_ptr);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ang3.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Recorder&gt;();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ang3.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forced_motion-&gt;AddPoint(t[i],<sp/>ang3[i]);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1a53b30c5ea8ba54de74ec387f990cd562" kindref="member">lock_motion</ref>-&gt;SetMotion_ang3(forced_ptr);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="classcpp_rigid_body_1a6a3dd7200c1544fd53ac9fe452739009" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a6a3dd7200c1544fd53ac9fe452739009" kindref="member">cppRigidBody::setPrescribedMotionPoly</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeff1)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fixed_body<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetPos(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(fixed_body);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lock<sp/>=<sp/>std::make_shared&lt;ChLinkLockLock&gt;();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>lock-&gt;Initialize(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,<sp/>fixed_body,<sp/>fixed_body-&gt;GetCoord());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(lock);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Poly&gt;();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>forced_motion-&gt;Set_order(1);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>forced_motion-&gt;Set_coeff(coeff1,<sp/>1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>lock-&gt;SetMotion_X(forced_ptr);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classcpp_rigid_body_1ad21d1121e0427203d80cded65faf7c1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1ad21d1121e0427203d80cded65faf7c1d" kindref="member">cppRigidBody::setPrescribedMotionSine</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fixed_body<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetPos(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>fixed_body-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(fixed_body);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lock<sp/>=<sp/>std::make_shared&lt;ChLinkLockLock&gt;();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>lock-&gt;Initialize(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,<sp/>fixed_body,<sp/>fixed_body-&gt;GetCoord());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;Add(lock);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forced_motion<sp/>=<sp/>std::make_shared&lt;ChFunction_Sine&gt;();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>forced_motion-&gt;Set_amp(a);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>forced_motion-&gt;Set_freq(<ref refid="_headers_8h_1a760cfab91ff5a05317014c341a24853f" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChFunction&gt;<sp/>forced_ptr<sp/>=<sp/>forced_motion;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>lock-&gt;SetMotion_X(forced_ptr);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classcpp_rigid_body_1a560c27f7f0833f224edb43c5cf8168ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a560c27f7f0833f224edb43c5cf8168ca" kindref="member">cppRigidBody::setConstraints</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>free_x_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>free_r_in){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1ab991aaf16be72c26d0cdf66c38092154" kindref="member">free_x</ref><sp/>=<sp/>ChVector&lt;&gt;(free_x_in[0],<sp/>free_x_in[1],<sp/>free_x_in[2]);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a5f7fa6b8e7b271419dee09edffc2f23f" kindref="member">free_r</ref><sp/>=<sp/>ChVector&lt;&gt;(free_r_in[0],<sp/>free_r_in[1],<sp/>free_r_in[2]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="classcpp_rigid_body_1a4155f2db09a74603833c94c2c9b3c594" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a4155f2db09a74603833c94c2c9b3c594" kindref="member">cppRigidBody::addSpring</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damping,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>fairlead,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>anchor,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rest_length)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aaceb4aec58cb42db0365c07b3a1c845b" kindref="member">mooring_restlength</ref><sp/>=<sp/>rest_length;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref><sp/>=<sp/>std::make_shared&lt;ChLinkSpring&gt;();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/>anchor_body<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>anchor_body-&gt;SetPos(ChVector&lt;&gt;(anchor[0],<sp/>anchor[1],<sp/>anchor[2]));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>anchor_body-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddBody(anchor_body);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Initialize(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anchor_body,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>true<sp/>for<sp/>pos<sp/>relative<sp/>to<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVector&lt;&gt;(fairlead[0],<sp/>fairlead[1],<sp/>fairlead[2]),</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVector&lt;&gt;(0.,0.,0.),</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>for<sp/>auto<sp/>rest<sp/>length<sp/>(distance<sp/>between<sp/>body1<sp/>and<sp/>body2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest_length);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Set_SpringK(stiffness);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Set_SpringR(damping);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(<ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="classcpp_rigid_body_1aaf82bbfc1a4cb766b74fb25f5b3d27e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1aaf82bbfc1a4cb766b74fb25f5b3d27e0" kindref="member">cppRigidBody::addPrismaticLinkX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris1)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mybod2<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetName(</highlight><highlight class="stringliteral">&quot;PRIS1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetPos(ChVector&lt;&gt;(pris1[0],<sp/>pris1[1],<sp/>pris1[2]));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetMass(0.00001);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddBody(mybod2);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mylink1<sp/>=<sp/>std::make_shared&lt;ChLinkLockPrismatic&gt;();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mycoordsys1<sp/>=<sp/>ChCoordsys&lt;&gt;(mybod2-&gt;GetPos(),Q_from_AngAxis(CH_C_PI/2.,<sp/>VECT_Y));</highlight><highlight class="comment">//Q_from_AngAxis(CH_C_PI<sp/>/<sp/>2,<sp/>VECT_X));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>mylink1-&gt;Initialize(mybod2,<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,<sp/>mycoordsys1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(mylink1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="classcpp_rigid_body_1a85295e629e1abf16f3b91e64a4d698de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a85295e629e1abf16f3b91e64a4d698de" kindref="member">cppRigidBody::addPrismaticLinksWithSpring</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris1,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>pris2,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damping,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rest_length)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1aaceb4aec58cb42db0365c07b3a1c845b" kindref="member">mooring_restlength</ref><sp/>=<sp/>rest_length;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fairlead<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>fairlead-&gt;SetName(</highlight><highlight class="stringliteral">&quot;PRIS3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>fairlead-&gt;SetPos(<ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetPos());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>fairlead-&gt;SetMass(0.00001);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddBody(fairlead);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mybod2<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetName(</highlight><highlight class="stringliteral">&quot;PRIS1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetPos(ChVector&lt;&gt;(pris1[0],<sp/>pris1[1],<sp/>pris1[2]));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>mybod2-&gt;SetMass(0.00001);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mybod2-&gt;AddForce(-system-&gt;system-&gt;Get_G_acc());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mybod2-&gt;SetBodyFixed(true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddBody(mybod2);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mybod3<sp/>=<sp/>std::make_shared&lt;ChBody&gt;();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>mybod3-&gt;SetName(</highlight><highlight class="stringliteral">&quot;PRIS2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>mybod3-&gt;SetPos(ChVector&lt;&gt;(pris2[0],<sp/>pris2[1],<sp/>pris2[2]));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>mybod3-&gt;SetBodyFixed(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddBody(mybod3);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mylink1<sp/>=<sp/>std::make_shared&lt;ChLinkLockPrismatic&gt;();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(mylink1);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mycoordsys1<sp/>=<sp/>ChCoordsys&lt;&gt;(mybod2-&gt;GetPos(),Q_from_AngAxis(CH_C_PI/2.,<sp/>VECT_Y));</highlight><highlight class="comment">//Q_from_AngAxis(CH_C_PI<sp/>/<sp/>2,<sp/>VECT_X));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>mylink1-&gt;Initialize(fairlead,<sp/>mybod2,<sp/>mycoordsys1);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mylink2<sp/>=<sp/>std::make_shared&lt;ChLinkLockPrismatic&gt;();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(mylink2);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mycoordsys2<sp/>=<sp/>ChCoordsys&lt;&gt;(mybod3-&gt;GetPos(),Q_from_AngAxis(CH_C_PI/2.,<sp/>VECT_X));</highlight><highlight class="comment">//Q_from_AngAxis(CH_C_PI<sp/>/<sp/>2,<sp/>VECT_X));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>mylink2-&gt;Initialize(mybod2,<sp/>mybod3,mycoordsys2);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mylink3<sp/>=<sp/>std::make_shared&lt;ChLinkLockSpherical&gt;();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//auto<sp/>mylink3<sp/>=<sp/>std::make_shared&lt;ChLinkLockRevolute&gt;();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mylink3-&gt;SetMotion_axis(ChVector&lt;&gt;(0.,1.,0.));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(mylink3);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>mylink3-&gt;Initialize(fairlead,<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>fairlead-&gt;GetCoord(),<sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;GetCoord());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref><sp/>=<sp/>std::make_shared&lt;ChLinkSpring&gt;();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Initialize(fairlead,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mybod2,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>true<sp/>for<sp/>pos<sp/>relative<sp/>to<sp/>bodies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVector&lt;&gt;(0.,0.,0.),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChVector&lt;&gt;(0.,0.,0.),</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest_length);<sp/><sp/></highlight><highlight class="comment">//<sp/>true<sp/>for<sp/>auto<sp/>rest<sp/>length<sp/>(distance<sp/>between<sp/>body1<sp/>and<sp/>body2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Set_SpringK(stiffness);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;Set_SpringR(damping);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>-&gt;SetName(</highlight><highlight class="stringliteral">&quot;SPRING1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a922bde7607ffdee427472aec08853022" kindref="member">system</ref>-&gt;<ref refid="classcpp_system_1a2875b3a46eca8b1b913845cc3b4b90ab" kindref="member">system</ref>-&gt;AddLink(<ref refid="classcpp_rigid_body_1a4b8a2695619c380aa594d0f4fb5279e3" kindref="member">spring</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="classcpp_rigid_body_1a5d3b1aea1bedc5ca21acd92b0f68dd0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a5d3b1aea1bedc5ca21acd92b0f68dd0e" kindref="member">cppRigidBody::setName</ref>(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classcpp_rigid_body_1a24ee83f5f5f119571fb74ed889b84b9f" kindref="member">body</ref>-&gt;SetNameString(name);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classcpp_rigid_body_1a35633e3ad5f0cad6910852dd3392dc3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a35633e3ad5f0cad6910852dd3392dc3b" kindref="member">cppRigidBody::getTriangleMeshSDF</ref>(ChVector&lt;&gt;<sp/><ref refid="test_f_m_mand_f_s_w_8cpp_1af2d8f5c7beb781a847dc0f33fbdca44b" kindref="member">pos</ref>,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dist_n)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xxs<sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsVertices();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nns<sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsNormals();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>dist_vec;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist=1e10;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xxs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>dist_vec<sp/>=<sp/><ref refid="classcpp_rigid_body_1ac2be55a640018981488e42bc645c70aa" kindref="member">pos</ref>-xxs[i];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist_vec.Length();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_vec.Dot(nns[i])<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>outside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>min_dist;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>-min_dist;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>dist_n[0]<sp/>=<sp/>min_dist;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>to<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actually<sp/>just<sp/>vector<sp/>to<sp/>closest<sp/>node<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>dist_n[1]<sp/>=<sp/>dist_vec[0];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>dist_n[1]<sp/>=<sp/>dist_vec[1];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>dist_n[2]<sp/>=<sp/>dist_vec[2];</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classcpp_rigid_body_1a60b18da0ecae4b50b542aab4eeb52911" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body_1a60b18da0ecae4b50b542aab4eeb52911" kindref="member">cppRigidBody::getTriangleMeshVel</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="group__analytical_solutions_1gac0d5ac1b71bf68c8383846ab25b5b2fa" kindref="member">vel</ref>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xxs<sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsVertices();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nns<sp/>=<sp/><ref refid="classcpp_rigid_body_1aa2387f035ce58dfd08a8a230fd8b53ad" kindref="member">trimesh</ref>-&gt;getCoordsNormals();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dist<sp/>=<sp/>1e10;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>p(x[0],<sp/>x[1],<sp/>x[2]);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>d_vector(0.0);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>ChVector&lt;&gt;<sp/>ddlast;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>closest<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_closest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xxs.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>(p<sp/>-<sp/>xxs[i]).Length();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist<sp/>&lt;<sp/>min_dist)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min_dist<sp/>=<sp/>dist;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_closest<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_closest<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>ddlast<sp/>=<sp/>xxs[node_closest]-<ref refid="classcpp_rigid_body_1a7dac61a7dfb570c4de279a14de7be178" kindref="member">trimesh_pos_last</ref>[node_closest];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" kindref="member">vel</ref>[0]<sp/>=<sp/>ddlast.x()/dt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" kindref="member">vel</ref>[1]<sp/>=<sp/>ddlast.y()/dt;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcpp_rigid_body_1aedc937a0352a702319bf6c4ef95ff46c" kindref="member">vel</ref>[2]<sp/>=<sp/>ddlast.z()/dt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="_prot_ch_body_8h_1a701a49aa22daf4e99d17bf17d3f97e68" refkind="member"><highlight class="normal"><ref refid="classcpp_system" kindref="compound">cppSystem</ref><sp/>*<sp/><ref refid="_prot_ch_body_8h_1a701a49aa22daf4e99d17bf17d3f97e68" kindref="member">newSystem</ref>()</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classcpp_system" kindref="compound">cppSystem</ref>();</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="_prot_ch_body_8h_1ace9b5d5b9f8cfd123e992ce498f3bb33" refkind="member"><highlight class="normal"><ref refid="classcpp_rigid_body" kindref="compound">cppRigidBody</ref><sp/>*<sp/><ref refid="_prot_ch_body_8h_1ace9b5d5b9f8cfd123e992ce498f3bb33" kindref="member">newRigidBody</ref>(<ref refid="classcpp_system" kindref="compound">cppSystem</ref>*<sp/>system)</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classcpp_rigid_body" kindref="compound">cppRigidBody</ref>(system);</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="_prot_ch_body_8h_1a89a07f4ace8a627aed9066831cdba3c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_prot_ch_body_8h_1a89a07f4ace8a627aed9066831cdba3c0" kindref="member">ChLinkLockBodies</ref>(std::shared_ptr&lt;ChBody&gt;<sp/>body1,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChBody&gt;<sp/>body2,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ChSystem&gt;<sp/>system,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChCoordsys&lt;&gt;<sp/>coordsys,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_X=0.,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_Y=0.,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_Z=0.,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_Rx=0.,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_Ry=0.,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>limit_Rz=0.)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mylink<sp/>=<sp/>std::make_shared&lt;ChLinkLock&gt;();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>system-&gt;AddLink(mylink);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_X<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>chlimit_X.Set_max(limit_X);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_Y<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>chlimit_Y.Set_max(limit_Y);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_Z<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>chlimit_Z.Set_max(limit_Z);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_Rx<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>chlimit_Rx.Set_max(limit_Rx);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_Ry<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>chlimit_Ry.Set_max(limit_Ry);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chlimit_Rz<sp/>=<sp/>ChLinkLimit();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>chlimit_X.Set_active(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>chlimit_Rz.Set_max(limit_Rz);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_X(&amp;chlimit_X);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_Y(&amp;chlimit_Y);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_Z(&amp;chlimit_Z);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_Rx(&amp;chlimit_Rx);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_Ry(&amp;chlimit_Ry);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>mylink-&gt;SetLimit_Rz(&amp;chlimit_Rz);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>mylink-&gt;Initialize(body1,<sp/>body2,<sp/>coordsys);</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="structno__op__delete" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structno__op__delete" kindref="compound">no_op_delete</ref></highlight></codeline>
<codeline lineno="637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="638" refid="structno__op__delete_1ad542d9e186cb5661f8375c544418d2a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structno__op__delete_1ad542d9e186cb5661f8375c544418d2a3" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal">};</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="_prot_ch_body_8h_1a85af6ee0f78f989a1907ec064dc256ae" refkind="member"><highlight class="normal">std::shared_ptr&lt;ChPhysicsItem&gt;<sp/><ref refid="_prot_ch_body_8h_1a85af6ee0f78f989a1907ec064dc256ae" kindref="member">getPhysicsItemSharedPtr</ref>(ChPhysicsItem*<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChPhysicsItem&gt;<sp/>sp(item,<sp/><ref refid="structno__op__delete" kindref="compound">no_op_delete</ref>());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sp;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;ChPhysicsItem*,<sp/>std::shared_ptr&lt;ChPhysicsItem&gt;&gt;<sp/>spans;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="_prot_ch_body_8h_1a7b6f9e5d6bd50022597ff505970b5f15" refkind="member"><highlight class="normal">std::shared_ptr&lt;ChPhysicsItem&gt;<sp/><ref refid="_prot_ch_body_8h_1a7b6f9e5d6bd50022597ff505970b5f15" kindref="member">getPhysicsItemSharedPtr2</ref>(ChPhysicsItem*<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ChPhysicsItem&gt;<sp/>sp<sp/>=<sp/>spans.at(item);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>std::shared_ptr&lt;ChPhysicsItem&gt;<sp/>sp(item,<sp/>no_op_delete());<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sp;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tridelat/PROTEUS/proteus2/proteus/mbd/ProtChBody.h"/>
  </compounddef>
</doxygen>
