#ifndef FEMINTEGRALS_H
#define FEMINTEGRALS_H
extern void updateMass(int nElements_global,
                       int nQuadraturePoints_element,
                       int nDOF_element,
                       double* m,
                       double* w,
                       double* residual);
extern void updateMassJacobian(int nElements_global,
                               int nQuadraturePoints_element,
                               int nDOF_element,
                               double* dm,
                               double* v_x_w,
                               double* jacobian);
extern void updateAdvection(int nElements_global,
                            int nQuadraturePoints_element,
                            int nDOF_element,
                            int nSpace,
                            double* f,
                            double* grad_w,
                            double* residual);
extern void updateAdvectionJacobian(int nElements_global,
                                    int nQuadraturePoints_element,
                                    int nDOF_element,
                                    int nSpace,
                                    double* df,
                                    double* v_x_grad_w,
                                    double* jacobian);
extern void updateHamiltonian(int nElements_global,
                              int nQuadraturePoints_element,
                              int nDOF_element,
                              double* h,
                              double* w,
                              double* residual);
extern void updateHamiltonianJacobian(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nDOF_element,
                                      int nSpace,
                                      double* dh,
                                      double* grad_v_x_w,
                                      double* jacobian);
extern void updateDiffusion(int nElements_global,
                            int nQuadraturePoints_element,
                            int nDOF_element,
                            int nSpace,
                            double* a,
                            double* grad_phi_x_grad_w,
                            double* residual);
extern void updateDiffusionJacobian(int nElements_global,
                                    int nQuadraturePoints_element,
                                    int nDOF_element,
                                    int nSpace,
                                    int* l2g,
                                    double* da,
                                    double* grad_phi_x_grad_w,
                                    double* v,
                                    double* dphi,
                                    double* a,
                                    double* grad_v_x_grad_w,
                                    double* jacobian);
extern void updateReaction(int nElements_global,
                           int nQuadraturePoints_element,
                           int nDOF_element,
                           double* r,
                           double* w,
                           double* residual);
extern void updateReactionJacobian(int nElements_global,
                                   int nQuadraturePoints_element,
                                   int nDOF_element,
                                   double* dr,
                                   double* w,
                                   double* residual);
extern void updateStabilization(int nElements_global,
                                int nQuadraturePoints_element,
                                int nDOF_element,
                                double* tau,
                                double* pdeResidual,
                                double* LstarW,
                                double* residual);
extern void updateStabilizationJacobian(int nElements_global,
                                        int nQuadraturePoints_element,
                                        int nDOF_element,
                                        double* tau,
                                        double* dpdeResidual,
                                        double* LstarW,
                                        double* jacobian);
extern void updateShockCapturing(int nElements_global,
                                 int nQuadraturePoints_element,
                                 int nDOF_element,
                                 int nSpace,
                                 double* numDiff,
                                 double* grad_u_x_grad_w,
                                 double* residual);
extern void updateShockCapturingJacobian(int nElements_global,
                                         int nQuadraturePoints_element,
                                         int nDOF_element,
                                         int nSpace,
                                         double* numDiff,
                                         double* grad_v_x_grad_w,
                                         double* jacobian);
extern void calculateScalarScalarProduct(int nElements_global,
                                         int nQuadraturePoints_element,
                                         double* s1, 
                                         double* s2, 
                                         double* sResult);
extern void calculateVectorScalarProduct(int nElements_global,
                                         int nQuadraturePoints_element,
                                         int nSpace,
                                         double* v, 
                                         double* s, 
                                         double* vResult);
extern void calculateTensorScalarProduct(int nElements_global,
                                         int nQuadraturePoints_element,
                                         int nSpace,
                                         double* t, 
                                         double* s, 
                                         double* tResult);
extern void calculateDiv_f(int nElements_global,
                           int nQuadraturePoints_element,
                           int nDOF_element,
                           int nSpace,
                           double* df,
                           double* grad_u,
                           double* grad_v,
                           double* div_f,
                           double* ddiv_f);
void calculateDiv_a(int nElements_global,
                    int nQuadraturePoints_element,
                    int nDOF_element,
                    int nSpace,
                    int* l2g,
                    double* da,
                    double* dphi,
                    double* grad_phi,
                    double* grad_u,
                    double* grad_v,
                    double* div_a,
                    double* ddiv_a);
void calculateAdjointADR(int nElements_global,
                         int nQuadraturePoints_element,
                         int nDOF_element,
                         int nSpace,
                         double* w,
                         double* grad_w,
                         double* df,
                         double* da,
                         double* grad_phi,
                         double* dr,
                         double* LstarW);
extern void calculatePDEResidualADR(int nElements_global,
                                    int nQuadraturePoints_element,
                                    double* div_f,
                                    double* div_a,
                                    double* r,
                                    double* mt,
                                    double* pdeResidual);
extern void calculatePDEResidualJacobianADR(int nElements_global,
                                            int nQuadraturePoints_element,
                                            int nDOF_element,
                                            double* ddiv_f,
                                            double* ddiv_a,
                                            double* dr,
                                            double* dmt,
                                            double* v,
                                            double* dpdeResidual);
extern void calculateStabilizationADR(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nSpace,
                                      char stabilization,
                                      double* elementDiameter,
                                      double* df,
                                      double* a,
                                      double* da,
                                      double* grad_phi,
                                      double* dphi,
                                      double* dr,
                                      double* dmt,
                                      double* pe,
                                      double* cfl,
                                      double* tau);
extern void calculateStabilizationADR_2(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nSpace,
                                      double* elementDiameter,
                                      double* df,
                                      double* a,
                                      double* da,
                                      double* grad_phi,
                                      double* dphi,
                                      double* dr,
                                      double* dmt,
                                      double* pe,
                                      double* cfl,
                                      double* tau);
extern void calculateStabilizationADR_1(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nSpace,
                                      double* elementDiameter,
                                      double* df,
                                      double* a,
                                      double* da,
                                      double* grad_phi,
                                      double* dphi,
                                      double* dr,
                                      double* dmt,
                                      double* pe,
                                      double* cfl,
                                      double* tau);
extern void calculateStabilizationADR_p(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nSpace,
                                      double* elementDiameter,
                                      double* df,
                                      double* a,
                                      double* da,
                                      double* grad_phi,
                                      double* dphi,
                                      double* dr,
                                      double* dmt,
                                      double* pe,
                                      double* cfl,
                                      double* tau);
extern void calculateDimensionlessNumbersADR(int nElements_global,
                                             int nQuadraturePoints_element,
                                             int nSpace,
                                             double* elementDiameter,
                                             double* df,
                                             double* a,
                                             double* dphi,
                                             double* dr,
                                             double* dmt,
                                             double* pe,
                                             double* cfl);
extern void calculateShockCapturingADR(int nElements_global,
                                       int nQuadraturePoints_element,
                                       int nSpace,
                                       char shockCapturing,
                                       double shockCapturingDiffusion,
                                       double* elementDiameter,
                                       double* pdeResidual,
                                       double* mt,
                                       double* grad_u,
                                       double* numDiff);
extern void calculateStabilizationHJ(int nElements_global,
                                     int nQuadraturePoints_element,
                                     int nSpace,
                                     char stabilization,
                                     double* elementDiameter,
                                     double* dh,
                                     double* dmt,
                                     double* cfl,
                                     double* tau);
extern void calculateAdjointHJ(int nElements_global,
                               int nQuadraturePoints_element,
                               int nDOF_element,
                               int nSpace,
                               double* w,
                               double* grad_w,
                               double* dh,
                               double* rh,
                               double* LstarW);
extern void calculatePDEResidualHJ(int nElements_global,
                                   int nQuadraturePoints_element,
                                   int nSpace,
                                   double* dh,
                                   double* grad_u,
                                   double* rh,
                                   double* mt,
                                   double* pdeResidual);
extern void calculatePDEResidualJacobianHJ(int nElements_global,
                                           int nQuadraturePoints_element,
                                           int nDOF_element,
                                           int nSpace,
                                           double* dh,
                                           double* grad_v,
                                           double* dmt,
                                           double* v,
                                           double* dpdeResidual);
extern void calculateShockCapturingHJ(int nElements_global,
                                      int nQuadraturePoints_element,
                                      int nSpace,
                                      char shockCapturing,
                                      double shockCapturingDiffusion,
                                      double* elementDiameter,
                                      double* pdeResidual,
                                      double* mt,
                                      double* dh,
                                      double* numDiff);
extern void calculateShape_x_Shape(int nElements_global,
                                   int nQuadraturePoints_element,
                                   int nDOF_element,
                                   double* v,
                                   double* w,
                                   double* v_x_w);
extern void calculateShape_x_GradShape(int nElements_global,
                                       int nQuadraturePoints_element,
                                       int nDOF_element,
                                       int nSpace,
                                       double* v,
                                       double* grad_w,
                                       double* v_x_grad_w);
extern void calculateGradShape_x_Shape(int nElements_global,
                                       int nQuadraturePoints_element,
                                       int nDOF_element,
                                       int nSpace,
                                       double* grad_v,
                                       double* w,
                                       double* grad_v_x_w);

extern void calculateGradShape_x_GradShape(int nElements_global,
                                           int nQuadraturePoints_element,
                                           int nDOF_element,
                                           int nSpace,
                                           double* grad_v,
                                           double* grad_w,
                                           double* grad_v_x_grad_w);

extern void calculateIntegrationWeights(int nElements_global,
                                        int nQuadraturePoints_element,
                                        double* abs_det_J,
                                        double* referenceWeights,
                                        double* weights);
extern void calculateFiniteElementFunctionValues(int nElements_global,
                                                 int nQuadraturePoints_element,
                                                 int nDOF_element,
                                                 int  nComponents,
                                                 int* l2g,
                                                 double* dof,
                                                 double* v,
                                                 double* u);
extern void calculateFiniteElementFunctionGradientValues(int nElements_global,
                                                         int nQuadraturePoints_element,
                                                         int nDOF_element,
                                                         int nComponents,
                                                         int nSpace,
                                                         int* l2g,
                                                         double* dof,
                                                         double* grad_v,
                                                         double* grad_u);
extern void calculateFiniteElementFunctionValuesTrace(int nElements_global,
                                                      int nElementBoundaries_element,
                                                      int nQuadraturePoints_elementBoundary,
                                                      int nDOF_element,
                                                      int nComponents,
                                                      int* l2g,
                                                      double* dof,
                                                      double* v,
                                                      double* u);
extern void calculateFiniteElementFunctionGradientValuesTrace(int nElements_global,
                                                              int nElementBoundaries_element,
                                                              int nQuadraturePoints_elementBoundary,
                                                              int nDOF_element,
                                                              int nComponents,
                                                              int nSpace,
                                                              int* l2g,
                                                              double* dof,
                                                              double* v,
                                                              double* u);
extern void calculateFiniteElementFunctionGradientTensorValues(int nElements_global,
                                                               int nQuadraturePoints_element,
                                                               int nDOF_element,
                                                               int nComponents,
                                                               int nSpace,
                                                               int* l2g,
                                                               double* dof,
                                                               double* grad_v_x_grad_w_q,
                                                               double* grad_u_x_grad_w_q);
extern void updateGlobalResidualFromElementResidual(int nElements_global,
                                                    int nDOF_element,
                                                    int* nFreeDOF_element,
                                                    int* freeLocal,
                                                    int* freeGlobal,
                                                    double* elementResidual,
                                                    double* globalResidual);
extern void updateGlobalJacobianFromElementJacobian_CSR(int nElements_global,
                                                        int nDOF_element,
                                                        int* nFreeDOF_element,
                                                        int* csrRowIndeces,
                                                        int* csrColumnOffSets,
                                                        int* freeLocal,
                                                        double* elementJacobian,
                                                        double* globalJacobian);
extern void updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_CSR(int nInteriorElementBoundaries_global,
                                                                            int nDOF_element,
                                                                            int nQuadraturePoints_elementBoundary,
                                                                            int nElementBoundaries_element,
                                                                            int* interiorElementBoundaries,
                                                                            int* elementBoundaryElements,
                                                                            int* elementBoundaryLocalElementBoundaries,
                                                                            int* nFreeDOF_element,
                                                                            int* freeLocal,
                                                                            int* csrRowIndeces,
                                                                            int* csrColumnOffsets_eb,
                                                                            double* elementBoundaryFluxJacobian,
                                                                            double* w,
                                                                            double* jac);
extern void updateGlobalJacobianFromExteriorElementBoundaryFluxJacobian_CSR(int nExteriorElementBoundaries_global,
                                                                            int nDOF_element,
                                                                            int nQuadraturePoints_elementBoundary,
                                                                            int nElementBoundaries_element,
                                                                            int* exteriorElementBoundaries,
                                                                            int* elementBoundaryElements,
                                                                            int* elementBoundaryLocalElementBoundaries,
                                                                            int* nFreeDOF_element,
                                                                            int* freeLocal,
                                                                            int* csrRowIndeces,
                                                                            int* csrColumnOffsets_eb,
                                                                            double* elementBoundaryFluxJacobian,
                                                                            double* w,
                                                                            double* jac);
extern void updateGlobalJacobianFromElementJacobian_dense(int nElements_global,
                                                          int nDOF_element,
                                                          int nFreeDOF_global,
                                                          int* nFreeDOF_element,
                                                          int* freeLocal,
                                                          int* freeGlobal,
                                                          double* elementJacobian,
                                                          double* globalJacobian);
extern void updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_dense(int nInteriorElementBoundaries_global,
                                                                              int nDOF_element,
                                                                              int nQuadraturePoints_elementBoundary,
                                                                              int nElementBoundaries_element,
                                                                              int nFreeDOF_global,
                                                                              int* interiorElementBoundaries,
                                                                              int* elementBoundaryElements,
                                                                              int* elementBoundaryLocalElementBoundaries,
                                                                              int* nFreeDOF_element,
                                                                              int* freeLocal,
                                                                              int* freeGlobal,
                                                                              double* elementBoundaryFluxJacobian,
                                                                              double* w,
                                                                              double* jac);
extern void updateGlobalJacobianFromExteriorElementBoundaryFluxJacobian_dense(int nExteriorElementBoundaries_global,
                                                                              int nDOF_element,
                                                                              int nQuadraturePoints_elementBoundary,
                                                                              int nElementBoundaries_element,
                                                                              int nFreeDOF_global,
                                                                              int* exteriorElementBoundaries,
                                                                              int* elementBoundaryElements,
                                                                              int* elementBoundaryLocalElementBoundaries,
                                                                              int* nFreeDOF_element,
                                                                              int* freeLocal,
                                                                              int* freeGlobal,
                                                                              double* elementBoundaryFluxJacobian,
                                                                              double* w,
                                                                              double* jac);
extern void calculateFlowVelocity(int nElements_global,
                                  int nQuadraturePoints_element,
                                  int nSpace,
                                  double* f,
                                  double* a,
                                  double* grad_phi,
                                  double* v);
extern void updateAddJacobian_CSR(int jacIndex, double val, double* jac);
extern void zeroJacobian_CSR(int nNonzeros, double* jac);
extern void updateInteriorElementBoundaryFlux(int nInteriorElementBoundaries_global,
                                              int nQuadraturePoints_elementBoundary,
                                              int nElementBoundaries_element,
                                              int nDOF_element,
                                              int* interiorElementBoundaries,
                                              int* elementBoundaryElements,
                                              int* elementBoundaryLocalElementBoundaries,
                                              double* flux,
                                              double* w,
                                              double* residual);
extern void updateExteriorElementBoundaryFlux(int nExteriorElementBoundaries_global,
                                              int nQuadraturePoints_elementBoundary,
                                              int nElementBoundaries_element,
                                              int nDOF_element,
                                              int* exteriorElementBoundaries,
                                              int* elementBoundaryElements,
                                              int* elementBoundaryLocalElementBoundaries,
                                              double* flux,
                                              double* w,
                                              double* residual);
extern void calculateInteriorNumericalAdvectiveFlux(int nInteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nElementBoundaries_element,
                                                    int nSpace,
                                                    int* interiorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    double* n,
                                                    double* f,
                                                    double* df,
                                                    double* dx_f,
                                                    double* flux);
extern void updateInteriorNumericalAdvectiveFluxJacobian(int nInteriorElementBoundaries_global,
                                                         int nQuadraturePoints_elementBoundary,
                                                         int nElementBoundaries_element,
                                                         int nDOF_element,
                                                         int nSpace,
                                                         int* interiorElementBoundaries,
                                                         int* elementBoundaryElements,
                                                         int* elementBoundaryLocalElementBoundaries,
                                                         double* n,
                                                         double* df,
							 double* v,
                                                         double* dx_f,
                                                         double* fluxJacobian);
extern void calculateExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nElementBoundaries_element,
                                                    int nSpace,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* inflowBoudary,
                                                    double* inflowFlux,
                                                    double* n,
                                                    double* f,
                                                    double* df,
                                                    double* dx_f,
                                                    double* flux);
extern void setInflowFlux(int nExteriorElementBoundaries_global,
                          int nQuadraturePoints_elementBoundary,
                          int* exteriorElementBoundaries,
                          double* inflowFlux,
                          double* flux);
extern void updateExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                         int nQuadraturePoints_elementBoundary,
                                                         int nElementBoundaries_element,
                                                         int nDOF_element,
                                                         int nSpace,
                                                         int* exteriorElementBoundaries,
                                                         int* elementBoundaryElements,
                                                         int* elementBoundaryLocalElementBoundaries,
                                                         int* inflowBoundary,
                                                         double* n,
                                                         double* df,
							 double* v,
                                                         double* dx_f,
                                                         double* fluxJacobian);
extern void calculateInteriorNumericalDiffusiveFlux(int nInteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nElementBoundaries_element,
                                                    int nSpace,
                                                    int* interiorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    double* n,
                                                    double* a,
                                                    double* grad_phi,
                                                    double* u,
                                                    double* penalty,
                                                    double* dx_a,
                                                    double* flux);
extern void updateInteriorNumericalDiffusiveFluxJacobian(int nInteriorElementBoundaries_global,
                                                         int nQuadraturePoints_elementBoundary,
                                                         int nElementBoundaries_element,
                                                         int nDOF_element,
                                                         int nSpace,
                                                         int* l2g,
                                                         int* interiorElementBoundaries,
                                                         int* elementBoundaryElements,
                                                         int* elementBoundaryLocalElementBoundaries,
                                                         double* n,
                                                         double* a,
                                                         double* da,
                                                         double* grad_phi,
                                                         double* dphi,
                                                         double* v,
                                                         double* grad_v,
                                                         double* penalty,
                                                         double* dx_a,
                                                         double* fluxJacobian);
extern void calculateExteriorNumericalDiffusiveFlux(int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nElementBoundaries_element,
                                                    int nSpace,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    double* n,
                                                    double* a,
                                                    double* grad_phi,
                                                    double* u,
                                                    double* penalty,
                                                    double* dx_a,
                                                    double* flux);
extern void updateExteriorNumericalDiffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                         int nQuadraturePoints_elementBoundary,
                                                         int nElementBoundaries_element,
                                                         int nDOF_element,
                                                         int nSpace,
                                                         int* l2g,
                                                         int* exteriorElementBoundaries,
                                                         int* elementBoundaryElements,
                                                         int* elementBoundaryLocalElementBoundaries,
                                                         double* n,
                                                         double* a,
                                                         double* da,
                                                         double* grad_phi,
                                                         double* dphi,
                                                         double* v,
                                                         double* grad_v,
                                                         double* penalty,
                                                         double* dx_a,
                                                         double* fluxJacobian);
extern void calculateInteriorElementBoundaryVelocities(int nInteriorElementBoundaries,
						       int nQuadraturePoints_elementBoundary,
						       int nElementBoundaries_element,
						       int nSpace,
						       int* interiorElementBoundaries,
						       int* elementBoundaryElements,
						       int* elementBoundaryLocalElementBoundaries,
						       double* m,
						       double* a,
						       double* grad_phi,
						       double* f,
						       double* vAverage,
						       double* vJump,
						       double* mAverage,
						       double* mJump);
extern void calculateExteriorElementBoundaryVelocities(int nExteriorElementBoundaries,
						       int nQuadraturePoints_elementBoundary,
						       int nElementBoundaries_element,
						       int nSpace,
						       int* exteriorElementBoundaries,
						       int* elementBoundaryElements,
						       int* elementBoundaryLocalElementBoundaries,
						       double* m,
						       double* a,
						       double* grad_phi,
						       double* f,
						       double* vAverage,
						       double* vJump,
						       double* mAverage,
						       double* mJump);
void calculateConservationResidualPWL(int nElements_global,
				      int nInteriorElementBoundaries_global,
				      int nExteriorElementBoundaries_global,
				      int nQuadraturePoints_elementBoundary,
				      int nElementBoundaries_element,
				      int nNodes_element,
				      int nSpace,
				      int* interiorElementBoundaries,
				      int* exteriorElementBoundaries,
				      int* elementBoundaryElements,
				      int* elementBoundaryLocalElementBoundaries,
				      int* elementNodes,
				      int* nodeStarElements,
				      int* nodeStarElementNeighbors,
				      int* nodeStarOffset,
				      int* nElements_node,
				      double* elementResidual,
				      double* vAverage,
				      double* starU,
				      double* w,
				      double* normal,
				      double* dx,
				      double* conservationResidual,
				      double* starR,
				      double* vConservative,
                                      double* vConservative_element);
void calculateConservationJacobianPWL(int nNodes_global,
                                      int nNodes_internal,
                                      int nElements_global,
				      int nInteriorElementBoundaries_global,
				      int nExteriorElementBoundaries_global,
				      int nQuadraturePoints_elementBoundary,
				      int nElementBoundaries_element,
				      int nNodes_element,
				      int nSpace,
				      int* interiorElementBoundaries,
				      int* exteriorElementBoundaries,
				      int* elementBoundaryElements,
				      int* elementBoundaryLocalElementBoundaries,
				      int* elementNodes,
				      int* nodeStarElements,
				      int* nodeStarElementNeighbors,
				      int* nodeStarOffset,
				      int* nodeStarJacobianOffset,
                                      int* nElements_node,
                                      int* internalNodes,
				      double* w,
				      double* normal,
				      double* dx,
				      double* starJacobian);
void calculateConservationFluxPWL(int nNodes_global,
                                  int nNodes_internal,
                                  int* nElements_node,
                                  int* nodeStarOffset,
                                  int* nodeStarJacobianOffset,
                                  int* internalNodes,
                                  double* starR,
                                  double* starJ,
                                  double* starU);
#endif
