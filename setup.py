import sys
import setuptools
from distutils import sysconfig
cfg_vars = sysconfig.get_config_vars()
for key, value in cfg_vars.items():
    if type(value) == str:
        cfg_vars[key] = cfg_vars[key].replace("-Wstrict-prototypes", "")
        cfg_vars[key] = cfg_vars[key].replace("-Wall", "-w")

from distutils.core import setup, Extension
from Cython.Build import cythonize

import numpy
from Cython.Build import cythonize
from Cython.Distutils.extension import Extension
from Cython.Distutils import build_ext
## \file setup.py setup.py
#  \brief The python script for building proteus
#
#  Set the DISTUTILS_DEBUG environment variable to print detailed information while setup.py is running.
#

from proteus import config
from proteus.config import *
###to turn on debugging in c++
##\todo Finishing cleaning up setup.py/setup.cfg, config.py...

PROTEUS_PETSC_EXTRA_LINK_ARGS = getattr(config, 'PROTEUS_PETSC_EXTRA_LINK_ARGS', [])
PROTEUS_PETSC_EXTRA_COMPILE_ARGS = getattr(config, 'PROTEUS_PETSC_EXTRA_COMPILE_ARGS', [])
PROTEUS_CHRONO_CXX_FLAGS = getattr(config, 'PROTEUS_CHRONO_CXX_FLAGS', [])

proteus_install_path = os.path.join(sysconfig.get_python_lib(), 'proteus')

# handle non-system installations
for arg in sys.argv:
    if arg.startswith('--root'):
        proteus_install_path = proteus_install_path.partition(sys.prefix + '/')[-1]
        break
    if arg.startswith('--prefix'):
        proteus_install_path = proteus_install_path.partition(sys.prefix + '/')[-1]
        break

def get_xtensor_include():
    return [str(get_pybind_include()),
            str(get_pybind_include(user=True)),
            str(get_numpy_include()),
            os.path.join(sys.prefix, 'include'),
            os.path.join(sys.prefix, 'Library', 'include'),
            'proteus',
            'proteus/xtensor/pybind11/include',
            'proteus/xtensor/xtensor-python/include',
            'proteus/xtensor/xtensor/include',
            'proteus/xtensor/xtl/include']

class get_pybind_include(object):
    """Helper class to determine the pybind11 include path

    The purpose of this class is to postpone importing pybind11
    until it is actually installed, so that the ``get_include()``
    method can be invoked. """

    def __init__(self, user=False):
        self.user = user

    def __str__(self):
        import pybind11
        return pybind11.get_include(self.user)


class get_numpy_include(object):
    """Helper class to determine the numpy include path

    The purpose of this class is to postpone importing numpy
    until it is actually installed, so that the ``get_include()``
    method can be invoked. """

    def __init__(self):
        pass

    def __str__(self):
        import numpy as np
        return np.get_include()

EXTENSIONS_TO_BUILD = [
    Extension("MeshAdaptPUMI.MeshAdaptPUMI",
               sources = ['proteus/MeshAdaptPUMI/MeshAdaptPUMI.pyx', 'proteus/MeshAdaptPUMI/cMeshAdaptPUMI.cpp',
                          'proteus/MeshAdaptPUMI/MeshConverter.cpp', 'proteus/MeshAdaptPUMI/ParallelMeshConverter.cpp',
                          'proteus/MeshAdaptPUMI/MeshFields.cpp', 'proteus/MeshAdaptPUMI/SizeField.cpp',
                          'proteus/MeshAdaptPUMI/DumpMesh.cpp',
                          'proteus/MeshAdaptPUMI/ErrorResidualMethod.cpp','proteus/MeshAdaptPUMI/VMS.cpp','proteus/MeshAdaptPUMI/createAnalyticGeometry.cpp'],
               depends=["proteus/partitioning.h",
                        "proteus/partitioning.cpp",
                        "proteus/cpartitioning.pyx",
                        "proteus/cmeshTools.pxd",
                        "proteus/mesh.h",
                        'proteus/mesh.cpp',
                        'proteus/meshio.cpp'],
               define_macros=[('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H)],
               language='c++',
               include_dirs=[numpy.get_include(),'include',
                             'proteus','proteus/MeshAdaptPUMI']+
               PROTEUS_SCOREC_INCLUDE_DIRS,
               library_dirs=PROTEUS_SCOREC_LIB_DIRS,
               libraries=PROTEUS_SCOREC_LIBS,
               extra_compile_args=PROTEUS_SCOREC_EXTRA_COMPILE_ARGS+PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
               extra_link_args=PROTEUS_SCOREC_EXTRA_LINK_ARGS+PROTEUS_EXTRA_LINK_ARGS),
    Extension(
        'mprans.cPres',
        ['proteus/mprans/Pres.cpp'],
        depends=['proteus/mprans/Pres.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cPresInit',
        ['proteus/mprans/PresInit.cpp'],
        depends=['proteus/mprans/PresInit.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cPresInc',
        ['proteus/mprans/PresInc.cpp'],
        depends=['proteus/mprans/PresInc.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension('mprans.cAddedMass', ['proteus/mprans/AddedMass.cpp'],
              depends=['proteus/mprans/AddedMass.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              include_dirs=get_xtensor_include(),
              extra_compile_args=PROTEUS_OPT+['-std=c++14']),
    Extension('mprans.SedClosure', ['proteus/mprans/SedClosure.cpp'],
              depends=['proteus/mprans/SedClosure.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              include_dirs=get_xtensor_include(),
              extra_compile_args=PROTEUS_OPT+['-std=c++14']),
    Extension('mprans.cVOF3P', ['proteus/mprans/VOF3P.cpp'],
              depends=['proteus/mprans/VOF3P.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              include_dirs=get_xtensor_include(),
              extra_compile_args=PROTEUS_OPT+['-std=c++14']),
    Extension(
        'mprans.cVOS3P',
        ['proteus/mprans/VOS3P.cpp'],
        depends=['proteus/mprans/VOS3P.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension('mprans.cNCLS3P', ['proteus/mprans/NCLS3P.cpp'],
              depends=['proteus/mprans/NCLS3P.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              include_dirs=get_xtensor_include(),
              extra_compile_args=PROTEUS_OPT+['-std=c++14']),
    Extension('mprans.cMCorr3P', ['proteus/mprans/MCorr3P.cpp'],
              depends=['proteus/mprans/MCorr3P.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              include_dirs=get_xtensor_include(),
              extra_compile_args=PROTEUS_OPT+['-std=c++14'],
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS,
              define_macros=[('PROTEUS_LAPACK_H',
                              PROTEUS_LAPACK_H),
                             ('PROTEUS_LAPACK_INTEGER',
                              PROTEUS_LAPACK_INTEGER),
                             ('PROTEUS_BLAS_H',
                              PROTEUS_BLAS_H)],
              library_dirs=[PROTEUS_LAPACK_LIB_DIR,
                            PROTEUS_BLAS_LIB_DIR],
              libraries=['m',PROTEUS_LAPACK_LIB,
                         PROTEUS_BLAS_LIB],
              ),
    Extension(
        'mprans.RANS3PSed',
        ['proteus/mprans/RANS3PSed.cpp'],
        depends=['proteus/mprans/RANS3PSed.h','proteus/mprans/RANS3PSed2D.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'richards.cRichards',
        ['proteus/richards/cRichards.cpp'],
        depends=['proteus/richards/Richards.h','proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        language='c++',
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
    ),
    Extension(
        'elastoplastic.cElastoPlastic',
        ['proteus/elastoplastic/cElastoPlastic.cpp'],
        define_macros=[('PROTEUS_LAPACK_H',
                        PROTEUS_LAPACK_H),
                       ('PROTEUS_LAPACK_INTEGER',
                        PROTEUS_LAPACK_INTEGER),
                       ('PROTEUS_BLAS_H',
                        PROTEUS_BLAS_H)],
        depends=['proteus/elastoplastic/ElastoPlastic.h','proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        language='c++',
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        library_dirs=[PROTEUS_LAPACK_LIB_DIR,
                      PROTEUS_BLAS_LIB_DIR],
        libraries=['m',PROTEUS_LAPACK_LIB,
                   PROTEUS_BLAS_LIB]
    ),
    Extension("mprans.cRANS3PF",['proteus/mprans/cRANS3PF.pyx'],
              depends=['proteus/mprans/RANS3PF.h','proteus/mprans/RANS3PF2D.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
              language='c++',
              extra_compile_args=PROTEUS_OPT+["-std=c++14","-mavx"],
              include_dirs=get_xtensor_include()),
    Extension("Isosurface",['proteus/Isosurface.pyx'],
              language='c',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus'],
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("BoundaryConditions",['proteus/BoundaryConditions.py'],
              language='c++',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus']),
    Extension("mprans.BoundaryConditions",['proteus/mprans/BoundaryConditions.py'],
              language='c++',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus']),
    Extension("mprans.MeshSmoothing",['proteus/mprans/MeshSmoothing.pyx'],
              language='c++',
              include_dirs=[numpy.get_include(),'proteus',PROTEUS_INCLUDE_DIR],
              libraries=['stdc++','m'],
              extra_compile_args=["-std=c++11","-mavx"]),
    Extension("mprans.cMoveMeshMonitor",['proteus/mprans/cMoveMeshMonitor.pyx'],
              language='c++',
              include_dirs=[numpy.get_include(),'proteus',PROTEUS_INCLUDE_DIR],
              libraries=['stdc++','m'],
              extra_compile_args=["-std=c++11","-mavx"]),
    Extension("mbd.CouplingFSI",
              sources=['proteus/mbd/CouplingFSI.pyx',
                       'proteus/mbd/CouplingFSI.pxd',
                       'proteus/mbd/ChVariablesBodyAddedMass.cpp',
                       'proteus/mbd/ChBodyAddedMass.cpp',
                       'proteus/mbd/ChronoHeaders.pxd'],
              depends=['proteus/mbd/ProtChBody.h',
                       'proteus/mbd/ProtChMoorings.h'],
              language='c++',
              include_dirs=[numpy.get_include(),
                            'proteus',
                            PROTEUS_INCLUDE_DIR,
                            PROTEUS_CHRONO_INCLUDE_DIR,
                            PROTEUS_CHRONO_INCLUDE_DIR+'/chrono',
                            PROTEUS_CHRONO_INCLUDE_DIR+'/chrono/collision/bullet',],
              library_dirs=[PROTEUS_CHRONO_LIB_DIR],
              libraries=['ChronoEngine',
                         'stdc++',
                         'm'],
              extra_compile_args=PROTEUS_CHRONO_CXX_FLAGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("WaveTools",['proteus/WaveTools.py'],
              depends=['proteus/WaveTools.h'],
              language='c++',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus']),
    Extension("fenton.Fenton",
              sources=['proteus/fenton/Fenton.pyx',
                       'proteus/fenton/Solve.cpp',
                       'proteus/fenton/Dpythag.cpp',
                       'proteus/fenton/Dsvbksb.cpp',
                       'proteus/fenton/Dsvdcmp.cpp',
                       'proteus/fenton/Inout.cpp',
                       'proteus/fenton/Subroutines.cpp',
                       'proteus/fenton/Util.cpp',],
              language='c++',
              include_dirs=[numpy.get_include(),
                            'proteus',
                            PROTEUS_INCLUDE_DIR,
                            PROTEUS_NCURSES_INCLUDE_DIR,],
              library_dirs=[PROTEUS_NCURSES_LIB_DIR,],
              libraries=['ncurses','stdc++','m'],
              extra_compile_args=["-std=c++11"]),
    Extension(
        'ADR',
        ['proteus/ADR.cpp'],
        depends=['proteus/ADR.h', 'proteus/ModelFactory.h', 'proteus/CompKernel.h'],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'
    ),
    Extension("subsurfaceTransportFunctions",['proteus/subsurfaceTransportFunctions.pyx'],
              include_dirs=[numpy.get_include(),'proteus'],
              extra_compile_args=PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("equivalent_polynomials",['proteus/equivalent_polynomials.pyx'],
              depends=['proteus/equivalent_polynomials.pxd',
                       'proteus/equivalent_polynomials.h',
                       'proteus/equivalent_polynomials_utils.h',
                       'proteus/equivalent_polynomials_coefficients.h'],
              language='c++',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus'],),
    Extension('cfemIntegrals',
              ['proteus/cfemIntegrals.pyx',
               'proteus/femIntegrals.c',
               'proteus/postprocessing.c'],
              depends=['proteus/femIntegrals.h'],
              define_macros=[('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('PROTEUS_LAPACK_H',PROTEUS_LAPACK_H),
                             ('PROTEUS_LAPACK_INTEGER',PROTEUS_LAPACK_INTEGER),
                             ('PROTEUS_BLAS_H',PROTEUS_BLAS_H)],
              include_dirs=[numpy.get_include(),'proteus',
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_LAPACK_INCLUDE_DIR,
                            PROTEUS_BLAS_INCLUDE_DIR],
              library_dirs=[PROTEUS_LAPACK_LIB_DIR,
                            PROTEUS_BLAS_LIB_DIR],
              libraries=['m',PROTEUS_LAPACK_LIB,PROTEUS_BLAS_LIB],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("csparsity",['proteus/csparsity.pyx', 'proteus/sparsity.cpp'],
              depends=['proteus/sparsity.h'],
              language='c++',
              extra_compile_args=PROTEUS_OPT,
              include_dirs=[numpy.get_include(),'proteus'],),
    Extension("cmeshTools",
              ['proteus/cmeshTools.pyx', 'proteus/mesh.cpp', 'proteus/meshio.cpp'],
              language='c++',
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              library_dirs=[PROTEUS_DAETK_LIB_DIR]+PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m',PROTEUS_DAETK_LIB]+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT),
    Extension('ctransportCoefficients',
              ['proteus/ctransportCoefficients.pyx','proteus/transportCoefficients.c'],
              include_dirs=[numpy.get_include(),'proteus'],
              depends=["proteus/transportCoefficients.h"],
              language="c",
              libraries=['m']),
    Extension('csubgridError',
              ['proteus/csubgridError.pyx','proteus/subgridError.c'],
              depends=["proteus/subgridError.h"],
              language="c",
              include_dirs=[numpy.get_include(),'proteus'],
              libraries=['m'],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension('cshockCapturing',
              ['proteus/cshockCapturing.pyx','proteus/shockCapturing.c'],
              depends=["proteus/shockCapturing.h"],
              language="c",
              include_dirs=[numpy.get_include(),'proteus'],
              libraries=['m'],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension('superluWrappers',
              ['proteus/superluWrappers.pyx'],
              define_macros=[('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('PROTEUS_BLAS_H',PROTEUS_BLAS_H)],
              language="c",
              include_dirs=[numpy.get_include(),
                            'proteus',
                            PROTEUS_SUPERLU_INCLUDE_DIR],
              library_dirs=[PROTEUS_SUPERLU_LIB_DIR,
                            PROTEUS_LAPACK_LIB_DIR,
                            PROTEUS_BLAS_LIB_DIR],
              libraries=['m',
                         PROTEUS_SUPERLU_LIB,
                         PROTEUS_LAPACK_LIB,PROTEUS_BLAS_LIB],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("csmoothers",["proteus/csmoothers.pyx", "proteus/smoothers.c"],
              define_macros=[('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('PROTEUS_LAPACK_H',PROTEUS_LAPACK_H),
                             ('PROTEUS_LAPACK_INTEGER',PROTEUS_LAPACK_INTEGER),
                             ('PROTEUS_BLAS_H',PROTEUS_BLAS_H)],
              language="c",
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_LAPACK_INCLUDE_DIR,
                            PROTEUS_BLAS_INCLUDE_DIR,
              ],
              library_dirs=[PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_SUPERLU_LIB_DIR,
                            PROTEUS_LAPACK_LIB_DIR,
                            PROTEUS_BLAS_LIB_DIR],
              libraries=['m',
                         PROTEUS_SUPERLU_LIB,
                         PROTEUS_LAPACK_LIB,
                         PROTEUS_BLAS_LIB],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS),
    Extension("canalyticalSolutions",["proteus/canalyticalSolutions.pyx", "proteus/analyticalSolutions.c"],
              depends=["proteus/analyticalSolutions.h"],
              extra_compile_args=PROTEUS_OPT,
              language="c", include_dirs=[numpy.get_include(), 'proteus']),
    Extension("clapack",
              ["proteus/clapack.pyx"],
              depends=["proteus/proteus_lapack.h","proteus/proteus_blas.h"],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS,
              language="c",
              include_dirs=[numpy.get_include(), 'proteus',
                            PROTEUS_LAPACK_INCLUDE_DIR,
                            PROTEUS_BLAS_INCLUDE_DIR],
              library_dirs=[PROTEUS_LAPACK_LIB_DIR,PROTEUS_BLAS_LIB_DIR],
              libraries=['m',
                         PROTEUS_LAPACK_LIB,
                         PROTEUS_BLAS_LIB]),
    Extension("cpostprocessing",
              ["proteus/cpostprocessing.pyx","proteus/postprocessing.c"],
              depends=["proteus/postprocessing.h","proteus/postprocessing.pxd"],
              define_macros=[('PROTEUS_LAPACK_H',PROTEUS_LAPACK_H),
                             ('PROTEUS_LAPACK_INTEGER',PROTEUS_LAPACK_INTEGER),
                             ('PROTEUS_BLAS_H',PROTEUS_BLAS_H)],
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS,
              language="c",
              include_dirs=[numpy.get_include(), 'proteus',
                            PROTEUS_LAPACK_INCLUDE_DIR,
                            PROTEUS_BLAS_INCLUDE_DIR],
              library_dirs=[PROTEUS_LAPACK_LIB_DIR,PROTEUS_BLAS_LIB_DIR],
              libraries=['m',
                         PROTEUS_LAPACK_LIB,
                         PROTEUS_BLAS_LIB]),
    Extension('cnumericalFlux',
              ['proteus/cnumericalFlux.pyx','proteus/numericalFlux.c'],
              depends=["proteus/numericalFlux.h"],
              extra_compile_args=PROTEUS_OPT,
              language="c", include_dirs=[numpy.get_include(), 'proteus']),
    Extension('ctimeIntegration',
              ['proteus/ctimeIntegration.pyx','proteus/timeIntegration.c'],
              depends=["proteus/timeIntegration.h"],
              extra_compile_args=PROTEUS_OPT,
              language="c", include_dirs=[numpy.get_include(), 'proteus']),
    Extension("cTwophaseDarcyCoefficients",
              ["proteus/cTwophaseDarcyCoefficients.pyx",
               "proteus/SubsurfaceTransportCoefficients.cpp"],
              depends=["proteus/SubsurfaceTransportCoefficients.h",
                       "proteus/pskRelations.h",
                       "proteus/pskRelations.pxd",
                       "proteus/densityRelations.h",
                       "proteus/twophaseDarcyCoefficients.pxd",
                       "proteus/twophaseDarcyCoefficients.h"],
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              language="c++",
              library_dirs=PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m']+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
    ),
    Extension("cSubsurfaceTransportCoefficients",
              ["proteus/cSubsurfaceTransportCoefficients.pyx","proteus/SubsurfaceTransportCoefficients.cpp"],
              depends=["proteus/SubsurfaceTransportCoefficients.pxd",
                       "proteus/SubsurfaceTransportCoefficients.h"],
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              language="c++",
              library_dirs=PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m']+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
    ),
    Extension("cpskRelations",["proteus/cpskRelations.pyx"],
              depends=["proteus/pskRelations.pxd",
                       "proteus/pskRelations.h"],
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              language="c++",
              library_dirs=PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m']+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
    ),
    Extension("cpartitioning",["proteus/cpartitioning.pyx",
                               "proteus/partitioning.cpp",
                               'proteus/mesh.cpp',
                               'proteus/meshio.cpp',],
              depends=["proteus/partitioning.h",
                       "proteus/partitioning.cpp",
                       "proteus/cpartitioning.pyx",
                       "proteus/cmeshTools.pxd",
                       "proteus/mesh.h",
                       'proteus/mesh.cpp',
                       'proteus/meshio.cpp'],
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              language="c++",
              library_dirs=PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m']+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
    ),
    Extension("flcbdfWrappers",["proteus/flcbdfWrappers.pyx"],
              language="c++",
              depends=["proteus/flcbdfWrappers.pxd"],
              define_macros=[('PROTEUS_TRIANGLE_H',PROTEUS_TRIANGLE_H),
                             ('PROTEUS_SUPERLU_H',PROTEUS_SUPERLU_H),
                             ('CMRVEC_BOUNDS_CHECK',1),
                             ('MV_VECTOR_BOUNDS_CHECK',1),
                             ('PETSCVEC_BOUNDS_CHECK',1),
                             ('F77_POST_UNDERSCORE',1),
                             ('USE_BLAS',1)],
              include_dirs=['proteus',
                            numpy.get_include(),
                            PROTEUS_SUPERLU_INCLUDE_DIR,
                            PROTEUS_TRIANGLE_INCLUDE_DIR,
                            PROTEUS_DAETK_INCLUDE_DIR,
                            PROTEUS_HDF5_INCLUDE_DIR] + \
              PROTEUS_PETSC_INCLUDE_DIRS + \
              PROTEUS_MPI_INCLUDE_DIRS,
              library_dirs=[PROTEUS_DAETK_LIB_DIR]+PROTEUS_PETSC_LIB_DIRS+PROTEUS_MPI_LIB_DIRS+PROTEUS_HDF5_LIB_DIRS,
              libraries=['hdf5','stdc++','m',PROTEUS_DAETK_LIB]+PROTEUS_PETSC_LIBS+PROTEUS_MPI_LIBS+PROTEUS_HDF5_LIBS,
              extra_link_args=PROTEUS_EXTRA_LINK_ARGS + PROTEUS_PETSC_EXTRA_LINK_ARGS,
              extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS + PROTEUS_PETSC_EXTRA_COMPILE_ARGS+PROTEUS_OPT,
    ),
    Extension(
        'mprans.cCLSVOF',
        ['proteus/mprans/CLSVOF.cpp'],
        depends=["proteus/mprans/CLSVOF.h"] + ["proteus/ModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cNCLS',
        ['proteus/mprans/NCLS.cpp'],
        depends=["proteus/mprans/NCLS.h"] + ["proteus/ModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cMCorr',
        ['proteus/mprans/MCorr.cpp'],
        depends=["proteus/mprans/MCorr.h"] + ["proteus/ModelFactory.h","proteus/CompKernel.h"] + [
            "proteus/equivalent_polynomials.h",
            "proteus/equivalent_polynomials_utils.h",
            "proteus/equivalent_polynomials_coefficients.h"],
        define_macros=[('PROTEUS_LAPACK_H',PROTEUS_LAPACK_H),
                       ('PROTEUS_LAPACK_INTEGER',PROTEUS_LAPACK_INTEGER),
                       ('PROTEUS_BLAS_H',PROTEUS_BLAS_H)],
        include_dirs=get_xtensor_include(),
        library_dirs=[PROTEUS_LAPACK_LIB_DIR,
                      PROTEUS_BLAS_LIB_DIR],
        libraries=['m',PROTEUS_LAPACK_LIB,PROTEUS_BLAS_LIB],
        extra_compile_args=PROTEUS_EXTRA_COMPILE_ARGS+PROTEUS_OPT+['-std=c++14'],
        extra_link_args=PROTEUS_EXTRA_LINK_ARGS,
        language='c++'),
    Extension(
        'mprans.cRANS2P',
        ['proteus/mprans/RANS2P.cpp'],
        depends=["proteus/mprans/RANS2P.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"] + [
            "proteus/equivalent_polynomials.h",
            "proteus/equivalent_polynomials_utils.h",
            "proteus/equivalent_polynomials_coefficients.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cRANS2P_IB',
        ['proteus/mprans/RANS2P_IB.cpp'],
        depends=["proteus/mprans/RANS2P_IB.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"] + [
            "proteus/equivalent_polynomials.h",
            "proteus/equivalent_polynomials_utils.h",
            "proteus/equivalent_polynomials_coefficients.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cRANS2P2D',
        ['proteus/mprans/RANS2P2D.cpp'],
        depends=["proteus/mprans/RANS2P2D.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"] + [
            "proteus/equivalent_polynomials.h",
            "proteus/equivalent_polynomials_utils.h",
            "proteus/equivalent_polynomials_coefficients.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cRDLS',
        ['proteus/mprans/RDLS.cpp'],
        depends=["proteus/mprans/RDLS.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"] + [
            "proteus/equivalent_polynomials.h",
            "proteus/equivalent_polynomials_utils.h",
            "proteus/equivalent_polynomials_coefficients.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cVOF',
        ['proteus/mprans/VOF.cpp'],
        depends=["proteus/mprans/VOF.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cMoveMesh',
        ['proteus/mprans/MoveMesh.cpp'],
        depends=["proteus/mprans/MoveMesh.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cMoveMesh2D',
        ['proteus/mprans/MoveMesh2D.cpp'],
        depends=["proteus/mprans/MoveMesh2D.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cSW2D',
        ['proteus/mprans/SW2D.cpp'],
        depends=["proteus/mprans/SW2D.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cSW2DCV',
        ['proteus/mprans/SW2DCV.cpp'],
        depends=["proteus/mprans/SW2DCV.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cGN_SW2DCV',
        ['proteus/mprans/GN_SW2DCV.cpp'],
        depends=["proteus/mprans/GN_SW2DCV.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cKappa',
        ['proteus/mprans/Kappa.cpp'],
        depends=["proteus/mprans/Kappa.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cKappa2D',
        ['proteus/mprans/Kappa2D.cpp'],
        depends=["proteus/mprans/Kappa2D.h"] + ["proteus/MixedModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cDissipation',
        ['proteus/mprans/Dissipation.cpp'],
        depends=["proteus/mprans/Dissipation.h"] + ["proteus/ModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
    Extension(
        'mprans.cDissipation2D',
        ['proteus/mprans/Dissipation2D.cpp'],
        depends=["proteus/mprans/Dissipation2D.h"] + ["proteus/ModelFactory.h","proteus/CompKernel.h"],
        include_dirs=get_xtensor_include(),
        extra_compile_args=PROTEUS_OPT+['-std=c++14'],
        language='c++'),
]

def setup_given_extensions(extensions):
    setup(name='proteus',
          version='1.7.3',
          classifiers=[
              'Development Status :: 4 - Beta',
              'Environment :: Console',
              'Environment :: Web Environment',
              'Intended Audience :: End Users/Desktop',
              'Intended Audience :: Developers',
              'Intended Audience :: Science/Research',
              'License :: OSI Approved :: MIT License',
              'Programming Language :: Python :: 3.7'
              'Programming Language :: Python :: 3 :: Only',
              'Programming Language :: Python :: Implementation :: CPython',
              'Topic :: Scientific/Engineering :: Mathematics',
              'Topic :: Scientific/Engineering :: Physics',
              'Operating System :: MacOS :: MacOS X',
              'Operating System :: POSIX',
          ],
          description='Python tools for multiphysics modeling',
          author='The Proteus Developers',
          author_email='proteus-dev@googlegroups.com',
          url='http://proteustoolkit.org',
          packages = ['proteus',
                      'proteus.fenton',
                      'proteus.mprans',
                      'proteus.richards',
                      'proteus.elastoplastic',
                      'proteus.mbd',
                      'proteus.test_utils',
                      'proteus.config',
                      'proteus.tests',
                      'proteus.tests.ci',
                      'proteus.tests.griffiths_lane_6',
                      'proteus.tests.levelset',
                      'proteus.tests.linalgebra_tests',
                      'proteus.tests.LS_with_edgeBased_EV',
                      'proteus.tests.LS_with_edgeBased_EV.VOF',
                      'proteus.tests.LS_with_edgeBased_EV.NCLS',
                      'proteus.tests.BernsteinPolynomials',
                      'proteus.tests.BernsteinPolynomials.poisson_eqn',
                      'proteus.tests.elliptic_redist',
                      'proteus.tests.elliptic_redist.RDLS',
                      'proteus.tests.elliptic_redist.RDLS3P',
                      'proteus.tests.surface_tension',
                      'proteus.tests.surface_tension.rising_bubble_rans3p',
                      'proteus.tests.CLSVOF',
                      'proteus.tests.CLSVOF.disc_ICs',
                      'proteus.tests.CLSVOF.with_RANS2P',
                      'proteus.tests.CLSVOF.with_RANS3PF',
                      'proteus.tests.CLSVOF.pure_level_set',
                      'proteus.TwoPhaseFlow',
                      'proteus.TwoPhaseFlow.utils',
                      'proteus.tests.TwoPhaseFlow',
                      'proteus.tests.SWEs',
                      'proteus.tests.SWEs.dam_over_bumps',
                      'proteus.tests.SWEs.oneD_dambreak_flat_bottom',
                      'proteus.tests.SWEs.paraboloid_with_friction',
                      'proteus.tests.SWEs.paraboloid_with_friction.oneD',
                      'proteus.tests.SWEs.paraboloid_with_friction.twoD',
                      'proteus.tests.SWEs.test_gauges',
                      'proteus.tests.SWEs.test_reflecting_BCs',
                      'proteus.tests.matrix_constructor',
                      'proteus.tests.matrix_constructor.import_modules',
                      'proteus.SWFlow',
                      'proteus.SWFlow.utils',
                      'proteus.tests.SWFlow',
                      'proteus.MeshAdaptPUMI',
                      'proteus.MeshAdaptPUMI',
                      'proteus.tests.MeshAdaptPUMI',
                      'proteus.tests.MeshAdaptPUMI.gauge_compare.dambreak_Colagrossi_2D',
                      'proteus.tests.mesh_tests',
                      'proteus.tests.mesh_tests.import_modules',
                      'proteus.tests.periodic',
                      'proteus.tests.periodic.petsc',
                      'proteus.tests.periodic.comparison_files',
                      'proteus.tests.poisson_2d',
                      'proteus.tests.post_processing',
                      'proteus.tests.post_processing.import_modules',
                      'proteus.tests.ProjScheme_with_EV',
                      'proteus.tests.single_phase_gw',
                      'proteus.tests.solver_tests',
                      'proteus.tests.solver_tests.import_modules',
                      'proteus.tests.solver_tests_slow',
                      'proteus.tests.solver_tests_slow.import_modules',
                      'proteus.tests.solver_tests_mprans',
                      'proteus.tests.solver_tests_mprans.import_modules',
                      'proteus.tests.cylinder2D',
                      'proteus.tests.cylinder2D.conforming_rans2p',
                      'proteus.tests.cylinder2D.conforming_rans3p',
                      'proteus.tests.cylinder2D.ibm_method',
                      'proteus.tests.cylinder2D.ibm_rans2p',
                      'proteus.tests.cylinder2D.ibm_rans2p_3D',
                      'proteus.tests.cylinder2D.sbm_method',
                      'proteus.tests.cylinder2D.sbm_3Dmesh',
                      'proteus.tests.HotStart_3P',
                      'proteus.tests.AddedMass',
                      'proteus.tests.FSI',
                      'proteus.tests.MoveMeshMonitor',
                      'proteus.tests.wave_tests',
          ],
          cmdclass = {'build_ext':build_ext},
          ext_package='proteus',
          ext_modules=extensions,
          data_files=[(proteus_install_path,
                       ['proteus/proteus_blas.h',
                        'proteus/proteus_lapack.h',
                        'proteus/proteus_superlu.h',
                        'proteus/ModelFactory.h',
                        'proteus/CompKernel.h'
                       ]),
                      (os.path.join(proteus_install_path,'tests'),
                       ['proteus/tests/hex_cube_3x3.xmf',
                        'proteus/tests/hex_cube_3x3.h5',
                        'proteus/tests/sparse_mat_ex.mtx']),
                      (os.path.join(proteus_install_path,'tests','linalgebra_tests'),
                       ['proteus/tests/linalgebra_tests/sparse_mat_1.txt',
                        'proteus/tests/linalgebra_tests/jac.bin']),
                      (os.path.join(proteus_install_path,'tests','griffiths_lane_6'),
                          []),
                      (os.path.join(proteus_install_path,'tests','levelset'),
                          []),
                      (os.path.join(proteus_install_path,'tests','ci','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','LS_with_edgeBased_EV','VOF','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','LS_with_edgeBased_EV','NCLS','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','BernsteinPolynomials','poisson_eqn','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','surface_tension','rising_bubble_rans3p','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','CLSVOF','disc_ICs','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','CLSVOF','pure_level_set','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','CLSVOF','with_RANS2P','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','CLSVOF','with_RANS3PF','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','TwoPhaseFlow','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','dam_over_bumps','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','oneD_dambreak_flat_bottom','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','paraboloid_with_friction','oneD','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','paraboloid_with_friction','twoD','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','test_gauges','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','SWEs','test_reflecting_BCs','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','solver_tests','import_modules'),
                          []),
                      (os.path.join(proteus_install_path,'tests','mesh_tests','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','solver_tests_slow','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','matrix_constructor','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','periodic','petsc'),
                          []),
                      (os.path.join(proteus_install_path,'tests','periodic','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','post_processing','import_modules'),
                          []),
                      (os.path.join(proteus_install_path,'tests','post_processing','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','matrix_constructor','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','solver_tests_slow','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','solver_tests_slow','import_modules'),
                          []),
                      (os.path.join(proteus_install_path,'tests','solver_tests_mprans','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','MeshAdaptPUMI'),
                          []),
                      (os.path.join(proteus_install_path,'tests','MeshAdaptPUMI','gauge_compare','dambreak_Colagrossi_2D'),
                          []),
                      (os.path.join(proteus_install_path,'tests','poisson_2d'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','conforming_rans3p','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','ibm_method','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','ibm_rans2p','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','ibm_rans2p_3D','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','sbm_method','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','sbm_3Dmesh','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','cylinder2D','conforming_rans2p','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','HotStart_3P','comparison_files'),
                          []),
                      (os.path.join(proteus_install_path,'tests','AddedMass'),
                          []),
                      (os.path.join(proteus_install_path,'tests','FSI'),
                          []),
                      (os.path.join(proteus_install_path,'tests','MoveMeshMonitor'),
                          []),
                      (os.path.join(proteus_install_path,'tests','wave_tests'),
                          [])
         ],
          scripts = ['scripts/parun','scripts/gf2poly','scripts/gatherArchives.py','scripts/qtm','scripts/waves2xmf','scripts/povgen.py',
                     'scripts/velocity2xmf','scripts/run_script_garnet','scripts/run_script_diamond',

                     'scripts/run_script_lonestar','scripts/run_script_ranger','scripts/run_script_mpiexec','scripts/gatherTimes','scripts/clearh5.py',
                     'scripts/runSWEs.py'],

          requires=['numpy']
    )

def setup_extensions_in_sequential():
    setup_given_extensions(EXTENSIONS_TO_BUILD)

def setup_extensions_in_parallel():
    import multiprocessing, logging
    logger = multiprocessing.log_to_stderr()
    logger.setLevel(logging.INFO)
    multiprocessing.log_to_stderr()
    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
    EXTENSIONS=[[e] for e in EXTENSIONS_TO_BUILD]
    pool.imap(setup_given_extensions, EXTENSIONS)
    pool.close()
    pool.join()

if "build_ext" in sys.argv:
    setup_extensions_in_parallel()
else:
    setup_extensions_in_sequential()
