#ifndef NUMERICAL_FLUX_H
#define NUMERICAL_FLUX_H

/**
 \file numericalFlux.h
 \brief C implementations of numericalFlux calculations
*/

/**
 \defgroup numericalFlux numericalFlux
 \brief c implementation of dg numerical flux approximations
 @{
*/

extern void calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                                 int nQuadraturePoints_elementBoundary,
                                                                 int nSpace,
                                                                 int* exteriorElementBoundaries,
                                                                 int* elementBoundaryElements,
                                                                 int* elementBoundaryLocalElementBoundaries,
                                                                 int *isDOFBoundary_p,
                                                                 int *isDOFBoundary_u,
                                                                 int *isDOFBoundary_v,
                                                                 double* n,
                                                                 double* bc_p,
                                                                 double* bc_f_mass,
                                                                 double* bc_f_umom,
                                                                 double* bc_f_vmom,
                                                                 double* p,
                                                                        double* dm_umom,
                                                                 double* f_mass,
                                                                 double* f_umom,
                                                                 double* f_vmom,
                                                                 double* df_mass_du,
                                                                 double* df_mass_dv,
                                                                 double* df_umom_dp,
                                                                 double* df_umom_du,
                                                                 double* df_umom_dv,
                                                                 double* df_vmom_dp,
                                                                 double* df_vmom_du,
                                                                 double* df_vmom_dv,
                                                                 double* flux_mass,
                                                                 double* flux_umom,
                                                                 double* flux_vmom,
                                                                 double* dflux_mass_dp,
                                                                 double* dflux_mass_du,
                                                                 double* dflux_mass_dv,
                                                                 double* dflux_umom_dp,
                                                                 double* dflux_umom_du,
                                                                 double* dflux_umom_dv,
                                                                 double* dflux_vmom_dp,
                                                                 double* dflux_vmom_du,
									double* dflux_vmom_dv,
									double* velocity);
extern void calculateExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                           int nElementBoundaries_element,
                                                           int nQuadraturePoints_elementBoundary,
                                                           int nSpace,
                                                           int* exteriorElementBoundaries,
                                                           int* elementBoundaryElements,
                                                           int* elementBoundaryLocalElementBoundaries,
                                                           int *isDOFBoundary_p,
                                                           int *isDOFBoundary_u,
                                                           int *isDOFBoundary_v,
                                                           double* n,
                                                           double* bc_p,
                                                           double* bc_f_mass,
                                                           double* bc_f_umom,
                                                           double* bc_f_vmom,
                                                           double* p,
                                                           double* f_mass,
                                                           double* f_umom,
                                                           double* f_vmom,
                                                           double* df_mass_du,
                                                           double* df_mass_dv,
                                                           double* df_umom_du,
                                                           double* df_umom_dv,
                                                           double* df_vmom_du,
                                                           double* df_vmom_dv,
                                                           double* flux_mass,
                                                           double* flux_umom,
                                                           double* flux_vmom,
                                                           double* dflux_mass_du,
                                                           double* dflux_mass_dv,
                                                           double* dflux_umom_dp,
                                                           double* dflux_umom_du,
                                                           double* dflux_umom_dv,
                                                           double* dflux_vmom_dp,
                                                           double* dflux_vmom_du,
                                                           double* dflux_vmom_dv);
extern void calculateGlobalExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nSpace,
							int speedEvalFlag,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int* isDOFBoundary,
							int* inflowFlag,
							double* n,
							double* bc_u,
							double* bc_H,
							double* bc_dH,
							double* u,
							double* H,
							double* dH,
							double* flux,
							double* dflux);
extern void calculateExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
						  int nElementBoundaries_element,
						  int nQuadraturePoints_elementBoundary,
						  int nSpace,
						  int speedEvalFlag,						  
						  int* exteriorElementBoundaries,
						  int* elementBoundaryElements,
						  int* elementBoundaryLocalElementBoundaries,
						  int* isDOFBoundary,
						  int* inflowFlag,
						  double* n,
						  double* bc_u,
						  double* bc_H,
						  double* bc_dH,
						  double* u,
						  double* H,
						  double* dH,
						  double* flux,
						  double* dflux);
extern void calculateInteriorLesaintRaviartNumericalFlux(int nInteriorElementBoundaries_global,
						  int nElementBoundaries_element,
						  int nQuadraturePoints_elementBoundary,
						  int nSpace,
						  int speedEvalFlag,
						  int* interiorElementBoundaries,
						  int* elementBoundaryElements,
						  int* elementBoundaryLocalElementBoundaries,
						  double* n,
						  double* u,
						  double* H,
						  double* dH,
						  double* flux,
						  double* dflux_left,
						  double* dflux_right);

/**
   \brief Calculate the advective flux at at interior element boundaries for simple scalar nonlinear hyperbolic pdes
*/
extern 
void calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(double sonicPoint,
								double sonicFlux,
								int nInteriorElementBoundaries_global,
								int nElementBoundaries_element,
								int nQuadraturePoints_elementBoundary,
								int nSpace,
								int* interiorElementBoundaries,
								int* elementBoundaryElements,
								int* elementBoundaryLocalElementBoundaries,
								double* n,
								double* u,
								double* f,
								double* df,
								double* flux,
								double* dflux_left,
								double* dflux_right);

extern
void calculateInteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
						    int nInteriorElementBoundaries_global,
						    int nElementBoundaries_element,
						    int nQuadraturePoints_elementBoundary,
						    int nQuadraturePoints_element,
						    int nSpace,
						    int* interiorElementBoundaries,
						    int* elementBoundaryElements,
						    int* elementBoundaryLocalElementBoundaries,
						    double* n,
						    double* u,
						    double* f,
						    double* df,
						    double* df_element,
						    double* flux,
						    double* dflux_left,
						    double* dflux_right);

extern
void calculateExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
						    int nExteriorElementBoundaries_global,
						    int nElementBoundaries_element,
						    int nQuadraturePoints_elementBoundary,
						    int nQuadraturePoints_element,
						    int nSpace,
						    int* exteriorElementBoundaries,
						    int* elementBoundaryElements,
						    int* elementBoundaryLocalElementBoundaries,
						    int* isDOFBoundary,
						    int* inflowFlag,
						    double* n,
						    double* bc_u,
						    double* bc_f,
						    double* bc_df,
						    double* u,
						    double* f,
						    double* df,
						    double* df_element,
						    double* flux,
						    double* dflux);




extern void calculateInteriorNumericalDiffusiveFlux(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *a,
  double *grad_phi,
  double *u,
  double *penalty,
  double *flux
);
extern void updateInteriorNumericalDiffusiveFluxJacobian(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int nSpace,
  int *l2g,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *a,
  double *da,
  double *grad_phi,
  double *dphi,
  double *v,
  double *grad_v,
  double *penalty,
  double *fluxJacobian
);
extern void calculateExteriorNumericalDiffusiveFlux(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *isDOFBoundary,
  double *n,
  double *bc_a,
  double *bc_grad_phi,
  double *bc_u,
  double *a,
  double *grad_phi,
  double *u,
  double *penalty,
  double *flux
);
extern void updateExteriorNumericalDiffusiveFluxJacobian(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int nSpace,
  int *l2g,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *isDOFBoundary,
  double *n,
  double *a,
  double *da,
  double *grad_phi,
  double *dphi,
  double *v,
  double *grad_v,
  double *penalty,
  double *fluxJacobian
);
extern void calculateInteriorNumericalAdvectiveFlux(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *u,
  double *f,
  double *df,
  double *flux,
  double *dflux_left,
  double *dflux_right
);
extern void updateInteriorNumericalAdvectiveFluxJacobian(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *dflux_left,
  double *dflux_right,
  double *v,
  double *fluxJacobian
);
extern void calculateInteriorNumericalAdvectiveFlux_average(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *u,
  double *f,
  double *df,
  double *flux,
  double *dflux_left,
  double *dflux_right
);
extern void calculateExteriorNumericalAdvectiveFlux_NoBC(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *inflowFlag,
  double *n,
  double *f,
  double *df,
  double *flux,
  double *dflux_left
);
extern void calculateExteriorNumericalAdvectiveFlux(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *isDOFBoundary,
  int *inflowFlag,
  double *n,
  double *bc_u,
  double *bc_f,
  double *bc_df,
  double *u,
  double *f,
  double *df,
  double *flux,
  double *dflux
);
extern void calculateExteriorNumericalAdvectiveFluxStokesP2D(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *isDOFBoundary_p,
  int *isDOFBoundary_u,
  int *isDOFBoundary_v,
  double *n,
  double *bc_f,
  double *bc_fpu,
  double *bc_fpv,
  double *f,
  double *fpu,
  double *fpv,
  double *df_du,
  double *df_dv,
  double *dfpu_dp,
  double *dfpv_dp,
  double *flux,
  double *fluxpu,
  double *fluxpv,
  double *dflux_du,
  double *dflux_dv,
  double *dfluxpu_dp,
  double *dfluxpv_dp
);
extern void calculateExteriorNumericalAdvectiveFlux_average(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *isDOFBoundary,
  int *inflowFlag,
  double *n,
  double *bc_u,
  double *bc_f,
  double *bc_df,
  double *u,
  double *f,
  double *df,
  double *flux,
  double *dflux
);
extern void calculateExteriorInflowNumericalAdvectiveFlux(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *inflowFlag,
  double *inflowFlux,
  double *n,
  double *f,
  double *df,
  double *flux,
  double *dflux_left
);
extern void updateExteriorNumericalAdvectiveFluxJacobian(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  int *inflowFlag,
  double *dflux_left,
  double *v,
  double *fluxJacobian
);

extern void calculateInteriorNumericalDiffusiveFlux_LDG_upwind(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *u,
  double *a,
  double *phi,
  double *V,
  double *penalty,
  double *flux
);
extern void updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind(
  int nInteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int nSpace,
  int *interiorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *a,
  double *da,
  double *dphi,
  double *V,
  double *DV,
  double *DV_eb,
  double *v,
  double *penalty,
  double *fluxJacobian,
  double *fluxJacobian_eb
);
extern void calculateExteriorNumericalDiffusiveFlux_LDG_upwind(
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *u,
  double *a,
  double *phi_bc,
  double *phi,
  double *V,
  double *penalty,
  double *flux
);
extern void updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(
  int *isDiffusiveFluxBoundary,
  int nExteriorElementBoundaries_global,
  int nElementBoundaries_element,
  int nQuadraturePoints_elementBoundary,
  int nDOF_trial_element,
  int nSpace,
  int *exteriorElementBoundaries,
  int *elementBoundaryElements,
  int *elementBoundaryLocalElementBoundaries,
  double *n,
  double *a,
  double *da,
  double *dphi,
  double *V,
  double *DV,
  double *DV_eb,
  double *v,
  double *penalty,
  double *fluxJacobian,
  double *fluxJacobian_eb
);



extern
void calculateGlobalExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
							  int nExteriorElementBoundaries_global,
							  int nQuadraturePoints_elementBoundary,
							  int nQuadraturePoints_element,
							  int nSpace,
							  int* exteriorElementBoundaries,
							  int* elementBoundaryElements,
							  int* elementBoundaryLocalElementBoundaries,
							  int* isDOFBoundary,
							  int* inflowFlag,
							  double* n,
							  double* bc_u,
							  double* bc_f,
							  double* bc_df,
							  double* u,
							  double* f,
							  double* df,
							  double* df_element,
							  double* flux,
							  double* dflux);

extern
void calculateGlobalExteriorNumericalDiffusiveFlux(int nExteriorElementBoundaries_global,
						   int nQuadraturePoints_elementBoundary,
						   int nSpace,
						   int* exteriorElementBoundaries,
						   int* elementBoundaryElements,
						   int* elementBoundaryLocalElementBoundaries,
						   int* isDOFBoundary,
						   double* n,
						   double* bc_a,
						   double* bc_grad_phi,
						   double* bc_u,
						   double* a,
						   double* grad_phi,
						   double* u,
						   double* penalty,
						   double* flux);


extern
void calculateGlobalExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nSpace,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int* isDOFBoundary,
							double* n,
							double* bc_a,
							double* bc_grad_phi,
							double* bc_u,
							double* a,
							double* grad_phi,
							double* u,
							double* penalty,
							double* flux);


extern
void updateGlobalExteriorNumericalDiffusiveFluxJacobian(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nDOF_trial_element,
							int nSpace,
							int* l2g,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int* isDOFBoundary,
							double* n,
							double* a,
							double* da,
							double* grad_phi,
							double* dphi,
							double* v,
							double* grad_v,
							double* penalty,
							double* fluxJacobian);

extern void setInflowFlux(int nExteriorElementBoundaries_global,
                   int nQuadraturePoints_elementBoundary,
                   int* exteriorElementBoundaries,
                   double* inflowFlux,
                   double* flux);

extern void updateInteriorTwoSidedNumericalFluxJacobian(int nInteriorElementBoundaries_global,
						 int nElementBoundaries_element,
						 int nQuadraturePoints_elementBoundary,
						 int nDOF_trial_element,
						 int* interiorElementBoundaries,
						 int* elementBoundaryElements,
						 int* elementBoundaryLocalElementBoundaries,
						 double* dflux_left,
						 double* dflux_right,
						 double* v,
						 double* fluxJacobian_2sided);
extern void updateGlobalExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                             int nQuadraturePoints_elementBoundary,
                                                             int nDOF_trial_element,
                                                             int* exteriorElementBoundaries,
                                                             int* elementBoundaryElements,
                                                             int* elementBoundaryLocalElementBoundaries,
                                                             int* inflowFlag,
                                                             double* dflux_left,
                                                             double* v,
                                                             double* fluxJacobian);

extern
void updateGlobalExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
							     int nQuadraturePoints_elementBoundary,
							     int nDOF_trial_element,
							     int nSpace,
							     int* l2g,
							     int* exteriorElementBoundaries,
							     int* elementBoundaryElements,
							     int* elementBoundaryLocalElementBoundaries,
							     int* isDOFBoundary,
							     double* n,
							     double* a,
							     double* da,
							     double* grad_phi,
							     double* dphi,
							     double* v,
							     double* grad_v,
							     double* penalty,
							     double* fluxJacobian);



extern
void calculateGlobalExteriorNumericalAdvectiveFlux_NoBC(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nSpace,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int* inflowFlag,
							double* n,
							double* f,
							double* df,
							double* flux,
							double* dflux_left);

extern
void calculateGlobalExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
						   int nQuadraturePoints_elementBoundary,
						   int nSpace,
						   int* exteriorElementBoundaries,
						   int* elementBoundaryElements,
						   int* elementBoundaryLocalElementBoundaries,
						   int *isDOFBoundary,
						   int *inflowFlag,
						   double* n,
						   double* bc_u,
						   double* bc_f,
						   double* bc_df,
						   double* u,
						   double* f,
						   double* df,
						   double* flux,
						   double* dflux);


extern
void calculateGlobalExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nSpace,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int *isDOFBoundary,
							int *inflowFlag,
							double* n,
							double* bc_u,
							double* bc_f,
							double* bc_df,
							double* u,
							double* f,
							double* df,
							double* flux,
							double* dflux);


extern
void calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D(int nExteriorElementBoundaries_global,
							   int nQuadraturePoints_elementBoundary,
							   int nSpace,
							   int* exteriorElementBoundaries,
							   int* elementBoundaryElements,
							   int* elementBoundaryLocalElementBoundaries,
							   int *isDOFBoundary_p,
							   int *isDOFBoundary_u,
							   int *isDOFBoundary_v,
							   double* n,
							   double* bc_f,
							   double* bc_fpu,
							   double* bc_fpv,
							   double* f,
							   double* fpu,
							   double* fpv,
							   double* df_du,
							   double* df_dv,
							   double* dfpu_dp,
							   double* dfpv_dp,
							   double* flux,
							   double* fluxpu,
							   double* fluxpv,
							   double* dflux_du,
							   double* dflux_dv,
							   double* dfluxpu_dp,
							   double* dfluxpv_dp);



extern
void calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
							   int nQuadraturePoints_elementBoundary,
							   int nSpace,
							   int* exteriorElementBoundaries,
							   int* elementBoundaryElements,
							   int* elementBoundaryLocalElementBoundaries,
							   int *isDOFBoundary_p,
							   int *isDOFBoundary_u,
							   int *isDOFBoundary_v,
							   int *isDOFBoundary_w,
							   double* n,
							   double* bc_f,
							   double* bc_fpu,
							   double* bc_fpv,
							   double* bc_fpw,
							   double* f,
							   double* fpu,
							   double* fpv,
							   double* fpw,
							   double* df_du,
							   double* df_dv,
							   double* df_dw,
							   double* dfpu_dp,
							   double* dfpv_dp,
							   double* dfpw_dp,
							   double* flux,
							   double* fluxpu,
							   double* fluxpv,
							   double* fluxpw,
							   double* dflux_du,
							   double* dflux_dv,
							   double* dflux_dw,
							   double* dfluxpu_dp,
							   double* dfluxpv_dp,
							   double* dfluxpw_dp);

extern
void calculateGlobalExteriorNumericalAdvectiveFlux_average(int nExteriorElementBoundaries_global,
							   int nQuadraturePoints_elementBoundary,
							   int nSpace,
							   int* exteriorElementBoundaries,
							   int* elementBoundaryElements,
							   int* elementBoundaryLocalElementBoundaries,
							   int *isDOFBoundary,
							   int *inflowFlag,
							   double* n,
							   double* bc_u,
							   double* bc_f,
							   double* bc_df,
							   double* u,
							   double* f,
							   double* df,
							   double* flux,
							   double* dflux);

extern
void calculateGlobalExteriorInflowNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
							 int nQuadraturePoints_elementBoundary,
							 int nSpace,
							 int* exteriorElementBoundaries,
							 int* elementBoundaryElements,
							 int* elementBoundaryLocalElementBoundaries,
							 int* inflowFlag,
							 double* inflowFlux,
							 double* n,
							 double* f,
							 double* df,
							 double* flux,
							 double* dflux_left);


extern
void updateGlobalExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
							int nQuadraturePoints_elementBoundary,
							int nDOF_trial_element,
							int* exteriorElementBoundaries,
							int* elementBoundaryElements,
							int* elementBoundaryLocalElementBoundaries,
							int* inflowFlag,
							double* dflux_left,
							double* v,
							double* fluxJacobian);


extern
void updateExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                       int nElementBoundaries_element,
                                                       int nQuadraturePoints_elementBoundary,
                                                       int nDOF_trial_element,
                                                       int* exteriorElementBoundaries,
                                                       int* elementBoundaryElements,
                                                       int* elementBoundaryLocalElementBoundaries,
                                                       int* inflowFlag,
                                                       double* dflux_left,
                                                       double* v,
                                                       double* fluxJacobian);



extern
void calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind(int nExteriorElementBoundaries_global,
							      int nElementBoundaries_element,
							      int nQuadraturePoints_elementBoundary,
							      int nSpace,
							      int* exteriorElementBoundaries,
							      int* elementBoundaryElements,
							      int* elementBoundaryLocalElementBoundaries,
							      double* n,
							      double* u,
							      double* a,
							      double* phi_bc,
							      double* phi,
							      double* V,
							      double* penalty,
							      double* flux);



extern
void updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(int* isDiffusiveFluxBoundary,
								   int nExteriorElementBoundaries_global,
								   int nElementBoundaries_element,
								   int nQuadraturePoints_elementBoundary,
								   int nDOF_trial_element,
								   int nSpace,
								   int* exteriorElementBoundaries,
								   int* elementBoundaryElements,
								   int* elementBoundaryLocalElementBoundaries,
								   double* n,
								   double* a,
								   double* da,
								   double* dphi,
								   double* V,
								   double* DV,
								   double* DV_eb,
								   double* v,
								   double* penalty,
								   double* fluxJacobian_exterior,
								   double* fluxJacobian_eb);

extern
void calculateExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                                                  int nElementBoundaries_element,
                                                  int nQuadraturePoints_elementBoundary,
                                                  int nSpace,
                                                  int* exteriorElementBoundaries,
                                                  int* elementBoundaryElements,
                                                  int* elementBoundaryLocalElementBoundaries,
                                                  int *isDOFBoundary,
                                                  int *inflowFlag,
                                                  double* n,
                                                  double* bc_u,
                                                  double* bc_f,
                                                  double* bc_df,
                                                  double* u,
                                                  double* f,
                                                  double* df,
                                                  double* flux,
                                                  double* dflux);


extern
void calculateExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                                             int nElementBoundaries_element,
                                             int nQuadraturePoints_elementBoundary,
                                             int nSpace,
                                             int* exteriorElementBoundaries,
                                             int* elementBoundaryElements,
                                             int* elementBoundaryLocalElementBoundaries,
                                             int* isDOFBoundary,
                                             double* n,
                                             double* bc_a,
                                             double* bc_grad_phi,
                                             double* bc_u,
                                             double* a,
                                             double* grad_phi,
                                             double* u,
                                             double* penalty,
						  double* flux);

extern
void calculateExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
						     int nElementBoundaries_element,
                                                     int nQuadraturePoints_elementBoundary,
                                                     int nSpace,
                                                     int* exteriorElementBoundaries,
                                                     int* elementBoundaryElements,
                                                     int* elementBoundaryLocalElementBoundaries,
                                                     int *isDOFBoundary_p,
                                                     int *isDOFBoundary_u,
                                                     int *isDOFBoundary_v,
                                                     int *isDOFBoundary_w,
                                                     double* n,
                                                     double* bc_f,
                                                     double* bc_fpu,
                                                     double* bc_fpv,
                                                     double* bc_fpw,
                                                     double* f,
                                                     double* fpu,
                                                     double* fpv,
                                                     double* fpw,
                                                     double* df_du,
                                                     double* df_dv,
                                                     double* df_dw,
                                                     double* dfpu_dp,
                                                     double* dfpv_dp,
                                                     double* dfpw_dp,
                                                     double* flux,
                                                     double* fluxpu,
                                                     double* fluxpv,
                                                     double* fluxpw,
                                                     double* dflux_du,
                                                     double* dflux_dv,
                                                     double* dflux_dw,
                                                     double* dfluxpu_dp,
                                                     double* dfluxpv_dp,
						     double* dfluxpw_dp);

extern
void updateExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
						       int nElementBoundaries_element,
						       int nQuadraturePoints_elementBoundary,
						       int nDOF_trial_element,
						       int nSpace,
						       int* l2g,
						       int* exteriorElementBoundaries,
						       int* elementBoundaryElements,
						       int* elementBoundaryLocalElementBoundaries,
						       int* isDOFBoundary,
						       double* n,
						       double* a,
						       double* da,
						       double* grad_phi,
						       double* dphi,
						       double* v,
						       double* grad_v,
						       double* penalty,
						       double* fluxJacobian);



void calculateInteriorChengShuNumericalFlux(int nInteriorElementBoundaries_global,
					    int nElementBoundaries_element,
					    int nQuadraturePoints_elementBoundary,
					    int nQuadraturePoints_element,
					    int nSpace,
					    int speedEvalFlag,
					    int* interiorElementBoundaries,
					    int* elementBoundaryElements,
					    int* elementBoundaryLocalElementBoundaries,
					    double* n,
					    double* u,
					    double* H,
					    double* dH,
					    double* H_element,
					    double* dH_element,
					    double* flux,
					    double* dflux_left,
					    double* dflux_right);

extern void calculateGlobalExteriorNumericalFluxDarcyFCFF(int nExteriorElementBoundaries_global,
						   int nQuadraturePoints_elementBoundary,
						   int nSpace,
						   const int* exteriorElementBoundaries,
						   const int* elementBoundaryElements,
						   const int* elementBoundaryLocalElementBoundaries,
						   const int* isDOFBoundary_uw,
						   const int* isDOFBoundary_um,
						   const double* n,
						   const double* bc_f_m,  
						   const double* bc_a_wm,      
						   const double* bc_a_mw,      
						   const double* bc_a_mm,      
						   const double* bc_grad_phi_w,
						   const double* bc_grad_phi_m,
						   const double* bc_u_w,        
						   const double* bc_u_m,        
						   const double* f_m,          /*lambda_n K_s g(b rho_n-rho_w)*/
						   const double* df_m_dw,          /*dlambda_n K_s g(b rho_n-rho_w)*/
						   const double* a_wm,         /*lambda_w K_s*/
						   const double* a_mw,         /*lambda_n K_s*/
						   const double* a_mm,         /*lambda_t K_s*/
						   const double* grad_phi_w,   /*psi_c*/
						   const double* grad_phi_m,   /*psi_w - rho g . x*/
						   const double* u_w,           /*S_w*/
						   const double* u_m,           /*psi_w*/
						   const double* penalty_w,    
						   const double* penalty_m,
						   double * advectiveFlux_m,   
						   double * dadvectiveFlux_m_dw,   
						   double * diffusiveFlux_wm,
						   double * diffusiveFlux_mw,
							  double * diffusiveFlux_mm);
extern void calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
									 int nQuadraturePoints_elementBoundary,
									 int nSpace,
									 int nDOF_trial_element,
									 const int* l2g, /*for now assumes both solution spaces are the same!*/
									 const int* exteriorElementBoundaries,
									 const int* elementBoundaryElements,
									 const int* elementBoundaryLocalElementBoundaries,
									 const int* isDOFBoundary_uw,
									 const int* isDOFBoundary_um,
									 const double* n,
									 const double* f_m,          /*lambda_n K_s g(b rho_n-rho_w)*/
									 const double* df_m_dw,          /*dlambda_n K_s g(b rho_n-rho_w)*/
									 const double* a_wm,         /*lambda_w K_s*/
									 const double* da_wm_dw,         /* a' wrt S_w*/
									 const double* da_wm_dm,         /* a' wrt psi_w*/
									 const double* a_mw,         /*lambda_n K_s*/
									 const double* da_mw_dw,         /* a' wrt S_w*/
									 const double* da_mw_dm,         /* a' wrt psi_w*/
									 const double* a_mm,         /*lambda_t K_s*/
									 const double* da_mm_dw,         /* a' wrt S_w*/
									 const double* da_mm_dm,         /* a' wrt psi_w*/
									 const double* grad_phi_w,   /*psi_c*/
									 const double* grad_phi_m,   /*psi_w - rho g . x*/
									 const double* dphi_w_w,     /*\pd{psi_c}{S_w} */     
									 const double* dphi_w_m,     /*\pd{psi_c}{psi_w}=  0 */
									 const double* dphi_m_w,     /*\pd{phi_w}{S_w} = 0 */
									 const double* dphi_m_m,     /*\pd{phi_w}{psi_w} = 1 - drho/dpsi_w g . x */
									 const double* u_w,           /*S_w*/
									 const double* u_m,           /*psi_w*/
									 const double* v,            /*trial functions, assumed in same space*/
									 const double* grad_v,       /*trial function gradients, assumed in same space*/
									 const double* penalty_w,    
									 const double* penalty_m,
									 double * fluxJacobian_ww,
									 double * fluxJacobian_wm,
									 double * fluxJacobian_mw,
									 double * fluxJacobian_mm);
extern void calculateGlobalExteriorNumericalStressTrace(int nExteriorElementBoundaries_global,
						 int nQuadraturePoints_elementBoundary,
						 int nSpace,
						 int* exteriorElementBoundaries,
						 int* elementBoundaryElements,
						 int* elementBoundaryLocalElementBoundaries,
						 int *isDOFBoundary_u,
						 int *isDOFBoundary_v,
						 int *isDOFBoundary_w,
						 double* n,
						 double* bc_u,
						 double* bc_v,
						 double* bc_w,
						 double* bc_stress,
						 double* u,
						 double* v,
						 double* w,
						 double* penalty,
						 double* stressTrace_u,
						 double* stressTrace_v,
						 double* stressTrace_w);
extern void updateExteriorNumericalStressFluxJacobian(int nExteriorElementBoundaries_global,
					       int nQuadraturePoints_elementBoundary,
					       int nDOF_trial_element,
					       int nSpace,
					       int* exteriorElementBoundaries,
					       int* elementBoundaryElements,
					       int* elementBoundaryLocalElementBoundaries,
					       int* isDOFBoundary_u,
					       int* isDOFBoundary_v,
					       int* isDOFBoundary_w,
					       int* isStressBoundary_u,
					       int* isStressBoundary_v,
					       int* isStressBoundary_w,
					       double* n,
					       double* dstress_u_u,
					       double* dstress_u_v,
					       double* dstress_u_w,
					       double* dstress_v_u,
					       double* dstress_v_v,
					       double* dstress_v_w,
					       double* dstress_w_u,
					       double* dstress_w_v,
						      double* dstress_w_w,
					       double* v,
						      double* grad_v,
					       double* penalty,
					       double* fluxJacobian_u_u,
					       double* fluxJacobian_u_v,
					       double* fluxJacobian_u_w,
					       double* fluxJacobian_v_u,
					       double* fluxJacobian_v_v,
					       double* fluxJacobian_v_w,
					       double* fluxJacobian_w_u,
					       double* fluxJacobian_w_v,
					       double* fluxJacobian_w_w);

extern void calculateExteriorNumericalFluxRichards_sd(int* rowptr,
						      int* colind,
						      int nExteriorElementBoundaries_global,
						      int nQuadraturePoints_elementBoundary,
						      int nSpace,
						      int* isSeepageFace,
						      int* isDOFBoundary,
						      double* n,
						      double* bc_u,
						      double* K,
						      double* grad_psi,
						      double* u,
						      double* K_rho_g,
						      double* penalty,
						      double* diffusiveFlux);
extern void calculateExteriorNumericalFluxJacobianRichards_sd(int* rowptr,
							      int* colind,
							      int nExteriorElementBoundaries_global,
							      int nQuadraturePoints_elementBoundary,
							      int nSpace,
							      int* isSeepageFace,
							      int* isDOFBoundary,
							      double* n,
							      double* bc_u,
							      double* K,
							      double* dK,
							      double* grad_psi,
							      double* grad_v,
							      double* u,
							      double* dK_rho_g,
							      double* v,
							      double* penalty,
							      double* fluxJacobian);
#endif
