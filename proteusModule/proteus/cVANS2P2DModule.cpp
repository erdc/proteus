#include "Python.h"
#include "numpy/arrayobject.h"
#include "VANS2P2D.h"
#include "superluWrappersModule.h"

#define ND(p) ((PyArrayObject *)p)->nd
#define SHAPE(p) ((PyArrayObject *)p)->dimensions
#define DDATA(p) ((double *) (((PyArrayObject *)p)->data))
#define IDATA(p) ((int *) (((PyArrayObject *)p)->data))
#define CSRVAL(p) ((double*)((SparseMatrix*)p)->A.nzval)

#define ND(p) ((PyArrayObject *)p)->nd
#define SHAPE(p) ((PyArrayObject *)p)->dimensions
#define DDATA(p) ((double *) (((PyArrayObject *)p)->data))
#define IDATA(p) ((int *) (((PyArrayObject *)p)->data))
#define CSRVAL(p) ((double*)((SparseMatrix*)p)->A.nzval)

static PyObject* cVANS2P2D_calculateResidual(PyObject* self,
					   PyObject* args)
{
  int nElements_global,
    offset_p,offset_u,offset_v,
    stride_p,stride_u,stride_v,
    waveModelFlag,//new
    turbulenceClosureFlag,//new
    killNonlinearDrag;//new
    
  double alpha_bdf,
    epsFact_rho,
    epsFact_mu,
    sigma,
    rho_0,
    nu_0,
    rho_1,
    nu_1,
    hFactor,
    shockCapturingDiffusion,
    t,//new
    smagorinskyCoefficient,//new
    eps_wave_source,//new
    waveHeight,//new
    waveCelerity,//new
    waveFrequency,//new
    waveSource_xm,//new
    waveSource_xp,//new
    waveSource_ym,//new
    waveSource_yp;//new


  PyObject *p_l2g, 
    *u_l2g, 
    *elementDiameter,
    *p_dof, 
    *u_dof, 
    *v_dof, 
    *p_trial, 
    *u_trial, 
    *p_grad_trial, 
    *u_grad_trial, 
    *p_test_dV, 
    *u_test_dV, 
    *p_grad_test_dV, 
    *u_grad_test_dV, 
    *vel_Hess_trial,
    *vel_Hess_test_dV,
    *g,
    *phi,
    *n,
    *kappa,
    *mom_u_acc,
    *mom_v_acc,
    *mass_adv,
    *mom_u_acc_beta_bdf, 
    *mom_v_acc_beta_bdf, 
    *velocity_last,
    *cfl,
    *numDiff_u, 
    *numDiff_v, 
    *numDiff_u_last, 
    *numDiff_v_last, 
    *elementResidual_p, 
    *elementResidual_u, 
    *elementResidual_v, 
    *sdInfo_u_u_rowptr,*sdInfo_u_u_colind,			      
    *sdInfo_u_v_rowptr,*sdInfo_u_v_colind,
    *sdInfo_v_v_rowptr,*sdInfo_v_v_colind,
    *sdInfo_v_u_rowptr,*sdInfo_v_u_colind,
    *globalResidual,
    //new arrays
    *x,
    *meanGrainSize,
    *porosity,
    *nu_t;
    
  int nExteriorElementBoundaries_global;
  PyObject *exteriorElementBoundariesArray,
    *elementBoundaryElementsArray,
    *elementBoundaryLocalElementBoundariesArray,
    *p_trial_ext,
    *u_trial_ext,
    *p_grad_trial_ext,
    *u_grad_trial_ext,
    *phi_ext,
    *n_ext,
    *kappa_ext,
    *isDOFBoundary_p,
    *isDOFBoundary_u,
    *isDOFBoundary_v,
    *isAdvectiveFluxBoundary_p,
    *isAdvectiveFluxBoundary_u,
    *isAdvectiveFluxBoundary_v,
    *isDiffusiveFluxBoundary_u,
    *isDiffusiveFluxBoundary_v,
    *bc_p_ext,
    *bc_flux_mass,
    *bc_flux_mom_u_adv,
    *bc_flux_mom_v_adv,
    *bc_u_ext,
    *bc_flux_u_diff_ext,
    *penalty_ext,
    *bc_v_ext,
    *bc_flux_v_diff_ext,
    *p_test_dS_ext,
    *u_test_dS_ext,
    *velocity,
    *velocity_ext,
    *flux_ext,
    //new arrays
    *x_ext,
    *meanGrainSize_ext,
    *porosity_ext;

  if (!PyArg_ParseTuple(args,
		      //"iddddddddddiddOdidddddddddiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOiiiiiiiiOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
			"iddddddddddiddOdidddddddiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOiiiiiiOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                        &nElements_global,
			&alpha_bdf,
			&epsFact_rho,
			&epsFact_mu,
			&sigma,
			&rho_0,
			&nu_0,
			&rho_1,
			&nu_1,
			&hFactor,
			&shockCapturingDiffusion,
			&turbulenceClosureFlag,//new
			&smagorinskyCoefficient,//new
			&t,//new
			&x,//new
			&eps_wave_source,//new
			&waveModelFlag,
			&waveHeight,
			&waveCelerity,
			&waveFrequency,
			&waveSource_xm,
			&waveSource_xp,
			&waveSource_ym,
			&waveSource_yp,
			//&waveSource_zm,
			//&waveSource_zp,
			&killNonlinearDrag,
			&meanGrainSize,
			&porosity,
			&p_l2g, 
			&u_l2g, 
			&elementDiameter,
			&p_dof, 
			&u_dof, 
			&v_dof, 
			//&w_dof,
			&p_trial, 
			&u_trial, 
			&p_grad_trial, 
			&u_grad_trial, 
			&p_test_dV, 
			&u_test_dV, 
			&p_grad_test_dV, 
			&u_grad_test_dV, 
			&vel_Hess_trial,&vel_Hess_test_dV,
			&g,
			&phi,
			&n,
			&kappa,
			&mom_u_acc,
			&mom_v_acc,
			//&mom_w_acc,
			&mass_adv,
			&mom_u_acc_beta_bdf,
			&mom_v_acc_beta_bdf,
			//&mom_w_acc_last,
			&velocity_last,
			&nu_t,//new
			&cfl,
			&numDiff_u,
			&numDiff_v,
			//&numDiff_w,
			&numDiff_u_last,
			&numDiff_v_last,
			//&numDiff_w_last,
			&elementResidual_p, 
			&elementResidual_u, 
			&elementResidual_v, 
			//&elementResidual_w,
			&sdInfo_u_u_rowptr,&sdInfo_u_u_colind,			      
			&sdInfo_u_v_rowptr,&sdInfo_u_v_colind,
			//&sdInfo_u_w_rowptr,&sdInfo_u_w_colind,
			&sdInfo_v_v_rowptr,&sdInfo_v_v_colind,
			&sdInfo_v_u_rowptr,&sdInfo_v_u_colind,
			//&sdInfo_v_w_rowptr,&sdInfo_v_w_colind,
			//&sdInfo_w_w_rowptr,&sdInfo_w_w_colind,
			//&sdInfo_w_u_rowptr,&sdInfo_w_u_colind,
			//&sdInfo_w_v_rowptr,&sdInfo_w_v_colind,
                        &offset_p,&offset_u,&offset_v,//&offset_w,
			&stride_p,&stride_u,&stride_v,//&stride_w,
			&globalResidual,
			&nExteriorElementBoundaries_global,
                        &exteriorElementBoundariesArray,
                        &elementBoundaryElementsArray,
                        &elementBoundaryLocalElementBoundariesArray,
			&x_ext,
                        &p_trial_ext,
                        &u_trial_ext,
                        &p_grad_trial_ext,
                        &u_grad_trial_ext,
                        &phi_ext,
                        &n_ext,
                        &kappa_ext,
			&meanGrainSize_ext,//new
			&porosity_ext,//new
                        &isDOFBoundary_p,
                        &isDOFBoundary_u,
                        &isDOFBoundary_v,
                        //&isDOFBoundary_w,
                        &isAdvectiveFluxBoundary_p,
                        &isAdvectiveFluxBoundary_u,
                        &isAdvectiveFluxBoundary_v,
                        //&isAdvectiveFluxBoundary_w,
                        &isDiffusiveFluxBoundary_u,
                        &isDiffusiveFluxBoundary_v,
                        //&isDiffusiveFluxBoundary_w,
                        &bc_p_ext,
                        &bc_flux_mass,
                        &bc_flux_mom_u_adv,
                        &bc_flux_mom_v_adv,
                        //&bc_flux_mom_w_adv,
                        &bc_u_ext,
                        &bc_flux_u_diff_ext,
                        &penalty_ext,
                        &bc_v_ext,
                        &bc_flux_v_diff_ext,
                        //&bc_w_ext,
                        //&bc_flux_w_diff_ext,
                        &p_test_dS_ext,
                        &u_test_dS_ext,
			&velocity,
			&velocity_ext,
			&flux_ext))
    return NULL;
  calculateResidual_VANS2P2D(nElements_global,
			     alpha_bdf,
			     epsFact_rho,
			     epsFact_mu,
			     sigma,
			     rho_0,
			     nu_0,
			     rho_1,
			     nu_1,
			     hFactor,
			     shockCapturingDiffusion,
			     turbulenceClosureFlag,
			     smagorinskyCoefficient,
			     t,
			     DDATA(x),
			     eps_wave_source,
			     waveModelFlag,
			     waveHeight,
			     waveCelerity,
			     waveFrequency,
			     waveSource_xm,
			     waveSource_xp,
			     waveSource_ym,
			     waveSource_yp,
			     //waveSource_zm,
			     //waveSource_zp,
			     killNonlinearDrag,
			     DDATA(meanGrainSize),
			     DDATA(porosity),
			     IDATA(p_l2g), 
			     IDATA(u_l2g), 
			     DDATA(elementDiameter),
			     DDATA(p_dof), 
			     DDATA(u_dof), 
			     DDATA(v_dof), 
			     //DDATA(w_dof),
			     DDATA(p_trial), 
			     DDATA(u_trial), 
			     DDATA(p_grad_trial), 
			     DDATA(u_grad_trial), 
			     DDATA(p_test_dV), 
			     DDATA(u_test_dV), 
			     DDATA(p_grad_test_dV), 
			     DDATA(u_grad_test_dV), 
			     DDATA(vel_Hess_trial),
			     DDATA(vel_Hess_test_dV),
			     DDATA(g),
			     DDATA(phi),
			     DDATA(n),
			     DDATA(kappa),
			     DDATA(mom_u_acc),
			     DDATA(mom_v_acc),
			     //DDATA(mom_w_acc),
			     DDATA(mass_adv),
			     DDATA(mom_u_acc_beta_bdf),
			     DDATA(mom_v_acc_beta_bdf),
			     //DDATA(mom_w_acc_last),
			     DDATA(velocity_last),
			     DDATA(nu_t),
			     DDATA(cfl),
			     DDATA(numDiff_u),
			     DDATA(numDiff_v),
			     //DDATA(numDiff_w),
			     DDATA(numDiff_u_last),
			     DDATA(numDiff_v_last),
			     //DDATA(numDiff_w_last),
			     DDATA(elementResidual_p), 
			     DDATA(elementResidual_u), 
			     DDATA(elementResidual_v), 
			     //DDATA(elementResidual_w), 
			     IDATA(sdInfo_u_u_rowptr),IDATA(sdInfo_u_u_colind),			      
			     IDATA(sdInfo_u_v_rowptr),IDATA(sdInfo_u_v_colind),
			     //IDATA(sdInfo_u_w_rowptr),IDATA(sdInfo_u_w_colind),
			     IDATA(sdInfo_v_v_rowptr),IDATA(sdInfo_v_v_colind),
			     IDATA(sdInfo_v_u_rowptr),IDATA(sdInfo_v_u_colind),
			     //IDATA(sdInfo_v_w_rowptr),IDATA(sdInfo_v_w_colind),
			     //IDATA(sdInfo_w_w_rowptr),IDATA(sdInfo_w_w_colind),
			     //IDATA(sdInfo_w_u_rowptr),IDATA(sdInfo_w_u_colind),
			     //IDATA(sdInfo_w_v_rowptr),IDATA(sdInfo_w_v_colind),
			     offset_p,offset_u,offset_v,//offset_w,
			     stride_p,stride_u,stride_v,//stride_w,
			     DDATA(globalResidual),
			     nExteriorElementBoundaries_global,
			     IDATA(exteriorElementBoundariesArray),
			     IDATA(elementBoundaryElementsArray),
			     IDATA(elementBoundaryLocalElementBoundariesArray),
			     DDATA(x_ext),
			     DDATA(p_trial_ext),
			     DDATA(u_trial_ext),
			     DDATA(p_grad_trial_ext),
			     DDATA(u_grad_trial_ext),
			     DDATA(phi_ext),
			     DDATA(n_ext),
			     DDATA(kappa_ext),
			     DDATA(meanGrainSize_ext),
			     DDATA(porosity_ext),
			     IDATA(isDOFBoundary_p),
			     IDATA(isDOFBoundary_u),
			     IDATA(isDOFBoundary_v),
			     //IDATA(isDOFBoundary_w),
			     IDATA(isAdvectiveFluxBoundary_p),
			     IDATA(isAdvectiveFluxBoundary_u),
			     IDATA(isAdvectiveFluxBoundary_v),
			     //IDATA(isAdvectiveFluxBoundary_w),
			     IDATA(isDiffusiveFluxBoundary_u),
			     IDATA(isDiffusiveFluxBoundary_v),
			     //IDATA(isDiffusiveFluxBoundary_w),
			     DDATA(bc_p_ext),
			     DDATA(bc_flux_mass),
			     DDATA(bc_flux_mom_u_adv),
			     DDATA(bc_flux_mom_v_adv),
			     //DDATA(bc_flux_mom_w_adv),
			     DDATA(bc_u_ext),
			     DDATA(bc_flux_u_diff_ext),
			     DDATA(penalty_ext),
			     DDATA(bc_v_ext),
			     DDATA(bc_flux_v_diff_ext),
			     //DDATA(bc_w_ext),
			     //DDATA(bc_flux_w_diff_ext),
			     DDATA(p_test_dS_ext),
			     DDATA(u_test_dS_ext),
			     DDATA(velocity),
			     DDATA(velocity_ext),
			     DDATA(flux_ext));
  Py_INCREF(Py_None); 
  return Py_None;
}

static PyObject* cVANS2P2D_calculateJacobian(PyObject* self,
					     PyObject* args)
{
  int nElements_global,
    turbulenceClosureFlag,//new
    killNonlinearDrag;//new
  double alpha_bdf,
    epsFact_rho,
    epsFact_mu,
    sigma,
    rho_0,
    nu_0,
    rho_1,
    nu_1,
    hFactor,
    shockCapturingDiffusion,
    t,//new
    smagorinskyCoefficient;//new
  PyObject *p_l2g, 
    *u_l2g, 
    *elementDiameter,
    *p_dof, 
    *u_dof, 
    *v_dof, 
    //*w_dof,
    *p_trial, 
    *u_trial, 
    *p_grad_trial, 
    *u_grad_trial, 
    *p_test_dV, 
    *u_test_dV, 
    *p_grad_test_dV, 
    *u_grad_test_dV, 
    *vel_Hess_trial,
    *vel_Hess_test_dV,
    *g,
    *phi,
    *n,
    *kappa,
    *mom_u_acc_beta_bdf, 
    *mom_v_acc_beta_bdf, 
    //*mom_w_acc_last,
    *velocity_last, 
    *cfl,
    *numDiff_u_last, 
    *numDiff_v_last, 
    //*numDiff_w_last,
    *sdInfo_u_u_rowptr,*sdInfo_u_u_colind,			      
    *sdInfo_u_v_rowptr,*sdInfo_u_v_colind,
    //*sdInfo_u_w_rowptr,*sdInfo_u_w_colind,
    *sdInfo_v_v_rowptr,*sdInfo_v_v_colind,
    *sdInfo_v_u_rowptr,*sdInfo_v_u_colind,
    //*sdInfo_v_w_rowptr,*sdInfo_v_w_colind,
    //*sdInfo_w_w_rowptr,*sdInfo_w_w_colind,
    //*sdInfo_w_u_rowptr,*sdInfo_w_u_colind,
    //*sdInfo_w_v_rowptr,*sdInfo_w_v_colind,
    //new arrays
    *x,
    *meanGrainSize,
    *porosity,
    *nu_t;

  PyObject *csrRowIndeces_p_p,*csrColumnOffsets_p_p,
    *csrRowIndeces_p_u,*csrColumnOffsets_p_u,
    *csrRowIndeces_p_v,*csrColumnOffsets_p_v,
    //*csrRowIndeces_p_w,*csrColumnOffsets_p_w,
    *csrRowIndeces_u_p,*csrColumnOffsets_u_p,
    *csrRowIndeces_u_u,*csrColumnOffsets_u_u,
    *csrRowIndeces_u_v,*csrColumnOffsets_u_v,
    //*csrRowIndeces_u_w,*csrColumnOffsets_u_w,
    *csrRowIndeces_v_p,*csrColumnOffsets_v_p,
    *csrRowIndeces_v_u,*csrColumnOffsets_v_u,
    *csrRowIndeces_v_v,*csrColumnOffsets_v_v;
    //*csrRowIndeces_v_w,*csrColumnOffsets_v_w,
    //*csrRowIndeces_w_p,*csrColumnOffsets_w_p,
    //*csrRowIndeces_w_u,*csrColumnOffsets_w_u,
    //*csrRowIndeces_w_v,*csrColumnOffsets_w_v,
    //*csrRowIndeces_w_w,*csrColumnOffsets_w_w;
  PyObject* globalJacobian;
  int nExteriorElementBoundaries_global;
  PyObject *exteriorElementBoundariesArray,
    *elementBoundaryElementsArray,
    *elementBoundaryLocalElementBoundariesArray,
    *p_trial_ext,
    *u_trial_ext,
    *p_grad_trial_ext,
    *u_grad_trial_ext,
    *phi_ext,
    *n_ext,
    *kappa_ext,
    *isDOFBoundary_p,
    *isDOFBoundary_u,
    *isDOFBoundary_v,
    //*isDOFBoundary_w,
    *isAdvectiveFluxBoundary_p,
    *isAdvectiveFluxBoundary_u,
    *isAdvectiveFluxBoundary_v,
    //*isAdvectiveFluxBoundary_w,
    *isDiffusiveFluxBoundary_u,
    *isDiffusiveFluxBoundary_v,
    //*isDiffusiveFluxBoundary_w,
    *bc_p_ext,
    *bc_flux_mass,
    *bc_flux_mom_u_adv,
    *bc_flux_mom_v_adv,
    //*bc_flux_mom_w_adv,
    *bc_u_ext,
    *bc_flux_u_diff_ext,
    *penalty_ext,
    *bc_v_ext,
    *bc_flux_v_diff_ext,
    //*bc_w_ext,
    //*bc_flux_w_diff_ext,
    *p_test_dS_ext,
    *u_test_dS_ext,
    //new arrays
    *x_ext,
    *meanGrainSize_ext,
    *porosity_ext;
    
  PyObject *csrColumnOffsets_eb_p_p,
    *csrColumnOffsets_eb_p_u,
    *csrColumnOffsets_eb_p_v,
    //*csrColumnOffsets_eb_p_w,
    *csrColumnOffsets_eb_u_p,
    *csrColumnOffsets_eb_u_u,
    *csrColumnOffsets_eb_u_v,
    //*csrColumnOffsets_eb_u_w,
    *csrColumnOffsets_eb_v_p,
    *csrColumnOffsets_eb_v_u,
    *csrColumnOffsets_eb_v_v;
    //*csrColumnOffsets_eb_v_w,
    //*csrColumnOffsets_eb_w_p,
    //*csrColumnOffsets_eb_w_u,
    //*csrColumnOffsets_eb_w_v,
    //*csrColumnOffsets_eb_w_w;

  if (!PyArg_ParseTuple(args,
                      //"iddddddddddiddOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                        "iddddddddddiddOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOiOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                        &nElements_global,
			&alpha_bdf,
			&epsFact_rho,
			&epsFact_mu,
			&sigma,
			&rho_0,
			&nu_0,
			&rho_1,
			&nu_1,
			&hFactor,
			&shockCapturingDiffusion,
			&turbulenceClosureFlag,//new
			&smagorinskyCoefficient,//new
			&t,//new
			&x,//new
			&killNonlinearDrag,//new
			&meanGrainSize,//new
			&porosity,//new
			&p_l2g, 
			&u_l2g, 
			&elementDiameter,
			&p_dof, 
			&u_dof, 
			&v_dof, 
			//&w_dof,
			&p_trial, 
			&u_trial, 
			&p_grad_trial, 
			&u_grad_trial, 
			&p_test_dV, 
			&u_test_dV, 
			&p_grad_test_dV, 
			&u_grad_test_dV, 
			&vel_Hess_trial,&vel_Hess_test_dV,
			&g,
			&phi,
			&n,
			&kappa,
			&mom_u_acc_beta_bdf,
			&mom_v_acc_beta_bdf,
			//&mom_w_acc_last,
			&velocity_last,
			&nu_t,//new
			&cfl,
			&numDiff_u_last,
			&numDiff_v_last,
			//&numDiff_w_last,
			&sdInfo_u_u_rowptr,&sdInfo_u_u_colind,			      
			&sdInfo_u_v_rowptr,&sdInfo_u_v_colind,
			//&sdInfo_u_w_rowptr,&sdInfo_u_w_colind,
			&sdInfo_v_v_rowptr,&sdInfo_v_v_colind,
			&sdInfo_v_u_rowptr,&sdInfo_v_u_colind,
			//&sdInfo_v_w_rowptr,&sdInfo_v_w_colind,
			//&sdInfo_w_w_rowptr,&sdInfo_w_w_colind,
			//&sdInfo_w_u_rowptr,&sdInfo_w_u_colind,
			//&sdInfo_w_v_rowptr,&sdInfo_w_v_colind,
			&csrRowIndeces_p_p,&csrColumnOffsets_p_p,
			&csrRowIndeces_p_u,&csrColumnOffsets_p_u,
			&csrRowIndeces_p_v,&csrColumnOffsets_p_v,
			//&csrRowIndeces_p_w,&csrColumnOffsets_p_w,
			&csrRowIndeces_u_p,&csrColumnOffsets_u_p,
			&csrRowIndeces_u_u,&csrColumnOffsets_u_u,
			&csrRowIndeces_u_v,&csrColumnOffsets_u_v,
			//&csrRowIndeces_u_w,&csrColumnOffsets_u_w,
			&csrRowIndeces_v_p,&csrColumnOffsets_v_p,
			&csrRowIndeces_v_u,&csrColumnOffsets_v_u,
			&csrRowIndeces_v_v,&csrColumnOffsets_v_v,
			//&csrRowIndeces_v_w,&csrColumnOffsets_v_w,
			//&csrRowIndeces_w_p,&csrColumnOffsets_w_p,
			//&csrRowIndeces_w_u,&csrColumnOffsets_w_u,
			//&csrRowIndeces_w_v,&csrColumnOffsets_w_v,
			//&csrRowIndeces_w_w,&csrColumnOffsets_w_w,
			&globalJacobian,
			&nExteriorElementBoundaries_global,
                        &exteriorElementBoundariesArray,
                        &elementBoundaryElementsArray,
                        &elementBoundaryLocalElementBoundariesArray,
			&x_ext,
                        &p_trial_ext,
                        &u_trial_ext,
                        &p_grad_trial_ext,
                        &u_grad_trial_ext,
                        &phi_ext,
                        &n_ext,
                        &kappa_ext,
			&meanGrainSize_ext,
			&porosity_ext,
                        &isDOFBoundary_p,
                        &isDOFBoundary_u,
                        &isDOFBoundary_v,
                        //&isDOFBoundary_w,
                        &isAdvectiveFluxBoundary_p,
                        &isAdvectiveFluxBoundary_u,
                        &isAdvectiveFluxBoundary_v,
                        //&isAdvectiveFluxBoundary_w,
                        &isDiffusiveFluxBoundary_u,
                        &isDiffusiveFluxBoundary_v,
                        //&isDiffusiveFluxBoundary_w,
                        &bc_p_ext,
                        &bc_flux_mass,
                        &bc_flux_mom_u_adv,
                        &bc_flux_mom_v_adv,
                        //&bc_flux_mom_w_adv,
                        &bc_u_ext,
                        &bc_flux_u_diff_ext,
                        &penalty_ext,
                        &bc_v_ext,
                        &bc_flux_v_diff_ext,
                        //&bc_w_ext,
                        //&bc_flux_w_diff_ext,
                        &p_test_dS_ext,
                        &u_test_dS_ext,
			&csrColumnOffsets_eb_p_p,
			&csrColumnOffsets_eb_p_u,
			&csrColumnOffsets_eb_p_v,
			//&csrColumnOffsets_eb_p_w,
			&csrColumnOffsets_eb_u_p,
			&csrColumnOffsets_eb_u_u,
			&csrColumnOffsets_eb_u_v,
			//&csrColumnOffsets_eb_u_w,
			&csrColumnOffsets_eb_v_p,
			&csrColumnOffsets_eb_v_u,
			&csrColumnOffsets_eb_v_v))
			//&csrColumnOffsets_eb_v_w,
			//&csrColumnOffsets_eb_w_p,
			//&csrColumnOffsets_eb_w_u,
			//&csrColumnOffsets_eb_w_v,
			//&csrColumnOffsets_eb_w_w))
    return NULL;
  calculateJacobian_VANS2P2D(nElements_global,
			     alpha_bdf,
			     epsFact_rho,
			     epsFact_mu,
			     sigma,
			     rho_0,
			     nu_0,
			     rho_1,
			     nu_1,
			     hFactor,
			     shockCapturingDiffusion,
			     turbulenceClosureFlag,
			     smagorinskyCoefficient,
			     t,
			     DDATA(x),
			     killNonlinearDrag,
			     DDATA(meanGrainSize),
			     DDATA(porosity),
			     IDATA(p_l2g), 
			     IDATA(u_l2g), 
			     DDATA(elementDiameter),
			     DDATA(p_dof), 
			     DDATA(u_dof), 
			     DDATA(v_dof), 
			     //DDATA(w_dof),
			     DDATA(p_trial), 
			     DDATA(u_trial), 
			     DDATA(p_grad_trial), 
			     DDATA(u_grad_trial), 
			     DDATA(p_test_dV), 
			     DDATA(u_test_dV), 
			     DDATA(p_grad_test_dV), 
			     DDATA(u_grad_test_dV), 
			     DDATA(vel_Hess_trial),DDATA(vel_Hess_test_dV),
			     DDATA(g),
			     DDATA(phi),
			     DDATA(n),
			     DDATA(kappa),
			     DDATA(mom_u_acc_beta_bdf),
			     DDATA(mom_v_acc_beta_bdf),
			     //DDATA(mom_w_acc_last),
			     DDATA(velocity_last),
			     DDATA(nu_t),
			     DDATA(cfl),
			     DDATA(numDiff_u_last),
			     DDATA(numDiff_v_last),
			     //DDATA(numDiff_w_last),
			     IDATA(sdInfo_u_u_rowptr),IDATA(sdInfo_u_u_colind),			      
			     IDATA(sdInfo_u_v_rowptr),IDATA(sdInfo_u_v_colind),
			     //IDATA(sdInfo_u_w_rowptr),IDATA(sdInfo_u_w_colind),
			     IDATA(sdInfo_v_v_rowptr),IDATA(sdInfo_v_v_colind),
			     IDATA(sdInfo_v_u_rowptr),IDATA(sdInfo_v_u_colind),
			     //IDATA(sdInfo_v_w_rowptr),IDATA(sdInfo_v_w_colind),
			     //IDATA(sdInfo_w_w_rowptr),IDATA(sdInfo_w_w_colind),
			     //IDATA(sdInfo_w_u_rowptr),IDATA(sdInfo_w_u_colind),
			     //IDATA(sdInfo_w_v_rowptr),IDATA(sdInfo_w_v_colind),
			     IDATA(csrRowIndeces_p_p),IDATA(csrColumnOffsets_p_p),
			     IDATA(csrRowIndeces_p_u),IDATA(csrColumnOffsets_p_u),
			     IDATA(csrRowIndeces_p_v),IDATA(csrColumnOffsets_p_v),
			     //IDATA(csrRowIndeces_p_w),IDATA(csrColumnOffsets_p_w),
			     IDATA(csrRowIndeces_u_p),IDATA(csrColumnOffsets_u_p),
			     IDATA(csrRowIndeces_u_u),IDATA(csrColumnOffsets_u_u),
			     IDATA(csrRowIndeces_u_v),IDATA(csrColumnOffsets_u_v),
			     //IDATA(csrRowIndeces_u_w),IDATA(csrColumnOffsets_u_w),
			     IDATA(csrRowIndeces_v_p),IDATA(csrColumnOffsets_v_p),
			     IDATA(csrRowIndeces_v_u),IDATA(csrColumnOffsets_v_u),
			     IDATA(csrRowIndeces_v_v),IDATA(csrColumnOffsets_v_v),
			     //IDATA(csrRowIndeces_v_w),IDATA(csrColumnOffsets_v_w),
			     //IDATA(csrRowIndeces_w_p),IDATA(csrColumnOffsets_w_p),
			     //IDATA(csrRowIndeces_w_u),IDATA(csrColumnOffsets_w_u),
			     //IDATA(csrRowIndeces_w_v),IDATA(csrColumnOffsets_w_v),
			     //IDATA(csrRowIndeces_w_w),IDATA(csrColumnOffsets_w_w),
			     CSRVAL(globalJacobian),
			     nExteriorElementBoundaries_global,
			     IDATA(exteriorElementBoundariesArray),
			     IDATA(elementBoundaryElementsArray),
			     IDATA(elementBoundaryLocalElementBoundariesArray),
			     DDATA(x_ext),
			     DDATA(p_trial_ext),
			     DDATA(u_trial_ext),
			     DDATA(p_grad_trial_ext),
			     DDATA(u_grad_trial_ext),
			     DDATA(phi_ext),
			     DDATA(n_ext),
			     DDATA(kappa_ext),
			     DDATA(meanGrainSize_ext),
			     DDATA(porosity_ext),
			     IDATA(isDOFBoundary_p),
			     IDATA(isDOFBoundary_u),
			     IDATA(isDOFBoundary_v),
			     //IDATA(isDOFBoundary_w),
			     IDATA(isAdvectiveFluxBoundary_p),
			     IDATA(isAdvectiveFluxBoundary_u),
			     IDATA(isAdvectiveFluxBoundary_v),
			     //IDATA(isAdvectiveFluxBoundary_w),
			     IDATA(isDiffusiveFluxBoundary_u),
			     IDATA(isDiffusiveFluxBoundary_v),
			     //IDATA(isDiffusiveFluxBoundary_w),
			     DDATA(bc_p_ext),
			     DDATA(bc_flux_mass),
			     DDATA(bc_flux_mom_u_adv),
			     DDATA(bc_flux_mom_v_adv),
			     //DDATA(bc_flux_mom_w_adv),
			     DDATA(bc_u_ext),
			     DDATA(bc_flux_u_diff_ext),
			     DDATA(penalty_ext),
			     DDATA(bc_v_ext),
			     DDATA(bc_flux_v_diff_ext),
			     //DDATA(bc_w_ext),
			     //DDATA(bc_flux_w_diff_ext),
			     DDATA(p_test_dS_ext),
			     DDATA(u_test_dS_ext),
			     IDATA(csrColumnOffsets_eb_p_p),
			     IDATA(csrColumnOffsets_eb_p_u),
			     IDATA(csrColumnOffsets_eb_p_v),
			     //IDATA(csrColumnOffsets_eb_p_w),
			     IDATA(csrColumnOffsets_eb_u_p),
			     IDATA(csrColumnOffsets_eb_u_u),
			     IDATA(csrColumnOffsets_eb_u_v),
			     //IDATA(csrColumnOffsets_eb_u_w),
			     IDATA(csrColumnOffsets_eb_v_p),
			     IDATA(csrColumnOffsets_eb_v_u),
			     IDATA(csrColumnOffsets_eb_v_v));
  //IDATA(csrColumnOffsets_eb_v_w),
  //IDATA(csrColumnOffsets_eb_w_p),
  //IDATA(csrColumnOffsets_eb_w_u),
  //IDATA(csrColumnOffsets_eb_w_v),
  //IDATA(csrColumnOffsets_eb_w_w));
  Py_INCREF(Py_None); 
  return Py_None;
}
static PyObject* cVANS2P2D_calculateVelocityAverage(PyObject* self,
						  PyObject* args)
{
  int nExteriorElementBoundaries_global,nInteriorElementBoundaries_global;
  PyObject* exteriorElementBoundariesArray,* interiorElementBoundariesArray,
    *elementBoundaryElementsArray,
    *elementBoundaryLocalElementBoundariesArray,
    *vel_l2g, 
    *u_dof, 
    *v_dof, 
    *vel_trial,
    *ebqe_velocity,
    *velocityAverage;

  if (!PyArg_ParseTuple(args,
                        "iOiOOOOOOOOO",
                        &nExteriorElementBoundaries_global,
			&exteriorElementBoundariesArray,
                        &nInteriorElementBoundaries_global,
			&interiorElementBoundariesArray,
			&elementBoundaryElementsArray,
			&elementBoundaryLocalElementBoundariesArray,
			&vel_l2g, 
			&u_dof, 
			&v_dof, 
			&vel_trial,
			&ebqe_velocity,
			&velocityAverage))
    return NULL;
  calculateVelocityAverage_VANS2P2D(nExteriorElementBoundaries_global,
				    IDATA(exteriorElementBoundariesArray),
				    nInteriorElementBoundaries_global,
				    IDATA(interiorElementBoundariesArray),
				    IDATA(elementBoundaryElementsArray),
				    IDATA(elementBoundaryLocalElementBoundariesArray),
				    IDATA(vel_l2g), 
				    DDATA(u_dof), 
				    DDATA(v_dof), 
				    DDATA(vel_trial),
				    DDATA(ebqe_velocity),
				    DDATA(velocityAverage));
  Py_INCREF(Py_None); 
  return Py_None;
}

static PyMethodDef cVANS2P2DMethods[] = {
 { "calculateResidual",
    cVANS2P2D_calculateResidual,
   METH_VARARGS, 
   "Calculate the global residual for the two-phase VANS equations"},
 { "calculateJacobian",
    cVANS2P2D_calculateJacobian,
   METH_VARARGS, 
   "Calculate the global Jacobian for the two-phase VANS equations"},
 { "calculateVelocityAverage",
    cVANS2P2D_calculateVelocityAverage,
   METH_VARARGS, 
   "Calculate the average velocity at the element boundaries"},
 { NULL,NULL,0,NULL}
};

extern "C"
{
PyMODINIT_FUNC initcVANS2P2D(void)
{
  PyObject *m,*d;
  m = Py_InitModule("cVANS2P2D", cVANS2P2DMethods);
  d = PyModule_GetDict(m);
  import_array();
}
}//extern "C"
