# A type of -*- python -*- file
import numpy as np
cimport numpy as np
cdef extern from "timeIntegration.h":
    #  Pseudo-Transient Continuation TTE formula choice for dt
    void cpsiTCtteDT "psiTCtteDT"(int nPoints,
                              		double tau,
                              		double dtn,
                              		double dtnm1,
                              		double* yn,
                              		double* ypn,
                              		double* ypnm1,
                              		double* dtnp1)
    #  DG limiting schemes
    void capplyDGlimitingP1Lagrange1d "applyDGlimitingP1Lagrange1d"(int limiterFlag,
                        				 int nElements_global,
                        				 int nNodes_element,
                        				 int nElementBoundaries_element,
                        				 int nDOF_element,
                        				 int* elementNodesArray,
                        				 int* elementNeighborsArray,
                        				 double* nodeArray,
                        				 double* elementBarycentersArray,
                        				 int* l2g,
                        				 int* tag,
                        				 double* Uin,
                        				 double* Uout)

    void capplyDGlimitingP1Lagrange1d_withVacuumTol "applyDGlimitingP1Lagrange1d_withVacuumTol"(int enforcePositivity,
                        	       double vacuumTol,
                        	       int nElements_global,
                        	       int nNodes_element,
                        	       int nElementBoundaries_element,
                        	       int nDOF_element,
                        	       int* elementNodesArray,
                        	       int* elementNeighborsArray,
                        	       double* nodeArray,
                        	       double* elementBarycentersArray,
                        	       int* l2g,
                        	       int* tag,
                        	       double* Uin,
                        	       double* Uout)

    void ccomputeElementNeighborShapeGradients "computeElementNeighborShapeGradients"(int nElements_global,
                      					  int nElementBoundaries_element,
                      					  int nSpace,
                      					  const int* elementBoundariesArray,
                      					  const int* elementNeighborsArray,
                      					  double* elementBarycentersArray,
                      					  double* elementBoundaryBarycentersArray,
                      					  double* elementNeighborShapeGradients)

    void ccomputeCockburnDGlimiterArrays2d "computeCockburnDGlimiterArrays2d"(int nElements_global,
                    				      int nElementBoundaries_element,
                    				      int nSpace,
                    				      const int* elementBoundariesArray,
                    				      const int* elementNeighborsArray,
                    				      const double* elementBarycentersArray,
                    				      const double* elementBoundaryBarycentersArray,
                    				      const double* elementNeighborShapeGradients,
                    				      double* alphas,
                    				      int* alphaNeighbors)

    void capplyCockburnDGlimiterP1Lagrange2d "applyCockburnDGlimiterP1Lagrange2d"(double nu,
                        					double Mh2,
                        					int nElements_global,
                        					int nElementBoundaries_element,
                        					int nSpace,
                        					int nDOF_element,
                        					int* elementNeighborsArray,
                        					int* l2g,
                        					int* tag,
                        					double* alphas,
                        					int* alphaNeighbors,
                        					double* Uin,
                        					double* Uout)

    void capplyDurlofskyDGlimiterP1Lagrange2d "applyDurlofskyDGlimiterP1Lagrange2d"(int killExtrema,
                      					 int allowMinWithUndershoot,
                      					 int nElements_global,
                      					 int nElementBoundaries_element,
                      					 int nNodes_element,
                      					 int nSpace,
                      					 int nDOF_element,
                      					 const int* elementNeighborsArray,
                      					 const int* elementBoundariesArray,
                      					 const int* elementNodesArray,
                      					 const double* nodeArray,
                      					 const double* elementBarycentersArray,
                      					 const double* elementBoundaryBarycentersArray,
                      					 const double* elementNeighborShapeGradients,
                      					 const int* l2g,
                      					 const double* grad_v0,
                      					 double* elementAverages,
                      					 int* tag,
                      					 double* Uin,
                      					 double* Uout)

    void capplyDurlofskyDGlimiterP1Lagrange3d "applyDurlofskyDGlimiterP1Lagrange3d" (int killExtrema,
                      					 int allowMinWithUndershoot,
                      					 int nElements_global,
                      					 int nElementBoundaries_element,
                      					 int nNodes_element,
                      					 int nSpace,
                      					 int nDOF_element,
                      					 const int* elementNeighborsArray,
                      					 const int* elementBoundariesArray,
                      					 const int* elementNodesArray,
                      					 const double* nodeArray,
                      					 const double* elementBarycentersArray,
                      					 const double* elementBoundaryBarycentersArray,
                      					 const double* elementNeighborShapeGradients,
                      					 const int* l2g,
                      					 const double* grad_v0,
                      					 double* elementAverages,
                      					 int* tag,
                      					 double* Uin,
                      					 double* Uout)

    void capplyDurlofskyDGlimiterP1Lagrange2d_withVacuumTol "applyDurlofskyDGlimiterP1Lagrange2d_withVacuumTol" (int killExtrema,
   						       int allowMinWithUndershoot,
   						       int enforcePositivity,
   						       double vacuumTol,
   						       int nElements_global,
   						       int nElementBoundaries_element,
   						       int nNodes_element,
   						       int nSpace,
   						       int nDOF_element,
   						       const int* elementNeighborsArray,
   						       const int* elementBoundariesArray,
   						       const int* elementNodesArray,
   						       const double* nodeArray,
   						       const double* elementBarycentersArray,
   						       const double* elementBoundaryBarycentersArray,
   						       const double* elementNeighborShapeGradients,
   						       const int* l2g,
   						       const double* grad_v0,
   						       double* elementAverages,
   						       int* tag,
   						       double* Uin,
   						       double* Uout)
# ------------------------------------------- #
def psiTCtteDT(int nPoints,
              double tau,
              double dtn,
              double dtnm1,
              np.ndarray yn,
              np.ndarray ypn,
              np.ndarray ypnm1,
              np.ndarray dtnp1):
   cpsiTCtteDT(nPoints,
              tau,
              dtn,
              dtnm1,
              <double*> yn.data,
		          <double*> ypn.data,
		          <double*> ypnm1.data,
              <double*> dtnp1.data)

def applyDGlimitingP1Lagrange1d(int limiterFlag,
                             int nElements_global,
                             int nNodes_element,
                             int nElementBoundaries_element,
                             int nDOF_element,
                             np.ndarray elementNodesArray,
                             np.ndarray elementNeighborsArray,
                             np.ndarray nodeArray,
                             np.ndarray elementBarycentersArray,
                             np.ndarray l2g,
                             np.ndarray tag,
                             np.ndarray Uin,
                             np.ndarray Uout):
    capplyDGlimitingP1Lagrange1d(limiterFlag,
                             nElements_global,
                             nNodes_element,
                             nElementBoundaries_element,
                             nDOF_element,
                             <int*> elementNodesArray.data,
                    				 <int*> elementNeighborsArray.data,
                    				 <double*> nodeArray.data,
                    				 <double*> elementBarycentersArray.data,
                    				 <int*> l2g.data,
                    				 <int*> tag.data,
                    				 <double*> Uin.data,
                    				 <double*> Uout.data)

def applyDGlimitingP1Lagrange1d_withVacuumTol(int enforcePositivity,
                           double vacuumTol,
                           int nElements_global,
                           int nNodes_element,
                           int nElementBoundaries_element,
                           int nDOF_element,
                           np.ndarray elementNodesArray,
                           np.ndarray elementNeighborsArray,
                           np.ndarray nodeArray,
                           np.ndarray elementBarycentersArray,
                           np.ndarray l2g,
                           np.ndarray tag,
                           np.ndarray Uin,
                           np.ndarray Uout):
    capplyDGlimitingP1Lagrange1d_withVacuumTol(enforcePositivity,
                           vacuumTol,
                           nElements_global,
                           nNodes_element,
                           nElementBoundaries_element,
                           nDOF_element,
                           <int*> elementNodesArray.data,
                           <int*> elementNeighborsArray.data,
                           <double*> nodeArray.data,
                           <double*> elementBarycentersArray.data,
                           <int*> l2g.data,
                           <int*> tag.data,
                           <double*> Uin.data,
                           <double*> Uout.data)


def computeElementNeighborShapeGradients(int nElements_global,
                              int nElementBoundaries_element,
                              int nSpace,
                              np.ndarray elementBoundariesArray,
                              np.ndarray elementNeighborsArray,
                              np.ndarray elementBarycentersArray,
                              np.ndarray elementBoundaryBarycentersArray,
                              np.ndarray elementNeighborShapeGradients):
    ccomputeElementNeighborShapeGradients(nElements_global,
                  					  nElementBoundaries_element,
                  					  nSpace,
                  					  <int*> elementBoundariesArray.data,
                  					  <int*> elementNeighborsArray.data,
                  					  <double*> elementBarycentersArray.data,
                  					  <double*> elementBoundaryBarycentersArray.data,
                  					  <double*> elementNeighborShapeGradients.data)

def computeCockburnDGlimiterArrays2d(int nElements_global,
                              int nElementBoundaries_element,
                              int nSpace,
                              np.ndarray elementBoundariesArray,
                              np.ndarray elementNeighborsArray,
                              np.ndarray elementBarycentersArray,
                              np.ndarray elementBoundaryBarycentersArray,
                              np.ndarray elementNeighborShapeGradients,
                              np.ndarray alphas,
                              np.ndarray alphaNeighbors):
    ccomputeCockburnDGlimiterArrays2d(nElements_global,
                              nElementBoundaries_element,
                              nSpace,
                              <int*> elementBoundariesArray.data,
                              <int*> elementNeighborsArray.data,
                              <double*> elementBarycentersArray.data,
                              <double*> elementBoundaryBarycentersArray.data,
                              <double*> elementNeighborShapeGradients.data,
                              <double*> alphas.data,
                              <int*> alphaNeighbors.data)

def applyCockburnDGlimiterP1Lagrange2d(double nu,
                              double Mh2,
                              int nElements_global,
                              int nElementBoundaries_element,
                              int nSpace,
                              int nDOF_element,
                              np.ndarray elementNeighborsArray,
                              np.ndarray l2g,
                              np.ndarray tag,
                              np.ndarray alphas,
                              np.ndarray alphaNeighbors,
                              np.ndarray Uin,
                              np.ndarray Uout):
    capplyCockburnDGlimiterP1Lagrange2d(nu,
                              Mh2,
                              nElements_global,
                              nElementBoundaries_element,
                              nSpace,
                              nDOF_element,
                              <int*> elementNeighborsArray.data,
                              <int*> l2g.data,
                              <int*> tag.data,
                              <double*> alphas.data,
                              <int*> alphaNeighbors.data,
                              <double*> Uin.data,
                              <double*> Uout.data)

def applyDurlofskyDGlimiterP1Lagrange2d(int killExtrema,
                             int allowMinWithUndershoot,
                             int nElements_global,
                             int nElementBoundaries_element,
                             int nNodes_element,
                             int nSpace,
                             int nDOF_element,
                             np.ndarray elementNeighborsArray,
                             np.ndarray elementBoundariesArray,
                             np.ndarray elementNodesArray,
                             np.ndarray nodeArray,
                             np.ndarray elementBarycentersArray,
                             np.ndarray elementBoundaryBarycentersArray,
                             np.ndarray elementNeighborShapeGradients,
                             np.ndarray l2g,
                             np.ndarray grad_v0,
                             np.ndarray elementAverages,
                             np.ndarray tag,
                             np.ndarray Uin,
                             np.ndarray Uout):
    capplyDurlofskyDGlimiterP1Lagrange2d(killExtrema,
                             allowMinWithUndershoot,
                             nElements_global,
                             nElementBoundaries_element,
                             nNodes_element,
                             nSpace,
                             nDOF_element,
                             <int*> elementNeighborsArray.data,
                             <int*> elementBoundariesArray.data,
                             <int*> elementNodesArray.data,
                             <double*> nodeArray.data,
                             <double*> elementBarycentersArray.data,
                             <double*> elementBoundaryBarycentersArray.data,
                             <double*> elementNeighborShapeGradients.data,
                             <int*> l2g.data,
                             <double*> grad_v0.data,
                             <double*> elementAverages.data,
                             <int*> tag.data,
                             <double*> Uin.data,
                             <double*> Uout.data)

def applyDurlofskyDGlimiterP1Lagrange3d(int killExtrema,
                             int allowMinWithUndershoot,
                             int nElements_global,
                             int nElementBoundaries_element,
                             int nNodes_element,
                             int nSpace,
                             int nDOF_element,
                             np.ndarray elementNeighborsArray,
                             np.ndarray elementBoundariesArray,
                             np.ndarray elementNodesArray,
                             np.ndarray nodeArray,
                             np.ndarray elementBarycentersArray,
                             np.ndarray elementBoundaryBarycentersArray,
                             np.ndarray elementNeighborShapeGradients,
                             np.ndarray l2g,
                             np.ndarray grad_v0,
                             np.ndarray elementAverages,
                             np.ndarray tag,
                             np.ndarray Uin,
                             np.ndarray Uout):
     capplyDurlofskyDGlimiterP1Lagrange3d(killExtrema,
                              allowMinWithUndershoot,
                              nElements_global,
                              nElementBoundaries_element,
                              nNodes_element,
                              nSpace,
                              nDOF_element,
                              <int*> elementNeighborsArray.data,
                              <int*> elementBoundariesArray.data,
                              <int*> elementNodesArray.data,
                              <double*> nodeArray.data,
                              <double*> elementBarycentersArray.data,
                              <double*> elementBoundaryBarycentersArray.data,
                              <double*> elementNeighborShapeGradients.data,
                              <int*> l2g.data,
                              <double*> grad_v0.data,
                              <double*> elementAverages.data,
                              <int*> tag.data,
                              <double*> Uin.data,
                              <double*> Uout.data)

def applyDurlofskyDGlimiterP1Lagrange2d_withVacuumTol(int killExtrema,
                  int allowMinWithUndershoot,
                  int enforcePositivity,
                  double vacuumTol,
                  int nElements_global,
                  int nElementBoundaries_element,
                  int nNodes_element,
                  int nSpace,
                  int nDOF_element,
                  np.ndarray elementNeighborsArray,
                  np.ndarray elementBoundariesArray,
                  np.ndarray elementNodesArray,
                  np.ndarray nodeArray,
                  np.ndarray elementBarycentersArray,
                  np.ndarray elementBoundaryBarycentersArray,
                  np.ndarray elementNeighborShapeGradients,
                  np.ndarray l2g,
                  np.ndarray grad_v0,
                  np.ndarray elementAverages,
                  np.ndarray tag,
                  np.ndarray Uin,
                  np.ndarray Uout):
    capplyDurlofskyDGlimiterP1Lagrange2d_withVacuumTol(killExtrema,
                  allowMinWithUndershoot,
                  enforcePositivity,
                  vacuumTol,
                  nElements_global,
                  nElementBoundaries_element,
                  nNodes_element,
                  nSpace,
                  nDOF_element,
                  <int*> elementNeighborsArray.data,
                  <int*> elementBoundariesArray.data,
                  <int*> elementNodesArray.data,
                  <double*> nodeArray.data,
                  <double*> elementBarycentersArray.data,
                  <double*> elementBoundaryBarycentersArray.data,
                  <double*> elementNeighborShapeGradients.data,
                  <int*> l2g.data,
                  <double*> grad_v0.data,
                  <double*> elementAverages.data,
                  <int*> tag.data,
                  <double*> Uin.data,
                  <double*> Uout.data)
