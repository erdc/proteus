# A type of -*- python -*- file
from sys import exit
import numpy as np
cimport numpy as np
cdef extern from "numericalFlux.h":
    void ccalculateInteriorLesaintRaviartNumericalFlux "calculateInteriorLesaintRaviartNumericalFlux"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)


    void ccalculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint "calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint"(double sonicPoint,
                                                        double sonicFlux,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)

    void ccalculateExteriorNumericalAdvectiveFluxRusanov "calculateExteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* df_element,
                                                        double* flux,
                                                        double* dflux)

    void ccalculateInteriorNumericalDiffusiveFlux "calculateInteriorNumericalDiffusiveFlux"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)
    void cupdateInteriorNumericalDiffusiveFluxJacobian "updateInteriorNumericalDiffusiveFluxJacobian"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian
                                                        )
    void ccalculateInteriorNumericalAdvectiveFlux "calculateInteriorNumericalAdvectiveFlux"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        )
    void cupdateInteriorNumericalAdvectiveFluxJacobian "updateInteriorNumericalAdvectiveFluxJacobian"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian
                                                        )
    void ccalculateInteriorNumericalAdvectiveFlux_average "calculateInteriorNumericalAdvectiveFlux_average"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        )
    void ccalculateExteriorNumericalAdvectiveFlux_NoBC "calculateExteriorNumericalAdvectiveFlux_NoBC"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left
                                                        )
    void ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind "calculateInteriorNumericalDiffusiveFlux_LDG_upwind"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        )
    void cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* dphi,
                                                        double* V,
                                                        double* DV,
                                                        double* DV_eb,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian,
                                                        double* fluxJacobian_eb
                                                        )
    void ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind "calculateExteriorNumericalDiffusiveFlux_LDG_upwind"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi_bc,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        )



    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian "updateGlobalExteriorNumericalDiffusiveFluxJacobian"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)

    void csetInflowFlux "setInflowFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int* exteriorElementBoundaries,
                                                        double* inflowFlux,
                                                        double* flux)

    void cupdateInteriorTwoSidedNumericalFluxJacobian "updateInteriorTwoSidedNumericalFluxJacobian"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian_2sided)



    void ccalculateGlobalExteriorNumericalAdvectiveFlux_NoBC "calculateGlobalExteriorNumericalAdvectiveFlux_NoBC"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left)

    void ccalculateGlobalExteriorInflowNumericalAdvectiveFlux "calculateGlobalExteriorInflowNumericalAdvectiveFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* inflowFlux,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left)


    void cupdateExteriorNumericalDiffusiveFluxJacobian_free "updateExteriorNumericalDiffusiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)

    void ccalculateInteriorChengShuNumericalFlux "calculateInteriorChengShuNumericalFlux"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* H_element,
                                                        double* dH_element,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)

    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF "calculateGlobalExteriorNumericalFluxDarcyFCFF"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* bc_f_m,
                                                        const double* bc_a_wm,
                                                        const double* bc_a_mw,
                                                        const double* bc_a_mm,
                                                        const double* bc_grad_phi_w,
                                                        const double* bc_grad_phi_m,
                                                        const double* bc_u_w,
                                                        const double* bc_u_m,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* a_mw,
                                                        const double* a_mm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  advectiveFlux_m,
                                                        double*  dadvectiveFlux_m_dw,
                                                        double*  diffusiveFlux_wm,
                                                        double*  diffusiveFlux_mw,
                                                        double*  diffusiveFlux_mm)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian "calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int nDOF_trial_element,
                                                        const int* l2g,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* da_wm_dw,
                                                        const double* da_wm_dm,
                                                        const double* a_mw,
                                                        const double* da_mw_dw,
                                                        const double* da_mw_dm,
                                                        const double* a_mm,
                                                        const double* da_mm_dw,
                                                        const double* da_mm_dm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* dphi_w_w,
                                                        const double* dphi_w_m,
                                                        const double* dphi_m_w,
                                                        const double* dphi_m_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* v,
                                                        const double* grad_v,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  fluxJacobian_ww,
                                                        double*  fluxJacobian_wm,
                                                        double*  fluxJacobian_mw,
                                                        double*  fluxJacobian_mm)

    void cupdateExteriorNumericalStressFluxJacobian "updateExteriorNumericalStressFluxJacobian"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        int* isStressBoundary_u,
                                                        int* isStressBoundary_v,
                                                        int* isStressBoundary_w,
                                                        double* n,
                                                        double* dstress_u_u,
                                                        double* dstress_u_v,
                                                        double* dstress_u_w,
                                                        double* dstress_v_u,
                                                        double* dstress_v_v,
                                                        double* dstress_v_w,
                                                        double* dstress_w_u,
                                                        double* dstress_w_v,
                                                        double* dstress_w_w,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian_u_u,
                                                        double* fluxJacobian_u_v,
                                                        double* fluxJacobian_u_w,
                                                        double* fluxJacobian_v_u,
                                                        double* fluxJacobian_v_v,
                                                        double* fluxJacobian_v_w,
                                                        double* fluxJacobian_w_u,
                                                        double* fluxJacobian_w_v,
                                                        double* fluxJacobian_w_w)

    void ccalculateExteriorNumericalFluxRichards_sd "calculateExteriorNumericalFluxRichards_sd"(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* isSeepageFace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* grad_psi,
                                                        double* u,
                                                        double* K_rho_g,
                                                        double* penalty,
                                                        double* diffusiveFlux)
    void ccalculateExteriorNumericalFluxJacobianRichards_sd "calculateExteriorNumericalFluxJacobianRichards_sd"(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* dK,
                                                        double* grad_psi,
                                                        double* grad_v,
                                                        double* u,
                                                        double* dK_rho_g,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian)
    void ccalculateGlobalExteriorNumericalDiffusiveFlux_sd "calculateGlobalExteriorNumericalDiffusiveFlux_sd"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* rowptr,
                                                        int* colind,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)
#######2222222
    void ccalculateInteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound "calculateInteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound"(double safetyFactor,
                                        int nInteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nQuadraturePoints_element,
                                        int nSpace,
                                        int* interiorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        double* n,
                                        double* u,
                                        double* f,
                                        double* lambda_bar_element,
                                        double* flux)
    void ccalculateInteriorNumericalDiffusiveFlux_sd "calculateInteriorNumericalDiffusiveFlux_sd"(int scale_penalty,
                                                    double penalty_floor,
                                                    int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* rowptr,
                            int* colind,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* a,
                            double* grad_phi,
                            double* u,
                            double* penalty,
                            double* flux)

    void cupdateInteriorNumericalDiffusiveFluxJacobian_sd "updateInteriorNumericalDiffusiveFluxJacobian_sd"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* l2g,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* a,
                                double* da,
                                double* grad_phi,
                                double* dphi,
                                double* v,
                                double* grad_v,
                                double* penalty,
                                double* fluxJacobian)
    void ccalculateExteriorNumericalDiffusiveFlux_sd "calculateExteriorNumericalDiffusiveFlux_sd"(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    int* rowptr,
                                                    int* colind,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    double* n,
                                                    double* bc_a,
                                                    double* bc_grad_phi,
                                                    double* bc_u,
                                                    double* a,
                                                    double* grad_phi,
                                                    double* u,
                                                    double* penalty,
                                                    double* flux)
    void cupdateExteriorNumericalDiffusiveFluxJacobian_sd "updateExteriorNumericalDiffusiveFluxJacobian_sd"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* rowptr,
                                                        int* colind,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)
    void cupdateExteriorNumericalDiffusiveFluxJacobian_free_sd "updateExteriorNumericalDiffusiveFluxJacobian_free_sd"(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* l2g,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* a,
                                double* da,
                                double* grad_phi,
                                double* dphi,
                                double* v,
                                double* grad_v,
                                double* penalty,
                                double* fluxJacobian)
    void ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind_sd "calculateInteriorNumericalDiffusiveFlux_LDG_upwind_sd"(int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* u,
                                double* a,
                                double* phi,
                                double* V,
                                double* penalty,
                                double* flux)
    void cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd "updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd"(int nInteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* interiorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian,
                                    double* fluxJacobian_eb)
    void ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind_sd "calculateExteriorNumericalDiffusiveFlux_LDG_upwind_sd"(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* u,
                                double* a,
                                double* phi_bc,
                                double* phi,
                                double* V,
                                double* penalty,
                                double* flux)
    void ccalculateDiffusionMatrixSplittings_LDG_sd "calculateDiffusionMatrixSplittings_LDG_sd"(int aSplit,
                            int nElements_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int * rowptr,
                            const int * colind,
                            const double * ebq_a,
                            const double * q_a,
                            double *eb_aHat,
                            double *eb_aTilde,
                            double *aHat,
                            double *aTilde)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF_sd "calculateGlobalExteriorNumericalFluxDarcyFCFF_sd"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_wm,
                                int* colind_wm,
                                int* rowptr_mw,
                                int* colind_mw,
                                int* rowptr_mm,
                                int* colind_mm,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_um,
                                const double* n,
                                const double* bc_f_m,
                                const double* bc_a_wm,
                                const double* bc_a_mw,
                                const double* bc_a_mm,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_m,
                                const double* bc_u_w,
                                const double* bc_u_m,
                                const double* f_m,
                                const double* df_m_dw,
                                const double* a_wm,
                                const double* a_mw,
                                const double* a_mm,
                                const double* grad_phi_w,
                                const double* grad_phi_m,
                                const double* u_w,
                                const double* u_m,
                                const double* penalty_w,
                                const double* penalty_m,
                                double* advectiveFlux_m,
                                double* dadvectiveFlux_m_dw,
                                double* diffusiveFlux_wm,
                                double* diffusiveFlux_mw,
                                double* diffusiveFlux_mm)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian_sd "calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian_sd"(int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nSpace,
                                            int nDOF_trial_element,
                                            int* rowptr_wm,
                                            int* colind_wm,
                                            int* rowptr_mw,
                                            int* colind_mw,
                                            int* rowptr_mm,
                                            int* colind_mm,
                                            const int* l2g,
                                            const int* exteriorElementBoundaries,
                                            const int* elementBoundaryElements,
                                            const int* elementBoundaryLocalElementBoundaries,
                                            const int* isDOFBoundary_uw,
                                            const int* isDOFBoundary_um,
                                            const double* n,
                                            const double* f_m,
                                            const double* df_m_dw,
                                            const double* a_wm,
                                            const double* da_wm_dw,
                                            const double* da_wm_dm,
                                            const double* a_mw,
                                            const double* da_mw_dw,
                                            const double* da_mw_dm,
                                            const double* a_mm,
                                            const double* da_mm_dw,
                                            const double* da_mm_dm,
                                            const double* grad_phi_w,
                                            const double* grad_phi_m,
                                            const double* dphi_w_w,
                                            const double* dphi_w_m,
                                            const double* dphi_m_w,
                                            const double* dphi_m_m,
                                            const double* u_w,
                                            const double* u_m,
                                            const double* v,
                                            const double* grad_v,
                                            const double* penalty_w,
                                            const double* penalty_m,
                                            double * fluxJacobian_ww,
                                            double * fluxJacobian_wm,
                                            double * fluxJacobian_mw,
                                            double * fluxJacobian_mm)
    void ccalculateGlobalExteriorNumericalFluxDarcyFC "calculateGlobalExteriorNumericalFluxDarcyFC"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int* exteriorElementBoundaries,
                            const int* elementBoundaryElements,
                            const int* elementBoundaryLocalElementBoundaries,
                            const int* isDOFBoundary_uw,
                            const int* isDOFBoundary_un,
                            int fluxBoundaryFlag_uw,
                            int fluxBoundaryFlag_un,
                            const double* n,
                            const double* bc_a_ww,
                            const double* bc_a_nn,
                            const double* bc_grad_phi_w,
                            const double* bc_grad_phi_n,
                            const double* bc_s_w,
                            const double* bc_psi_w,
                            const double* bc_psi_n,
                            const double* a_ww,
                            const double* a_nn,
                            const double* grad_phi_w,
                            const double* grad_phi_n,
                            const double* s_w,
                            const double* psi_w,
                            const double* psi_n,
                            const double* penalty_w,
                            const double* penalty_n,
                            double * diffusiveFlux_ww,
                            double * diffusiveFlux_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFC_sd "calculateGlobalExteriorNumericalFluxDarcyFC_sd"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_ww,
                                int* colind_ww,
                                int* rowptr_nn,
                                int* colind_nn,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_un,
                                int fluxBoundaryFlag_uw,
                                int fluxBoundaryFlag_un,
                                const double* n,
                                const double* bc_a_ww,
                                const double* bc_a_nn,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_n,
                                const double* bc_s_w,
                                const double* bc_psi_w,
                                const double* bc_psi_n,
                                const double* a_ww,
                                const double* a_nn,
                                const double* grad_phi_w,
                                const double* grad_phi_n,
                                const double* s_w,
                                const double* psi_w,
                                const double* psi_n,
                                const double* penalty_w,
                                const double* penalty_n,
                                double * diffusiveFlux_ww,
                                double * diffusiveFlux_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian "calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* s_w,
                                        const double* psi_w,
                                        const double* psi_n,
                                        const double* dpsi_n_dsw,
                                        const double* dpsi_n_dpsiw,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian_sd "calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian_sd"(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        int* rowptr_ww,
                                        int* colind_ww,
                                        int* rowptr_nn,
                                        int* colind_nn,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* s_w,
                                        const double* psi_w,
                                        const double* psi_n,
                                        const double* dpsi_n_dsw,
                                        const double* dpsi_n_dpsiw,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCPP "calculateGlobalExteriorNumericalFluxDarcyFCPP"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int* exteriorElementBoundaries,
                            const int* elementBoundaryElements,
                            const int* elementBoundaryLocalElementBoundaries,
                            const int* isDOFBoundary_uw,
                            const int* isDOFBoundary_un,
                            int fluxBoundaryFlag_uw,
                            int fluxBoundaryFlag_un,
                            const double* n,
                            const double* bc_a_ww,
                            const double* bc_a_nn,
                            const double* bc_grad_phi_w,
                            const double* bc_grad_phi_n,
                            const double* bc_psi_w,
                            const double* bc_psi_c,
                            const double* bc_psi_n,
                            const double* a_ww,
                            const double* a_nn,
                            const double* grad_phi_w,
                            const double* grad_phi_n,
                            const double* psi_w,
                            const double* psi_c,
                            const double* psi_n,
                            const double* penalty_w,
                            const double* penalty_n,
                            double * diffusiveFlux_ww,
                            double * diffusiveFlux_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCPP_sd "calculateGlobalExteriorNumericalFluxDarcyFCPP_sd"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_ww,
                                int* colind_ww,
                                int* rowptr_nn,
                                int* colind_nn,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_un,
                                int fluxBoundaryFlag_uw,
                                int fluxBoundaryFlag_un,
                                const double* n,
                                const double* bc_a_ww,
                                const double* bc_a_nn,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_n,
                                const double* bc_psi_w,
                                const double* bc_psi_c,
                                const double* bc_psi_n,
                                const double* a_ww,
                                const double* a_nn,
                                const double* grad_phi_w,
                                const double* grad_phi_n,
                                const double* psi_w,
                                const double* psi_c,
                                const double* psi_n,
                                const double* penalty_w,
                                const double* penalty_n,
                                double * diffusiveFlux_ww,
                                double * diffusiveFlux_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian "calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* psi_w,
                                        const double* psi_c,
                                        const double* psi_n,
                                        const double* dpsi_n_dpsiw,
                                        const double* dpsi_n_dpsic,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian_sd "calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian_sd"(int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nSpace,
                                            int nDOF_trial_element,
                                            int* rowptr_ww,
                                            int* colind_ww,
                                            int* rowptr_nn,
                                            int* colind_nn,
                                            const int* l2g,
                                            const int* exteriorElementBoundaries,
                                            const int* elementBoundaryElements,
                                            const int* elementBoundaryLocalElementBoundaries,
                                            const int* isDOFBoundary_uw,
                                            const int* isDOFBoundary_un,
                                            int fluxBoundaryFlag_uw,
                                            int fluxBoundaryFlag_un,
                                            const double* n,
                                            const double* a_ww,
                                            const double* da_ww_dw,
                                            const double* da_ww_dn,
                                            const double* a_nn,
                                            const double* da_nn_dw,
                                            const double* da_nn_dn,
                                            const double* grad_phi_w,
                                            const double* grad_phi_n,
                                            const double* dphi_w_w,
                                            const double* dphi_w_n,
                                            const double* dphi_n_w,
                                            const double* dphi_n_n,
                                            const double* psi_w,
                                            const double* psi_c,
                                            const double* psi_n,
                                            const double* dpsi_n_dpsiw,
                                            const double* dpsi_n_dpsic,
                                            const double* v,
                                            const double* grad_v,
                                            const double* penalty_w,
                                            const double* penalty_n,
                                            double * fluxJacobian_ww,
                                            double * fluxJacobian_wn,
                                            double * fluxJacobian_nw,
                                            double * fluxJacobian_nn)

    void ccalculateInteriorNumericalFluxShallowWater_1D "calculateInteriorNumericalFluxShallowWater_1D"(int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            double h_eps,
                                                    double tol_u,
                                                    double g,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* h,
                            double* hu,
                            double* flux_h,
                            double* flux_hu)
    void ccalculateExteriorNumericalFluxShallowWater_1D "calculateExteriorNumericalFluxShallowWater_1D"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                            double g,
                            double* n,
                            double* h_lv,
                            double* hu_lv,
                            double* h_rv,
                            double* hu_rv,
                            double* flux_h,
                            double* flux_hu)
    void ccalculateInteriorNumericalFluxShallowWater_2D "calculateInteriorNumericalFluxShallowWater_2D"(int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            double h_eps,
                                                    double tol_u,
                                                    double g,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* h,
                            double* hu,
                            double* hv,
                            double* flux_h,
                            double* flux_hu,
                            double* flux_hv)
    void ccalculateExteriorNumericalFluxShallowWater_2D "calculateExteriorNumericalFluxShallowWater_2D"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                            double g,
                            double* n,
                            double* h_lq,
                            double* hu_lq,
                            double* hv_lq,
                            double* h_rq,
                            double* hu_rq,
                            double* hv_rq,
                            double* flux_h,
                            double* flux_hu,
                            double* flux_hv)
    void ccalculateInteriorNumericalFluxShallowWaterHLL_1D "calculateInteriorNumericalFluxShallowWaterHLL_1D"(int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                double h_eps,
                                double tol_u,
                                double g,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* h,
                                double* hu,
                                double* flux_h,
                                double* flux_hu)
    void ccalculateExteriorNumericalFluxShallowWaterHLL_1D "calculateExteriorNumericalFluxShallowWaterHLL_1D"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                double h_eps,
                                double tol_u,
                                double g,
                                double* n,
                                double* h_lv,
                                double* hu_lv,
                                double* h_rv,
                                double* hu_rv,
                                double* flux_h,
                                double* flux_hu)
    void ccalculateGlobalExteriorNumericalStressFlux "calculateGlobalExteriorNumericalStressFlux"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int *isDOFBoundary_u,
                            int *isDOFBoundary_v,
                            int *isDOFBoundary_w,
                            double* n,
                            double* bc_u,
                            double* bc_v,
                            double* bc_w,
                            double* sigma,
                            double* u,
                            double* v,
                            double* w,
                            double* penalty,
                            double* stressFlux_u,
                            double* stressFlux_v,
                            double* stressFlux_w)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokes3D "calculateGlobalExteriorNumericalAdvectiveFluxStokes3D"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_p,
                                                        double* bc_f_mass,
                                                        double* p,
                                                        double* f_mass,
                                                        double* df_mass_du,
                                                        double* df_mass_dv,
                                                        double* df_mass_dw,
                                                        double* flux_mass,
                                                        double* flux_umom,
                                                        double* flux_vmom,
                                                        double* flux_wmom,
                                                        double* dflux_mass_du,
                                                        double* dflux_mass_dv,
                                                        double* dflux_mass_dw,
                                                        double* dflux_umom_dp,
                                                        double* dflux_vmom_dp,
                                                        double* dflux_wmom_dp,
                                                        double* velocity)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D "calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D"(int nExteriorElementBoundaries_global,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nSpace,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                int* isDOFBoundary_p,
                                                                int* isDOFBoundary_u,
                                                                int* isDOFBoundary_v,
                                                                int* isDOFBoundary_w,
                                                                double* n,
                                                                double* bc_p,
                                                                double* bc_f_mass,
                                                                double* bc_f_umom,
                                                                double* bc_f_vmom,
                                                                double* bc_f_wmom,
                                                                double* p,
                                                                double* f_mass,
                                                                double* f_umom,
                                                                double* f_vmom,
                                                                double* f_wmom,
                                                                double* df_mass_du,
                                                                double* df_mass_dv,
                                                                double* df_mass_dw,
                                                                double* df_umom_dp,
                                                                double* df_umom_du,
                                                                double* df_umom_dv,
                                                                double* df_umom_dw,
                                                                double* df_vmom_dp,
                                                                double* df_vmom_du,
                                                                double* df_vmom_dv,
                                                                double* df_vmom_dw,
                                                                double* df_wmom_dp,
                                                                double* df_wmom_du,
                                                                double* df_wmom_dv,
                                                                double* df_wmom_dw,
                                                                double* flux_mass,
                                                                double* flux_umom,
                                                                double* flux_vmom,
                                                                double* flux_wmom,
                                                                double* dflux_mass_du,
                                                                double* dflux_mass_dv,
                                                                double* dflux_mass_dw,
                                                                double* dflux_umom_dp,
                                                                double* dflux_umom_du,
                                                                double* dflux_umom_dv,
                                                                double* dflux_umom_dw,
                                                                double* dflux_vmom_dp,
                                                                double* dflux_vmom_du,
                                                                double* dflux_vmom_dv,
                                                                double* dflux_vmom_dw,
                                                                double* dflux_wmom_dp,
                                                                double* dflux_wmom_du,
                                                                double* dflux_wmom_dv,
                                                                double* dflux_wmom_dw,
                                                                double* velocity)
    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_sd "updateGlobalExteriorNumericalDiffusiveFluxJacobian_sd"(int scale_penalty,
                                                                    double penalty_floor,
                                                                    int nExteriorElementBoundaries_global,
                                                                    int nQuadraturePoints_elementBoundary,
                                                                    int nDOF_trial_element,
                                                                    int nSpace,
                                                                    int* rowptr,
                                                                    int* colind,
                                                                    int* l2g,
                                                                    int* exteriorElementBoundaries,
                                                                    int* elementBoundaryElements,
                                                                    int* elementBoundaryLocalElementBoundaries,
                                                                    int* isDOFBoundary,
                                                                    double* n,
                                                                    double* a,
                                                                    double* da,
                                                                    double* grad_phi,
                                                                    double* dphi,
                                                                    double* v,
                                                                    double* grad_v,
                                                                    double* penalty,
                                                                    double* fluxJacobian)

    void ccalculateGlobalExteriorNumericalAdvectiveFluxRusanov "calculateGlobalExteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                                int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nQuadraturePoints_element,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* df_element,
                                double* flux,
                                double* dflux)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound "calculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound"(double safetyFactor,
                                            int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nQuadraturePoints_element,
                                            int nSpace,
                                            int* exteriorElementBoundaries,
                                            int* elementBoundaryElements,
                                            int* elementBoundaryLocalElementBoundaries,
                                            int* isDOFBoundary,
                                            int* inflowFlag,
                                            double* n,
                                            double* bc_u,
                                            double* bc_f,
                                            double* u,
                                            double* f,
                                            double* lambda_bar,
                                            double* flux)
    void ccalculateExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound "calculateExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound"(double safetyFactor,
                                        int nExteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nQuadraturePoints_element,
                                        int nSpace,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        int* isDOFBoundary,
                                        int* inflowFlag,
                                        double* n,
                                        double* bc_u,
                                        double* bc_f,
                                        double* u,
                                        double* f,
                                        double* lambda_bar_element,
                                        double* flux)
    void ccalculateExteriorNumericalDiffusiveFlux "calculateExteriorNumericalDiffusiveFlux"(int scale_penalty,
                                                double penalty_floor,
                                                int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                double* n,
                                                double* bc_a,
                                                double* bc_grad_phi,
                                                double* bc_u,
                                                double* a,
                                                double* grad_phi,
                                                double* u,
                                                double* penalty,
                                                double* flux)

    void ccalculateGlobalExteriorNumericalDiffusiveFlux "calculateGlobalExteriorNumericalDiffusiveFlux"(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            double* n,
                            double* bc_a,
                            double* bc_grad_phi,
                            double* bc_u,
                            double* a,
                            double* grad_phi,
                            double* u,
                            double* penalty,
                            double* flux)
    void ccalculateExteriorNumericalDiffusiveFlux_free "calculateExteriorNumericalDiffusiveFlux_free"(int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                double* n,
                                                double* bc_a,
                                                double* bc_grad_phi,
                                                double* bc_u,
                                                double* a,
                                                double* grad_phi,
                                                double* u,
                                                double* penalty,
                                                double* flux)
    void ccalculateExteriorNumericalDiffusiveFlux_free_sd "calculateExteriorNumericalDiffusiveFlux_free_sd"(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux)
    void ccalculateGlobalExteriorNumericalDiffusiveFlux_free "calculateGlobalExteriorNumericalDiffusiveFlux_free"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux)
    void ccalculateGlobalExteriorNumericalDiffusiveFlux_free_sd "calculateGlobalExteriorNumericalDiffusiveFlux_free_sd"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux)
    void cupdateExteriorNumericalDiffusiveFluxJacobian "updateExteriorNumericalDiffusiveFluxJacobian"(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nDOF_trial_element,
                                                    int nSpace,
                                                    int* l2g,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    double* n,
                                                    double* a,
                                                    double* da,
                                                    double* grad_phi,
                                                    double* dphi,
                                                    double* v,
                                                    double* grad_v,
                                                    double* penalty,
                                                    double* fluxJacobian)

    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free "updateGlobalExteriorNumericalDiffusiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* l2g,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    int* isDOFBoundary,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* grad_phi,
                                    double* dphi,
                                    double* v,
                                    double* grad_v,
                                    double* penalty,
                                    double* fluxJacobian)
    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd "updateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd"(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* l2g,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    int* isDOFBoundary,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* grad_phi,
                                    double* dphi,
                                    double* v,
                                    double* grad_v,
                                    double* penalty,
                                    double* fluxJacobian)
    void ccalculateExteriorNumericalAdvectiveFlux "calculateExteriorNumericalAdvectiveFlux"(int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                int* inflowFlag,
                                                double* n,
                                                double* bc_u,
                                                double* bc_f,
                                                double* bc_df,
                                                double* u,
                                                double* f,
                                                double* df,
                                                double* flux,
                                                double* dflux)
    void ccalculateGlobalExteriorNumericalAdvectiveFlux "calculateGlobalExteriorNumericalAdvectiveFlux"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            int* inflowFlag,
                            double* n,
                            double* bc_u,
                            double* bc_f,
                            double* bc_df,
                            double* u,
                            double* f,
                            double* df,
                            double* flux,
                            double* dflux)
    void ccalculateExteriorNumericalAdvectiveFlux_free "calculateExteriorNumericalAdvectiveFlux_free"(int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    int* inflowFlag,
                                                    double* n,
                                                    double* bc_u,
                                                    double* bc_f,
                                                    double* bc_df,
                                                    double* u,
                                                    double* f,
                                                    double* df,
                                                    double* flux,
                                                    double* dflux)
    void ccalculateGlobalExteriorNumericalAdvectiveFlux_free "calculateGlobalExteriorNumericalAdvectiveFlux_free"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* flux,
                                double* dflux)
    void ccalculateExteriorNumericalAdvectiveFluxStokesP2D "calculateExteriorNumericalAdvectiveFluxStokesP2D"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp)
    void ccalculateExteriorNumericalAdvectiveFluxNavierStokes2D "calculateExteriorNumericalAdvectiveFluxNavierStokes2D"(int nExteriorElementBoundaries_global,
                                                            int nElementBoundaries_element,
                                                            int nQuadraturePoints_elementBoundary,
                                                            int nSpace,
                                                            int* exteriorElementBoundaries,
                                                            int* elementBoundaryElements,
                                                            int* elementBoundaryLocalElementBoundaries,
                                                            int* isDOFBoundary_p,
                                                            int* isDOFBoundary_u,
                                                            int* isDOFBoundary_v,
                                                            double* n,
                                                            double* bc_p,
                                                            double* bc_f_mass,
                                                            double* bc_f_umom,
                                                            double* bc_f_vmom,
                                                            double* p,
                                                            double* f_mass,
                                                            double* f_umom,
                                                            double* f_vmom,
                                                            double* df_mass_du,
                                                            double* df_mass_dv,
                                                            double* df_umom_du,
                                                            double* df_umom_dv,
                                                            double* df_vmom_du,
                                                            double* df_vmom_dv,
                                                            double* flux_mass,
                                                            double* flux_umom,
                                                            double* flux_vmom,
                                                            double* dflux_mass_du,
                                                            double* dflux_mass_dv,
                                                            double* dflux_umom_dp,
                                                            double* dflux_umom_du,
                                                            double* dflux_umom_dv,
                                                            double* dflux_vmom_dp,
                                                            double* dflux_vmom_du,
                                                            double* dflux_vmom_dv)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D "calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D"(int nExteriorElementBoundaries_global,
                                                                    int nQuadraturePoints_elementBoundary,
                                                                    int nSpace,
                                                                    int* exteriorElementBoundaries,
                                                                    int* elementBoundaryElements,
                                                                    int* elementBoundaryLocalElementBoundaries,
                                                                    int* isDOFBoundary_p,
                                                                    int* isDOFBoundary_u,
                                                                    int* isDOFBoundary_v,
                                                                    double* n,
                                                                    double* bc_p,
                                                                    double* bc_f_mass,
                                                                    double* bc_f_umom,
                                                                    double* bc_f_vmom,
                                                                    double* p,
                                                                    double* oneByRho,
                                                                    double* f_mass,
                                                                    double* f_umom,
                                                                    double* f_vmom,
                                                                    double* df_mass_du,
                                                                    double* df_mass_dv,
                                                                    double* df_umom_dp,
                                                                    double* df_umom_du,
                                                                    double* df_umom_dv,
                                                                    double* df_vmom_dp,
                                                                    double* df_vmom_du,
                                                                    double* df_vmom_dv,
                                                                    double* flux_mass,
                                                                    double* flux_umom,
                                                                    double* flux_vmom,
                                                                    double* dflux_mass_dp,
                                                                    double* dflux_mass_du,
                                                                    double* dflux_mass_dv,
                                                                    double* dflux_umom_dp,
                                                                    double* dflux_umom_du,
                                                                    double* dflux_umom_dv,
                                                                    double* dflux_vmom_dp,
                                                                    double* dflux_vmom_du,
                                                                    double* dflux_vmom_dv,
                                                                    double* velocity)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP2D "calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_p,
                                int* isDOFBoundary_u,
                                int* isDOFBoundary_v,
                                double* n,
                                double* bc_f,
                                double* bc_fpu,
                                double* bc_fpv,
                                double* f,
                                double* fpu,
                                double* fpv,
                                double* df_du,
                                double* df_dv,
                                double* dfpu_dp,
                                double* dfpv_dp,
                                double* flux,
                                double* fluxpu,
                                double* fluxpv,
                                double* dflux_du,
                                double* dflux_dv,
                                double* dfluxpu_dp,
                                double* dfluxpv_dp)
    void ccalculateExteriorNumericalAdvectiveFluxStokesP3D "calculateExteriorNumericalAdvectiveFluxStokesP3D"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* bc_fpw,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* fpw,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* df_dw,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* dfpw_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* fluxpw,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dflux_dw,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp,
                                                        double* dfluxpw_dp)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP3D "calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_p,
                                int* isDOFBoundary_u,
                                int* isDOFBoundary_v,
                                int* isDOFBoundary_w,
                                double* n,
                                double* bc_f,
                                double* bc_fpu,
                                double* bc_fpv,
                                double* bc_fpw,
                                double* f,
                                double* fpu,
                                double* fpv,
                                double* fpw,
                                double* df_du,
                                double* df_dv,
                                double* df_dw,
                                double* dfpu_dp,
                                double* dfpv_dp,
                                double* dfpw_dp,
                                double* flux,
                                double* fluxpu,
                                double* fluxpv,
                                double* fluxpw,
                                double* dflux_du,
                                double* dflux_dv,
                                double* dflux_dw,
                                double* dfluxpu_dp,
                                double* dfluxpv_dp,
                                double* dfluxpw_dp)
    void ccalculateExteriorNumericalAdvectiveFlux_average "calculateExteriorNumericalAdvectiveFlux_average"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux)
    void ccalculateGlobalExteriorNumericalAdvectiveFlux_average "calculateGlobalExteriorNumericalAdvectiveFlux_average"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* flux,
                                double* dflux)
    void cupdateExteriorNumericalAdvectiveFluxJacobian "updateExteriorNumericalAdvectiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nDOF_trial_element,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* inflowFlag,
                                                    double* dflux_left,
                                                    double* v,
                                                    double* fluxJacobian)
    void cupdateGlobalExteriorNumericalAdvectiveFluxJacobian "updateGlobalExteriorNumericalAdvectiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* inflowFlag,
                                double* dflux_left,
                                double* v,
                                double* fluxJacobian)
    void cupdateExteriorNumericalAdvectiveFluxJacobian_free "updateExteriorNumericalAdvectiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian)
    void cupdateGlobalExteriorNumericalAdvectiveFluxJacobian_free "updateGlobalExteriorNumericalAdvectiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nDOF_trial_element,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                int* inflowFlag,
                                                                double* dflux_left,
                                                                double* v,
                                                                double* fluxJacobian)
    void ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind "calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind"(int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* u,
                                    double* a,
                                    double* phi_bc,
                                    double* phi,
                                    double* V,
                                    double* penalty,
                                    double* flux)
    void ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd "calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd"(int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* u,
                                    double* a,
                                    double* phi_bc,
                                    double* phi,
                                    double* V,
                                    double* penalty,
                                    double* flux)
    void cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(int* isDiffusiveFluxBoundary,
                                                                int nExteriorElementBoundaries_global,
                                                                int nElementBoundaries_element,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nDOF_trial_element,
                                                                int nSpace,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                double* n,
                                                                double* a,
                                                                double* da,
                                                                double* dphi,
                                                                double* V,
                                                                double* DV,
                                                                double* DV_eb,
                                                                double* v,
                                                                double* penalty,
                                                                double* fluxJacobian,
                                                                double* fluxJacobian_eb)
    void cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd "updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd"(int* isDiffusiveFluxBoundary,
                                    int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian,
                                    double* fluxJacobian_eb)
    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(int* isDiffusiveFluxBoundary,
                                    int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian_exterior,
                                    double* fluxJacobian_eb)
    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd "updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd"(int* isDiffusiveFluxBoundary,
                                        int nExteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nDOF_trial_element,
                                        int nSpace,
                                        int* rowptr,
                                        int* colind,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        double* n,
                                        double* a,
                                        double* da,
                                        double* dphi,
                                        double* V,
                                        double* DV,
                                        double* DV_eb,
                                        double* v,
                                        double* penalty,
                                        double* fluxJacobian_exterior,
                                        double* fluxJacobian_eb)
    void ccalculateExteriorLesaintRaviartNumericalFlux "calculateExteriorLesaintRaviartNumericalFlux"(int nExteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int speedEvalFlag,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            int* inflowFlag,
                            double* n,
                            double* bc_u,
                            double* bc_H,
                            double* bc_dH,
                            double* u,
                            double* H,
                            double* dH,
                            double* flux,
                            double* dflux)
    void ccalculateGlobalExteriorLesaintRaviartNumericalFlux "calculateGlobalExteriorLesaintRaviartNumericalFlux"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int speedEvalFlag,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_H,
                                double* bc_dH,
                                double* u,
                                double* H,
                                double* dH,
                                double* flux,
                                double* dflux)
    void ccalculateGlobalExteriorNumericalAdvectiveFlux_DarcyFC "calculateGlobalExteriorNumericalAdvectiveFlux_DarcyFC"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_sw,
                                int* isDOFBoundary_psiw,
                                double* n,
                                double* bc_sw,
                                double* bc_psiw,
                                double* bc_fw,
                                double* bc_dfw_dsw,
                                double* bc_dfw_dpsiw,
                                double* bc_fn,
                                double* bc_dfn_dsw,
                                double* bc_dfn_dpsiw,
                                double* sw,
                                double* psiw,
                                double* fw,
                                double* dfw_dsw,
                                double* dfw_dpsiw,
                                double* fn,
                                double* dfn_dsw,
                                double* dfn_dpsiw,
                                double* fluxw,
                                double* dfluxw_dsw,
                                double* dfluxw_dpsiw,
                                double* fluxn,
                                double* dfluxn_dsw,
                                double* dfluxn_dpsiw)
    void ccalculateGlobalExteriorNumericalFluxDarcySplitPressure "calculateGlobalExteriorNumericalFluxDarcySplitPressure"(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    const int* exteriorElementBoundaries,
                                    const int* elementBoundaryElements,
                                    const int* elementBoundaryLocalElementBoundaries,
                                    const int* isDOFBoundary_u,
                                    const double* n,
                                    const double* bc_a,
                                    const double* bc_grad_phi,
                                    const double* bc_psi_w,
                                    const double* bc_psi_n,
                                    const double* a,
                                    const double* grad_phi,
                                    const double* psi_w,
                                    const double* psi_n,
                                    const double* penalty,
                                    double*  diffusiveFlux)
    void ccalculateGlobalExteriorNumericalFluxDarcySplitPressure_sd "calculateGlobalExteriorNumericalFluxDarcySplitPressure_sd"(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    const int* rowptr,
                                    const int* colind,
                                    const int* exteriorElementBoundaries,
                                    const int* elementBoundaryElements,
                                    const int* elementBoundaryLocalElementBoundaries,
                                    const int* isDOFBoundary_u,
                                    const double* n,
                                    const double* bc_a,
                                    const double* bc_grad_phi,
                                    const double* bc_psi_w,
                                    const double* bc_psi_n,
                                    const double* a,
                                    const double* grad_phi,
                                    const double* psi_w,
                                    const double* psi_n,
                                    const double* penalty,
                                    double*  diffusiveFlux)
    void cupdateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd "updateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd"(int scale_penalty,
                                        double penalty_floor,
                                        int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nDOF_trial_element,
                                        int nSpace,
                                        int* rowptr,
                                        int* colind,
                                        int* l2g,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        int* isDOFBoundary,
                                        int* fluxBoundaryFlag,
                                        double* n,
                                        double* a,
                                        double* da,
                                        double* grad_phi,
                                        double* dphi,
                                        double* v,
                                        double* grad_v,
                                        double* penalty,
                                        double* fluxJacobian)
    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokes2D "calculateGlobalExteriorNumericalAdvectiveFluxStokes2D"(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int *isDOFBoundary_p,
                                int *isDOFBoundary_u,
                                int *isDOFBoundary_v,
                                double* n,
                                double* bc_p,
                                double* bc_f_mass,
                                double* p,
                                double* f_mass,
                                double* df_mass_du,
                                double* df_mass_dv,
                                double* flux_mass,
                                double* flux_umom,
                                double* flux_vmom,
                                double* dflux_mass_du,
                                double* dflux_mass_dv,
                                double* dflux_umom_dp,
                                double* dflux_vmom_dp,
                                double* velocity)
    void ccalculateInteriorNumericalAdvectiveFluxRusanov "calculateInteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                            int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nQuadraturePoints_element,
                            int nSpace,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* u,
                            double* f,
                            double* df,
                            double* df_element,
                            double* flux,
                            double* dflux_left,
                            double* dflux_right)
##-----------------
def calculateInteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                       np.ndarray interiorElementBoundaries,
                                       np.ndarray elementBoundaryElements,
                                       np.ndarray elementBoundaryLocalElementBoundaries,
                                       np.ndarray n,
                                       np.ndarray u,
                                       np.ndarray f,
                                       np.ndarray lambda_bar_element,
                                       np.ndarray flux):
    ccalculateInteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound( safetyFactor,
                                        interiorElementBoundaries.shape[0],
                                        f.shape[1],
                                        f.shape[2],
                                        lambda_bar_element.shape[1],
                                        f.shape[3],
                                       <int*> interiorElementBoundaries.data,
                                       <int*> elementBoundaryElements.data,
                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                       <double*> n.data,
                                       <double*> u.data,
                                       <double*> f.data,
                                       <double*> lambda_bar_element.data,
                                       <double*> flux.data)
def calculateInteriorLesaintRaviartNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
         ccalculateInteriorLesaintRaviartNumericalFlux( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(double sonicPoint,
                                                        double sonicFlux,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
         ccalculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(sonicPoint,
                                                         sonicFlux,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateInteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray df_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
         ccalculateInteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> df_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)

def calculateInteriorNumericalDiffusiveFlux( int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
         ccalculateInteriorNumericalDiffusiveFlux( scale_penalty,
                                                         penalty_floor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateInteriorNumericalDiffusiveFluxJacobian( int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian
                                                        ):
         cupdateInteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                         penalty_floor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)

def calculateInteriorNumericalAdvectiveFlux(            np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right
                                                        ):
         ccalculateInteriorNumericalAdvectiveFlux( interiorElementBoundaries.shape[0],# int nInteriorElementBoundaries_global,
                                                        f.shape[1],#int nElementBoundaries_element,
                                                        f.shape[2],#int nQuadraturePoints_elementBoundary,
                                                        f.shape[3],#int nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def updateInteriorNumericalAdvectiveFluxJacobian(       np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian
                                                        ):
         cupdateInteriorNumericalAdvectiveFluxJacobian( interiorElementBoundaries.shape[0],
                                                        v.shape[1],
                                                        v.shape[2],
                                                        v.shape[3],
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorNumericalAdvectiveFlux_average( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right
                                                        ):
         ccalculateInteriorNumericalAdvectiveFlux_average( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateExteriorNumericalAdvectiveFlux_NoBC(np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left
                                                        ):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFlux_NoBC(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux_left.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFlux_NoBC(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux_left.data)

def calculateExteriorNumericalAdvectiveFlux(np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux
                                                        ):
    if f.ndim > 3:
         ccalculateExteriorNumericalAdvectiveFlux( exteriorElementBoundaries[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFlux( exteriorElementBoundaries[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)

def updateExteriorNumericalAdvectiveFluxJacobian( np.ndarray exteriorElementBoundaries,
                                                np.ndarray elementBoundaryElements,
                                                np.ndarray elementBoundaryLocalElementBoundaries,
                                                np.ndarray inflowFlag,
                                                np.ndarray dflux_left,
                                                np.ndarray v,
                                                np.ndarray fluxJacobian
                                                ):
    if v.ndim==4:
        cupdateExteriorNumericalAdvectiveFluxJacobian( exteriorElementBoundaries.shape[0],
                                                    v.shape[1],
                                                    v.shape[2],
                                                    v.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> dflux_left.data,
                                                    <double*> v.data,
                                                    <double*> fluxJacobian.data)
    elif v.ndim==3:
        cupdateGlobalExteriorNumericalAdvectiveFluxJacobian( exteriorElementBoundaries.shape[0],
                                                        v.shape[1],
                                                        v.shape[2],
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorNumericalDiffusiveFlux_LDG_upwind( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux
                                                        ):
         ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray dphi,
                                                        np.ndarray V,
                                                        np.ndarray DV,
                                                        np.ndarray DV_eb,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian,
                                                        np.ndarray fluxJacobian_eb
                                                        ):
         cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data,
                                                        <double*> fluxJacobian_eb.data)

def setInflowFlux(int nExteriorElementBoundaries_global,
                int nQuadraturePoints_elementBoundary,
                np.ndarray exteriorElementBoundaries,
                np.ndarray inflowFlux,
                np.ndarray flux):
         csetInflowFlux( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <double*> inflowFlux.data,
                                                        <double*> flux.data)
def updateInteriorTwoSidedNumericalFluxJacobian(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian_2sided):
         cupdateInteriorTwoSidedNumericalFluxJacobian( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian_2sided.data)

def calculateGlobalExteriorInflowNumericalAdvectiveFlux(np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray inflowFlux,
                                                        np.ndarray n,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left):
         ccalculateGlobalExteriorInflowNumericalAdvectiveFlux(exteriorElementBoundaries.shape[0],
						              f.shape[1],
						              f.shape[2],
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> inflowFlux.data,
                                                        <double*> n.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data)
def updateGlobalExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray dflux_left,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian):
         cupdateGlobalExteriorNumericalAdvectiveFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorChengShuNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray H_element,
                                                        np.ndarray dH_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
         ccalculateInteriorChengShuNumericalFlux( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> H_element.data,
                                                        <double*> dH_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_uw,
                                                        np.ndarray isDOFBoundary_um,
                                                        np.ndarray n,
                                                        np.ndarray bc_f_m,
                                                        np.ndarray bc_a_wm,
                                                        np.ndarray bc_a_mw,
                                                        np.ndarray bc_a_mm,
                                                        np.ndarray bc_grad_phi_w,
                                                        np.ndarray bc_grad_phi_m,
                                                        np.ndarray bc_u_w,
                                                        np.ndarray bc_u_m,
                                                        np.ndarray f_m,
                                                        np.ndarray df_m_dw,
                                                        np.ndarray a_wm,
                                                        np.ndarray a_mw,
                                                        np.ndarray a_mm,
                                                        np.ndarray grad_phi_w,
                                                        np.ndarray grad_phi_m,
                                                        np.ndarray u_w,
                                                        np.ndarray u_m,
                                                        np.ndarray penalty_w,
                                                        np.ndarray penalty_m,
                                                        np.ndarray advectiveFlux_m,
                                                        np.ndarray dadvectiveFlux_m_dw,
                                                        np.ndarray diffusiveFlux_wm,
                                                        np.ndarray diffusiveFlux_mw,
                                                        np.ndarray diffusiveFlux_mm):
         ccalculateGlobalExteriorNumericalFluxDarcyFCFF( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_uw.data,
                                                        <int*> isDOFBoundary_um.data,
                                                        <double*> n.data,
                                                        <double*> bc_f_m.data,
                                                        <double*> bc_a_wm.data,
                                                        <double*> bc_a_mw.data,
                                                        <double*> bc_a_mm.data,
                                                        <double*> bc_grad_phi_w.data,
                                                        <double*> bc_grad_phi_m.data,
                                                        <double*> bc_u_w.data,
                                                        <double*> bc_u_m.data,
                                                        <double*> f_m.data,
                                                        <double*> df_m_dw.data,
                                                        <double*> a_wm.data,
                                                        <double*> a_mw.data,
                                                        <double*> a_mm.data,
                                                        <double*> grad_phi_w.data,
                                                        <double*> grad_phi_m.data,
                                                        <double*> u_w.data,
                                                        <double*> u_m.data,
                                                        <double*> penalty_w.data,
                                                        <double*> penalty_m.data,
                                                        <double*> advectiveFlux_m.data,
                                                        <double*> dadvectiveFlux_m_dw.data,
                                                        <double*> diffusiveFlux_wm.data,
                                                        <double*> diffusiveFlux_mw.data,
                                                        <double*> diffusiveFlux_mm.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int nDOF_trial_element,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_uw,
                                                        np.ndarray isDOFBoundary_um,
                                                        np.ndarray n,
                                                        np.ndarray f_m,
                                                        np.ndarray df_m_dw,
                                                        np.ndarray a_wm,
                                                        np.ndarray da_wm_dw,
                                                        np.ndarray da_wm_dm,
                                                        np.ndarray a_mw,
                                                        np.ndarray da_mw_dw,
                                                        np.ndarray da_mw_dm,
                                                        np.ndarray a_mm,
                                                        np.ndarray da_mm_dw,
                                                        np.ndarray da_mm_dm,
                                                        np.ndarray grad_phi_w,
                                                        np.ndarray grad_phi_m,
                                                        np.ndarray dphi_w_w,
                                                        np.ndarray dphi_w_m,
                                                        np.ndarray dphi_m_w,
                                                        np.ndarray dphi_m_m,
                                                        np.ndarray u_w,
                                                        np.ndarray u_m,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty_w,
                                                        np.ndarray penalty_m,
                                                        np.ndarray fluxJacobian_ww,
                                                        np.ndarray fluxJacobian_wm,
                                                        np.ndarray fluxJacobian_mw,
                                                        np.ndarray fluxJacobian_mm):
         ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         nDOF_trial_element,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_uw.data,
                                                        <int*> isDOFBoundary_um.data,
                                                        <double*> n.data,
                                                        <double*> f_m.data,
                                                        <double*> df_m_dw.data,
                                                        <double*> a_wm.data,
                                                        <double*> da_wm_dw.data,
                                                        <double*> da_wm_dm.data,
                                                        <double*> a_mw.data,
                                                        <double*> da_mw_dw.data,
                                                        <double*> da_mw_dm.data,
                                                        <double*> a_mm.data,
                                                        <double*> da_mm_dw.data,
                                                        <double*> da_mm_dm.data,
                                                        <double*> grad_phi_w.data,
                                                        <double*> grad_phi_m.data,
                                                        <double*> dphi_w_w.data,
                                                        <double*> dphi_w_m.data,
                                                        <double*> dphi_m_w.data,
                                                        <double*> dphi_m_m.data,
                                                        <double*> u_w.data,
                                                        <double*> u_m.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty_w.data,
                                                        <double*> penalty_m.data,
                                                        <double*> fluxJacobian_ww.data,
                                                        <double*> fluxJacobian_wm.data,
                                                        <double*> fluxJacobian_mw.data,
                                                        <double*> fluxJacobian_mm.data)
def updateExteriorNumericalStressFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray isDOFBoundary_w,
                                                        np.ndarray isStressBoundary_u,
                                                        np.ndarray isStressBoundary_v,
                                                        np.ndarray isStressBoundary_w,
                                                        np.ndarray n,
                                                        np.ndarray dstress_u_u,
                                                        np.ndarray dstress_u_v,
                                                        np.ndarray dstress_u_w,
                                                        np.ndarray dstress_v_u,
                                                        np.ndarray dstress_v_v,
                                                        np.ndarray dstress_v_w,
                                                        np.ndarray dstress_w_u,
                                                        np.ndarray dstress_w_v,
                                                        np.ndarray dstress_w_w,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian_u_u,
                                                        np.ndarray fluxJacobian_u_v,
                                                        np.ndarray fluxJacobian_u_w,
                                                        np.ndarray fluxJacobian_v_u,
                                                        np.ndarray fluxJacobian_v_v,
                                                        np.ndarray fluxJacobian_v_w,
                                                        np.ndarray fluxJacobian_w_u,
                                                        np.ndarray fluxJacobian_w_v,
                                                        np.ndarray fluxJacobian_w_w):
         cupdateExteriorNumericalStressFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <int*> isDOFBoundary_w.data,
                                                        <int*> isStressBoundary_u.data,
                                                        <int*> isStressBoundary_v.data,
                                                        <int*> isStressBoundary_w.data,
                                                        <double*> n.data,
                                                        <double*> dstress_u_u.data,
                                                        <double*> dstress_u_v.data,
                                                        <double*> dstress_u_w.data,
                                                        <double*> dstress_v_u.data,
                                                        <double*> dstress_v_v.data,
                                                        <double*> dstress_v_w.data,
                                                        <double*> dstress_w_u.data,
                                                        <double*> dstress_w_v.data,
                                                        <double*> dstress_w_w.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian_u_u.data,
                                                        <double*> fluxJacobian_u_v.data,
                                                        <double*> fluxJacobian_u_w.data,
                                                        <double*> fluxJacobian_v_u.data,
                                                        <double*> fluxJacobian_v_v.data,
                                                        <double*> fluxJacobian_v_w.data,
                                                        <double*> fluxJacobian_w_u.data,
                                                        <double*> fluxJacobian_w_v.data,
                                                        <double*> fluxJacobian_w_w.data)
def calculateExteriorNumericalFluxRichards_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray isSeepageFace,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray K,
                                                        np.ndarray grad_psi,
                                                        np.ndarray u,
                                                        np.ndarray K_rho_g,
                                                        np.ndarray penalty,
                                                        np.ndarray diffusiveFlux):
         ccalculateExteriorNumericalFluxRichards_sd(<int*> rowptr.data,
                                                        <int*> colind.data,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> isSeepageFace.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> K.data,
                                                        <double*> grad_psi.data,
                                                        <double*> u.data,
                                                        <double*> K_rho_g.data,
                                                        <double*> penalty.data,
                                                        <double*> diffusiveFlux.data)
def calculateExteriorNumericalFluxJacobianRichards_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray K,
                                                        np.ndarray dK,
                                                        np.ndarray grad_psi,
                                                        np.ndarray grad_v,
                                                        np.ndarray u,
                                                        np.ndarray dK_rho_g,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
         ccalculateExteriorNumericalFluxJacobianRichards_sd(<int*> rowptr.data,
                                                        <int*> colind.data,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> K.data,
                                                        <double*> dK.data,
                                                        <double*> grad_psi.data,
                                                        <double*> grad_v.data,
                                                        <double*> u.data,
                                                        <double*> dK_rho_g.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def calculateExteriorNumericalAdvectiveFluxStokes2D(np.ndarray exteriorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray isDOFBoundary_p,
                                                    np.ndarray isDOFBoundary_u,
                                                    np.ndarray isDOFBoundary_v,
                                                    np.ndarray n,
                                                    np.ndarray bc_p,
                                                    np.ndarray bc_f_mass,
                                                    np.ndarray p,
                                                    np.ndarray f_mass,
                                                    np.ndarray df_mass_du,
                                                    np.ndarray df_mass_dv,
                                                    np.ndarray flux_mass,
                                                    np.ndarray flux_umom,
                                                    np.ndarray flux_vmom,
                                                    np.ndarray dflux_mass_du,
                                                    np.ndarray dflux_mass_dv,
                                                    np.ndarray dflux_umom_dp,
                                                    np.ndarray dflux_vmom_dp,
                                                    np.ndarray velocity):
    ccalculateGlobalExteriorNumericalAdvectiveFluxStokes2D(exteriorElementBoundaries.shape[0],
                                                    f_mass.shape[1],
                                                    f_mass.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <double*> n.data,
                                                    <double*> bc_p.data,
                                                    <double*> bc_f_mass.data,
                                                    <double*> p.data,
                                                    <double*> f_mass.data,
                                                    <double*> df_mass_du.data,
                                                    <double*> df_mass_dv.data,
                                                    <double*> flux_mass.data,
                                                    <double*> flux_umom.data,
                                                    <double*> flux_vmom.data,
                                                    <double*> dflux_mass_du.data,
                                                    <double*> dflux_mass_dv.data,
                                                    <double*> dflux_umom_dp.data,
                                                    <double*> dflux_vmom_dp.data,
                                                    <double*> velocity.data)
####=========

def calculateInteriorNumericalDiffusiveFlux_sd( np.ndarray rowptr,
                                                np.ndarray colind,
                                                np.ndarray interiorElementBoundaries,
                                                np.ndarray elementBoundaryElements,
                                                np.ndarray elementBoundaryLocalElementBoundaries,
                                                np.ndarray n,
                                                np.ndarray a,
                                                np.ndarray grad_phi,
                                                np.ndarray u,
                                                np.ndarray penalty,
                                                np.ndarray flux,
                                                int scale_penalty=0,
                                                double penalty_floor=0.0):
     ccalculateInteriorNumericalDiffusiveFlux_sd( scale_penalty,
                                                penalty_floor,
                                                  interiorElementBoundaries.shape[0],#nInteriorElementBoundaries_global,
                                                  grad_phi.shape[1],#nElementBoundaries_element,
                                                  grad_phi.shape[2],#nQuadraturePoints_elementBoundary,
                                                  grad_phi.shape[3],#nSpace,
                                                <int*> rowptr.data,
                                                <int*> colind.data,
                                                <int*> interiorElementBoundaries.data,
                                                <int*> elementBoundaryElements.data,
                                                <int*> elementBoundaryLocalElementBoundaries.data,
                                                <double*> n.data,
                                                <double*> a.data,
                                                <double*> grad_phi.data,
                                                <double*> u.data,
                                                <double*> penalty.data,
                                                <double*> flux.data)

def updateInteriorNumericalDiffusiveFluxJacobian_sd(np.ndarray rowptr,
                                                    np.ndarray colind,
                                                    np.ndarray l2g,
                                                    np.ndarray interiorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray n,
                                                    np.ndarray a,
                                                    np.ndarray da,
                                                    np.ndarray grad_phi,
                                                    np.ndarray dphi,
                                                    np.ndarray v,
                                                    np.ndarray grad_v,
                                                    np.ndarray penalty,
                                                    np.ndarray fluxJacobian,
                                                    int scale_penalty=0,
                                                    double penalty_floor=0.0):
     cupdateInteriorNumericalDiffusiveFluxJacobian_sd(scale_penalty,
                                                    penalty_floor,
                                                      interiorElementBoundaries.shape[0],
                                                      grad_v.shape[1],
                                                      grad_v.shape[2],
                                                      grad_v.shape[3],
                                                      grad_v.shape[4],
                                                    <int*> rowptr.data,
                                                    <int*> colind.data,
                                                    <int*> l2g.data,
                                                    <int*> interiorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <double*> n.data,
                                                    <double*> a.data,
                                                    <double*> da.data,
                                                    <double*> grad_phi.data,
                                                    <double*> dphi.data,
                                                    <double*> v.data,
                                                    <double*> grad_v.data,
                                                    <double*> penalty.data,
                                                    <double*> fluxJacobian.data)
def updateExteriorNumericalDiffusiveFluxJacobian_sd(np.ndarray rowptr,
                                                    np.ndarray colind,
                                                    np.ndarray l2g,
                                                    np.ndarray exteriorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray isDOFBoundary,
                                                    np.ndarray n,
                                                    np.ndarray a,
                                                    np.ndarray da,
                                                    np.ndarray grad_phi,
                                                    np.ndarray dphi,
                                                    np.ndarray v,
                                                    np.ndarray grad_v,
                                                    np.ndarray penalty,
                                                    np.ndarray fluxJacobian,
                                                    int scale_penalty=0,
                                                    double penalty_floor=0.0):
    if grad_v.ndim == 5:
        cupdateExteriorNumericalDiffusiveFluxJacobian_sd( scale_penalty,
                                                    penalty_floor,
                                                    exteriorElementBoundaries.shape[0],
                                                    grad_v.shape[1],
                                                    grad_v.shape[2],
                                                    grad_v.shape[3],
                                                    grad_v.shape[4],
                                                    <int*> rowptr.data,
                                                    <int*> colind.data,
                                                    <int*> l2g.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> a.data,
                                                    <double*> da.data,
                                                    <double*> grad_phi.data,
                                                    <double*> dphi.data,
                                                    <double*> v.data,
                                                    <double*> grad_v.data,
                                                    <double*> penalty.data,
                                                    <double*> fluxJacobian.data)
    elif grad_v.ndim==4:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_sd( scale_penalty,
                                                    penalty_floor,
                                                    exteriorElementBoundaries.shape[0],
                                                    grad_v.shape[1],
                                                    grad_v.shape[2],
                                                    grad_v.shape[3],
                                                    <int*> rowptr.data,
                                                    <int*> colind.data,
                                                    <int*> l2g.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> a.data,
                                                    <double*> da.data,
                                                    <double*> grad_phi.data,
                                                    <double*> dphi.data,
                                                    <double*> v.data,
                                                    <double*> grad_v.data,
                                                    <double*> penalty.data,
                                                    <double*> fluxJacobian.data)
    else:
        exit(1)
def updateExteriorNumericalDiffusiveFluxJacobian_free_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
    if grad_v.ndim == 5:
        cupdateExteriorNumericalDiffusiveFluxJacobian_free_sd(exteriorElementBoundaries.shape[0],
                                                            grad_v.shape[1],
                                                            grad_v.shape[2],
                                                            grad_v.shape[3],
                                                            grad_v.shape[4],
                                                            <int*> rowptr.data,
                                                            <int*> colind.data,
                                                            <int*> l2g.data,
                                                            <int*> exteriorElementBoundaries.data,
                                                            <int*> elementBoundaryElements.data,
                                                            <int*> elementBoundaryLocalElementBoundaries.data,
                                                            <int*> isDOFBoundary.data,
                                                            <double*> n.data,
                                                            <double*> a.data,
                                                            <double*> da.data,
                                                            <double*> grad_phi.data,
                                                            <double*> dphi.data,
                                                            <double*> v.data,
                                                            <double*> grad_v.data,
                                                            <double*> penalty.data,
                                                            <double*> fluxJacobian.data)
    elif grad_v.ndim == 4:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd(exteriorElementBoundaries.shape[0],
                                                            grad_v.shape[1],
                                                            grad_v.shape[2],
                                                            grad_v.shape[3],
                                                            <int*> rowptr.data,
                                                            <int*> colind.data,
                                                            <int*> l2g.data,
                                                            <int*> exteriorElementBoundaries.data,
                                                            <int*> elementBoundaryElements.data,
                                                            <int*> elementBoundaryLocalElementBoundaries.data,
                                                            <int*> isDOFBoundary.data,
                                                            <double*> n.data,
                                                            <double*> a.data,
                                                            <double*> da.data,
                                                            <double*> grad_phi.data,
                                                            <double*> dphi.data,
                                                            <double*> v.data,
                                                            <double*> grad_v.data,
                                                            <double*> penalty.data,
                                                            <double*> fluxJacobian.data)
    else:
        exit(1)
def calculateInteriorNumericalDiffusiveFlux_LDG_upwind_sd(int nInteriorElementBoundaries_global,
                               int nElementBoundaries_element,
                               int nQuadraturePoints_elementBoundary,
                               int nSpace,
                               np.ndarray rowptr,
                               np.ndarray colind,
                               np.ndarray interiorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray n,
                               np.ndarray u,
                               np.ndarray a,
                               np.ndarray phi,
                               np.ndarray V,
                               np.ndarray penalty,
                               np.ndarray flux):
     ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind_sd( nInteriorElementBoundaries_global,
                                nElementBoundaries_element,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                               <int*> rowptr.data,
                               <int*> colind.data,
                               <int*> interiorElementBoundaries.data,
                               <int*> elementBoundaryElements.data,
                               <int*> elementBoundaryLocalElementBoundaries.data,
                               <double*> n.data,
                               <double*> u.data,
                               <double*> a.data,
                               <double*> phi.data,
                               <double*> V.data,
                               <double*> penalty.data,
                               <double*> flux.data)
def updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                np.ndarray rowptr,
                                np.ndarray colind,
                                np.ndarray interiorElementBoundaries,
                                np.ndarray elementBoundaryElements,
                                np.ndarray elementBoundaryLocalElementBoundaries,
                                np.ndarray n,
                                np.ndarray a,
                                np.ndarray da,
                                np.ndarray dphi,
                                np.ndarray V,
                                np.ndarray DV,
                                np.ndarray DV_eb,
                                np.ndarray v,
                                np.ndarray penalty,
                                np.ndarray fluxJacobian,
                                np.ndarray fluxJacobian_eb):
     cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd( nInteriorElementBoundaries_global,
                                 nElementBoundaries_element,
                                 nQuadraturePoints_elementBoundary,
                                 nDOF_trial_element,
                                 nSpace,
                                <int*> rowptr.data,
                                <int*> colind.data,
                                <int*> interiorElementBoundaries.data,
                                <int*> elementBoundaryElements.data,
                                <int*> elementBoundaryLocalElementBoundaries.data,
                                <double*> n.data,
                                <double*> a.data,
                                <double*> da.data,
                                <double*> dphi.data,
                                <double*> V.data,
                                <double*> DV.data,
                                <double*> DV_eb.data,
                                <double*> v.data,
                                <double*> penalty.data,
                                <double*> fluxJacobian.data,
                                <double*> fluxJacobian_eb.data)

def calculateDiffusionMatrixSplittings_LDG_sd(int aSplit,
                           int nSpace,
                           np.ndarray  rowptr,
                           np.ndarray  colind,
                           np.ndarray  ebq_a,
                           np.ndarray  q_a,
                           np.ndarray eb_aHat,
                           np.ndarray eb_aTilde,
                           np.ndarray aHat,
                           np.ndarray aTilde):
     ccalculateDiffusionMatrixSplittings_LDG_sd( aSplit,
					         q_a.shape[0],
					         ebq_a.shape[1],
					         q_a.shape[1],
					         ebq_a.shape[2],
                            nSpace,
                           <int*>  rowptr.data,
                           <int*>  colind.data,
                           <double*>  ebq_a.data,
                           <double*>  q_a.data,
                           <double*> eb_aHat.data,
                           <double*> eb_aTilde.data,
                           <double*> aHat.data,
                           <double*> aTilde.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                np.ndarray rowptr_wm,
                                np.ndarray colind_wm,
                                np.ndarray rowptr_mw,
                                np.ndarray colind_mw,
                                np.ndarray rowptr_mm,
                                np.ndarray colind_mm,
                                np.ndarray exteriorElementBoundaries,
                                np.ndarray elementBoundaryElements,
                                np.ndarray elementBoundaryLocalElementBoundaries,
                                np.ndarray isDOFBoundary_uw,
                                np.ndarray isDOFBoundary_um,
                                np.ndarray n,
                                np.ndarray bc_f_m,
                                np.ndarray bc_a_wm,
                                np.ndarray bc_a_mw,
                                np.ndarray bc_a_mm,
                                np.ndarray bc_grad_phi_w,
                                np.ndarray bc_grad_phi_m,
                                np.ndarray bc_u_w,
                                np.ndarray bc_u_m,
                                np.ndarray f_m,
                                np.ndarray df_m_dw,
                                np.ndarray a_wm,
                                np.ndarray a_mw,
                                np.ndarray a_mm,
                                np.ndarray grad_phi_w,
                                np.ndarray grad_phi_m,
                                np.ndarray u_w,
                                np.ndarray u_m,
                                np.ndarray penalty_w,
                                np.ndarray penalty_m,
                                np.ndarray advectiveFlux_m,
                                np.ndarray dadvectiveFlux_m_dw,
                                np.ndarray diffusiveFlux_wm,
                                np.ndarray diffusiveFlux_mw,
                                np.ndarray diffusiveFlux_mm):
     ccalculateGlobalExteriorNumericalFluxDarcyFCFF_sd( nExteriorElementBoundaries_global,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                                <int*> rowptr_wm.data,
                                <int*> colind_wm.data,
                                <int*> rowptr_mw.data,
                                <int*> colind_mw.data,
                                <int*> rowptr_mm.data,
                                <int*> colind_mm.data,
                                <int*> exteriorElementBoundaries.data,
                                <int*> elementBoundaryElements.data,
                                <int*> elementBoundaryLocalElementBoundaries.data,
                                <int*> isDOFBoundary_uw.data,
                                <int*> isDOFBoundary_um.data,
                                <double*> n.data,
                                <double*> bc_f_m.data,
                                <double*> bc_a_wm.data,
                                <double*> bc_a_mw.data,
                                <double*> bc_a_mm.data,
                                <double*> bc_grad_phi_w.data,
                                <double*> bc_grad_phi_m.data,
                                <double*> bc_u_w.data,
                                <double*> bc_u_m.data,
                                <double*> f_m.data,
                                <double*> df_m_dw.data,
                                <double*> a_wm.data,
                                <double*> a_mw.data,
                                <double*> a_mm.data,
                                <double*> grad_phi_w.data,
                                <double*> grad_phi_m.data,
                                <double*> u_w.data,
                                <double*> u_m.data,
                                <double*> penalty_w.data,
                                <double*> penalty_m.data,
                                <double*> advectiveFlux_m.data,
                                <double*> dadvectiveFlux_m_dw.data,
                                <double*> diffusiveFlux_wm.data,
                                <double*> diffusiveFlux_mw.data,
                                <double*> diffusiveFlux_mm.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        np.ndarray rowptr_wm,
                                        np.ndarray colind_wm,
                                        np.ndarray rowptr_mw,
                                        np.ndarray colind_mw,
                                        np.ndarray rowptr_mm,
                                        np.ndarray colind_mm,
                                        np.ndarray l2g,
                                        np.ndarray exteriorElementBoundaries,
                                        np.ndarray elementBoundaryElements,
                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                        np.ndarray isDOFBoundary_uw,
                                        np.ndarray isDOFBoundary_um,
                                        np.ndarray n,
                                        np.ndarray f_m,
                                        np.ndarray df_m_dw,
                                        np.ndarray a_wm,
                                        np.ndarray da_wm_dw,
                                        np.ndarray da_wm_dm,
                                        np.ndarray a_mw,
                                        np.ndarray da_mw_dw,
                                        np.ndarray da_mw_dm,
                                        np.ndarray a_mm,
                                        np.ndarray da_mm_dw,
                                        np.ndarray da_mm_dm,
                                        np.ndarray grad_phi_w,
                                        np.ndarray grad_phi_m,
                                        np.ndarray dphi_w_w,
                                        np.ndarray dphi_w_m,
                                        np.ndarray dphi_m_w,
                                        np.ndarray dphi_m_m,
                                        np.ndarray u_w,
                                        np.ndarray u_m,
                                        np.ndarray v,
                                        np.ndarray grad_v,
                                        np.ndarray penalty_w,
                                        np.ndarray penalty_m,
                                        np.ndarray fluxJacobian_ww,
                                        np.ndarray fluxJacobian_wm,
                                        np.ndarray fluxJacobian_mw,
                                        np.ndarray fluxJacobian_mm):
     ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian_sd( nExteriorElementBoundaries_global,
                                         nQuadraturePoints_elementBoundary,
                                         nSpace,
                                         nDOF_trial_element,
                                        <int*> rowptr_wm.data,
                                        <int*> colind_wm.data,
                                        <int*> rowptr_mw.data,
                                        <int*> colind_mw.data,
                                        <int*> rowptr_mm.data,
                                        <int*> colind_mm.data,
                                        <int*> l2g.data,
                                        <int*> exteriorElementBoundaries.data,
                                        <int*> elementBoundaryElements.data,
                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                        <int*> isDOFBoundary_uw.data,
                                        <int*> isDOFBoundary_um.data,
                                        <double*> n.data,
                                        <double*> f_m.data,
                                        <double*> df_m_dw.data,
                                        <double*> a_wm.data,
                                        <double*> da_wm_dw.data,
                                        <double*> da_wm_dm.data,
                                        <double*> a_mw.data,
                                        <double*> da_mw_dw.data,
                                        <double*> da_mw_dm.data,
                                        <double*> a_mm.data,
                                        <double*> da_mm_dw.data,
                                        <double*> da_mm_dm.data,
                                        <double*> grad_phi_w.data,
                                        <double*> grad_phi_m.data,
                                        <double*> dphi_w_w.data,
                                        <double*> dphi_w_m.data,
                                        <double*> dphi_m_w.data,
                                        <double*> dphi_m_m.data,
                                        <double*> u_w.data,
                                        <double*> u_m.data,
                                        <double*> v.data,
                                        <double*> grad_v.data,
                                        <double*> penalty_w.data,
                                        <double*> penalty_m.data,
                                        <double*> fluxJacobian_ww.data,
                                        <double*> fluxJacobian_wm.data,
                                        <double*> fluxJacobian_mw.data,
                                        <double*> fluxJacobian_mm.data)
def calculateGlobalExteriorNumericalFluxDarcyFC(int nExteriorElementBoundaries_global,
                         int nQuadraturePoints_elementBoundary,
                         int nSpace,
                         np.ndarray exteriorElementBoundaries,
                         np.ndarray elementBoundaryElements,
                         np.ndarray elementBoundaryLocalElementBoundaries,
                         np.ndarray isDOFBoundary_uw,
                         np.ndarray isDOFBoundary_un,
                         int fluxBoundaryFlag_uw,
                         int fluxBoundaryFlag_un,
                         np.ndarray n,
                         np.ndarray bc_a_ww,
                         np.ndarray bc_a_nn,
                         np.ndarray bc_grad_phi_w,
                         np.ndarray bc_grad_phi_n,
                         np.ndarray bc_s_w,
                         np.ndarray bc_psi_w,
                         np.ndarray bc_psi_n,
                         np.ndarray a_ww,
                         np.ndarray a_nn,
                         np.ndarray grad_phi_w,
                         np.ndarray grad_phi_n,
                         np.ndarray s_w,
                         np.ndarray psi_w,
                         np.ndarray psi_n,
                         np.ndarray penalty_w,
                         np.ndarray penalty_n,
                         np.ndarray  diffusiveFlux_ww,
                         np.ndarray  diffusiveFlux_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFC( nExteriorElementBoundaries_global,
                          nQuadraturePoints_elementBoundary,
                          nSpace,
                         <int*> exteriorElementBoundaries.data,
                         <int*> elementBoundaryElements.data,
                         <int*> elementBoundaryLocalElementBoundaries.data,
                         <int*> isDOFBoundary_uw.data,
                         <int*> isDOFBoundary_un.data,
                          fluxBoundaryFlag_uw,
                          fluxBoundaryFlag_un,
                         <double*> n.data,
                         <double*> bc_a_ww.data,
                         <double*> bc_a_nn.data,
                         <double*> bc_grad_phi_w.data,
                         <double*> bc_grad_phi_n.data,
                         <double*> bc_s_w.data,
                         <double*> bc_psi_w.data,
                         <double*> bc_psi_n.data,
                         <double*> a_ww.data,
                         <double*> a_nn.data,
                         <double*> grad_phi_w.data,
                         <double*> grad_phi_n.data,
                         <double*> s_w.data,
                         <double*> psi_w.data,
                         <double*> psi_n.data,
                         <double*> penalty_w.data,
                         <double*> penalty_n.data,
                         <double*>  diffusiveFlux_ww.data,
                         <double*>  diffusiveFlux_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFC_sd(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            np.ndarray rowptr_ww,
                            np.ndarray colind_ww,
                            np.ndarray rowptr_nn,
                            np.ndarray colind_nn,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray isDOFBoundary_uw,
                            np.ndarray isDOFBoundary_un,
                            int fluxBoundaryFlag_uw,
                            int fluxBoundaryFlag_un,
                            np.ndarray n,
                            np.ndarray bc_a_ww,
                            np.ndarray bc_a_nn,
                            np.ndarray bc_grad_phi_w,
                            np.ndarray bc_grad_phi_n,
                            np.ndarray bc_s_w,
                            np.ndarray bc_psi_w,
                            np.ndarray bc_psi_n,
                            np.ndarray a_ww,
                            np.ndarray a_nn,
                            np.ndarray grad_phi_w,
                            np.ndarray grad_phi_n,
                            np.ndarray s_w,
                            np.ndarray psi_w,
                            np.ndarray psi_n,
                            np.ndarray penalty_w,
                            np.ndarray penalty_n,
                            np.ndarray  diffusiveFlux_ww,
                            np.ndarray  diffusiveFlux_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFC_sd( nExteriorElementBoundaries_global,
                             nQuadraturePoints_elementBoundary,
                             nSpace,
                            <int*> rowptr_ww.data,
                            <int*> colind_ww.data,
                            <int*> rowptr_nn.data,
                            <int*> colind_nn.data,
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary_uw.data,
                            <int*> isDOFBoundary_un.data,
                             fluxBoundaryFlag_uw,
                             fluxBoundaryFlag_un,
                            <double*> n.data,
                            <double*> bc_a_ww.data,
                            <double*> bc_a_nn.data,
                            <double*> bc_grad_phi_w.data,
                            <double*> bc_grad_phi_n.data,
                            <double*> bc_s_w.data,
                            <double*> bc_psi_w.data,
                            <double*> bc_psi_n.data,
                            <double*> a_ww.data,
                            <double*> a_nn.data,
                            <double*> grad_phi_w.data,
                            <double*> grad_phi_n.data,
                            <double*> s_w.data,
                            <double*> psi_w.data,
                            <double*> psi_n.data,
                            <double*> penalty_w.data,
                            <double*> penalty_n.data,
                            <double*>  diffusiveFlux_ww.data,
                            <double*>  diffusiveFlux_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                       int nQuadraturePoints_elementBoundary,
                                       int nSpace,
                                       int nDOF_trial_element,
                                       np.ndarray l2g,
                                       np.ndarray exteriorElementBoundaries,
                                       np.ndarray elementBoundaryElements,
                                       np.ndarray elementBoundaryLocalElementBoundaries,
                                       np.ndarray isDOFBoundary_uw,
                                       np.ndarray isDOFBoundary_un,
                                       int fluxBoundaryFlag_uw,
                                       int fluxBoundaryFlag_un,
                                       np.ndarray n,
                                       np.ndarray a_ww,
                                       np.ndarray da_ww_dw,
                                       np.ndarray da_ww_dn,
                                       np.ndarray a_nn,
                                       np.ndarray da_nn_dw,
                                       np.ndarray da_nn_dn,
                                       np.ndarray grad_phi_w,
                                       np.ndarray grad_phi_n,
                                       np.ndarray dphi_w_w,
                                       np.ndarray dphi_w_n,
                                       np.ndarray dphi_n_w,
                                       np.ndarray dphi_n_n,
                                       np.ndarray s_w,
                                       np.ndarray psi_w,
                                       np.ndarray psi_n,
                                       np.ndarray dpsi_n_dsw,
                                       np.ndarray dpsi_n_dpsiw,
                                       np.ndarray v,
                                       np.ndarray grad_v,
                                       np.ndarray penalty_w,
                                       np.ndarray penalty_n,
                                       np.ndarray  fluxJacobian_ww,
                                       np.ndarray  fluxJacobian_wn,
                                       np.ndarray  fluxJacobian_nw,
                                       np.ndarray  fluxJacobian_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian( nExteriorElementBoundaries_global,
                                        nQuadraturePoints_elementBoundary,
                                        nSpace,
                                        nDOF_trial_element,
                                       <int*> l2g.data,
                                       <int*> exteriorElementBoundaries.data,
                                       <int*> elementBoundaryElements.data,
                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                       <int*> isDOFBoundary_uw.data,
                                       <int*> isDOFBoundary_un.data,
                                        fluxBoundaryFlag_uw,
                                        fluxBoundaryFlag_un,
                                       <double*> n.data,
                                       <double*> a_ww.data,
                                       <double*> da_ww_dw.data,
                                       <double*> da_ww_dn.data,
                                       <double*> a_nn.data,
                                       <double*> da_nn_dw.data,
                                       <double*> da_nn_dn.data,
                                       <double*> grad_phi_w.data,
                                       <double*> grad_phi_n.data,
                                       <double*> dphi_w_w.data,
                                       <double*> dphi_w_n.data,
                                       <double*> dphi_n_w.data,
                                       <double*> dphi_n_n.data,
                                       <double*> s_w.data,
                                       <double*> psi_w.data,
                                       <double*> psi_n.data,
                                       <double*> dpsi_n_dsw.data,
                                       <double*> dpsi_n_dpsiw.data,
                                       <double*> v.data,
                                       <double*> grad_v.data,
                                       <double*> penalty_w.data,
                                       <double*> penalty_n.data,
                                       <double*>  fluxJacobian_ww.data,
                                       <double*>  fluxJacobian_wn.data,
                                       <double*>  fluxJacobian_nw.data,
                                       <double*>  fluxJacobian_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                      int nQuadraturePoints_elementBoundary,
                                      int nSpace,
                                      int nDOF_trial_element,
                                      np.ndarray rowptr_ww,
                                      np.ndarray colind_ww,
                                      np.ndarray rowptr_nn,
                                      np.ndarray colind_nn,
                                      np.ndarray l2g,
                                      np.ndarray exteriorElementBoundaries,
                                      np.ndarray elementBoundaryElements,
                                      np.ndarray elementBoundaryLocalElementBoundaries,
                                      np.ndarray isDOFBoundary_uw,
                                      np.ndarray isDOFBoundary_un,
                                      int fluxBoundaryFlag_uw,
                                      int fluxBoundaryFlag_un,
                                      np.ndarray n,
                                      np.ndarray a_ww,
                                      np.ndarray da_ww_dw,
                                      np.ndarray da_ww_dn,
                                      np.ndarray a_nn,
                                      np.ndarray da_nn_dw,
                                      np.ndarray da_nn_dn,
                                      np.ndarray grad_phi_w,
                                      np.ndarray grad_phi_n,
                                      np.ndarray dphi_w_w,
                                      np.ndarray dphi_w_n,
                                      np.ndarray dphi_n_w,
                                      np.ndarray dphi_n_n,
                                      np.ndarray s_w,
                                      np.ndarray psi_w,
                                      np.ndarray psi_n,
                                      np.ndarray dpsi_n_dsw,
                                      np.ndarray dpsi_n_dpsiw,
                                      np.ndarray v,
                                      np.ndarray grad_v,
                                      np.ndarray penalty_w,
                                      np.ndarray penalty_n,
                                      np.ndarray  fluxJacobian_ww,
                                      np.ndarray  fluxJacobian_wn,
                                      np.ndarray  fluxJacobian_nw,
                                      np.ndarray  fluxJacobian_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian_sd( nExteriorElementBoundaries_global,
                                       nQuadraturePoints_elementBoundary,
                                       nSpace,
                                       nDOF_trial_element,
                                      <int*> rowptr_ww.data,
                                      <int*> colind_ww.data,
                                      <int*> rowptr_nn.data,
                                      <int*> colind_nn.data,
                                      <int*> l2g.data,
                                      <int*> exteriorElementBoundaries.data,
                                      <int*> elementBoundaryElements.data,
                                      <int*> elementBoundaryLocalElementBoundaries.data,
                                      <int*> isDOFBoundary_uw.data,
                                      <int*> isDOFBoundary_un.data,
                                       fluxBoundaryFlag_uw,
                                       fluxBoundaryFlag_un,
                                      <double*> n.data,
                                      <double*> a_ww.data,
                                      <double*> da_ww_dw.data,
                                      <double*> da_ww_dn.data,
                                      <double*> a_nn.data,
                                      <double*> da_nn_dw.data,
                                      <double*> da_nn_dn.data,
                                      <double*> grad_phi_w.data,
                                      <double*> grad_phi_n.data,
                                      <double*> dphi_w_w.data,
                                      <double*> dphi_w_n.data,
                                      <double*> dphi_n_w.data,
                                      <double*> dphi_n_n.data,
                                      <double*> s_w.data,
                                      <double*> psi_w.data,
                                      <double*> psi_n.data,
                                      <double*> dpsi_n_dsw.data,
                                      <double*> dpsi_n_dpsiw.data,
                                      <double*> v.data,
                                      <double*> grad_v.data,
                                      <double*> penalty_w.data,
                                      <double*> penalty_n.data,
                                      <double*>  fluxJacobian_ww.data,
                                      <double*>  fluxJacobian_wn.data,
                                      <double*>  fluxJacobian_nw.data,
                                      <double*>  fluxJacobian_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFCPP(int nExteriorElementBoundaries_global,
                           int nQuadraturePoints_elementBoundary,
                           int nSpace,
                           np.ndarray exteriorElementBoundaries,
                           np.ndarray elementBoundaryElements,
                           np.ndarray elementBoundaryLocalElementBoundaries,
                           np.ndarray isDOFBoundary_uw,
                           np.ndarray isDOFBoundary_un,
                           int fluxBoundaryFlag_uw,
                           int fluxBoundaryFlag_un,
                           np.ndarray n,
                           np.ndarray bc_a_ww,
                           np.ndarray bc_a_nn,
                           np.ndarray bc_grad_phi_w,
                           np.ndarray bc_grad_phi_n,
                           np.ndarray bc_psi_w,
                           np.ndarray bc_psi_c,
                           np.ndarray bc_psi_n,
                           np.ndarray a_ww,
                           np.ndarray a_nn,
                           np.ndarray grad_phi_w,
                           np.ndarray grad_phi_n,
                           np.ndarray psi_w,
                           np.ndarray psi_c,
                           np.ndarray psi_n,
                           np.ndarray penalty_w,
                           np.ndarray penalty_n,
                           np.ndarray  diffusiveFlux_ww,
                           np.ndarray  diffusiveFlux_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFCPP( nExteriorElementBoundaries_global,
                            nQuadraturePoints_elementBoundary,
                            nSpace,
                           <int*> exteriorElementBoundaries.data,
                           <int*> elementBoundaryElements.data,
                           <int*> elementBoundaryLocalElementBoundaries.data,
                           <int*> isDOFBoundary_uw.data,
                           <int*> isDOFBoundary_un.data,
                            fluxBoundaryFlag_uw,
                            fluxBoundaryFlag_un,
                           <double*> n.data,
                           <double*> bc_a_ww.data,
                           <double*> bc_a_nn.data,
                           <double*> bc_grad_phi_w.data,
                           <double*> bc_grad_phi_n.data,
                           <double*> bc_psi_w.data,
                           <double*> bc_psi_c.data,
                           <double*> bc_psi_n.data,
                           <double*> a_ww.data,
                           <double*> a_nn.data,
                           <double*> grad_phi_w.data,
                           <double*> grad_phi_n.data,
                           <double*> psi_w.data,
                           <double*> psi_c.data,
                           <double*> psi_n.data,
                           <double*> penalty_w.data,
                           <double*> penalty_n.data,
                           <double*>  diffusiveFlux_ww.data,
                           <double*>  diffusiveFlux_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFCPP_sd(int nExteriorElementBoundaries_global,
                              int nQuadraturePoints_elementBoundary,
                              int nSpace,
                              np.ndarray rowptr_ww,
                              np.ndarray colind_ww,
                              np.ndarray rowptr_nn,
                              np.ndarray colind_nn,
                              np.ndarray exteriorElementBoundaries,
                              np.ndarray elementBoundaryElements,
                              np.ndarray elementBoundaryLocalElementBoundaries,
                              np.ndarray isDOFBoundary_uw,
                              np.ndarray isDOFBoundary_un,
                              int fluxBoundaryFlag_uw,
                              int fluxBoundaryFlag_un,
                              np.ndarray n,
                              np.ndarray bc_a_ww,
                              np.ndarray bc_a_nn,
                              np.ndarray bc_grad_phi_w,
                              np.ndarray bc_grad_phi_n,
                              np.ndarray bc_psi_w,
                              np.ndarray bc_psi_c,
                              np.ndarray bc_psi_n,
                              np.ndarray a_ww,
                              np.ndarray a_nn,
                              np.ndarray grad_phi_w,
                              np.ndarray grad_phi_n,
                              np.ndarray psi_w,
                              np.ndarray psi_c,
                              np.ndarray psi_n,
                              np.ndarray penalty_w,
                              np.ndarray penalty_n,
                              np.ndarray  diffusiveFlux_ww,
                              np.ndarray  diffusiveFlux_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFCPP_sd( nExteriorElementBoundaries_global,
                               nQuadraturePoints_elementBoundary,
                               nSpace,
                              <int*> rowptr_ww.data,
                              <int*> colind_ww.data,
                              <int*> rowptr_nn.data,
                              <int*> colind_nn.data,
                              <int*> exteriorElementBoundaries.data,
                              <int*> elementBoundaryElements.data,
                              <int*> elementBoundaryLocalElementBoundaries.data,
                              <int*> isDOFBoundary_uw.data,
                              <int*> isDOFBoundary_un.data,
                               fluxBoundaryFlag_uw,
                               fluxBoundaryFlag_un,
                              <double*> n.data,
                              <double*> bc_a_ww.data,
                              <double*> bc_a_nn.data,
                              <double*> bc_grad_phi_w.data,
                              <double*> bc_grad_phi_n.data,
                              <double*> bc_psi_w.data,
                              <double*> bc_psi_c.data,
                              <double*> bc_psi_n.data,
                              <double*> a_ww.data,
                              <double*> a_nn.data,
                              <double*> grad_phi_w.data,
                              <double*> grad_phi_n.data,
                              <double*> psi_w.data,
                              <double*> psi_c.data,
                              <double*> psi_n.data,
                              <double*> penalty_w.data,
                              <double*> penalty_n.data,
                              <double*>  diffusiveFlux_ww.data,
                              <double*>  diffusiveFlux_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                     int nQuadraturePoints_elementBoundary,
                                     int nSpace,
                                     int nDOF_trial_element,
                                     np.ndarray l2g,
                                     np.ndarray exteriorElementBoundaries,
                                     np.ndarray elementBoundaryElements,
                                     np.ndarray elementBoundaryLocalElementBoundaries,
                                     np.ndarray isDOFBoundary_uw,
                                     np.ndarray isDOFBoundary_un,
                                     int fluxBoundaryFlag_uw,
                                     int fluxBoundaryFlag_un,
                                     np.ndarray n,
                                     np.ndarray a_ww,
                                     np.ndarray da_ww_dw,
                                     np.ndarray da_ww_dn,
                                     np.ndarray a_nn,
                                     np.ndarray da_nn_dw,
                                     np.ndarray da_nn_dn,
                                     np.ndarray grad_phi_w,
                                     np.ndarray grad_phi_n,
                                     np.ndarray dphi_w_w,
                                     np.ndarray dphi_w_n,
                                     np.ndarray dphi_n_w,
                                     np.ndarray dphi_n_n,
                                     np.ndarray psi_w,
                                     np.ndarray psi_c,
                                     np.ndarray psi_n,
                                     np.ndarray dpsi_n_dpsiw,
                                     np.ndarray dpsi_n_dpsic,
                                     np.ndarray v,
                                     np.ndarray grad_v,
                                     np.ndarray penalty_w,
                                     np.ndarray penalty_n,
                                     np.ndarray  fluxJacobian_ww,
                                     np.ndarray  fluxJacobian_wn,
                                     np.ndarray  fluxJacobian_nw,
                                     np.ndarray  fluxJacobian_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian( nExteriorElementBoundaries_global,
                                      nQuadraturePoints_elementBoundary,
                                      nSpace,
                                      nDOF_trial_element,
                                     <int*> l2g.data,
                                     <int*> exteriorElementBoundaries.data,
                                     <int*> elementBoundaryElements.data,
                                     <int*> elementBoundaryLocalElementBoundaries.data,
                                     <int*> isDOFBoundary_uw.data,
                                     <int*> isDOFBoundary_un.data,
                                      fluxBoundaryFlag_uw,
                                      fluxBoundaryFlag_un,
                                     <double*> n.data,
                                     <double*> a_ww.data,
                                     <double*> da_ww_dw.data,
                                     <double*> da_ww_dn.data,
                                     <double*> a_nn.data,
                                     <double*> da_nn_dw.data,
                                     <double*> da_nn_dn.data,
                                     <double*> grad_phi_w.data,
                                     <double*> grad_phi_n.data,
                                     <double*> dphi_w_w.data,
                                     <double*> dphi_w_n.data,
                                     <double*> dphi_n_w.data,
                                     <double*> dphi_n_n.data,
                                     <double*> psi_w.data,
                                     <double*> psi_c.data,
                                     <double*> psi_n.data,
                                     <double*> dpsi_n_dpsiw.data,
                                     <double*> dpsi_n_dpsic.data,
                                     <double*> v.data,
                                     <double*> grad_v.data,
                                     <double*> penalty_w.data,
                                     <double*> penalty_n.data,
                                     <double*>  fluxJacobian_ww.data,
                                     <double*>  fluxJacobian_wn.data,
                                     <double*>  fluxJacobian_nw.data,
                                     <double*>  fluxJacobian_nn.data)
def calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        np.ndarray rowptr_ww,
                                        np.ndarray colind_ww,
                                        np.ndarray rowptr_nn,
                                        np.ndarray colind_nn,
                                        np.ndarray l2g,
                                        np.ndarray exteriorElementBoundaries,
                                        np.ndarray elementBoundaryElements,
                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                        np.ndarray isDOFBoundary_uw,
                                        np.ndarray isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        np.ndarray n,
                                        np.ndarray a_ww,
                                        np.ndarray da_ww_dw,
                                        np.ndarray da_ww_dn,
                                        np.ndarray a_nn,
                                        np.ndarray da_nn_dw,
                                        np.ndarray da_nn_dn,
                                        np.ndarray grad_phi_w,
                                        np.ndarray grad_phi_n,
                                        np.ndarray dphi_w_w,
                                        np.ndarray dphi_w_n,
                                        np.ndarray dphi_n_w,
                                        np.ndarray dphi_n_n,
                                        np.ndarray psi_w,
                                        np.ndarray psi_c,
                                        np.ndarray psi_n,
                                        np.ndarray dpsi_n_dpsiw,
                                        np.ndarray dpsi_n_dpsic,
                                        np.ndarray v,
                                        np.ndarray grad_v,
                                        np.ndarray penalty_w,
                                        np.ndarray penalty_n,
                                        np.ndarray  fluxJacobian_ww,
                                        np.ndarray  fluxJacobian_wn,
                                        np.ndarray  fluxJacobian_nw,
                                        np.ndarray  fluxJacobian_nn):
     ccalculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian_sd( nExteriorElementBoundaries_global,
                                         nQuadraturePoints_elementBoundary,
                                         nSpace,
                                         nDOF_trial_element,
                                        <int*> rowptr_ww.data,
                                        <int*> colind_ww.data,
                                        <int*> rowptr_nn.data,
                                        <int*> colind_nn.data,
                                        <int*> l2g.data,
                                        <int*> exteriorElementBoundaries.data,
                                        <int*> elementBoundaryElements.data,
                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                        <int*> isDOFBoundary_uw.data,
                                        <int*> isDOFBoundary_un.data,
                                         fluxBoundaryFlag_uw,
                                         fluxBoundaryFlag_un,
                                        <double*> n.data,
                                        <double*> a_ww.data,
                                        <double*> da_ww_dw.data,
                                        <double*> da_ww_dn.data,
                                        <double*> a_nn.data,
                                        <double*> da_nn_dw.data,
                                        <double*> da_nn_dn.data,
                                        <double*> grad_phi_w.data,
                                        <double*> grad_phi_n.data,
                                        <double*> dphi_w_w.data,
                                        <double*> dphi_w_n.data,
                                        <double*> dphi_n_w.data,
                                        <double*> dphi_n_n.data,
                                        <double*> psi_w.data,
                                        <double*> psi_c.data,
                                        <double*> psi_n.data,
                                        <double*> dpsi_n_dpsiw.data,
                                        <double*> dpsi_n_dpsic.data,
                                        <double*> v.data,
                                        <double*> grad_v.data,
                                        <double*> penalty_w.data,
                                        <double*> penalty_n.data,
                                        <double*>  fluxJacobian_ww.data,
                                        <double*>  fluxJacobian_wn.data,
                                        <double*>  fluxJacobian_nw.data,
                                        <double*>  fluxJacobian_nn.data)

def calculateInteriorNumericalFluxShallowWater_1D(int nInteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                double h_eps,
                                                double tol_u,
                                                double g,
                                                np.ndarray interiorElementBoundaries,
                                                np.ndarray elementBoundaryElements,
                                                np.ndarray elementBoundaryLocalElementBoundaries,
                                                np.ndarray n,
                                                np.ndarray h,
                                                np.ndarray hu,
                                                np.ndarray flux_h,
                                                np.ndarray flux_hu):
     ccalculateInteriorNumericalFluxShallowWater_1D( nInteriorElementBoundaries_global,
                                                    nElementBoundaries_element,
                                                    nQuadraturePoints_elementBoundary,
                                                    h_eps,
                                                    tol_u,
                                                    g,
                                                    <int*> interiorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <double*> n.data,
                                                    <double*> h.data,
                                                    <double*> hu.data,
                                                    <double*> flux_h.data,
                                                    <double*> flux_hu.data)
def calculateExteriorNumericalFluxShallowWater_1D(int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                                                    double g,
                                                    np.ndarray n,
                                                    np.ndarray h_lv,
                                                    np.ndarray hu_lv,
                                                    np.ndarray h_rv,
                                                    np.ndarray hu_rv,
                                                    np.ndarray flux_h,
                                                    np.ndarray flux_hu):
     ccalculateExteriorNumericalFluxShallowWater_1D( nExteriorElementBoundaries_global,
                                                    nQuadraturePoints_elementBoundary,
                                                    h_eps,
                                                    tol_u,
                                                    g,
                                                    <double*> n.data,
                                                    <double*> h_lv.data,
                                                    <double*> hu_lv.data,
                                                    <double*> h_rv.data,
                                                    <double*> hu_rv.data,
                                                    <double*> flux_h.data,
                                                    <double*> flux_hu.data)
def calculateInteriorNumericalFluxShallowWater_2D(int nInteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                                                    double g,
                                                    np.ndarray interiorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray n,
                                                    np.ndarray h,
                                                    np.ndarray hu,
                                                    np.ndarray hv,
                                                    np.ndarray flux_h,
                                                    np.ndarray flux_hu,
                                                    np.ndarray flux_hv):
     ccalculateInteriorNumericalFluxShallowWater_2D( nInteriorElementBoundaries_global,
                                                    nElementBoundaries_element,
                                                    nQuadraturePoints_elementBoundary,
                                                    h_eps,
                                                    tol_u,
                                                    g,
                                                    <int*> interiorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <double*> n.data,
                                                    <double*> h.data,
                                                    <double*> hu.data,
                                                    <double*> hv.data,
                                                    <double*> flux_h.data,
                                                    <double*> flux_hu.data,
                                                    <double*> flux_hv.data)
def calculateExteriorNumericalFluxShallowWater_2D(int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                                                    double g,
                                                    np.ndarray n,
                                                    np.ndarray h_lq,
                                                    np.ndarray hu_lq,
                                                    np.ndarray hv_lq,
                                                    np.ndarray h_rq,
                                                    np.ndarray hu_rq,
                                                    np.ndarray hv_rq,
                                                    np.ndarray flux_h,
                                                    np.ndarray flux_hu,
                                                    np.ndarray flux_hv):
     ccalculateExteriorNumericalFluxShallowWater_2D( nExteriorElementBoundaries_global,
                                                    nQuadraturePoints_elementBoundary,
                                                    h_eps,
                                                    tol_u,
                                                    g,
                                                    <double*> n.data,
                                                    <double*> h_lq.data,
                                                    <double*> hu_lq.data,
                                                    <double*> hv_lq.data,
                                                    <double*> h_rq.data,
                                                    <double*> hu_rq.data,
                                                    <double*> hv_rq.data,
                                                    <double*> flux_h.data,
                                                    <double*> flux_hu.data,
                                                    <double*> flux_hv.data)
def calculateInteriorNumericalFluxShallowWaterHLL_1D(int nInteriorElementBoundaries_global,
                              int nElementBoundaries_element,
                              int nQuadraturePoints_elementBoundary,
                              double h_eps,
                              double tol_u,
                              double g,
                              np.ndarray interiorElementBoundaries,
                              np.ndarray elementBoundaryElements,
                              np.ndarray elementBoundaryLocalElementBoundaries,
                              np.ndarray n,
                              np.ndarray h,
                              np.ndarray hu,
                              np.ndarray flux_h,
                              np.ndarray flux_hu):
     ccalculateInteriorNumericalFluxShallowWaterHLL_1D( nInteriorElementBoundaries_global,
                               nElementBoundaries_element,
                               nQuadraturePoints_elementBoundary,
                               h_eps,
                               tol_u,
                               g,
                              <int*> interiorElementBoundaries.data,
                              <int*> elementBoundaryElements.data,
                              <int*> elementBoundaryLocalElementBoundaries.data,
                              <double*> n.data,
                              <double*> h.data,
                              <double*> hu.data,
                              <double*> flux_h.data,
                              <double*> flux_hu.data)
def calculateExteriorNumericalFluxShallowWaterHLL_1D(int nExteriorElementBoundaries_global,
                              int nQuadraturePoints_elementBoundary,
                              double h_eps,
                              double tol_u,
                              double g,
                              np.ndarray n,
                              np.ndarray h_lv,
                              np.ndarray hu_lv,
                              np.ndarray h_rv,
                              np.ndarray hu_rv,
                              np.ndarray flux_h,
                              np.ndarray flux_hu):
     ccalculateExteriorNumericalFluxShallowWaterHLL_1D( nExteriorElementBoundaries_global,
                               nQuadraturePoints_elementBoundary,
                               h_eps,
                               tol_u,
                               g,
                              <double*> n.data,
                              <double*> h_lv.data,
                              <double*> hu_lv.data,
                              <double*> h_rv.data,
                              <double*> hu_rv.data,
                              <double*> flux_h.data,
                              <double*> flux_hu.data)
def calculateGlobalExteriorNumericalStressFlux(int nExteriorElementBoundaries_global,
                        int nQuadraturePoints_elementBoundary,
                        int nSpace,
                        np.ndarray exteriorElementBoundaries,
                        np.ndarray elementBoundaryElements,
                        np.ndarray elementBoundaryLocalElementBoundaries,
                        np.ndarray isDOFBoundary_u,
                        np.ndarray isDOFBoundary_v,
                        np.ndarray isDOFBoundary_w,
                        np.ndarray n,
                        np.ndarray bc_u,
                        np.ndarray bc_v,
                        np.ndarray bc_w,
                        np.ndarray sigma,
                        np.ndarray u,
                        np.ndarray v,
                        np.ndarray w,
                        np.ndarray penalty,
                        np.ndarray stressFlux_u,
                        np.ndarray stressFlux_v,
                        np.ndarray stressFlux_w):
     ccalculateGlobalExteriorNumericalStressFlux( nExteriorElementBoundaries_global,
                         nQuadraturePoints_elementBoundary,
                         nSpace,
                        <int*> exteriorElementBoundaries.data,
                        <int*> elementBoundaryElements.data,
                        <int*> elementBoundaryLocalElementBoundaries.data,
                        <int*> isDOFBoundary_u.data,
                        <int*> isDOFBoundary_v.data,
                        <int*> isDOFBoundary_w.data,
                        <double*> n.data,
                        <double*> bc_u.data,
                        <double*> bc_v.data,
                        <double*> bc_w.data,
                        <double*> sigma.data,
                        <double*> u.data,
                        <double*> v.data,
                        <double*> w.data,
                        <double*> penalty.data,
                        <double*> stressFlux_u.data,
                        <double*> stressFlux_v.data,
                        <double*> stressFlux_w.data)
#######333333
def calculateExteriorNumericalAdvectiveFluxStokes3D(int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    np.ndarray exteriorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray isDOFBoundary_p,
                                                    np.ndarray isDOFBoundary_u,
                                                    np.ndarray isDOFBoundary_v,
                                                    np.ndarray isDOFBoundary_w,
                                                    np.ndarray n,
                                                    np.ndarray bc_p,
                                                    np.ndarray bc_f_mass,
                                                    np.ndarray p,
                                                    np.ndarray f_mass,
                                                    np.ndarray df_mass_du,
                                                    np.ndarray df_mass_dv,
                                                    np.ndarray df_mass_dw,
                                                    np.ndarray flux_mass,
                                                    np.ndarray flux_umom,
                                                    np.ndarray flux_vmom,
                                                    np.ndarray flux_wmom,
                                                    np.ndarray dflux_mass_du,
                                                    np.ndarray dflux_mass_dv,
                                                    np.ndarray dflux_mass_dw,
                                                    np.ndarray dflux_umom_dp,
                                                    np.ndarray dflux_vmom_dp,
                                                    np.ndarray dflux_wmom_dp,
                                                    np.ndarray velocity):
     ccalculateGlobalExteriorNumericalAdvectiveFluxStokes3D( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <int*> isDOFBoundary_w.data,
                                                        <double*> n.data,
                                                        <double*> bc_p.data,
                                                        <double*> bc_f_mass.data,
                                                        <double*> p.data,
                                                        <double*> f_mass.data,
                                                        <double*> df_mass_du.data,
                                                        <double*> df_mass_dv.data,
                                                        <double*> df_mass_dw.data,
                                                        <double*> flux_mass.data,
                                                        <double*> flux_umom.data,
                                                        <double*> flux_vmom.data,
                                                        <double*> flux_wmom.data,
                                                        <double*> dflux_mass_du.data,
                                                        <double*> dflux_mass_dv.data,
                                                        <double*> dflux_mass_dw.data,
                                                        <double*> dflux_umom_dp.data,
                                                        <double*> dflux_vmom_dp.data,
                                                        <double*> dflux_wmom_dp.data,
                                                        <double*> velocity.data)
def calculateExteriorNumericalAdvectiveFluxNavierStokes3D(np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray isDOFBoundary_w,
                                                        np.ndarray n,
                                                        np.ndarray bc_p,
                                                        np.ndarray bc_f_mass,
                                                        np.ndarray bc_f_umom,
                                                        np.ndarray bc_f_vmom,
                                                        np.ndarray bc_f_wmom,
                                                        np.ndarray p,
                                                        np.ndarray f_mass,
                                                        np.ndarray f_umom,
                                                        np.ndarray f_vmom,
                                                        np.ndarray f_wmom,
                                                        np.ndarray df_mass_du,
                                                        np.ndarray df_mass_dv,
                                                        np.ndarray df_mass_dw,
                                                        np.ndarray df_umom_dp,
                                                        np.ndarray df_umom_du,
                                                        np.ndarray df_umom_dv,
                                                        np.ndarray df_umom_dw,
                                                        np.ndarray df_vmom_dp,
                                                        np.ndarray df_vmom_du,
                                                        np.ndarray df_vmom_dv,
                                                        np.ndarray df_vmom_dw,
                                                        np.ndarray df_wmom_dp,
                                                        np.ndarray df_wmom_du,
                                                        np.ndarray df_wmom_dv,
                                                        np.ndarray df_wmom_dw,
                                                        np.ndarray flux_mass,
                                                        np.ndarray flux_umom,
                                                        np.ndarray flux_vmom,
                                                        np.ndarray flux_wmom,
                                                        np.ndarray dflux_mass_du,
                                                        np.ndarray dflux_mass_dv,
                                                        np.ndarray dflux_mass_dw,
                                                        np.ndarray dflux_umom_dp,
                                                        np.ndarray dflux_umom_du,
                                                        np.ndarray dflux_umom_dv,
                                                        np.ndarray dflux_umom_dw,
                                                        np.ndarray dflux_vmom_dp,
                                                        np.ndarray dflux_vmom_du,
                                                        np.ndarray dflux_vmom_dv,
                                                        np.ndarray dflux_vmom_dw,
                                                        np.ndarray dflux_wmom_dp,
                                                        np.ndarray dflux_wmom_du,
                                                        np.ndarray dflux_wmom_dv,
                                                        np.ndarray dflux_wmom_dw,
                                                        np.ndarray velocity):
    if f_mass.ndim > 3:
        exit(1)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D(exteriorElementBoundaries.shape[0],
                                                                f_mass.shape[1],
                                                                f_mass.shape[2],
                                                                <int*> exteriorElementBoundaries.data,
                                                                <int*> elementBoundaryElements.data,
                                                                <int*> elementBoundaryLocalElementBoundaries.data,
                                                                <int*> isDOFBoundary_p.data,
                                                                <int*> isDOFBoundary_u.data,
                                                                <int*> isDOFBoundary_v.data,
                                                                <int*> isDOFBoundary_w.data,
                                                                <double*> n.data,
                                                                <double*> bc_p.data,
                                                                <double*> bc_f_mass.data,
                                                                <double*> bc_f_umom.data,
                                                                <double*> bc_f_vmom.data,
                                                                <double*> bc_f_wmom.data,
                                                                <double*> p.data,
                                                                <double*> f_mass.data,
                                                                <double*> f_umom.data,
                                                                <double*> f_vmom.data,
                                                                <double*> f_wmom.data,
                                                                <double*> df_mass_du.data,
                                                                <double*> df_mass_dv.data,
                                                                <double*> df_mass_dw.data,
                                                                <double*> df_umom_dp.data,
                                                                <double*> df_umom_du.data,
                                                                <double*> df_umom_dv.data,
                                                                <double*> df_umom_dw.data,
                                                                <double*> df_vmom_dp.data,
                                                                <double*> df_vmom_du.data,
                                                                <double*> df_vmom_dv.data,
                                                                <double*> df_vmom_dw.data,
                                                                <double*> df_wmom_dp.data,
                                                                <double*> df_wmom_du.data,
                                                                <double*> df_wmom_dv.data,
                                                                <double*> df_wmom_dw.data,
                                                                <double*> flux_mass.data,
                                                                <double*> flux_umom.data,
                                                                <double*> flux_vmom.data,
                                                                <double*> flux_wmom.data,
                                                                <double*> dflux_mass_du.data,
                                                                <double*> dflux_mass_dv.data,
                                                                <double*> dflux_mass_dw.data,
                                                                <double*> dflux_umom_dp.data,
                                                                <double*> dflux_umom_du.data,
                                                                <double*> dflux_umom_dv.data,
                                                                <double*> dflux_umom_dw.data,
                                                                <double*> dflux_vmom_dp.data,
                                                                <double*> dflux_vmom_du.data,
                                                                <double*> dflux_vmom_dv.data,
                                                                <double*> dflux_vmom_dw.data,
                                                                <double*> dflux_wmom_dp.data,
                                                                <double*> dflux_wmom_du.data,
                                                                <double*> dflux_wmom_dv.data,
                                                                <double*> dflux_wmom_dw.data,
                                                                <double*> velocity.data)
def calculateExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray isDOFBoundary,
                            np.ndarray inflowFlag,
                            np.ndarray n,
                            np.ndarray bc_u,
                            np.ndarray bc_f,
                            np.ndarray bc_df,
                            np.ndarray u,
                            np.ndarray f,
                            np.ndarray df,
                            np.ndarray df_element,
                            np.ndarray flux,
                            np.ndarray dflux):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                             exteriorElementBoundaries.shape[0],
                             f.shape[1],
                             f.shape[2],
                             df_element.shape[1],
                             f.shape[3],
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary.data,
                            <int*> inflowFlag.data,
                            <double*> n.data,
                            <double*> bc_u.data,
                            <double*> bc_f.data,
                            <double*> bc_df.data,
                            <double*> u.data,
                            <double*> f.data,
                            <double*> df.data,
                            <double*> df_element.data,
                            <double*> flux.data,
                            <double*> dflux.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                             exteriorElementBoundaries.shape[0],
                             f.shape[1],
                             df_element.shape[1],
                             f.shape[2],
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary.data,
                            <int*> inflowFlag.data,
                            <double*> n.data,
                            <double*> bc_u.data,
                            <double*> bc_f.data,
                            <double*> bc_df.data,
                            <double*> u.data,
                            <double*> f.data,
                            <double*> df.data,
                            <double*> df_element.data,
                            <double*> flux.data,
                            <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                              int nExteriorElementBoundaries_global,
                              int nQuadraturePoints_elementBoundary,
                              int nQuadraturePoints_element,
                              int nSpace,
                              np.ndarray exteriorElementBoundaries,
                              np.ndarray elementBoundaryElements,
                              np.ndarray elementBoundaryLocalElementBoundaries,
                              np.ndarray isDOFBoundary,
                              np.ndarray inflowFlag,
                              np.ndarray n,
                              np.ndarray bc_u,
                              np.ndarray bc_f,
                              np.ndarray bc_df,
                              np.ndarray u,
                              np.ndarray f,
                              np.ndarray df,
                              np.ndarray df_element,
                              np.ndarray flux,
                              np.ndarray dflux):
    ccalculateGlobalExteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                               nExteriorElementBoundaries_global,
                               nQuadraturePoints_elementBoundary,
                               nQuadraturePoints_element,
                               nSpace,
                              <int*> exteriorElementBoundaries.data,
                              <int*> elementBoundaryElements.data,
                              <int*> elementBoundaryLocalElementBoundaries.data,
                              <int*> isDOFBoundary.data,
                              <int*> inflowFlag.data,
                              <double*> n.data,
                              <double*> bc_u.data,
                              <double*> bc_f.data,
                              <double*> bc_df.data,
                              <double*> u.data,
                              <double*> f.data,
                              <double*> df.data,
                              <double*> df_element.data,
                              <double*> flux.data,
                              <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                         int nExteriorElementBoundaries_global,
                                         int nQuadraturePoints_elementBoundary,
                                         int nQuadraturePoints_element,
                                         int nSpace,
                                         np.ndarray exteriorElementBoundaries,
                                         np.ndarray elementBoundaryElements,
                                         np.ndarray elementBoundaryLocalElementBoundaries,
                                         np.ndarray isDOFBoundary,
                                         np.ndarray inflowFlag,
                                         np.ndarray n,
                                         np.ndarray bc_u,
                                         np.ndarray bc_f,
                                         np.ndarray u,
                                         np.ndarray f,
                                         np.ndarray lambda_bar,
                                         np.ndarray flux):
    ccalculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound( safetyFactor,
                                          nExteriorElementBoundaries_global,
                                          nQuadraturePoints_elementBoundary,
                                          nQuadraturePoints_element,
                                          nSpace,
                                         <int*> exteriorElementBoundaries.data,
                                         <int*> elementBoundaryElements.data,
                                         <int*> elementBoundaryLocalElementBoundaries.data,
                                         <int*> isDOFBoundary.data,
                                         <int*> inflowFlag.data,
                                         <double*> n.data,
                                         <double*> bc_u.data,
                                         <double*> bc_f.data,
                                         <double*> u.data,
                                         <double*> f.data,
                                         <double*> lambda_bar.data,
                                         <double*> flux.data)
def calculateExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                       np.ndarray exteriorElementBoundaries,
                                       np.ndarray elementBoundaryElements,
                                       np.ndarray elementBoundaryLocalElementBoundaries,
                                       np.ndarray isDOFBoundary,
                                       np.ndarray inflowFlag,
                                       np.ndarray n,
                                       np.ndarray bc_u,
                                       np.ndarray bc_f,
                                       np.ndarray u,
                                       np.ndarray f,
                                       np.ndarray lambda_bar_element,
                                       np.ndarray flux):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound( safetyFactor,
                                        exteriorElementBoundaries.shape[0],
                                        f.shape[1],
                                        f.shape[2],
                                        lambda_bar_element.shape[1],
                                        f.shape[3],
                                       <int*> exteriorElementBoundaries.data,
                                       <int*> elementBoundaryElements.data,
                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                       <int*> isDOFBoundary.data,
                                       <int*> inflowFlag.data,
                                       <double*> n.data,
                                       <double*> bc_u.data,
                                       <double*> bc_f.data,
                                       <double*> u.data,
                                       <double*> f.data,
                                       <double*> lambda_bar_element.data,
                                       <double*> flux.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound( safetyFactor,
                                        exteriorElementBoundaries.shape[0],
                                        f.shape[1],
                                        lambda_bar_element.shape[1],
                                        f.shape[2],
                                       <int*> exteriorElementBoundaries.data,
                                       <int*> elementBoundaryElements.data,
                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                       <int*> isDOFBoundary.data,
                                       <int*> inflowFlag.data,
                                       <double*> n.data,
                                       <double*> bc_u.data,
                                       <double*> bc_f.data,
                                       <double*> u.data,
                                       <double*> f.data,
                                       <double*> lambda_bar_element.data,
                                       <double*> flux.data)
def calculateExteriorNumericalDiffusiveFlux(np.ndarray exteriorElementBoundaries,
                                            np.ndarray elementBoundaryElements,
                                            np.ndarray elementBoundaryLocalElementBoundaries,
                                            np.ndarray isDOFBoundary,
                                            np.ndarray n,
                                            np.ndarray bc_a,
                                            np.ndarray bc_grad_phi,
                                            np.ndarray bc_u,
                                            np.ndarray a,
                                            np.ndarray grad_phi,
                                            np.ndarray u,
                                            np.ndarray penalty,
                                            np.ndarray flux,
                                            int scale_penalty,
                                            double penalty_floor):
    if grad_phi.ndim == 4:
        ccalculateExteriorNumericalDiffusiveFlux( scale_penalty,
                                              penalty_floor,
                                              exteriorElementBoundaries.shape[0],
                                              grad_phi.shape[1],
                                              grad_phi.shape[2],
                                              grad_phi.shape[3],
                                             <int*> exteriorElementBoundaries.data,
                                             <int*> elementBoundaryElements.data,
                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                             <int*> isDOFBoundary.data,
                                             <double*> n.data,
                                             <double*> bc_a.data,
                                             <double*> bc_grad_phi.data,
                                             <double*> bc_u.data,
                                             <double*> a.data,
                                             <double*> grad_phi.data,
                                             <double*> u.data,
                                             <double*> penalty.data,
                                             <double*> flux.data)
    elif grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalDiffusiveFlux( scale_penalty,
                                              penalty_floor,
                                              exteriorElementBoundaries.shape[0],
                                              grad_phi.shape[1],
                                              grad_phi.shape[2],
                                             <int*> exteriorElementBoundaries.data,
                                             <int*> elementBoundaryElements.data,
                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                             <int*> isDOFBoundary.data,
                                             <double*> n.data,
                                             <double*> bc_a.data,
                                             <double*> bc_grad_phi.data,
                                             <double*> bc_u.data,
                                             <double*> a.data,
                                             <double*> grad_phi.data,
                                             <double*> u.data,
                                             <double*> penalty.data,
                                             <double*> flux.data)
    else:
        exit(1)
def calculateExteriorNumericalDiffusiveFlux_sd(np.ndarray rowptr,
                                            np.ndarray colind,
                                            np.ndarray exteriorElementBoundaries,
                                            np.ndarray elementBoundaryElements,
                                            np.ndarray elementBoundaryLocalElementBoundaries,
                                            np.ndarray isDOFBoundary,
                                            np.ndarray n,
                                            np.ndarray bc_a,
                                            np.ndarray bc_grad_phi,
                                            np.ndarray bc_u,
                                            np.ndarray a,
                                            np.ndarray grad_phi,
                                            np.ndarray u,
                                            np.ndarray penalty,
                                            np.ndarray flux,
                                            int scale_penalty=0,
                                            double penalty_floor=0.0):
    if grad_phi.ndim == 4:
        ccalculateExteriorNumericalDiffusiveFlux_sd(scale_penalty,
                                                penalty_floor,
                                                exteriorElementBoundaries.shape[0],
                                                grad_phi.shape[1],
                                                grad_phi.shape[2],
                                                grad_phi.shape[3],
                                                <int*> rowptr.data,
                                                <int*> colind.data,
                                                <int*> exteriorElementBoundaries.data,
                                                <int*> elementBoundaryElements.data,
                                                <int*> elementBoundaryLocalElementBoundaries.data,
                                                <int*> isDOFBoundary.data,
                                                <double*> n.data,
                                                <double*> bc_a.data,
                                                <double*> bc_grad_phi.data,
                                                <double*> bc_u.data,
                                                <double*> a.data,
                                                <double*> grad_phi.data,
                                                <double*> u.data,
                                                <double*> penalty.data,
                                                <double*> flux.data)
    elif grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_sd(scale_penalty,
                                                penalty_floor,
                                                exteriorElementBoundaries.shape[0],
                                                grad_phi.shape[1],
                                                grad_phi.shape[2],
                                                <int*> rowptr.data,
                                                <int*> colind.data,
                                                <int*> exteriorElementBoundaries.data,
                                                <int*> elementBoundaryElements.data,
                                                <int*> elementBoundaryLocalElementBoundaries.data,
                                                <int*> isDOFBoundary.data,
                                                <double*> n.data,
                                                <double*> bc_a.data,
                                                <double*> bc_grad_phi.data,
                                                <double*> bc_u.data,
                                                <double*> a.data,
                                                <double*> grad_phi.data,
                                                <double*> u.data,
                                                <double*> penalty.data,
                                                <double*> flux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux(int scale_penalty,
                                                   double penalty_floor,
                                                   int nExteriorElementBoundaries_global,
                           int nQuadraturePoints_elementBoundary,
                           int nSpace,
                           np.ndarray exteriorElementBoundaries,
                           np.ndarray elementBoundaryElements,
                           np.ndarray elementBoundaryLocalElementBoundaries,
                           np.ndarray isDOFBoundary,
                           np.ndarray n,
                           np.ndarray bc_a,
                           np.ndarray bc_grad_phi,
                           np.ndarray bc_u,
                           np.ndarray a,
                           np.ndarray grad_phi,
                           np.ndarray u,
                           np.ndarray penalty,
                           np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux( scale_penalty,
                                                    penalty_floor,
                                                    nExteriorElementBoundaries_global,
                            nQuadraturePoints_elementBoundary,
                            nSpace,
                           <int*> exteriorElementBoundaries.data,
                           <int*> elementBoundaryElements.data,
                           <int*> elementBoundaryLocalElementBoundaries.data,
                           <int*> isDOFBoundary.data,
                           <double*> n.data,
                           <double*> bc_a.data,
                           <double*> bc_grad_phi.data,
                           <double*> bc_u.data,
                           <double*> a.data,
                           <double*> grad_phi.data,
                           <double*> u.data,
                           <double*> penalty.data,
                           <double*> flux.data)

def calculateExteriorNumericalDiffusiveFluxWithUpwinding_sd(np.ndarray rowptr,
                                                    np.ndarray colind,
                                                    np.ndarray exteriorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray isDOFBoundary,
                                                    np.ndarray n,
                                                    np.ndarray bc_a,
                                                    np.ndarray bc_grad_phi,
                                                    np.ndarray bc_u,
                                                    np.ndarray a,
                                                    np.ndarray grad_phi,
                                                    np.ndarray u,
                                                    np.ndarray penalty,
                                                    np.ndarray flux,
                                                    int scale_penalty,
                                                    double penalty_floor):
    if grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_sd( scale_penalty,
                                                    penalty_floor,
                                                    exteriorElementBoundaries.shape[0],
                                                    grad_phi.shape[1],
                                                    grad_phi.shape[2],
                                                    <int*> rowptr.data,
                                                    <int*> colind.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> bc_a.data,
                                                    <double*> bc_grad_phi.data,
                                                    <double*> bc_u.data,
                                                    <double*> a.data,
                                                    <double*> grad_phi.data,
                                                    <double*> u.data,
                                                    <double*> penalty.data,
                                                    <double*> flux.data)
    else:
        exit(1)

def calculateGlobalExteriorNumericalDiffusiveFlux_sd(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    np.ndarray rowptr,
                                                    np.ndarray colind,
                                                    np.ndarray exteriorElementBoundaries,
                                                    np.ndarray elementBoundaryElements,
                                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                                    np.ndarray isDOFBoundary,
                                                    np.ndarray n,
                                                    np.ndarray bc_a,
                                                    np.ndarray bc_grad_phi,
                                                    np.ndarray bc_u,
                                                    np.ndarray a,
                                                    np.ndarray grad_phi,
                                                    np.ndarray u,
                                                    np.ndarray penalty,
                                                    np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux_sd( scale_penalty,
                                                    penalty_floor,
                                                    nExteriorElementBoundaries_global,
                                                    nQuadraturePoints_elementBoundary,
                                                    nSpace,
                                                    <int*> rowptr.data,
                                                    <int*> colind.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> bc_a.data,
                                                    <double*> bc_grad_phi.data,
                                                    <double*> bc_u.data,
                                                    <double*> a.data,
                                                    <double*> grad_phi.data,
                                                    <double*> u.data,
                                                    <double*> penalty.data,
                                                    <double*> flux.data)
def calculateExteriorNumericalDiffusiveFlux_free(np.ndarray exteriorElementBoundaries,
                                             np.ndarray elementBoundaryElements,
                                             np.ndarray elementBoundaryLocalElementBoundaries,
                                             np.ndarray isDOFBoundary,
                                             np.ndarray n,
                                             np.ndarray bc_a,
                                             np.ndarray bc_grad_phi,
                                             np.ndarray bc_u,
                                             np.ndarray a,
                                             np.ndarray grad_phi,
                                             np.ndarray u,
                                             np.ndarray penalty,
                                             np.ndarray flux):
    if grad_phi.ndim == 4:
        ccalculateExteriorNumericalDiffusiveFlux_free(exteriorElementBoundaries.shape[0],
                                            grad_phi.shape[1],
                                            grad_phi.shape[2],
                                            grad_phi.shape[3],
                                             <int*> exteriorElementBoundaries.data,
                                             <int*> elementBoundaryElements.data,
                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                             <int*> isDOFBoundary.data,
                                             <double*> n.data,
                                             <double*> bc_a.data,
                                             <double*> bc_grad_phi.data,
                                             <double*> bc_u.data,
                                             <double*> a.data,
                                             <double*> grad_phi.data,
                                             <double*> u.data,
                                             <double*> penalty.data,
                                             <double*> flux.data)
    elif grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_free(exteriorElementBoundaries.shape[0],
                                            grad_phi.shape[1],
                                            grad_phi.shape[2],
                                             <int*> exteriorElementBoundaries.data,
                                             <int*> elementBoundaryElements.data,
                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                             <int*> isDOFBoundary.data,
                                             <double*> n.data,
                                             <double*> bc_a.data,
                                             <double*> bc_grad_phi.data,
                                             <double*> bc_u.data,
                                             <double*> a.data,
                                             <double*> grad_phi.data,
                                             <double*> u.data,
                                             <double*> penalty.data,
                                             <double*> flux.data)
    else:
        exit(1)
def calculateExteriorNumericalDiffusiveFlux_free_sd(np.ndarray rowptr,
                                            np.ndarray colind,
                                            np.ndarray exteriorElementBoundaries,
                                            np.ndarray elementBoundaryElements,
                                            np.ndarray elementBoundaryLocalElementBoundaries,
                                            np.ndarray isDOFBoundary,
                                            np.ndarray n,
                                            np.ndarray bc_a,
                                            np.ndarray bc_grad_phi,
                                            np.ndarray bc_u,
                                            np.ndarray a,
                                            np.ndarray grad_phi,
                                            np.ndarray u,
                                            np.ndarray penalty,
                                            np.ndarray flux):
    if grad_phi.ndim == 4:
        ccalculateExteriorNumericalDiffusiveFlux_free_sd(exteriorElementBoundaries.shape[0],
                                            grad_phi.shape[1],
                                            grad_phi.shape[2],
                                            grad_phi.shape[3],
                                            <int*> rowptr.data,
                                            <int*> colind.data,
                                            <int*> exteriorElementBoundaries.data,
                                            <int*> elementBoundaryElements.data,
                                            <int*> elementBoundaryLocalElementBoundaries.data,
                                            <int*> isDOFBoundary.data,
                                            <double*> n.data,
                                            <double*> bc_a.data,
                                            <double*> bc_grad_phi.data,
                                            <double*> bc_u.data,
                                            <double*> a.data,
                                            <double*> grad_phi.data,
                                            <double*> u.data,
                                            <double*> penalty.data,
                                            <double*> flux.data)
    elif grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_free_sd(exteriorElementBoundaries.shape[0],
                                            grad_phi.shape[1],
                                            grad_phi.shape[2],
                                            <int*> rowptr.data,
                                            <int*> colind.data,
                                            <int*> exteriorElementBoundaries.data,
                                            <int*> elementBoundaryElements.data,
                                            <int*> elementBoundaryLocalElementBoundaries.data,
                                            <int*> isDOFBoundary.data,
                                            <double*> n.data,
                                            <double*> bc_a.data,
                                            <double*> bc_grad_phi.data,
                                            <double*> bc_u.data,
                                            <double*> a.data,
                                            <double*> grad_phi.data,
                                            <double*> u.data,
                                            <double*> penalty.data,
                                            <double*> flux.data)
    else:
        exit(0)
def calculateGlobalExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray isDOFBoundary,
                            np.ndarray n,
                            np.ndarray bc_a,
                            np.ndarray bc_grad_phi,
                            np.ndarray bc_u,
                            np.ndarray a,
                            np.ndarray grad_phi,
                            np.ndarray u,
                            np.ndarray penalty,
                            np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux_free( nExteriorElementBoundaries_global,
                             nQuadraturePoints_elementBoundary,
                             nSpace,
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary.data,
                            <double*> n.data,
                            <double*> bc_a.data,
                            <double*> bc_grad_phi.data,
                            <double*> bc_u.data,
                            <double*> a.data,
                            <double*> grad_phi.data,
                            <double*> u.data,
                            <double*> penalty.data,
                            <double*> flux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux_free_sd(int nExteriorElementBoundaries_global,
                               int nQuadraturePoints_elementBoundary,
                               int nSpace,
                               np.ndarray rowptr,
                               np.ndarray colind,
                               np.ndarray exteriorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray isDOFBoundary,
                               np.ndarray n,
                               np.ndarray bc_a,
                               np.ndarray bc_grad_phi,
                               np.ndarray bc_u,
                               np.ndarray a,
                               np.ndarray grad_phi,
                               np.ndarray u,
                               np.ndarray penalty,
                               np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux_free_sd( nExteriorElementBoundaries_global,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                               <int*> rowptr.data,
                               <int*> colind.data,
                               <int*> exteriorElementBoundaries.data,
                               <int*> elementBoundaryElements.data,
                               <int*> elementBoundaryLocalElementBoundaries.data,
                               <int*> isDOFBoundary.data,
                               <double*> n.data,
                               <double*> bc_a.data,
                               <double*> bc_grad_phi.data,
                               <double*> bc_u.data,
                               <double*> a.data,
                               <double*> grad_phi.data,
                               <double*> u.data,
                               <double*> penalty.data,
                               <double*> flux.data)
def updateExteriorNumericalDiffusiveFluxJacobian(np.ndarray l2g,
                                                  np.ndarray exteriorElementBoundaries,
                                                  np.ndarray elementBoundaryElements,
                                                  np.ndarray elementBoundaryLocalElementBoundaries,
                                                  np.ndarray isDOFBoundary,
                                                  np.ndarray n,
                                                  np.ndarray a,
                                                  np.ndarray da,
                                                  np.ndarray grad_phi,
                                                  np.ndarray dphi,
                                                  np.ndarray v,
                                                  np.ndarray grad_v,
                                                  np.ndarray penalty,
                                                  np.ndarray fluxJacobian,
                                                  int scale_penalty,
                                                  double penalty_floor):
    if grad_v.ndim == 5:
        cupdateExteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                   penalty_floor,
                                                   exteriorElementBoundaries.shape[0],
                                                   grad_v.shape[1],
                                                   grad_v.shape[2],
                                                   grad_v.shape[3],
                                                   grad_v.shape[4],
                                                  <int*> l2g.data,
                                                  <int*> exteriorElementBoundaries.data,
                                                  <int*> elementBoundaryElements.data,
                                                  <int*> elementBoundaryLocalElementBoundaries.data,
                                                  <int*> isDOFBoundary.data,
                                                  <double*> n.data,
                                                  <double*> a.data,
                                                  <double*> da.data,
                                                  <double*> grad_phi.data,
                                                  <double*> dphi.data,
                                                  <double*> v.data,
                                                  <double*> grad_v.data,
                                                  <double*> penalty.data,
                                                  <double*> fluxJacobian.data)
    elif grad_v.ndim == 4:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                   penalty_floor,
                                                   exteriorElementBoundaries.shape[0],
                                                   grad_v.shape[1],
                                                   grad_v.shape[2],
                                                   grad_v.shape[3],
                                                  <int*> l2g.data,
                                                  <int*> exteriorElementBoundaries.data,
                                                  <int*> elementBoundaryElements.data,
                                                  <int*> elementBoundaryLocalElementBoundaries.data,
                                                  <int*> isDOFBoundary.data,
                                                  <double*> n.data,
                                                  <double*> a.data,
                                                  <double*> da.data,
                                                  <double*> grad_phi.data,
                                                  <double*> dphi.data,
                                                  <double*> v.data,
                                                  <double*> grad_v.data,
                                                  <double*> penalty.data,
                                                  <double*> fluxJacobian.data)
    else:
        exit(1)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                        penalty_floor,
                                                        nExteriorElementBoundaries_global,
                                                        nQuadraturePoints_elementBoundary,
                                                        nDOF_trial_element,
                                                        nSpace,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_sd(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_sd( scale_penalty,
                                                        penalty_floor,
                                                        nExteriorElementBoundaries_global,
                                                        nQuadraturePoints_elementBoundary,
                                                        nDOF_trial_element,
                                                        nSpace,
                                                        <int*> rowptr.data,
                                                        <int*> colind.data,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def updateExteriorNumericalDiffusiveFluxJacobian_free(np.ndarray l2g,
                                                  np.ndarray exteriorElementBoundaries,
                                                  np.ndarray elementBoundaryElements,
                                                  np.ndarray elementBoundaryLocalElementBoundaries,
                                                  np.ndarray isDOFBoundary,
                                                  np.ndarray n,
                                                  np.ndarray a,
                                                  np.ndarray da,
                                                  np.ndarray grad_phi,
                                                  np.ndarray dphi,
                                                  np.ndarray v,
                                                  np.ndarray grad_v,
                                                  np.ndarray penalty,
                                                  np.ndarray fluxJacobian):
    if grad_v.ndim == 5:
        cupdateExteriorNumericalDiffusiveFluxJacobian_free(exteriorElementBoundaries.shape[0],
                                                    grad_v.shape[1],
                                                    grad_v.shape[2],
                                                    grad_v.shape[3],
                                                    grad_v.shape[4],
                                                    <int*> l2g.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> a.data,
                                                    <double*> da.data,
                                                    <double*> grad_phi.data,
                                                    <double*> dphi.data,
                                                    <double*> v.data,
                                                    <double*> grad_v.data,
                                                    <double*> penalty.data,
                                                    <double*> fluxJacobian.data)
    elif grad_v.ndim == 4:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free(exteriorElementBoundaries.shape[0],
                                                    grad_v.shape[1],
                                                    grad_v.shape[2],
                                                    grad_v.shape[3],
                                                    <int*> l2g.data,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <double*> n.data,
                                                    <double*> a.data,
                                                    <double*> da.data,
                                                    <double*> grad_phi.data,
                                                    <double*> dphi.data,
                                                    <double*> v.data,
                                                    <double*> grad_v.data,
                                                    <double*> penalty.data,
                                                    <double*> fluxJacobian.data)
    else:
        exit(1)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                 int nQuadraturePoints_elementBoundary,
                                 int nDOF_trial_element,
                                 int nSpace,
                                 np.ndarray l2g,
                                 np.ndarray exteriorElementBoundaries,
                                 np.ndarray elementBoundaryElements,
                                 np.ndarray elementBoundaryLocalElementBoundaries,
                                 np.ndarray isDOFBoundary,
                                 np.ndarray n,
                                 np.ndarray a,
                                 np.ndarray da,
                                 np.ndarray grad_phi,
                                 np.ndarray dphi,
                                 np.ndarray v,
                                 np.ndarray grad_v,
                                 np.ndarray penalty,
                                 np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                  nQuadraturePoints_elementBoundary,
                                  nDOF_trial_element,
                                  nSpace,
                                 <int*> l2g.data,
                                 <int*> exteriorElementBoundaries.data,
                                 <int*> elementBoundaryElements.data,
                                 <int*> elementBoundaryLocalElementBoundaries.data,
                                 <int*> isDOFBoundary.data,
                                 <double*> n.data,
                                 <double*> a.data,
                                 <double*> da.data,
                                 <double*> grad_phi.data,
                                 <double*> dphi.data,
                                 <double*> v.data,
                                 <double*> grad_v.data,
                                 <double*> penalty.data,
                                 <double*> fluxJacobian.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                np.ndarray rowptr,
                                np.ndarray colind,
                                np.ndarray l2g,
                                np.ndarray exteriorElementBoundaries,
                                np.ndarray elementBoundaryElements,
                                np.ndarray elementBoundaryLocalElementBoundaries,
                                np.ndarray isDOFBoundary,
                                np.ndarray n,
                                np.ndarray a,
                                np.ndarray da,
                                np.ndarray grad_phi,
                                np.ndarray dphi,
                                np.ndarray v,
                                np.ndarray grad_v,
                                np.ndarray penalty,
                                np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd( nExteriorElementBoundaries_global,
                                 nQuadraturePoints_elementBoundary,
                                 nDOF_trial_element,
                                 nSpace,
                                <int*> rowptr.data,
                                <int*> colind.data,
                                <int*> l2g.data,
                                <int*> exteriorElementBoundaries.data,
                                <int*> elementBoundaryElements.data,
                                <int*> elementBoundaryLocalElementBoundaries.data,
                                <int*> isDOFBoundary.data,
                                <double*> n.data,
                                <double*> a.data,
                                <double*> da.data,
                                <double*> grad_phi.data,
                                <double*> dphi.data,
                                <double*> v.data,
                                <double*> grad_v.data,
                                <double*> penalty.data,
                                <double*> fluxJacobian.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_NoBC(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray inflowFlag,
                            np.ndarray n,
                            np.ndarray f,
                            np.ndarray df,
                            np.ndarray flux,
                            np.ndarray dflux_left):
    ccalculateGlobalExteriorNumericalAdvectiveFlux_NoBC( nExteriorElementBoundaries_global,
                             nQuadraturePoints_elementBoundary,
                             nSpace,
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> inflowFlag.data,
                            <double*> n.data,
                            <double*> f.data,
                            <double*> df.data,
                            <double*> flux.data,
                            <double*> dflux_left.data)
def calculateGlobalExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                           int nQuadraturePoints_elementBoundary,
                           int nSpace,
                           np.ndarray exteriorElementBoundaries,
                           np.ndarray elementBoundaryElements,
                           np.ndarray elementBoundaryLocalElementBoundaries,
                           np.ndarray isDOFBoundary,
                           np.ndarray inflowFlag,
                           np.ndarray n,
                           np.ndarray bc_u,
                           np.ndarray bc_f,
                           np.ndarray bc_df,
                           np.ndarray u,
                           np.ndarray f,
                           np.ndarray df,
                           np.ndarray flux,
                           np.ndarray dflux):
    ccalculateGlobalExteriorNumericalAdvectiveFlux( nExteriorElementBoundaries_global,
                            nQuadraturePoints_elementBoundary,
                            nSpace,
                           <int*> exteriorElementBoundaries.data,
                           <int*> elementBoundaryElements.data,
                           <int*> elementBoundaryLocalElementBoundaries.data,
                           <int*> isDOFBoundary.data,
                           <int*> inflowFlag.data,
                           <double*> n.data,
                           <double*> bc_u.data,
                           <double*> bc_f.data,
                           <double*> bc_df.data,
                           <double*> u.data,
                           <double*> f.data,
                           <double*> df.data,
                           <double*> flux.data,
                           <double*> dflux.data)
def calculateExteriorNumericalAdvectiveFlux_free(np.ndarray exteriorElementBoundaries,
                                                  np.ndarray elementBoundaryElements,
                                                  np.ndarray elementBoundaryLocalElementBoundaries,
                                                  np.ndarray isDOFBoundary,
                                                  np.ndarray inflowFlag,
                                                  np.ndarray n,
                                                  np.ndarray bc_u,
                                                  np.ndarray bc_f,
                                                  np.ndarray bc_df,
                                                  np.ndarray u,
                                                  np.ndarray f,
                                                  np.ndarray df,
                                                  np.ndarray flux,
                                                  np.ndarray dflux):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFlux_free(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFlux_free(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)

def calculateGlobalExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray isDOFBoundary,
                            np.ndarray inflowFlag,
                            np.ndarray n,
                            np.ndarray bc_u,
                            np.ndarray bc_f,
                            np.ndarray bc_df,
                            np.ndarray u,
                            np.ndarray f,
                            np.ndarray df,
                            np.ndarray flux,
                            np.ndarray dflux):
    ccalculateGlobalExteriorNumericalAdvectiveFlux_free( nExteriorElementBoundaries_global,
                             nQuadraturePoints_elementBoundary,
                             nSpace,
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary.data,
                            <int*> inflowFlag.data,
                            <double*> n.data,
                            <double*> bc_u.data,
                            <double*> bc_f.data,
                            <double*> bc_df.data,
                            <double*> u.data,
                            <double*> f.data,
                            <double*> df.data,
                            <double*> flux.data,
                            <double*> dflux.data)
def calculateExteriorNumericalAdvectiveFluxStokesP2D(np.ndarray exteriorElementBoundaries,
                                                     np.ndarray elementBoundaryElements,
                                                     np.ndarray elementBoundaryLocalElementBoundaries,
                                                     np.ndarray isDOFBoundary_p,
                                                     np.ndarray isDOFBoundary_u,
                                                     np.ndarray isDOFBoundary_v,
                                                     np.ndarray n,
                                                     np.ndarray bc_f,
                                                     np.ndarray bc_fpu,
                                                     np.ndarray bc_fpv,
                                                     np.ndarray f,
                                                     np.ndarray fpu,
                                                     np.ndarray fpv,
                                                     np.ndarray df_du,
                                                     np.ndarray df_dv,
                                                     np.ndarray dfpu_dp,
                                                     np.ndarray dfpv_dp,
                                                     np.ndarray flux,
                                                     np.ndarray fluxpu,
                                                     np.ndarray fluxpv,
                                                     np.ndarray dflux_du,
                                                     np.ndarray dflux_dv,
                                                     np.ndarray dfluxpu_dp,
                                                     np.ndarray dfluxpv_dp):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFluxStokesP2D(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <double*> n.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_fpu.data,
                                                    <double*> bc_fpv.data,
                                                    <double*> f.data,
                                                    <double*> fpu.data,
                                                    <double*> fpv.data,
                                                    <double*> df_du.data,
                                                    <double*> df_dv.data,
                                                    <double*> dfpu_dp.data,
                                                    <double*> dfpv_dp.data,
                                                    <double*> flux.data,
                                                    <double*> fluxpu.data,
                                                    <double*> fluxpv.data,
                                                    <double*> dflux_du.data,
                                                    <double*> dflux_dv.data,
                                                    <double*> dfluxpu_dp.data,
                                                    <double*> dfluxpv_dp.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP2D(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <double*> n.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_fpu.data,
                                                    <double*> bc_fpv.data,
                                                    <double*> f.data,
                                                    <double*> fpu.data,
                                                    <double*> fpv.data,
                                                    <double*> df_du.data,
                                                    <double*> df_dv.data,
                                                    <double*> dfpu_dp.data,
                                                    <double*> dfpv_dp.data,
                                                    <double*> flux.data,
                                                    <double*> fluxpu.data,
                                                    <double*> fluxpv.data,
                                                    <double*> dflux_du.data,
                                                    <double*> dflux_dv.data,
                                                    <double*> dfluxpu_dp.data,
                                                    <double*> dfluxpv_dp.data)
def calculateExteriorNumericalAdvectiveFluxNavierStokes2D(np.ndarray exteriorElementBoundaries,
                                                           np.ndarray elementBoundaryElements,
                                                           np.ndarray elementBoundaryLocalElementBoundaries,
                                                           np.ndarray isDOFBoundary_p,
                                                           np.ndarray isDOFBoundary_u,
                                                           np.ndarray isDOFBoundary_v,
                                                           np.ndarray n,
                                                           np.ndarray bc_p,
                                                           np.ndarray bc_f_mass,
                                                           np.ndarray bc_f_umom,
                                                           np.ndarray bc_f_vmom,
                                                           np.ndarray p,
                                                           np.ndarray dm_umom,##
                                                           np.ndarray f_mass,
                                                           np.ndarray f_umom,
                                                           np.ndarray f_vmom,
                                                           np.ndarray df_mass_du,
                                                           np.ndarray df_mass_dv,
                                                           np.ndarray df_umom_dp,##
                                                           np.ndarray df_umom_du,
                                                           np.ndarray df_umom_dv,
                                                           np.ndarray df_vmom_dp,##
                                                           np.ndarray df_vmom_du,
                                                           np.ndarray df_vmom_dv,
                                                           np.ndarray flux_mass,
                                                           np.ndarray flux_umom,
                                                           np.ndarray flux_vmom,
                                                           np.ndarray dflux_mass_dp,##
                                                           np.ndarray dflux_mass_du,
                                                           np.ndarray dflux_mass_dv,
                                                           np.ndarray dflux_umom_dp,
                                                           np.ndarray dflux_umom_du,
                                                           np.ndarray dflux_umom_dv,
                                                           np.ndarray dflux_vmom_dp,
                                                           np.ndarray dflux_vmom_du,
                                                           np.ndarray dflux_vmom_dv,
                                                           np.ndarray velocity):
    if f_mass.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFluxNavierStokes2D(exteriorElementBoundaries.shape[0],
                                                            f_mass.shape[0],
                                                            f_mass.shape[1],
                                                            f_mass.shape[2],
                                                           <int*> exteriorElementBoundaries.data,
                                                           <int*> elementBoundaryElements.data,
                                                           <int*> elementBoundaryLocalElementBoundaries.data,
                                                           <int*> isDOFBoundary_p.data,
                                                           <int*> isDOFBoundary_u.data,
                                                           <int*> isDOFBoundary_v.data,
                                                           <double*> n.data,
                                                           <double*> bc_p.data,
                                                           <double*> bc_f_mass.data,
                                                           <double*> bc_f_umom.data,
                                                           <double*> bc_f_vmom.data,
                                                           <double*> p.data,
                                                           <double*> f_mass.data,
                                                           <double*> f_umom.data,
                                                           <double*> f_vmom.data,
                                                           <double*> df_mass_du.data,
                                                           <double*> df_mass_dv.data,
                                                           <double*> df_umom_du.data,
                                                           <double*> df_umom_dv.data,
                                                           <double*> df_vmom_du.data,
                                                           <double*> df_vmom_dv.data,
                                                           <double*> flux_mass.data,
                                                           <double*> flux_umom.data,
                                                           <double*> flux_vmom.data,
                                                           <double*> dflux_mass_du.data,
                                                           <double*> dflux_mass_dv.data,
                                                           <double*> dflux_umom_dp.data,
                                                           <double*> dflux_umom_du.data,
                                                           <double*> dflux_umom_dv.data,
                                                           <double*> dflux_vmom_dp.data,
                                                           <double*> dflux_vmom_du.data,
                                                           <double*> dflux_vmom_dv.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D(exteriorElementBoundaries.shape[0],
                                                            f_mass.shape[0],
                                                            f_mass.shape[1],
                                                           <int*> exteriorElementBoundaries.data,
                                                           <int*> elementBoundaryElements.data,
                                                           <int*> elementBoundaryLocalElementBoundaries.data,
                                                           <int*> isDOFBoundary_p.data,
                                                           <int*> isDOFBoundary_u.data,
                                                           <int*> isDOFBoundary_v.data,
                                                           <double*> n.data,
                                                           <double*> bc_p.data,
                                                           <double*> bc_f_mass.data,
                                                           <double*> bc_f_umom.data,
                                                           <double*> bc_f_vmom.data,
                                                           <double*> p.data,
                                                           <double*> dm_umom.data,###
                                                           <double*> f_mass.data,
                                                           <double*> f_umom.data,
                                                           <double*> f_vmom.data,
                                                           <double*> df_mass_du.data,
                                                           <double*> df_mass_dv.data,
                                                           <double*> df_umom_dp.data,###
                                                           <double*> df_umom_du.data,
                                                           <double*> df_umom_dv.data,
                                                           <double*> df_vmom_dp.data,###
                                                           <double*> df_vmom_du.data,
                                                           <double*> df_vmom_dv.data,
                                                           <double*> flux_mass.data,
                                                           <double*> flux_umom.data,
                                                           <double*> flux_vmom.data,
                                                           <double*> dflux_mass_dp.data,####
                                                           <double*> dflux_mass_du.data,
                                                           <double*> dflux_mass_dv.data,
                                                           <double*> dflux_umom_dp.data,
                                                           <double*> dflux_umom_du.data,
                                                           <double*> dflux_umom_dv.data,
                                                           <double*> dflux_vmom_dp.data,
                                                           <double*> dflux_vmom_du.data,
                                                           <double*> dflux_vmom_dv.data,
                                                           <double*> velocity.data)
def calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                                 int nQuadraturePoints_elementBoundary,
                                                                 int nSpace,
                                                                 np.ndarray exteriorElementBoundaries,
                                                                 np.ndarray elementBoundaryElements,
                                                                 np.ndarray elementBoundaryLocalElementBoundaries,
                                                                 np.ndarray isDOFBoundary_p,
                                                                 np.ndarray isDOFBoundary_u,
                                                                 np.ndarray isDOFBoundary_v,
                                                                 np.ndarray n,
                                                                 np.ndarray bc_p,
                                                                 np.ndarray bc_f_mass,
                                                                 np.ndarray bc_f_umom,
                                                                 np.ndarray bc_f_vmom,
                                                                 np.ndarray p,
                                                                 np.ndarray oneByRho,
                                                                 np.ndarray f_mass,
                                                                 np.ndarray f_umom,
                                                                 np.ndarray f_vmom,
                                                                 np.ndarray df_mass_du,
                                                                 np.ndarray df_mass_dv,
                                                                 np.ndarray df_umom_dp,
                                                                 np.ndarray df_umom_du,
                                                                 np.ndarray df_umom_dv,
                                                                 np.ndarray df_vmom_dp,
                                                                 np.ndarray df_vmom_du,
                                                                 np.ndarray df_vmom_dv,
                                                                 np.ndarray flux_mass,
                                                                 np.ndarray flux_umom,
                                                                 np.ndarray flux_vmom,
                                                                 np.ndarray dflux_mass_dp,
                                                                 np.ndarray dflux_mass_du,
                                                                 np.ndarray dflux_mass_dv,
                                                                 np.ndarray dflux_umom_dp,
                                                                 np.ndarray dflux_umom_du,
                                                                 np.ndarray dflux_umom_dv,
                                                                 np.ndarray dflux_vmom_dp,
                                                                 np.ndarray dflux_vmom_du,
                                                                 np.ndarray dflux_vmom_dv,
                                                                 np.ndarray velocity):
    ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D( nExteriorElementBoundaries_global,
                                                                  nQuadraturePoints_elementBoundary,
                                                                  nSpace,
                                                                 <int*> exteriorElementBoundaries.data,
                                                                 <int*> elementBoundaryElements.data,
                                                                 <int*> elementBoundaryLocalElementBoundaries.data,
                                                                 <int*> isDOFBoundary_p.data,
                                                                 <int*> isDOFBoundary_u.data,
                                                                 <int*> isDOFBoundary_v.data,
                                                                 <double*> n.data,
                                                                 <double*> bc_p.data,
                                                                 <double*> bc_f_mass.data,
                                                                 <double*> bc_f_umom.data,
                                                                 <double*> bc_f_vmom.data,
                                                                 <double*> p.data,
                                                                 <double*> oneByRho.data,
                                                                 <double*> f_mass.data,
                                                                 <double*> f_umom.data,
                                                                 <double*> f_vmom.data,
                                                                 <double*> df_mass_du.data,
                                                                 <double*> df_mass_dv.data,
                                                                 <double*> df_umom_dp.data,
                                                                 <double*> df_umom_du.data,
                                                                 <double*> df_umom_dv.data,
                                                                 <double*> df_vmom_dp.data,
                                                                 <double*> df_vmom_du.data,
                                                                 <double*> df_vmom_dv.data,
                                                                 <double*> flux_mass.data,
                                                                 <double*> flux_umom.data,
                                                                 <double*> flux_vmom.data,
                                                                 <double*> dflux_mass_dp.data,
                                                                 <double*> dflux_mass_du.data,
                                                                 <double*> dflux_mass_dv.data,
                                                                 <double*> dflux_umom_dp.data,
                                                                 <double*> dflux_umom_du.data,
                                                                 <double*> dflux_umom_dv.data,
                                                                 <double*> dflux_vmom_dp.data,
                                                                 <double*> dflux_vmom_du.data,
                                                                 <double*> dflux_vmom_dv.data,
                                                                 <double*> velocity.data)
def calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D(int nExteriorElementBoundaries_global,
                                                                 int nQuadraturePoints_elementBoundary,
                                                                 int nSpace,
                                                                 np.ndarray exteriorElementBoundaries,
                                                                 np.ndarray elementBoundaryElements,
                                                                 np.ndarray elementBoundaryLocalElementBoundaries,
                                                                 np.ndarray isDOFBoundary_p,
                                                                 np.ndarray isDOFBoundary_u,
                                                                 np.ndarray isDOFBoundary_v,
                                                                 np.ndarray isDOFBoundary_w,
                                                                 np.ndarray n,
                                                                 np.ndarray bc_p,
                                                                 np.ndarray bc_f_mass,
                                                                 np.ndarray bc_f_umom,
                                                                 np.ndarray bc_f_vmom,
                                                                 np.ndarray bc_f_wmom,
                                                                 np.ndarray p,
                                                                 np.ndarray f_mass,
                                                                 np.ndarray f_umom,
                                                                 np.ndarray f_vmom,
                                                                 np.ndarray f_wmom,
                                                                 np.ndarray df_mass_du,
                                                                 np.ndarray df_mass_dv,
                                                                 np.ndarray df_mass_dw,
                                                                 np.ndarray df_umom_dp,
                                                                 np.ndarray df_umom_du,
                                                                 np.ndarray df_umom_dv,
                                                                 np.ndarray df_umom_dw,
                                                                 np.ndarray df_vmom_dp,
                                                                 np.ndarray df_vmom_du,
                                                                 np.ndarray df_vmom_dv,
                                                                 np.ndarray df_vmom_dw,
                                                                 np.ndarray df_wmom_dp,
                                                                 np.ndarray df_wmom_du,
                                                                 np.ndarray df_wmom_dv,
                                                                 np.ndarray df_wmom_dw,
                                                                 np.ndarray flux_mass,
                                                                 np.ndarray flux_umom,
                                                                 np.ndarray flux_vmom,
                                                                 np.ndarray flux_wmom,
                                                                 np.ndarray dflux_mass_du,
                                                                 np.ndarray dflux_mass_dv,
                                                                 np.ndarray dflux_mass_dw,
                                                                 np.ndarray dflux_umom_dp,
                                                                 np.ndarray dflux_umom_du,
                                                                 np.ndarray dflux_umom_dv,
                                                                 np.ndarray dflux_umom_dw,
                                                                 np.ndarray dflux_vmom_dp,
                                                                 np.ndarray dflux_vmom_du,
                                                                 np.ndarray dflux_vmom_dv,
                                                                 np.ndarray dflux_vmom_dw,
                                                                 np.ndarray dflux_wmom_dp,
                                                                 np.ndarray dflux_wmom_du,
                                                                 np.ndarray dflux_wmom_dv,
                                                                 np.ndarray dflux_wmom_dw,
                                                                 np.ndarray velocity):
    ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D( nExteriorElementBoundaries_global,
                                                                  nQuadraturePoints_elementBoundary,
                                                                  nSpace,
                                                                 <int*> exteriorElementBoundaries.data,
                                                                 <int*> elementBoundaryElements.data,
                                                                 <int*> elementBoundaryLocalElementBoundaries.data,
                                                                 <int*> isDOFBoundary_p.data,
                                                                 <int*> isDOFBoundary_u.data,
                                                                 <int*> isDOFBoundary_v.data,
                                                                 <int*> isDOFBoundary_w.data,
                                                                 <double*> n.data,
                                                                 <double*> bc_p.data,
                                                                 <double*> bc_f_mass.data,
                                                                 <double*> bc_f_umom.data,
                                                                 <double*> bc_f_vmom.data,
                                                                 <double*> bc_f_wmom.data,
                                                                 <double*> p.data,
                                                                 <double*> f_mass.data,
                                                                 <double*> f_umom.data,
                                                                 <double*> f_vmom.data,
                                                                 <double*> f_wmom.data,
                                                                 <double*> df_mass_du.data,
                                                                 <double*> df_mass_dv.data,
                                                                 <double*> df_mass_dw.data,
                                                                 <double*> df_umom_dp.data,
                                                                 <double*> df_umom_du.data,
                                                                 <double*> df_umom_dv.data,
                                                                 <double*> df_umom_dw.data,
                                                                 <double*> df_vmom_dp.data,
                                                                 <double*> df_vmom_du.data,
                                                                 <double*> df_vmom_dv.data,
                                                                 <double*> df_vmom_dw.data,
                                                                 <double*> df_wmom_dp.data,
                                                                 <double*> df_wmom_du.data,
                                                                 <double*> df_wmom_dv.data,
                                                                 <double*> df_wmom_dw.data,
                                                                 <double*> flux_mass.data,
                                                                 <double*> flux_umom.data,
                                                                 <double*> flux_vmom.data,
                                                                 <double*> flux_wmom.data,
                                                                 <double*> dflux_mass_du.data,
                                                                 <double*> dflux_mass_dv.data,
                                                                 <double*> dflux_mass_dw.data,
                                                                 <double*> dflux_umom_dp.data,
                                                                 <double*> dflux_umom_du.data,
                                                                 <double*> dflux_umom_dv.data,
                                                                 <double*> dflux_umom_dw.data,
                                                                 <double*> dflux_vmom_dp.data,
                                                                 <double*> dflux_vmom_du.data,
                                                                 <double*> dflux_vmom_dv.data,
                                                                 <double*> dflux_vmom_dw.data,
                                                                 <double*> dflux_wmom_dp.data,
                                                                 <double*> dflux_wmom_du.data,
                                                                 <double*> dflux_wmom_dv.data,
                                                                 <double*> dflux_wmom_dw.data,
                                                                 <double*> velocity.data)
def calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D(int nExteriorElementBoundaries_global,
                               int nQuadraturePoints_elementBoundary,
                               int nSpace,
                               np.ndarray exteriorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray isDOFBoundary_p,
                               np.ndarray isDOFBoundary_u,
                               np.ndarray isDOFBoundary_v,
                               np.ndarray n,
                               np.ndarray bc_f,
                               np.ndarray bc_fpu,
                               np.ndarray bc_fpv,
                               np.ndarray f,
                               np.ndarray fpu,
                               np.ndarray fpv,
                               np.ndarray df_du,
                               np.ndarray df_dv,
                               np.ndarray dfpu_dp,
                               np.ndarray dfpv_dp,
                               np.ndarray flux,
                               np.ndarray fluxpu,
                               np.ndarray fluxpv,
                               np.ndarray dflux_du,
                               np.ndarray dflux_dv,
                               np.ndarray dfluxpu_dp,
                               np.ndarray dfluxpv_dp):
    ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP2D( nExteriorElementBoundaries_global,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                               <int*> exteriorElementBoundaries.data,
                               <int*> elementBoundaryElements.data,
                               <int*> elementBoundaryLocalElementBoundaries.data,
                               <int*> isDOFBoundary_p.data,
                               <int*> isDOFBoundary_u.data,
                               <int*> isDOFBoundary_v.data,
                               <double*> n.data,
                               <double*> bc_f.data,
                               <double*> bc_fpu.data,
                               <double*> bc_fpv.data,
                               <double*> f.data,
                               <double*> fpu.data,
                               <double*> fpv.data,
                               <double*> df_du.data,
                               <double*> df_dv.data,
                               <double*> dfpu_dp.data,
                               <double*> dfpv_dp.data,
                               <double*> flux.data,
                               <double*> fluxpu.data,
                               <double*> fluxpv.data,
                               <double*> dflux_du.data,
                               <double*> dflux_dv.data,
                               <double*> dfluxpu_dp.data,
                               <double*> dfluxpv_dp.data)
def calculateExteriorNumericalAdvectiveFluxStokesP3D(np.ndarray exteriorElementBoundaries,
                                                     np.ndarray elementBoundaryElements,
                                                     np.ndarray elementBoundaryLocalElementBoundaries,
                                                     np.ndarray isDOFBoundary_p,
                                                     np.ndarray isDOFBoundary_u,
                                                     np.ndarray isDOFBoundary_v,
                                                     np.ndarray isDOFBoundary_w,
                                                     np.ndarray n,
                                                     np.ndarray bc_f,
                                                     np.ndarray bc_fpu,
                                                     np.ndarray bc_fpv,
                                                     np.ndarray bc_fpw,
                                                     np.ndarray f,
                                                     np.ndarray fpu,
                                                     np.ndarray fpv,
                                                     np.ndarray fpw,
                                                     np.ndarray df_du,
                                                     np.ndarray df_dv,
                                                     np.ndarray df_dw,
                                                     np.ndarray dfpu_dp,
                                                     np.ndarray dfpv_dp,
                                                     np.ndarray dfpw_dp,
                                                     np.ndarray flux,
                                                     np.ndarray fluxpu,
                                                     np.ndarray fluxpv,
                                                     np.ndarray fluxpw,
                                                     np.ndarray dflux_du,
                                                     np.ndarray dflux_dv,
                                                     np.ndarray dflux_dw,
                                                     np.ndarray dfluxpu_dp,
                                                     np.ndarray dfluxpv_dp,
                                                     np.ndarray dfluxpw_dp):
    if f.ndim > 3:
        ccalculateExteriorNumericalAdvectiveFluxStokesP3D(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <int*> isDOFBoundary_w.data,
                                                    <double*> n.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_fpu.data,
                                                    <double*> bc_fpv.data,
                                                    <double*> bc_fpw.data,
                                                    <double*> f.data,
                                                    <double*> fpu.data,
                                                    <double*> fpv.data,
                                                    <double*> fpw.data,
                                                    <double*> df_du.data,
                                                    <double*> df_dv.data,
                                                    <double*> df_dw.data,
                                                    <double*> dfpu_dp.data,
                                                    <double*> dfpv_dp.data,
                                                    <double*> dfpw_dp.data,
                                                    <double*> flux.data,
                                                    <double*> fluxpu.data,
                                                    <double*> fluxpv.data,
                                                    <double*> fluxpw.data,
                                                    <double*> dflux_du.data,
                                                    <double*> dflux_dv.data,
                                                    <double*> dflux_dw.data,
                                                    <double*> dfluxpu_dp.data,
                                                    <double*> dfluxpv_dp.data,
                                                    <double*> dfluxpw_dp.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP3D(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <int*> isDOFBoundary_w.data,
                                                    <double*> n.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_fpu.data,
                                                    <double*> bc_fpv.data,
                                                    <double*> bc_fpw.data,
                                                    <double*> f.data,
                                                    <double*> fpu.data,
                                                    <double*> fpv.data,
                                                    <double*> fpw.data,
                                                    <double*> df_du.data,
                                                    <double*> df_dv.data,
                                                    <double*> df_dw.data,
                                                    <double*> dfpu_dp.data,
                                                    <double*> dfpv_dp.data,
                                                    <double*> dfpw_dp.data,
                                                    <double*> flux.data,
                                                    <double*> fluxpu.data,
                                                    <double*> fluxpv.data,
                                                    <double*> fluxpw.data,
                                                    <double*> dflux_du.data,
                                                    <double*> dflux_dv.data,
                                                    <double*> dflux_dw.data,
                                                    <double*> dfluxpu_dp.data,
                                                    <double*> dfluxpv_dp.data,
                                                    <double*> dfluxpw_dp.data)
def calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
                               int nQuadraturePoints_elementBoundary,
                               int nSpace,
                               np.ndarray exteriorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray isDOFBoundary_p,
                               np.ndarray isDOFBoundary_u,
                               np.ndarray isDOFBoundary_v,
                               np.ndarray isDOFBoundary_w,
                               np.ndarray n,
                               np.ndarray bc_f,
                               np.ndarray bc_fpu,
                               np.ndarray bc_fpv,
                               np.ndarray bc_fpw,
                               np.ndarray f,
                               np.ndarray fpu,
                               np.ndarray fpv,
                               np.ndarray fpw,
                               np.ndarray df_du,
                               np.ndarray df_dv,
                               np.ndarray df_dw,
                               np.ndarray dfpu_dp,
                               np.ndarray dfpv_dp,
                               np.ndarray dfpw_dp,
                               np.ndarray flux,
                               np.ndarray fluxpu,
                               np.ndarray fluxpv,
                               np.ndarray fluxpw,
                               np.ndarray dflux_du,
                               np.ndarray dflux_dv,
                               np.ndarray dflux_dw,
                               np.ndarray dfluxpu_dp,
                               np.ndarray dfluxpv_dp,
                               np.ndarray dfluxpw_dp):
    ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP3D( nExteriorElementBoundaries_global,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                               <int*> exteriorElementBoundaries.data,
                               <int*> elementBoundaryElements.data,
                               <int*> elementBoundaryLocalElementBoundaries.data,
                               <int*> isDOFBoundary_p.data,
                               <int*> isDOFBoundary_u.data,
                               <int*> isDOFBoundary_v.data,
                               <int*> isDOFBoundary_w.data,
                               <double*> n.data,
                               <double*> bc_f.data,
                               <double*> bc_fpu.data,
                               <double*> bc_fpv.data,
                               <double*> bc_fpw.data,
                               <double*> f.data,
                               <double*> fpu.data,
                               <double*> fpv.data,
                               <double*> fpw.data,
                               <double*> df_du.data,
                               <double*> df_dv.data,
                               <double*> df_dw.data,
                               <double*> dfpu_dp.data,
                               <double*> dfpv_dp.data,
                               <double*> dfpw_dp.data,
                               <double*> flux.data,
                               <double*> fluxpu.data,
                               <double*> fluxpv.data,
                               <double*> fluxpw.data,
                               <double*> dflux_du.data,
                               <double*> dflux_dv.data,
                               <double*> dflux_dw.data,
                               <double*> dfluxpu_dp.data,
                               <double*> dfluxpv_dp.data,
                               <double*> dfluxpw_dp.data)
def calculateExteriorNumericalAdvectiveFlux_average(np.ndarray exteriorElementBoundaries,
                                                     np.ndarray elementBoundaryElements,
                                                     np.ndarray elementBoundaryLocalElementBoundaries,
                                                     np.ndarray isDOFBoundary,
                                                     np.ndarray inflowFlag,
                                                     np.ndarray n,
                                                     np.ndarray bc_u,
                                                     np.ndarray bc_f,
                                                     np.ndarray bc_df,
                                                     np.ndarray u,
                                                     np.ndarray f,
                                                     np.ndarray df,
                                                     np.ndarray flux,
                                                     np.ndarray dflux):
    if f.dim > 3:
        ccalculateExteriorNumericalAdvectiveFlux_average(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    f.shape[3],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)
    else:
        ccalculateGlobalExteriorNumericalAdvectiveFlux_average(exteriorElementBoundaries.shape[0],
                                                    f.shape[1],
                                                    f.shape[2],
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary.data,
                                                    <int*> inflowFlag.data,
                                                    <double*> n.data,
                                                    <double*> bc_u.data,
                                                    <double*> bc_f.data,
                                                    <double*> bc_df.data,
                                                    <double*> u.data,
                                                    <double*> f.data,
                                                    <double*> df.data,
                                                    <double*> flux.data,
                                                    <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_average(int nExteriorElementBoundaries_global,
                               int nQuadraturePoints_elementBoundary,
                               int nSpace,
                               np.ndarray exteriorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray isDOFBoundary,
                               np.ndarray inflowFlag,
                               np.ndarray n,
                               np.ndarray bc_u,
                               np.ndarray bc_f,
                               np.ndarray bc_df,
                               np.ndarray u,
                               np.ndarray f,
                               np.ndarray df,
                               np.ndarray flux,
                               np.ndarray dflux):
    ccalculateGlobalExteriorNumericalAdvectiveFlux_average( nExteriorElementBoundaries_global,
                                nQuadraturePoints_elementBoundary,
                                nSpace,
                               <int*> exteriorElementBoundaries.data,
                               <int*> elementBoundaryElements.data,
                               <int*> elementBoundaryLocalElementBoundaries.data,
                               <int*> isDOFBoundary.data,
                               <int*> inflowFlag.data,
                               <double*> n.data,
                               <double*> bc_u.data,
                               <double*> bc_f.data,
                               <double*> bc_df.data,
                               <double*> u.data,
                               <double*> f.data,
                               <double*> df.data,
                               <double*> flux.data,
                               <double*> dflux.data)
def updateExteriorNumericalAdvectiveFluxJacobian_free(np.ndarray exteriorElementBoundaries,
                                                       np.ndarray elementBoundaryElements,
                                                       np.ndarray elementBoundaryLocalElementBoundaries,
                                                       np.ndarray inflowFlag,
                                                       np.ndarray dflux_left,
                                                       np.ndarray v,
                                                       np.ndarray fluxJacobian):
    if v.dim == 4:
        cupdateExteriorNumericalAdvectiveFluxJacobian_free(exteriorElementBoundaries.shape[0],
                                                        v.shape[1],
                                                        v.shape[2],
                                                        v.shape[3],
                                                       <int*> exteriorElementBoundaries.data,
                                                       <int*> elementBoundaryElements.data,
                                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                                       <int*> inflowFlag.data,
                                                       <double*> dflux_left.data,
                                                       <double*> v.data,
                                                       <double*> fluxJacobian.data)
    elif v.dim == 3:
        cupdateGlobalExteriorNumericalAdvectiveFluxJacobian_free(exteriorElementBoundaries.shape[0],
                                                        v.shape[1],
                                                        v.shape[2],
                                                       <int*> exteriorElementBoundaries.data,
                                                       <int*> elementBoundaryElements.data,
                                                       <int*> elementBoundaryLocalElementBoundaries.data,
                                                       <int*> inflowFlag.data,
                                                       <double*> dflux_left.data,
                                                       <double*> v.data,
                                                       <double*> fluxJacobian.data)
def updateGlobalExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                             int nQuadraturePoints_elementBoundary,
                                                             int nDOF_trial_element,
                                                             np.ndarray exteriorElementBoundaries,
                                                             np.ndarray elementBoundaryElements,
                                                             np.ndarray elementBoundaryLocalElementBoundaries,
                                                             np.ndarray inflowFlag,
                                                             np.ndarray dflux_left,
                                                             np.ndarray v,
                                                             np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalAdvectiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                                              nQuadraturePoints_elementBoundary,
                                                              nDOF_trial_element,
                                                             <int*> exteriorElementBoundaries.data,
                                                             <int*> elementBoundaryElements.data,
                                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                                             <int*> inflowFlag.data,
                                                             <double*> dflux_left.data,
                                                             <double*> v.data,
                                                             <double*> fluxJacobian.data)
def calculateExteriorNumericalDiffusiveFlux_LDG_upwind(np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi_bc,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
    if n.ndim > 3:
        ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind(exteriorElementBoundaries.shape[0],
                                                        n.shape[1],
                                                        n.shape[2],
                                                        n.shape[3],
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
    else:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind(exteriorElementBoundaries.shape[0],
                                                        V.shape[1],
                                                        V.shape[2],
                                                        V.shape[3],
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def calculateExteriorNumericalDiffusiveFlux_LDG_upwind_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi_bc,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
    if n.ndim > 3:
        ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind_sd(exteriorElementBoundaries.shape[0],
                                                        n.shape[1],
                                                        n.shape[2],
                                                        n.shape[3],
                                                        <int*> rowptr.data,
                                                        <int*> colind.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
    else:
        ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd(exteriorElementBoundaries.shape[0],
                                                        V.shape[1],
                                                        V.shape[2],
                                                        V.shape[3],
                                                        <int*> rowptr.data,
                                                        <int*> colind.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind(int nExteriorElementBoundaries_global,
                                  int nElementBoundaries_element,
                                  int nQuadraturePoints_elementBoundary,
                                  int nSpace,
                                  np.ndarray exteriorElementBoundaries,
                                  np.ndarray elementBoundaryElements,
                                  np.ndarray elementBoundaryLocalElementBoundaries,
                                  np.ndarray n,
                                  np.ndarray u,
                                  np.ndarray a,
                                  np.ndarray phi_bc,
                                  np.ndarray phi,
                                  np.ndarray V,
                                  np.ndarray penalty,
                                  np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind( nExteriorElementBoundaries_global,
                                   nElementBoundaries_element,
                                   nQuadraturePoints_elementBoundary,
                                   nSpace,
                                  <int*> exteriorElementBoundaries.data,
                                  <int*> elementBoundaryElements.data,
                                  <int*> elementBoundaryLocalElementBoundaries.data,
                                  <double*> n.data,
                                  <double*> u.data,
                                  <double*> a.data,
                                  <double*> phi_bc.data,
                                  <double*> phi.data,
                                  <double*> V.data,
                                  <double*> penalty.data,
                                  <double*> flux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd(int nExteriorElementBoundaries_global,
                                 int nElementBoundaries_element,
                                 int nQuadraturePoints_elementBoundary,
                                 int nSpace,
                                 np.ndarray rowptr,
                                 np.ndarray colind,
                                 np.ndarray exteriorElementBoundaries,
                                 np.ndarray elementBoundaryElements,
                                 np.ndarray elementBoundaryLocalElementBoundaries,
                                 np.ndarray n,
                                 np.ndarray u,
                                 np.ndarray a,
                                 np.ndarray phi_bc,
                                 np.ndarray phi,
                                 np.ndarray V,
                                 np.ndarray penalty,
                                 np.ndarray flux):
    ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd( nExteriorElementBoundaries_global,
                                  nElementBoundaries_element,
                                  nQuadraturePoints_elementBoundary,
                                  nSpace,
                                 <int*> rowptr.data,
                                 <int*> colind.data,
                                 <int*> exteriorElementBoundaries.data,
                                 <int*> elementBoundaryElements.data,
                                 <int*> elementBoundaryLocalElementBoundaries.data,
                                 <double*> n.data,
                                 <double*> u.data,
                                 <double*> a.data,
                                 <double*> phi_bc.data,
                                 <double*> phi.data,
                                 <double*> V.data,
                                 <double*> penalty.data,
                                 <double*> flux.data)
def updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(np.ndarray isDiffusiveFluxBoundary,
                                                             np.ndarray exteriorElementBoundaries,
                                                             np.ndarray elementBoundaryElements,
                                                             np.ndarray elementBoundaryLocalElementBoundaries,
                                                             np.ndarray n,
                                                             np.ndarray a,
                                                             np.ndarray da,
                                                             np.ndarray dphi,
                                                             np.ndarray V,
                                                             np.ndarray DV,
                                                             np.ndarray DV_eb,
                                                             np.ndarray v,
                                                             np.ndarray penalty,
                                                             np.ndarray fluxJacobian,
                                                             np.ndarray fluxJacobian_eb):
    if n.ndim > 3:
        cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(<int*> isDiffusiveFluxBoundary.data,
                                                            exteriorElementBoundaries.shape[0],
                                                            v.shape[1],
                                                            v.shape[2],
                                                            v.shape[3],
                                                            n.shape[3],
                                                             <int*> exteriorElementBoundaries.data,
                                                             <int*> elementBoundaryElements.data,
                                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                                             <double*> n.data,
                                                             <double*> a.data,
                                                             <double*> da.data,
                                                             <double*> dphi.data,
                                                             <double*> V.data,
                                                             <double*> DV.data,
                                                             <double*> DV_eb.data,
                                                             <double*> v.data,
                                                             <double*> penalty.data,
                                                             <double*> fluxJacobian.data,
                                                             <double*> fluxJacobian_eb.data)
    else:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(<int*> isDiffusiveFluxBoundary.data,
                                                            exteriorElementBoundaries.shape[0],
                                                            DV.shape[1],
                                                            DV.shape[2],
                                                            DV.shape[3],
                                                            n.shape[2],
                                                             <int*> exteriorElementBoundaries.data,
                                                             <int*> elementBoundaryElements.data,
                                                             <int*> elementBoundaryLocalElementBoundaries.data,
                                                             <double*> n.data,
                                                             <double*> a.data,
                                                             <double*> da.data,
                                                             <double*> dphi.data,
                                                             <double*> V.data,
                                                             <double*> DV.data,
                                                             <double*> DV_eb.data,
                                                             <double*> v.data,
                                                             <double*> penalty.data,
                                                             <double*> fluxJacobian.data,
                                                             <double*> fluxJacobian_eb.data)

def updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(np.ndarray isDiffusiveFluxBoundary,
                                                            np.ndarray rowptr,
                                                            np.ndarray colind,
                                                            np.ndarray exteriorElementBoundaries,
                                                            np.ndarray elementBoundaryElements,
                                                            np.ndarray elementBoundaryLocalElementBoundaries,
                                                            np.ndarray n,
                                                            np.ndarray a,
                                                            np.ndarray da,
                                                            np.ndarray dphi,
                                                            np.ndarray V,
                                                            np.ndarray DV,
                                                            np.ndarray DV_eb,
                                                            np.ndarray v,
                                                            np.ndarray penalty,
                                                            np.ndarray fluxJacobian,
                                                            np.ndarray fluxJacobian_eb):
    if n.ndim > 3:
        cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(<int*> isDiffusiveFluxBoundary.data,
                                                        exteriorElementBoundaries.shape[0],
                                                        v.shape[1],
                                                        v.shape[2],
                                                        v.shape[3],
                                                        n.shape[3],
                                                        <int*> rowptr.data,
                                                        <int*> colind.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data,
                                                        <double*> fluxJacobian_eb.data)
    else:
        cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(<int*> isDiffusiveFluxBoundary.data,
                                                        exteriorElementBoundaries.shape[0],
                                                        DV.shape[1],
                                                        DV.shape[2],
                                                        DV.shape[3],
                                                        n.shape[2],
                                                        <int*> rowptr.data,
                                                        <int*> colind.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data,
                                                        <double*> fluxJacobian_eb.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(np.ndarray isDiffusiveFluxBoundary,
                                   int nExteriorElementBoundaries_global,
                                   int nElementBoundaries_element,
                                   int nQuadraturePoints_elementBoundary,
                                   int nDOF_trial_element,
                                   int nSpace,
                                   np.ndarray exteriorElementBoundaries,
                                   np.ndarray elementBoundaryElements,
                                   np.ndarray elementBoundaryLocalElementBoundaries,
                                   np.ndarray n,
                                   np.ndarray a,
                                   np.ndarray da,
                                   np.ndarray dphi,
                                   np.ndarray V,
                                   np.ndarray DV,
                                   np.ndarray DV_eb,
                                   np.ndarray v,
                                   np.ndarray penalty,
                                   np.ndarray fluxJacobian_exterior,
                                   np.ndarray fluxJacobian_eb):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(<int*> isDiffusiveFluxBoundary.data,
                                    nExteriorElementBoundaries_global,
                                    nElementBoundaries_element,
                                    nQuadraturePoints_elementBoundary,
                                    nDOF_trial_element,
                                    nSpace,
                                   <int*> exteriorElementBoundaries.data,
                                   <int*> elementBoundaryElements.data,
                                   <int*> elementBoundaryLocalElementBoundaries.data,
                                   <double*> n.data,
                                   <double*> a.data,
                                   <double*> da.data,
                                   <double*> dphi.data,
                                   <double*> V.data,
                                   <double*> DV.data,
                                   <double*> DV_eb.data,
                                   <double*> v.data,
                                   <double*> penalty.data,
                                   <double*> fluxJacobian_exterior.data,
                                   <double*> fluxJacobian_eb.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(np.ndarray isDiffusiveFluxBoundary,
                                      int nExteriorElementBoundaries_global,
                                      int nElementBoundaries_element,
                                      int nQuadraturePoints_elementBoundary,
                                      int nDOF_trial_element,
                                      int nSpace,
                                      np.ndarray rowptr,
                                      np.ndarray colind,
                                      np.ndarray exteriorElementBoundaries,
                                      np.ndarray elementBoundaryElements,
                                      np.ndarray elementBoundaryLocalElementBoundaries,
                                      np.ndarray n,
                                      np.ndarray a,
                                      np.ndarray da,
                                      np.ndarray dphi,
                                      np.ndarray V,
                                      np.ndarray DV,
                                      np.ndarray DV_eb,
                                      np.ndarray v,
                                      np.ndarray penalty,
                                      np.ndarray fluxJacobian_exterior,
                                      np.ndarray fluxJacobian_eb):
    cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(<int*> isDiffusiveFluxBoundary.data,
                                       nExteriorElementBoundaries_global,
                                       nElementBoundaries_element,
                                       nQuadraturePoints_elementBoundary,
                                       nDOF_trial_element,
                                       nSpace,
                                      <int*> rowptr.data,
                                      <int*> colind.data,
                                      <int*> exteriorElementBoundaries.data,
                                      <int*> elementBoundaryElements.data,
                                      <int*> elementBoundaryLocalElementBoundaries.data,
                                      <double*> n.data,
                                      <double*> a.data,
                                      <double*> da.data,
                                      <double*> dphi.data,
                                      <double*> V.data,
                                      <double*> DV.data,
                                      <double*> DV_eb.data,
                                      <double*> v.data,
                                      <double*> penalty.data,
                                      <double*> fluxJacobian_exterior.data,
                                      <double*> fluxJacobian_eb.data)
def calculateExteriorLesaintRaviartNumericalFlux(int speedEvalFlag,
                                                np.ndarray exteriorElementBoundaries,
                                                np.ndarray elementBoundaryElements,
                                                np.ndarray elementBoundaryLocalElementBoundaries,
                                                np.ndarray isDOFBoundary,
                                                np.ndarray inflowFlag,
                                                np.ndarray n,
                                                np.ndarray bc_u,
                                                np.ndarray bc_H,
                                                np.ndarray bc_dH,
                                                np.ndarray u,
                                                np.ndarray H,
                                                np.ndarray dH,
                                                np.ndarray flux,
                                                np.ndarray dflux):
    if dH.ndim > 3:
        ccalculateExteriorLesaintRaviartNumericalFlux( elementBoundaryElements.shape[0],
                           dH.shape[1],
                           dH.shape[2],
                           dH.shape[3],
                           speedEvalFlag,
                          <int*> exteriorElementBoundaries.data,
                          <int*> elementBoundaryElements.data,
                          <int*> elementBoundaryLocalElementBoundaries.data,
                          <int*> isDOFBoundary.data,
                          <int*> inflowFlag.data,
                          <double*> n.data,
                          <double*> bc_u.data,
                          <double*> bc_H.data,
                          <double*> bc_dH.data,
                          <double*> u.data,
                          <double*> H.data,
                          <double*> dH.data,
                          <double*> flux.data,
                          <double*> dflux.data)
    else:
        ccalculateGlobalExteriorLesaintRaviartNumericalFlux( elementBoundaryElements.shape[0],
                           dH.shape[1],
                           dH.shape[2],
                           speedEvalFlag,
                          <int*> exteriorElementBoundaries.data,
                          <int*> elementBoundaryElements.data,
                          <int*> elementBoundaryLocalElementBoundaries.data,
                          <int*> isDOFBoundary.data,
                          <int*> inflowFlag.data,
                          <double*> n.data,
                          <double*> bc_u.data,
                          <double*> bc_H.data,
                          <double*> bc_dH.data,
                          <double*> u.data,
                          <double*> H.data,
                          <double*> dH.data,
                          <double*> flux.data,
                          <double*> dflux.data)
def calculateGlobalExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int speedEvalFlag,
                            np.ndarray exteriorElementBoundaries,
                            np.ndarray elementBoundaryElements,
                            np.ndarray elementBoundaryLocalElementBoundaries,
                            np.ndarray isDOFBoundary,
                            np.ndarray inflowFlag,
                            np.ndarray n,
                            np.ndarray bc_u,
                            np.ndarray bc_H,
                            np.ndarray bc_dH,
                            np.ndarray u,
                            np.ndarray H,
                            np.ndarray dH,
                            np.ndarray flux,
                            np.ndarray dflux):
    ccalculateGlobalExteriorLesaintRaviartNumericalFlux( nExteriorElementBoundaries_global,
                             nQuadraturePoints_elementBoundary,
                             nSpace,
                             speedEvalFlag,
                            <int*> exteriorElementBoundaries.data,
                            <int*> elementBoundaryElements.data,
                            <int*> elementBoundaryLocalElementBoundaries.data,
                            <int*> isDOFBoundary.data,
                            <int*> inflowFlag.data,
                            <double*> n.data,
                            <double*> bc_u.data,
                            <double*> bc_H.data,
                            <double*> bc_dH.data,
                            <double*> u.data,
                            <double*> H.data,
                            <double*> dH.data,
                            <double*> flux.data,
                            <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_DarcyFC(np.ndarray exteriorElementBoundaries,
                               np.ndarray elementBoundaryElements,
                               np.ndarray elementBoundaryLocalElementBoundaries,
                               np.ndarray isDOFBoundary_sw,
                               np.ndarray isDOFBoundary_psiw,
                               np.ndarray n,
                               np.ndarray bc_sw,
                               np.ndarray bc_psiw,
                               np.ndarray bc_fw,
                               np.ndarray bc_dfw_dsw,
                               np.ndarray bc_dfw_dpsiw,
                               np.ndarray bc_fn,
                               np.ndarray bc_dfn_dsw,
                               np.ndarray bc_dfn_dpsiw,
                               np.ndarray sw,
                               np.ndarray psiw,
                               np.ndarray fw,
                               np.ndarray dfw_dsw,
                               np.ndarray dfw_dpsiw,
                               np.ndarray fn,
                               np.ndarray dfn_dsw,
                               np.ndarray dfn_dpsiw,
                               np.ndarray fluxw,
                               np.ndarray dfluxw_dsw,
                               np.ndarray dfluxw_dpsiw,
                               np.ndarray fluxn,
                               np.ndarray dfluxn_dsw,
                               np.ndarray dfluxn_dpsiw):
    if fw.ndim == 3:
        ccalculateGlobalExteriorNumericalAdvectiveFlux_DarcyFC(exteriorElementBoundaries.shape[0],
                                                            fw.shape[1],
                                                            fw.shape[2],
                                                            <int*> exteriorElementBoundaries.data,
                                                            <int*> elementBoundaryElements.data,
                                                            <int*> elementBoundaryLocalElementBoundaries.data,
                                                            <int*> isDOFBoundary_sw.data,
                                                            <int*> isDOFBoundary_psiw.data,
                                                            <double*> n.data,
                                                            <double*> bc_sw.data,
                                                            <double*> bc_psiw.data,
                                                            <double*> bc_fw.data,
                                                            <double*> bc_dfw_dsw.data,
                                                            <double*> bc_dfw_dpsiw.data,
                                                            <double*> bc_fn.data,
                                                            <double*> bc_dfn_dsw.data,
                                                            <double*> bc_dfn_dpsiw.data,
                                                            <double*> sw.data,
                                                            <double*> psiw.data,
                                                            <double*> fw.data,
                                                            <double*> dfw_dsw.data,
                                                            <double*> dfw_dpsiw.data,
                                                            <double*> fn.data,
                                                            <double*> dfn_dsw.data,
                                                            <double*> dfn_dpsiw.data,
                                                            <double*> fluxw.data,
                                                            <double*> dfluxw_dsw.data,
                                                            <double*> dfluxw_dpsiw.data,
                                                            <double*> fluxn.data,
                                                            <double*> dfluxn_dsw.data,
                                                            <double*> dfluxn_dpsiw.data)
    else:
        exit(1)
def calculateGlobalExteriorNumericalFluxDarcySplitPressure(np.ndarray exteriorElementBoundaries,
                                np.ndarray elementBoundaryElements,
                                np.ndarray elementBoundaryLocalElementBoundaries,
                                np.ndarray isDOFBoundary_u,
                                np.ndarray n,
                                np.ndarray bc_a,
                                np.ndarray bc_grad_phi,
                                np.ndarray bc_psi_w,
                                np.ndarray bc_psi_n,
                                np.ndarray a,
                                np.ndarray grad_phi,
                                np.ndarray psi_w,
                                np.ndarray psi_n,
                                np.ndarray penalty,
                                np.ndarray diffusiveFlux):
    if grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalFluxDarcySplitPressure(exteriorElementBoundaries.shape[0],
                                grad_phi.shape[1],
                                grad_phi.shape[2],
                                <int*> exteriorElementBoundaries.data,
                                <int*> elementBoundaryElements.data,
                                <int*> elementBoundaryLocalElementBoundaries.data,
                                <int*> isDOFBoundary_u.data,
                                <double*> n.data,
                                <double*> bc_a.data,
                                <double*> bc_grad_phi.data,
                                <double*> bc_psi_w.data,
                                <double*> bc_psi_n.data,
                                <double*> a.data,
                                <double*> grad_phi.data,
                                <double*> psi_w.data,
                                <double*> psi_n.data,
                                <double*> penalty.data,
                                <double*>  diffusiveFlux.data)
    else:
        exit(1)
def calculateGlobalExteriorNumericalFluxDarcySplitPressure_sd(np.ndarray rowptr,
                                   np.ndarray colind,
                                   np.ndarray exteriorElementBoundaries,
                                   np.ndarray elementBoundaryElements,
                                   np.ndarray elementBoundaryLocalElementBoundaries,
                                   np.ndarray isDOFBoundary_u,
                                   np.ndarray n,
                                   np.ndarray bc_a,
                                   np.ndarray bc_grad_phi,
                                   np.ndarray bc_psi_w,
                                   np.ndarray bc_psi_n,
                                   np.ndarray a,
                                   np.ndarray grad_phi,
                                   np.ndarray psi_w,
                                   np.ndarray psi_n,
                                   np.ndarray penalty,
                                   np.ndarray  diffusiveFlux):
    if grad_phi.ndim == 3:
        ccalculateGlobalExteriorNumericalFluxDarcySplitPressure_sd(exteriorElementBoundaries.shape[0],
                                    grad_phi.shape[1],
                                    grad_phi.shape[2],
                                   <int*> rowptr.data,
                                   <int*> colind.data,
                                   <int*> exteriorElementBoundaries.data,
                                   <int*> elementBoundaryElements.data,
                                   <int*> elementBoundaryLocalElementBoundaries.data,
                                   <int*> isDOFBoundary_u.data,
                                   <double*> n.data,
                                   <double*> bc_a.data,
                                   <double*> bc_grad_phi.data,
                                   <double*> bc_psi_w.data,
                                   <double*> bc_psi_n.data,
                                   <double*> a.data,
                                   <double*> grad_phi.data,
                                   <double*> psi_w.data,
                                   <double*> psi_n.data,
                                   <double*> penalty.data,
                                   <double*>  diffusiveFlux.data)
    else:
        exit(1)
def updateExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd(int scale_penalty,
                                    double penalty_floor,
                                    np.ndarray rowptr,
                                    np.ndarray colind,
                                    np.ndarray l2g,
                                    np.ndarray exteriorElementBoundaries,
                                    np.ndarray elementBoundaryElements,
                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                    np.ndarray isDOFBoundary,
                                    np.ndarray fluxBoundaryFlag,
                                    np.ndarray n,
                                    np.ndarray a,
                                    np.ndarray da,
                                    np.ndarray grad_phi,
                                    np.ndarray dphi,
                                    np.ndarray v,
                                    np.ndarray grad_v,
                                    np.ndarray penalty,
                                    np.ndarray fluxJacobian):
    if grad_v.ndim == 4:
        cupdateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd( scale_penalty,
                                     penalty_floor,
                                     exteriorElementBoundaries.shape[0],
                                     grad_v.shape[1],
                                     grad_v.shape[2],
                                     grad_v.shape[3],
                                    <int*> rowptr.data,
                                    <int*> colind.data,
                                    <int*> l2g.data,
                                    <int*> exteriorElementBoundaries.data,
                                    <int*> elementBoundaryElements.data,
                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                    <int*> isDOFBoundary.data,
                                    <int*> fluxBoundaryFlag.data,
                                    <double*> n.data,
                                    <double*> a.data,
                                    <double*> da.data,
                                    <double*> grad_phi.data,
                                    <double*> dphi.data,
                                    <double*> v.data,
                                    <double*> grad_v.data,
                                    <double*> penalty.data,
                                    <double*> fluxJacobian.data)
    else:
        exit(1)
def updateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd(int scale_penalty,
                                    double penalty_floor,
                                    int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    np.ndarray rowptr,
                                    np.ndarray colind,
                                    np.ndarray l2g,
                                    np.ndarray exteriorElementBoundaries,
                                    np.ndarray elementBoundaryElements,
                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                    np.ndarray isDOFBoundary,
                                    np.ndarray fluxBoundaryFlag,
                                    np.ndarray n,
                                    np.ndarray a,
                                    np.ndarray da,
                                    np.ndarray grad_phi,
                                    np.ndarray dphi,
                                    np.ndarray v,
                                    np.ndarray grad_v,
                                    np.ndarray penalty,
                                    np.ndarray fluxJacobian):
    cupdateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd( scale_penalty,
                                     penalty_floor,
                                     nExteriorElementBoundaries_global,
                                     nQuadraturePoints_elementBoundary,
                                     nDOF_trial_element,
                                     nSpace,
                                    <int*> rowptr.data,
                                    <int*> colind.data,
                                    <int*> l2g.data,
                                    <int*> exteriorElementBoundaries.data,
                                    <int*> elementBoundaryElements.data,
                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                    <int*> isDOFBoundary.data,
                                    <int*> fluxBoundaryFlag.data,
                                    <double*> n.data,
                                    <double*> a.data,
                                    <double*> da.data,
                                    <double*> grad_phi.data,
                                    <double*> dphi.data,
                                    <double*> v.data,
                                    <double*> grad_v.data,
                                    <double*> penalty.data,
                                    <double*> fluxJacobian.data)
def calculateGlobalExteriorNumericalAdvectiveFluxStokes2D(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    np.ndarray exteriorElementBoundaries,
                                    np.ndarray elementBoundaryElements,
                                    np.ndarray elementBoundaryLocalElementBoundaries,
                                    np.ndarray isDOFBoundary_p,
                                    np.ndarray isDOFBoundary_u,
                                    np.ndarray isDOFBoundary_v,
                                    np.ndarray n,
                                    np.ndarray bc_p,
                                    np.ndarray bc_f_mass,
                                    np.ndarray p,
                                    np.ndarray f_mass,
                                    np.ndarray df_mass_du,
                                    np.ndarray df_mass_dv,
                                    np.ndarray flux_mass,
                                    np.ndarray flux_umom,
                                    np.ndarray flux_vmom,
                                    np.ndarray dflux_mass_du,
                                    np.ndarray dflux_mass_dv,
                                    np.ndarray dflux_umom_dp,
                                    np.ndarray dflux_vmom_dp,
                                    np.ndarray velocity):
    ccalculateGlobalExteriorNumericalAdvectiveFluxStokes2D( nExteriorElementBoundaries_global,
                                                    nQuadraturePoints_elementBoundary,
                                                    nSpace,
                                                    <int*> exteriorElementBoundaries.data,
                                                    <int*> elementBoundaryElements.data,
                                                    <int*> elementBoundaryLocalElementBoundaries.data,
                                                    <int*> isDOFBoundary_p.data,
                                                    <int*> isDOFBoundary_u.data,
                                                    <int*> isDOFBoundary_v.data,
                                                    <double*> n.data,
                                                    <double*> bc_p.data,
                                                    <double*> bc_f_mass.data,
                                                    <double*> p.data,
                                                    <double*> f_mass.data,
                                                    <double*> df_mass_du.data,
                                                    <double*> df_mass_dv.data,
                                                    <double*> flux_mass.data,
                                                    <double*> flux_umom.data,
                                                    <double*> flux_vmom.data,
                                                    <double*> dflux_mass_du.data,
                                                    <double*> dflux_mass_dv.data,
                                                    <double*> dflux_umom_dp.data,
                                                    <double*> dflux_vmom_dp.data,
                                                    <double*> velocity.data)
