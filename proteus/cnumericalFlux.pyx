import numpy as np
cimport numpy as np
cdef extern from "numericalFlux.h":
    void ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D "calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_p,
                                                        double* bc_f_mass,
                                                        double* bc_f_umom,
                                                        double* bc_f_vmom,
                                                        double* p,
                                                        double* dm_umom,
                                                        double* f_mass,
                                                        double* f_umom,
                                                        double* f_vmom,
                                                        double* df_mass_du,
                                                        double* df_mass_dv,
                                                        double* df_umom_dp,
                                                        double* df_umom_du,
                                                        double* df_umom_dv,
                                                        double* df_vmom_dp,
                                                        double* df_vmom_du,
                                                        double* df_vmom_dv,
                                                        double* flux_mass,
                                                        double* flux_umom,
                                                        double* flux_vmom,
                                                        double* dflux_mass_dp,
                                                        double* dflux_mass_du,
                                                        double* dflux_mass_dv,
                                                        double* dflux_umom_dp,
                                                        double* dflux_umom_du,
                                                        double* dflux_umom_dv,
                                                        double* dflux_vmom_dp,
                                                        double* dflux_vmom_du,
                                                        double* dflux_vmom_dv,
                                                        double* velocity)
    void ccalculateExteriorNumericalAdvectiveFluxNavierStokes2D "calculateExteriorNumericalAdvectiveFluxNavierStokes2D"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_p,
                                                        double* bc_f_mass,
                                                        double* bc_f_umom,
                                                        double* bc_f_vmom,
                                                        double* p,
                                                        double* f_mass,
                                                        double* f_umom,
                                                        double* f_vmom,
                                                        double* df_mass_du,
                                                        double* df_mass_dv,
                                                        double* df_umom_du,
                                                        double* df_umom_dv,
                                                        double* df_vmom_du,
                                                        double* df_vmom_dv,
                                                        double* flux_mass,
                                                        double* flux_umom,
                                                        double* flux_vmom,
                                                        double* dflux_mass_du,
                                                        double* dflux_mass_dv,
                                                        double* dflux_umom_dp,
                                                        double* dflux_umom_du,
                                                        double* dflux_umom_dv,
                                                        double* dflux_vmom_dp,
                                                        double* dflux_vmom_du,
                                                        double* dflux_vmom_dv)
    void ccalculateGlobalExteriorLesaintRaviartNumericalFlux "calculateGlobalExteriorLesaintRaviartNumericalFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_H,
                                                        double* bc_dH,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* flux,
                                                        double* dflux)
    void ccalculateExteriorLesaintRaviartNumericalFlux "calculateExteriorLesaintRaviartNumericalFlux"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_H,
                                                        double* bc_dH,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* flux,
                                                        double* dflux)
    void ccalculateInteriorLesaintRaviartNumericalFlux "calculateInteriorLesaintRaviartNumericalFlux"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)


    void ccalculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint "calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint"(double sonicPoint,
                                                        double sonicFlux,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)

    void ccalculateInteriorNumericalAdvectiveFluxRusanov "calculateInteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* df_element,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)

    void ccalculateExteriorNumericalAdvectiveFluxRusanov "calculateExteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* df_element,
                                                        double* flux,
                                                        double* dflux)

    void ccalculateInteriorNumericalDiffusiveFlux "calculateInteriorNumericalDiffusiveFlux"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)
    void cupdateInteriorNumericalDiffusiveFluxJacobian "updateInteriorNumericalDiffusiveFluxJacobian"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian
                                                        )
    void ccalculateExteriorNumericalDiffusiveFlux "calculateExteriorNumericalDiffusiveFlux"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux
                                                        )
    void cupdateExteriorNumericalDiffusiveFluxJacobian "updateExteriorNumericalDiffusiveFluxJacobian"(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian
                                                        )
    void ccalculateInteriorNumericalAdvectiveFlux "calculateInteriorNumericalAdvectiveFlux"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        )
    void cupdateInteriorNumericalAdvectiveFluxJacobian "updateInteriorNumericalAdvectiveFluxJacobian"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian
                                                        )
    void ccalculateInteriorNumericalAdvectiveFlux_average "calculateInteriorNumericalAdvectiveFlux_average"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        )
    void ccalculateExteriorNumericalAdvectiveFlux_NoBC "calculateExteriorNumericalAdvectiveFlux_NoBC"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left
                                                        )
    void ccalculateExteriorNumericalAdvectiveFlux "calculateExteriorNumericalAdvectiveFlux"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux
                                                        )
    void ccalculateExteriorNumericalAdvectiveFluxStokesP2D "calculateExteriorNumericalAdvectiveFluxStokesP2D"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp
                                                        )
    void ccalculateExteriorNumericalAdvectiveFlux_average "calculateExteriorNumericalAdvectiveFlux_average"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux
                                                        )
#    void ccalculateExteriorInflowNumericalAdvectiveFlux "calculateExteriorInflowNumericalAdvectiveFlux"(
#                                                        int nExteriorElementBoundaries_global,
#                                                        int nElementBoundaries_element,
#                                                        int nQuadraturePoints_elementBoundary,
#                                                        int nSpace,
#                                                        int* exteriorElementBoundaries,
#                                                        int* elementBoundaryElements,
#                                                        int* elementBoundaryLocalElementBoundaries,
#                                                        int* inflowFlag,
#                                                        double* inflowFlux,
#                                                        double* n,
#                                                        double* f,
#                                                        double* df,
#                                                        double* flux,
#                                                        double* dflux_left
#                                                        )
    void cupdateExteriorNumericalAdvectiveFluxJacobian "updateExteriorNumericalAdvectiveFluxJacobian"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian
                                                        )

    void ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind "calculateInteriorNumericalDiffusiveFlux_LDG_upwind"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        )
    void cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* dphi,
                                                        double* V,
                                                        double* DV,
                                                        double* DV_eb,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian,
                                                        double* fluxJacobian_eb
                                                        )
    void ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind "calculateExteriorNumericalDiffusiveFlux_LDG_upwind"(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi_bc,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        )
    void cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(
                                                        int* isDiffusiveFluxBoundary,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* dphi,
                                                        double* V,
                                                        double* DV,
                                                        double* DV_eb,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian,
                                                        double* fluxJacobian_eb
                                                        )



    void ccalculateGlobalExteriorNumericalAdvectiveFluxRusanov "calculateGlobalExteriorNumericalAdvectiveFluxRusanov"(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* df_element,
                                                        double* flux,
                                                        double* dflux)

    void ccalculateGlobalExteriorNumericalDiffusiveFlux "calculateGlobalExteriorNumericalDiffusiveFlux"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)


    void ccalculateGlobalExteriorNumericalDiffusiveFlux_free "calculateGlobalExteriorNumericalDiffusiveFlux_free"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)


    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian "updateGlobalExteriorNumericalDiffusiveFluxJacobian"(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)

    void csetInflowFlux "setInflowFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int* exteriorElementBoundaries,
                                                        double* inflowFlux,
                                                        double* flux)

    void cupdateInteriorTwoSidedNumericalFluxJacobian "updateInteriorTwoSidedNumericalFluxJacobian"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian_2sided)
    void cupdateGlobalExteriorNumericalAdvectiveFluxJacobian_free "updateGlobalExteriorNumericalAdvectiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian)

    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free "updateGlobalExteriorNumericalDiffusiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)



    void ccalculateGlobalExteriorNumericalAdvectiveFlux_NoBC "calculateGlobalExteriorNumericalAdvectiveFlux_NoBC"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left)

    void ccalculateGlobalExteriorNumericalAdvectiveFlux "calculateGlobalExteriorNumericalAdvectiveFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux)


    void ccalculateGlobalExteriorNumericalAdvectiveFlux_free "calculateGlobalExteriorNumericalAdvectiveFlux_free"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux)


    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP2D "calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp)



    void ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP3D "calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* bc_fpw,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* fpw,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* df_dw,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* dfpw_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* fluxpw,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dflux_dw,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp,
                                                        double* dfluxpw_dp)

    void ccalculateGlobalExteriorNumericalAdvectiveFlux_average "calculateGlobalExteriorNumericalAdvectiveFlux_average"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux)

    void ccalculateGlobalExteriorInflowNumericalAdvectiveFlux "calculateGlobalExteriorInflowNumericalAdvectiveFlux"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* inflowFlux,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left)


    void cupdateGlobalExteriorNumericalAdvectiveFluxJacobian "updateGlobalExteriorNumericalAdvectiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian)


    void cupdateExteriorNumericalAdvectiveFluxJacobian_free "updateExteriorNumericalAdvectiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian)



    void ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind "calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi_bc,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux)



    void cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind "updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind"(int* isDiffusiveFluxBoundary,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* dphi,
                                                        double* V,
                                                        double* DV,
                                                        double* DV_eb,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian_exterior,
                                                        double* fluxJacobian_eb)

    void ccalculateExteriorNumericalAdvectiveFlux_free "calculateExteriorNumericalAdvectiveFlux_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux)


    void ccalculateExteriorNumericalDiffusiveFlux_free "calculateExteriorNumericalDiffusiveFlux_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux)

    void ccalculateExteriorNumericalAdvectiveFluxStokesP3D "calculateExteriorNumericalAdvectiveFluxStokesP3D"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* bc_fpw,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* fpw,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* df_dw,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* dfpw_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* fluxpw,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dflux_dw,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp,
                                                        double* dfluxpw_dp)

    void cupdateExteriorNumericalDiffusiveFluxJacobian_free "updateExteriorNumericalDiffusiveFluxJacobian_free"(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian)

    void ccalculateInteriorChengShuNumericalFlux "calculateInteriorChengShuNumericalFlux"(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* H_element,
                                                        double* dH_element,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right)

    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF "calculateGlobalExteriorNumericalFluxDarcyFCFF"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* bc_f_m,
                                                        const double* bc_a_wm,
                                                        const double* bc_a_mw,
                                                        const double* bc_a_mm,
                                                        const double* bc_grad_phi_w,
                                                        const double* bc_grad_phi_m,
                                                        const double* bc_u_w,
                                                        const double* bc_u_m,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* a_mw,
                                                        const double* a_mm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  advectiveFlux_m,
                                                        double*  dadvectiveFlux_m_dw,
                                                        double*  diffusiveFlux_wm,
                                                        double*  diffusiveFlux_mw,
                                                        double*  diffusiveFlux_mm)
    void ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian "calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int nDOF_trial_element,
                                                        const int* l2g,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* da_wm_dw,
                                                        const double* da_wm_dm,
                                                        const double* a_mw,
                                                        const double* da_mw_dw,
                                                        const double* da_mw_dm,
                                                        const double* a_mm,
                                                        const double* da_mm_dw,
                                                        const double* da_mm_dm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* dphi_w_w,
                                                        const double* dphi_w_m,
                                                        const double* dphi_m_w,
                                                        const double* dphi_m_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* v,
                                                        const double* grad_v,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  fluxJacobian_ww,
                                                        double*  fluxJacobian_wm,
                                                        double*  fluxJacobian_mw,
                                                        double*  fluxJacobian_mm)
#    void ccalculateGlobalExteriorNumericalStressTrace "calculateGlobalExteriorNumericalStressTrace"(int nExteriorElementBoundaries_global,
#                                                        int nQuadraturePoints_elementBoundary,
#                                                        int nSpace,
#                                                        int* exteriorElementBoundaries,
#                                                        int* elementBoundaryElements,
#                                                        int* elementBoundaryLocalElementBoundaries,
#                                                        int* isDOFBoundary_u,
#                                                        int* isDOFBoundary_v,
#                                                        int* isDOFBoundary_w,
#                                                        double* n,
#                                                        double* bc_u,
#                                                        double* bc_v,
#                                                        double* bc_w,
#                                                        double* bc_stress,
#                                                        double* u,
#                                                        double* v,
#                                                        double* w,
#                                                        double* penalty,
#                                                        double* stressTrace_u,
#                                                        double* stressTrace_v,
#                                                        double* stressTrace_w)
    void cupdateExteriorNumericalStressFluxJacobian "updateExteriorNumericalStressFluxJacobian"(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        int* isStressBoundary_u,
                                                        int* isStressBoundary_v,
                                                        int* isStressBoundary_w,
                                                        double* n,
                                                        double* dstress_u_u,
                                                        double* dstress_u_v,
                                                        double* dstress_u_w,
                                                        double* dstress_v_u,
                                                        double* dstress_v_v,
                                                        double* dstress_v_w,
                                                        double* dstress_w_u,
                                                        double* dstress_w_v,
                                                        double* dstress_w_w,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian_u_u,
                                                        double* fluxJacobian_u_v,
                                                        double* fluxJacobian_u_w,
                                                        double* fluxJacobian_v_u,
                                                        double* fluxJacobian_v_v,
                                                        double* fluxJacobian_v_w,
                                                        double* fluxJacobian_w_u,
                                                        double* fluxJacobian_w_v,
                                                        double* fluxJacobian_w_w)

    void ccalculateExteriorNumericalFluxRichards_sd "calculateExteriorNumericalFluxRichards_sd"(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* isSeepageFace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* grad_psi,
                                                        double* u,
                                                        double* K_rho_g,
                                                        double* penalty,
                                                        double* diffusiveFlux)
    void ccalculateExteriorNumericalFluxJacobianRichards_sd "calculateExteriorNumericalFluxJacobianRichards_sd"(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* dK,
                                                        double* grad_psi,
                                                        double* grad_v,
                                                        double* u,
                                                        double* dK_rho_g,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian)
###########
def calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray n,
                                                        np.ndarray bc_p,
                                                        np.ndarray bc_f_mass,
                                                        np.ndarray bc_f_umom,
                                                        np.ndarray bc_f_vmom,
                                                        np.ndarray p,
                                                        np.ndarray dm_umom,
                                                        np.ndarray f_mass,
                                                        np.ndarray f_umom,
                                                        np.ndarray f_vmom,
                                                        np.ndarray df_mass_du,
                                                        np.ndarray df_mass_dv,
                                                        np.ndarray df_umom_dp,
                                                        np.ndarray df_umom_du,
                                                        np.ndarray df_umom_dv,
                                                        np.ndarray df_vmom_dp,
                                                        np.ndarray df_vmom_du,
                                                        np.ndarray df_vmom_dv,
                                                        np.ndarray flux_mass,
                                                        np.ndarray flux_umom,
                                                        np.ndarray flux_vmom,
                                                        np.ndarray dflux_mass_dp,
                                                        np.ndarray dflux_mass_du,
                                                        np.ndarray dflux_mass_dv,
                                                        np.ndarray dflux_umom_dp,
                                                        np.ndarray dflux_umom_du,
                                                        np.ndarray dflux_umom_dv,
                                                        np.ndarray dflux_vmom_dp,
                                                        np.ndarray dflux_vmom_du,
                                                        np.ndarray dflux_vmom_dv,
                                                        np.ndarray velocity):
        return ccalculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <double*> n.data,
                                                        <double*> bc_p.data,
                                                        <double*> bc_f_mass.data,
                                                        <double*> bc_f_umom.data,
                                                        <double*> bc_f_vmom.data,
                                                        <double*> p.data,
                                                        <double*> dm_umom.data,
                                                        <double*> f_mass.data,
                                                        <double*> f_umom.data,
                                                        <double*> f_vmom.data,
                                                        <double*> df_mass_du.data,
                                                        <double*> df_mass_dv.data,
                                                        <double*> df_umom_dp.data,
                                                        <double*> df_umom_du.data,
                                                        <double*> df_umom_dv.data,
                                                        <double*> df_vmom_dp.data,
                                                        <double*> df_vmom_du.data,
                                                        <double*> df_vmom_dv.data,
                                                        <double*> flux_mass.data,
                                                        <double*> flux_umom.data,
                                                        <double*> flux_vmom.data,
                                                        <double*> dflux_mass_dp.data,
                                                        <double*> dflux_mass_du.data,
                                                        <double*> dflux_mass_dv.data,
                                                        <double*> dflux_umom_dp.data,
                                                        <double*> dflux_umom_du.data,
                                                        <double*> dflux_umom_dv.data,
                                                        <double*> dflux_vmom_dp.data,
                                                        <double*> dflux_vmom_du.data,
                                                        <double*> dflux_vmom_dv.data,
                                                        <double*> velocity.data)
def calculateExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray n,
                                                        np.ndarray bc_p,
                                                        np.ndarray bc_f_mass,
                                                        np.ndarray bc_f_umom,
                                                        np.ndarray bc_f_vmom,
                                                        np.ndarray p,
                                                        np.ndarray f_mass,
                                                        np.ndarray f_umom,
                                                        np.ndarray f_vmom,
                                                        np.ndarray df_mass_du,
                                                        np.ndarray df_mass_dv,
                                                        np.ndarray df_umom_du,
                                                        np.ndarray df_umom_dv,
                                                        np.ndarray df_vmom_du,
                                                        np.ndarray df_vmom_dv,
                                                        np.ndarray flux_mass,
                                                        np.ndarray flux_umom,
                                                        np.ndarray flux_vmom,
                                                        np.ndarray dflux_mass_du,
                                                        np.ndarray dflux_mass_dv,
                                                        np.ndarray dflux_umom_dp,
                                                        np.ndarray dflux_umom_du,
                                                        np.ndarray dflux_umom_dv,
                                                        np.ndarray dflux_vmom_dp,
                                                        np.ndarray dflux_vmom_du,
                                                        np.ndarray dflux_vmom_dv):
        return ccalculateExteriorNumericalAdvectiveFluxNavierStokes2D( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <double*> n.data,
                                                        <double*> bc_p.data,
                                                        <double*> bc_f_mass.data,
                                                        <double*> bc_f_umom.data,
                                                        <double*> bc_f_vmom.data,
                                                        <double*> p.data,
                                                        <double*> f_mass.data,
                                                        <double*> f_umom.data,
                                                        <double*> f_vmom.data,
                                                        <double*> df_mass_du.data,
                                                        <double*> df_mass_dv.data,
                                                        <double*> df_umom_du.data,
                                                        <double*> df_umom_dv.data,
                                                        <double*> df_vmom_du.data,
                                                        <double*> df_vmom_dv.data,
                                                        <double*> flux_mass.data,
                                                        <double*> flux_umom.data,
                                                        <double*> flux_vmom.data,
                                                        <double*> dflux_mass_du.data,
                                                        <double*> dflux_mass_dv.data,
                                                        <double*> dflux_umom_dp.data,
                                                        <double*> dflux_umom_du.data,
                                                        <double*> dflux_umom_dv.data,
                                                        <double*> dflux_vmom_dp.data,
                                                        <double*> dflux_vmom_du.data,
                                                        <double*> dflux_vmom_dv.data)
def calculateGlobalExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_H,
                                                        np.ndarray bc_dH,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateGlobalExteriorLesaintRaviartNumericalFlux( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_H.data,
                                                        <double*> bc_dH.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_H,
                                                        np.ndarray bc_dH,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateExteriorLesaintRaviartNumericalFlux( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_H.data,
                                                        <double*> bc_dH.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateInteriorLesaintRaviartNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
        return ccalculateInteriorLesaintRaviartNumericalFlux( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(double sonicPoint,
                                                        double sonicFlux,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
        return ccalculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(sonicPoint,
                                                         sonicFlux,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateInteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray df_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
        return ccalculateInteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> df_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray df_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateExteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                                                         nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> df_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateInteriorNumericalDiffusiveFlux( int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
        return ccalculateInteriorNumericalDiffusiveFlux( scale_penalty,
                                                         penalty_floor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateInteriorNumericalDiffusiveFluxJacobian( int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian
                                                        ):
        return cupdateInteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                         penalty_floor,
                                                         nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def calculateExteriorNumericalDiffusiveFlux( int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_a,
                                                        np.ndarray bc_grad_phi,
                                                        np.ndarray bc_u,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux
                                                        ):
        return ccalculateExteriorNumericalDiffusiveFlux( scale_penalty,
                                                         penalty_floor,
                                                         nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_a.data,
                                                        <double*> bc_grad_phi.data,
                                                        <double*> bc_u.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateExteriorNumericalDiffusiveFluxJacobian( int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian
                                                        ):
        return cupdateExteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                         penalty_floor,
                                                         nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorNumericalAdvectiveFlux( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right
                                                        ):
        return ccalculateInteriorNumericalAdvectiveFlux( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def updateInteriorNumericalAdvectiveFluxJacobian( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian
                                                        ):
        return cupdateInteriorNumericalAdvectiveFluxJacobian( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorNumericalAdvectiveFlux_average( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right
                                                        ):
        return ccalculateInteriorNumericalAdvectiveFlux_average( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateExteriorNumericalAdvectiveFlux_NoBC( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left
                                                        ):
        return ccalculateExteriorNumericalAdvectiveFlux_NoBC( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data)
def calculateExteriorNumericalAdvectiveFlux( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux
                                                        ):
        return ccalculateExteriorNumericalAdvectiveFlux( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateExteriorNumericalAdvectiveFluxStokesP2D( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray n,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_fpu,
                                                        np.ndarray bc_fpv,
                                                        np.ndarray f,
                                                        np.ndarray fpu,
                                                        np.ndarray fpv,
                                                        np.ndarray df_du,
                                                        np.ndarray df_dv,
                                                        np.ndarray dfpu_dp,
                                                        np.ndarray dfpv_dp,
                                                        np.ndarray flux,
                                                        np.ndarray fluxpu,
                                                        np.ndarray fluxpv,
                                                        np.ndarray dflux_du,
                                                        np.ndarray dflux_dv,
                                                        np.ndarray dfluxpu_dp,
                                                        np.ndarray dfluxpv_dp
                                                        ):
        return ccalculateExteriorNumericalAdvectiveFluxStokesP2D( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <double*> n.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_fpu.data,
                                                        <double*> bc_fpv.data,
                                                        <double*> f.data,
                                                        <double*> fpu.data,
                                                        <double*> fpv.data,
                                                        <double*> df_du.data,
                                                        <double*> df_dv.data,
                                                        <double*> dfpu_dp.data,
                                                        <double*> dfpv_dp.data,
                                                        <double*> flux.data,
                                                        <double*> fluxpu.data,
                                                        <double*> fluxpv.data,
                                                        <double*> dflux_du.data,
                                                        <double*> dflux_dv.data,
                                                        <double*> dfluxpu_dp.data,
                                                        <double*> dfluxpv_dp.data)
def calculateExteriorNumericalAdvectiveFlux_average( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux
                                                        ):
        return ccalculateExteriorNumericalAdvectiveFlux_average( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
#def calculateExteriorInflowNumericalAdvectiveFlux( int nExteriorElementBoundaries_global,
#                                                        int nElementBoundaries_element,
#                                                        int nQuadraturePoints_elementBoundary,
#                                                        int nSpace,
#                                                        np.ndarray exteriorElementBoundaries,
#                                                        np.ndarray elementBoundaryElements,
#                                                        np.ndarray elementBoundaryLocalElementBoundaries,
#                                                        np.ndarray inflowFlag,
#                                                        np.ndarray inflowFlux,
#                                                        np.ndarray n,
#                                                        np.ndarray f,
#                                                        np.ndarray df,
#                                                        np.ndarray flux,
#                                                        np.ndarray dflux_left
#                                                        ):
#        return ccalculateExteriorInflowNumericalAdvectiveFlux( nExteriorElementBoundaries_global,
#                                                         nElementBoundaries_element,
#                                                         nQuadraturePoints_elementBoundary,
#                                                         nSpace,
#                                                        <int*> exteriorElementBoundaries.data,
#                                                        <int*> elementBoundaryElements.data,
#                                                        <int*> elementBoundaryLocalElementBoundaries.data,
#                                                        <int*> inflowFlag.data,
#                                                        <double*> inflowFlux.data,
#                                                        <double*> n.data,
#                                                        <double*> f.data,
#                                                        <double*> df.data,
#                                                        <double*> flux.data,
#                                                        <double*> dflux_left.data)
def updateExteriorNumericalAdvectiveFluxJacobian( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray dflux_left,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian
                                                        ):
        return cupdateExteriorNumericalAdvectiveFluxJacobian( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorNumericalDiffusiveFlux_LDG_upwind( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux
                                                        ):
        return ccalculateInteriorNumericalDiffusiveFlux_LDG_upwind( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind( int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray dphi,
                                                        np.ndarray V,
                                                        np.ndarray DV,
                                                        np.ndarray DV_eb,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian,
                                                        np.ndarray fluxJacobian_eb
                                                        ):
        return cupdateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data,
                                                        <double*> fluxJacobian_eb.data)
def calculateExteriorNumericalDiffusiveFlux_LDG_upwind( int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi_bc,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux
                                                        ):
        return ccalculateExteriorNumericalDiffusiveFlux_LDG_upwind( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind( np.ndarray isDiffusiveFluxBoundary,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray dphi,
                                                        np.ndarray V,
                                                        np.ndarray DV,
                                                        np.ndarray DV_eb,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian,
                                                        np.ndarray fluxJacobian_eb
                                                        ):
        return cupdateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind( <int*> isDiffusiveFluxBoundary.data,
                                                         nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data,
                                                        <double*> fluxJacobian_eb.data)
def calculateGlobalExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray df_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateGlobalExteriorNumericalAdvectiveFluxRusanov( safetyFactor,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> df_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_a,
                                                        np.ndarray bc_grad_phi,
                                                        np.ndarray bc_u,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
        return ccalculateGlobalExteriorNumericalDiffusiveFlux( scale_penalty,
                                                         penalty_floor,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_a.data,
                                                        <double*> bc_grad_phi.data,
                                                        <double*> bc_u.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def calculateGlobalExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_a,
                                                        np.ndarray bc_grad_phi,
                                                        np.ndarray bc_u,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
        return ccalculateGlobalExteriorNumericalDiffusiveFlux_free( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_a.data,
                                                        <double*> bc_grad_phi.data,
                                                        <double*> bc_u.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
        return cupdateGlobalExteriorNumericalDiffusiveFluxJacobian( scale_penalty,
                                                         penalty_floor,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def setInflowFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray inflowFlux,
                                                        np.ndarray flux):
        return csetInflowFlux( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <double*> inflowFlux.data,
                                                        <double*> flux.data)
def updateInteriorTwoSidedNumericalFluxJacobian(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian_2sided):
        return cupdateInteriorTwoSidedNumericalFluxJacobian( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian_2sided.data)
def updateGlobalExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray dflux_left,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian):
        return cupdateGlobalExteriorNumericalAdvectiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
        return cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_NoBC(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left):
        return ccalculateGlobalExteriorNumericalAdvectiveFlux_NoBC( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data)
def calculateGlobalExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateGlobalExteriorNumericalAdvectiveFlux( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateGlobalExteriorNumericalAdvectiveFlux_free( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray n,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_fpu,
                                                        np.ndarray bc_fpv,
                                                        np.ndarray f,
                                                        np.ndarray fpu,
                                                        np.ndarray fpv,
                                                        np.ndarray df_du,
                                                        np.ndarray df_dv,
                                                        np.ndarray dfpu_dp,
                                                        np.ndarray dfpv_dp,
                                                        np.ndarray flux,
                                                        np.ndarray fluxpu,
                                                        np.ndarray fluxpv,
                                                        np.ndarray dflux_du,
                                                        np.ndarray dflux_dv,
                                                        np.ndarray dfluxpu_dp,
                                                        np.ndarray dfluxpv_dp):
        return ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP2D( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <double*> n.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_fpu.data,
                                                        <double*> bc_fpv.data,
                                                        <double*> f.data,
                                                        <double*> fpu.data,
                                                        <double*> fpv.data,
                                                        <double*> df_du.data,
                                                        <double*> df_dv.data,
                                                        <double*> dfpu_dp.data,
                                                        <double*> dfpv_dp.data,
                                                        <double*> flux.data,
                                                        <double*> fluxpu.data,
                                                        <double*> fluxpv.data,
                                                        <double*> dflux_du.data,
                                                        <double*> dflux_dv.data,
                                                        <double*> dfluxpu_dp.data,
                                                        <double*> dfluxpv_dp.data)
def calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray isDOFBoundary_w,
                                                        np.ndarray n,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_fpu,
                                                        np.ndarray bc_fpv,
                                                        np.ndarray bc_fpw,
                                                        np.ndarray f,
                                                        np.ndarray fpu,
                                                        np.ndarray fpv,
                                                        np.ndarray fpw,
                                                        np.ndarray df_du,
                                                        np.ndarray df_dv,
                                                        np.ndarray df_dw,
                                                        np.ndarray dfpu_dp,
                                                        np.ndarray dfpv_dp,
                                                        np.ndarray dfpw_dp,
                                                        np.ndarray flux,
                                                        np.ndarray fluxpu,
                                                        np.ndarray fluxpv,
                                                        np.ndarray fluxpw,
                                                        np.ndarray dflux_du,
                                                        np.ndarray dflux_dv,
                                                        np.ndarray dflux_dw,
                                                        np.ndarray dfluxpu_dp,
                                                        np.ndarray dfluxpv_dp,
                                                        np.ndarray dfluxpw_dp):
        return ccalculateGlobalExteriorNumericalAdvectiveFluxStokesP3D( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <int*> isDOFBoundary_w.data,
                                                        <double*> n.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_fpu.data,
                                                        <double*> bc_fpv.data,
                                                        <double*> bc_fpw.data,
                                                        <double*> f.data,
                                                        <double*> fpu.data,
                                                        <double*> fpv.data,
                                                        <double*> fpw.data,
                                                        <double*> df_du.data,
                                                        <double*> df_dv.data,
                                                        <double*> df_dw.data,
                                                        <double*> dfpu_dp.data,
                                                        <double*> dfpv_dp.data,
                                                        <double*> dfpw_dp.data,
                                                        <double*> flux.data,
                                                        <double*> fluxpu.data,
                                                        <double*> fluxpv.data,
                                                        <double*> fluxpw.data,
                                                        <double*> dflux_du.data,
                                                        <double*> dflux_dv.data,
                                                        <double*> dflux_dw.data,
                                                        <double*> dfluxpu_dp.data,
                                                        <double*> dfluxpv_dp.data,
                                                        <double*> dfluxpw_dp.data)
def calculateGlobalExteriorNumericalAdvectiveFlux_average(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateGlobalExteriorNumericalAdvectiveFlux_average( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateGlobalExteriorInflowNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray inflowFlux,
                                                        np.ndarray n,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left):
        return ccalculateGlobalExteriorInflowNumericalAdvectiveFlux( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> inflowFlux.data,
                                                        <double*> n.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data)
def updateGlobalExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray dflux_left,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian):
        return cupdateGlobalExteriorNumericalAdvectiveFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def updateExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray dflux_left,
                                                        np.ndarray v,
                                                        np.ndarray fluxJacobian):
        return cupdateExteriorNumericalAdvectiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> dflux_left.data,
                                                        <double*> v.data,
                                                        <double*> fluxJacobian.data)
def calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray a,
                                                        np.ndarray phi_bc,
                                                        np.ndarray phi,
                                                        np.ndarray V,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
        return ccalculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> a.data,
                                                        <double*> phi_bc.data,
                                                        <double*> phi.data,
                                                        <double*> V.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(np.ndarray isDiffusiveFluxBoundary,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray dphi,
                                                        np.ndarray V,
                                                        np.ndarray DV,
                                                        np.ndarray DV_eb,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian_exterior,
                                                        np.ndarray fluxJacobian_eb):
        return cupdateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(<int*> isDiffusiveFluxBoundary.data,
                                                         nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> dphi.data,
                                                        <double*> V.data,
                                                        <double*> DV.data,
                                                        <double*> DV_eb.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian_exterior.data,
                                                        <double*> fluxJacobian_eb.data)
def calculateExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray inflowFlag,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_df,
                                                        np.ndarray u,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray flux,
                                                        np.ndarray dflux):
        return ccalculateExteriorNumericalAdvectiveFlux_free( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <int*> inflowFlag.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_df.data,
                                                        <double*> u.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> flux.data,
                                                        <double*> dflux.data)
def calculateExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_a,
                                                        np.ndarray bc_grad_phi,
                                                        np.ndarray bc_u,
                                                        np.ndarray a,
                                                        np.ndarray grad_phi,
                                                        np.ndarray u,
                                                        np.ndarray penalty,
                                                        np.ndarray flux):
        return ccalculateExteriorNumericalDiffusiveFlux_free( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_a.data,
                                                        <double*> bc_grad_phi.data,
                                                        <double*> bc_u.data,
                                                        <double*> a.data,
                                                        <double*> grad_phi.data,
                                                        <double*> u.data,
                                                        <double*> penalty.data,
                                                        <double*> flux.data)
def calculateExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_p,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray isDOFBoundary_w,
                                                        np.ndarray n,
                                                        np.ndarray bc_f,
                                                        np.ndarray bc_fpu,
                                                        np.ndarray bc_fpv,
                                                        np.ndarray bc_fpw,
                                                        np.ndarray f,
                                                        np.ndarray fpu,
                                                        np.ndarray fpv,
                                                        np.ndarray fpw,
                                                        np.ndarray df_du,
                                                        np.ndarray df_dv,
                                                        np.ndarray df_dw,
                                                        np.ndarray dfpu_dp,
                                                        np.ndarray dfpv_dp,
                                                        np.ndarray dfpw_dp,
                                                        np.ndarray flux,
                                                        np.ndarray fluxpu,
                                                        np.ndarray fluxpv,
                                                        np.ndarray fluxpw,
                                                        np.ndarray dflux_du,
                                                        np.ndarray dflux_dv,
                                                        np.ndarray dflux_dw,
                                                        np.ndarray dfluxpu_dp,
                                                        np.ndarray dfluxpv_dp,
                                                        np.ndarray dfluxpw_dp):
        return ccalculateExteriorNumericalAdvectiveFluxStokesP3D( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_p.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <int*> isDOFBoundary_w.data,
                                                        <double*> n.data,
                                                        <double*> bc_f.data,
                                                        <double*> bc_fpu.data,
                                                        <double*> bc_fpv.data,
                                                        <double*> bc_fpw.data,
                                                        <double*> f.data,
                                                        <double*> fpu.data,
                                                        <double*> fpv.data,
                                                        <double*> fpw.data,
                                                        <double*> df_du.data,
                                                        <double*> df_dv.data,
                                                        <double*> df_dw.data,
                                                        <double*> dfpu_dp.data,
                                                        <double*> dfpv_dp.data,
                                                        <double*> dfpw_dp.data,
                                                        <double*> flux.data,
                                                        <double*> fluxpu.data,
                                                        <double*> fluxpv.data,
                                                        <double*> fluxpw.data,
                                                        <double*> dflux_du.data,
                                                        <double*> dflux_dv.data,
                                                        <double*> dflux_dw.data,
                                                        <double*> dfluxpu_dp.data,
                                                        <double*> dfluxpv_dp.data,
                                                        <double*> dfluxpw_dp.data)
def updateExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray a,
                                                        np.ndarray da,
                                                        np.ndarray grad_phi,
                                                        np.ndarray dphi,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
        return cupdateExteriorNumericalDiffusiveFluxJacobian_free( nExteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> grad_phi.data,
                                                        <double*> dphi.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
def calculateInteriorChengShuNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        np.ndarray interiorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray n,
                                                        np.ndarray u,
                                                        np.ndarray H,
                                                        np.ndarray dH,
                                                        np.ndarray H_element,
                                                        np.ndarray dH_element,
                                                        np.ndarray flux,
                                                        np.ndarray dflux_left,
                                                        np.ndarray dflux_right):
        return ccalculateInteriorChengShuNumericalFlux( nInteriorElementBoundaries_global,
                                                         nElementBoundaries_element,
                                                         nQuadraturePoints_elementBoundary,
                                                         nQuadraturePoints_element,
                                                         nSpace,
                                                         speedEvalFlag,
                                                        <int*> interiorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <double*> n.data,
                                                        <double*> u.data,
                                                        <double*> H.data,
                                                        <double*> dH.data,
                                                        <double*> H_element.data,
                                                        <double*> dH_element.data,
                                                        <double*> flux.data,
                                                        <double*> dflux_left.data,
                                                        <double*> dflux_right.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_uw,
                                                        np.ndarray isDOFBoundary_um,
                                                        np.ndarray n,
                                                        np.ndarray bc_f_m,
                                                        np.ndarray bc_a_wm,
                                                        np.ndarray bc_a_mw,
                                                        np.ndarray bc_a_mm,
                                                        np.ndarray bc_grad_phi_w,
                                                        np.ndarray bc_grad_phi_m,
                                                        np.ndarray bc_u_w,
                                                        np.ndarray bc_u_m,
                                                        np.ndarray f_m,
                                                        np.ndarray df_m_dw,
                                                        np.ndarray a_wm,
                                                        np.ndarray a_mw,
                                                        np.ndarray a_mm,
                                                        np.ndarray grad_phi_w,
                                                        np.ndarray grad_phi_m,
                                                        np.ndarray u_w,
                                                        np.ndarray u_m,
                                                        np.ndarray penalty_w,
                                                        np.ndarray penalty_m,
                                                        np.ndarray advectiveFlux_m,
                                                        np.ndarray dadvectiveFlux_m_dw,
                                                        np.ndarray diffusiveFlux_wm,
                                                        np.ndarray diffusiveFlux_mw,
                                                        np.ndarray diffusiveFlux_mm):
        return ccalculateGlobalExteriorNumericalFluxDarcyFCFF( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_uw.data,
                                                        <int*> isDOFBoundary_um.data,
                                                        <double*> n.data,
                                                        <double*> bc_f_m.data,
                                                        <double*> bc_a_wm.data,
                                                        <double*> bc_a_mw.data,
                                                        <double*> bc_a_mm.data,
                                                        <double*> bc_grad_phi_w.data,
                                                        <double*> bc_grad_phi_m.data,
                                                        <double*> bc_u_w.data,
                                                        <double*> bc_u_m.data,
                                                        <double*> f_m.data,
                                                        <double*> df_m_dw.data,
                                                        <double*> a_wm.data,
                                                        <double*> a_mw.data,
                                                        <double*> a_mm.data,
                                                        <double*> grad_phi_w.data,
                                                        <double*> grad_phi_m.data,
                                                        <double*> u_w.data,
                                                        <double*> u_m.data,
                                                        <double*> penalty_w.data,
                                                        <double*> penalty_m.data,
                                                        <double*> advectiveFlux_m.data,
                                                        <double*> dadvectiveFlux_m_dw.data,
                                                        <double*> diffusiveFlux_wm.data,
                                                        <double*> diffusiveFlux_mw.data,
                                                        <double*> diffusiveFlux_mm.data)
def calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int nDOF_trial_element,
                                                        np.ndarray l2g,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_uw,
                                                        np.ndarray isDOFBoundary_um,
                                                        np.ndarray n,
                                                        np.ndarray f_m,
                                                        np.ndarray df_m_dw,
                                                        np.ndarray a_wm,
                                                        np.ndarray da_wm_dw,
                                                        np.ndarray da_wm_dm,
                                                        np.ndarray a_mw,
                                                        np.ndarray da_mw_dw,
                                                        np.ndarray da_mw_dm,
                                                        np.ndarray a_mm,
                                                        np.ndarray da_mm_dw,
                                                        np.ndarray da_mm_dm,
                                                        np.ndarray grad_phi_w,
                                                        np.ndarray grad_phi_m,
                                                        np.ndarray dphi_w_w,
                                                        np.ndarray dphi_w_m,
                                                        np.ndarray dphi_m_w,
                                                        np.ndarray dphi_m_m,
                                                        np.ndarray u_w,
                                                        np.ndarray u_m,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty_w,
                                                        np.ndarray penalty_m,
                                                        np.ndarray fluxJacobian_ww,
                                                        np.ndarray fluxJacobian_wm,
                                                        np.ndarray fluxJacobian_mw,
                                                        np.ndarray fluxJacobian_mm):
        return ccalculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                         nDOF_trial_element,
                                                        <int*> l2g.data,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_uw.data,
                                                        <int*> isDOFBoundary_um.data,
                                                        <double*> n.data,
                                                        <double*> f_m.data,
                                                        <double*> df_m_dw.data,
                                                        <double*> a_wm.data,
                                                        <double*> da_wm_dw.data,
                                                        <double*> da_wm_dm.data,
                                                        <double*> a_mw.data,
                                                        <double*> da_mw_dw.data,
                                                        <double*> da_mw_dm.data,
                                                        <double*> a_mm.data,
                                                        <double*> da_mm_dw.data,
                                                        <double*> da_mm_dm.data,
                                                        <double*> grad_phi_w.data,
                                                        <double*> grad_phi_m.data,
                                                        <double*> dphi_w_w.data,
                                                        <double*> dphi_w_m.data,
                                                        <double*> dphi_m_w.data,
                                                        <double*> dphi_m_m.data,
                                                        <double*> u_w.data,
                                                        <double*> u_m.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty_w.data,
                                                        <double*> penalty_m.data,
                                                        <double*> fluxJacobian_ww.data,
                                                        <double*> fluxJacobian_wm.data,
                                                        <double*> fluxJacobian_mw.data,
                                                        <double*> fluxJacobian_mm.data)
#def calculateGlobalExteriorNumericalStressTrace(int nExteriorElementBoundaries_global,
#                                                        int nQuadraturePoints_elementBoundary,
#                                                        int nSpace,
#                                                        np.ndarray exteriorElementBoundaries,
#                                                        np.ndarray elementBoundaryElements,
#                                                        np.ndarray elementBoundaryLocalElementBoundaries,
#                                                        np.ndarray isDOFBoundary_u,
#                                                        np.ndarray isDOFBoundary_v,
#                                                        np.ndarray isDOFBoundary_w,
#                                                        np.ndarray n,
#                                                        np.ndarray bc_u,
#                                                        np.ndarray bc_v,
#                                                        np.ndarray bc_w,
#                                                        np.ndarray bc_stress,
#                                                        np.ndarray u,
#                                                        np.ndarray v,
#                                                        np.ndarray w,
#                                                        np.ndarray penalty,
#                                                        np.ndarray stressTrace_u,
#                                                        np.ndarray stressTrace_v,
#                                                        np.ndarray stressTrace_w):
#        return ccalculateGlobalExteriorNumericalStressTrace( nExteriorElementBoundaries_global,
#                                                         nQuadraturePoints_elementBoundary,
#                                                         nSpace,
#                                                        <int*> exteriorElementBoundaries.data,
#                                                        <int*> elementBoundaryElements.data,
#                                                        <int*> elementBoundaryLocalElementBoundaries.data,
#                                                        <int*> isDOFBoundary_u.data,
#                                                        <int*> isDOFBoundary_v.data,
#                                                        <int*> isDOFBoundary_w.data,
#                                                        <double*> n.data,
#                                                        <double*> bc_u.data,
#                                                        <double*> bc_v.data,
#                                                        <double*> bc_w.data,
#                                                        <double*> bc_stress.data,
#                                                        <double*> u.data,
#                                                        <double*> v.data,
#                                                        <double*> w.data,
#                                                        <double*> penalty.data,
#                                                        <double*> stressTrace_u.data,
#                                                        <double*> stressTrace_v.data,
#                                                        <double*> stressTrace_w.data)
def updateExteriorNumericalStressFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray exteriorElementBoundaries,
                                                        np.ndarray elementBoundaryElements,
                                                        np.ndarray elementBoundaryLocalElementBoundaries,
                                                        np.ndarray isDOFBoundary_u,
                                                        np.ndarray isDOFBoundary_v,
                                                        np.ndarray isDOFBoundary_w,
                                                        np.ndarray isStressBoundary_u,
                                                        np.ndarray isStressBoundary_v,
                                                        np.ndarray isStressBoundary_w,
                                                        np.ndarray n,
                                                        np.ndarray dstress_u_u,
                                                        np.ndarray dstress_u_v,
                                                        np.ndarray dstress_u_w,
                                                        np.ndarray dstress_v_u,
                                                        np.ndarray dstress_v_v,
                                                        np.ndarray dstress_v_w,
                                                        np.ndarray dstress_w_u,
                                                        np.ndarray dstress_w_v,
                                                        np.ndarray dstress_w_w,
                                                        np.ndarray v,
                                                        np.ndarray grad_v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian_u_u,
                                                        np.ndarray fluxJacobian_u_v,
                                                        np.ndarray fluxJacobian_u_w,
                                                        np.ndarray fluxJacobian_v_u,
                                                        np.ndarray fluxJacobian_v_v,
                                                        np.ndarray fluxJacobian_v_w,
                                                        np.ndarray fluxJacobian_w_u,
                                                        np.ndarray fluxJacobian_w_v,
                                                        np.ndarray fluxJacobian_w_w):
        return cupdateExteriorNumericalStressFluxJacobian( nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> exteriorElementBoundaries.data,
                                                        <int*> elementBoundaryElements.data,
                                                        <int*> elementBoundaryLocalElementBoundaries.data,
                                                        <int*> isDOFBoundary_u.data,
                                                        <int*> isDOFBoundary_v.data,
                                                        <int*> isDOFBoundary_w.data,
                                                        <int*> isStressBoundary_u.data,
                                                        <int*> isStressBoundary_v.data,
                                                        <int*> isStressBoundary_w.data,
                                                        <double*> n.data,
                                                        <double*> dstress_u_u.data,
                                                        <double*> dstress_u_v.data,
                                                        <double*> dstress_u_w.data,
                                                        <double*> dstress_v_u.data,
                                                        <double*> dstress_v_v.data,
                                                        <double*> dstress_v_w.data,
                                                        <double*> dstress_w_u.data,
                                                        <double*> dstress_w_v.data,
                                                        <double*> dstress_w_w.data,
                                                        <double*> v.data,
                                                        <double*> grad_v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian_u_u.data,
                                                        <double*> fluxJacobian_u_v.data,
                                                        <double*> fluxJacobian_u_w.data,
                                                        <double*> fluxJacobian_v_u.data,
                                                        <double*> fluxJacobian_v_v.data,
                                                        <double*> fluxJacobian_v_w.data,
                                                        <double*> fluxJacobian_w_u.data,
                                                        <double*> fluxJacobian_w_v.data,
                                                        <double*> fluxJacobian_w_w.data)
def calculateExteriorNumericalFluxRichards_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        np.ndarray isSeepageFace,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray K,
                                                        np.ndarray grad_psi,
                                                        np.ndarray u,
                                                        np.ndarray K_rho_g,
                                                        np.ndarray penalty,
                                                        np.ndarray diffusiveFlux):
        return ccalculateExteriorNumericalFluxRichards_sd(<int*> rowptr.data,
                                                        <int*> colind.data,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nSpace,
                                                        <int*> isSeepageFace.data,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> K.data,
                                                        <double*> grad_psi.data,
                                                        <double*> u.data,
                                                        <double*> K_rho_g.data,
                                                        <double*> penalty.data,
                                                        <double*> diffusiveFlux.data)
def calculateExteriorNumericalFluxJacobianRichards_sd(np.ndarray rowptr,
                                                        np.ndarray colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        np.ndarray isDOFBoundary,
                                                        np.ndarray n,
                                                        np.ndarray bc_u,
                                                        np.ndarray K,
                                                        np.ndarray dK,
                                                        np.ndarray grad_psi,
                                                        np.ndarray grad_v,
                                                        np.ndarray u,
                                                        np.ndarray dK_rho_g,
                                                        np.ndarray v,
                                                        np.ndarray penalty,
                                                        np.ndarray fluxJacobian):
        return ccalculateExteriorNumericalFluxJacobianRichards_sd(<int*> rowptr.data,
                                                        <int*> colind.data,
                                                         nExteriorElementBoundaries_global,
                                                         nQuadraturePoints_elementBoundary,
                                                         nDOF_trial_element,
                                                         nSpace,
                                                        <int*> isDOFBoundary.data,
                                                        <double*> n.data,
                                                        <double*> bc_u.data,
                                                        <double*> K.data,
                                                        <double*> dK.data,
                                                        <double*> grad_psi.data,
                                                        <double*> grad_v.data,
                                                        <double*> u.data,
                                                        <double*> dK_rho_g.data,
                                                        <double*> v.data,
                                                        <double*> penalty.data,
                                                        <double*> fluxJacobian.data)
