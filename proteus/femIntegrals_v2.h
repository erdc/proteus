#ifndef FEMINTEGRALS_V2_H
#define FEMINTEGRALS_V2_H

/*!
 \file femIntegrals.h
 \brief C implementation of fem integral calculations
*/

/**
   \defgroup femIntegrals femIntegrals
 \brief C implementation of fem integral calculations
   @{ 
*/

extern void parametricFiniteElementSpace_getHessianValues(int nElements_global,
							  int nQuadraturePoints_element,
							  int nDOF_element,
							  int nSpace_global,
							  double *Hessian_psi,
							  double *inverseJacobianArray,
							  double *Hessian_vArray);
extern void updateDiffusion2_strong(int nElements_global,
				    int nQuadraturePoints_element,
				    int nSpace,
				    double *a,
				    double *Hess_phi,
				    double *strong_residual);
extern void updateDiffusionJacobian2_strong(int nElements_global,
					    int nQuadraturePoints_element,
					    int nDOF_trial_element,
					    int nSpace,
					    int *l2g,
					    double *a,
					    double *da,
					    double *v,
					    double *Hess_phi,
					    double *dphi,
					    double *Hess_v,
					    double *dstrong_residual);
extern void updateDiffusion2_adjoint(int nElements_global,
				     int nQuadraturePoints_element,
				     int nDOF_test_element,
				     int nSpace,
				     double *a,
				     double *Hess_w_dV,
				     double *Lstar_w_dV);
extern void calculateWeightedShapeHessians(int nElements_global,
					   int nQuadraturePoints_element,
					   int nDOF_test_element,
					   int nSpace,
					   double *dVR,
					   double *abs_det_jac,
					   double *Hess_w,
					   double *Hess_w_dV);
extern void calculateFiniteElementFunctionHessianValues(int nElements_global,
							int nQuadraturePoints_element,
							int nDOF_trial_element,
							int nComponents,
							int nSpace,
							int *l2g,
							double *dof,
							double *Hessian_v,
							double *Hessian_u);
extern void updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_CSR(int nInteriorElementBoundaries_global,
										   int nElementBoundaries_element,
										   int nQuadraturePoints_elementBoundary,
										   int nDOF_test_element,
										   int nDOF_trial_element,
										   int *interiorElementBoundaries,
										   int *elementBoundaryElements,
										   int *elementBoundaryLocalElementBoundaries,
										   int *nFreeDOF_element_r,
										   int *freeLocal_r,
										   int *nFreeDOF_element_u,
										   int *freeLocal_u,
										   int *csrRowIndeces_ru,
										   int *csrColumnOffsets_eb_ru,
										   double *elementBoundaryFluxJacobian_2sided,
										   double *w_dS,
										   double *jac);
extern void updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_dense(int nInteriorElementBoundaries_global,
										     int nElementBoundaries_element,
										     int nQuadraturePoints_elementBoundary,
										     int nDOF_test_element,
										     int nDOF_trial_element,
										     int offset_r,
										     int stride_r,
										     int offset_u,
										     int stride_u,
										     int nFreeVDOF_global,
										     int *interiorElementBoundaries,
										     int *elementBoundaryElements,
										     int *elementBoundaryLocalElementBoundaries,
										     int *nFreeDOF_element_r,
										     int *nFreeDOF_element_u,
										     int *freeLocal_r,
										     int *freeGlobal_r,
										     int *freeLocal_u,
										     int *freeGlobal_u,
										     double *elementBoundaryFluxJacobian_2sided,
										     double *w_dS,
										     double *jac);
extern void updateInteriorTwoSidedElementBoundaryFlux(int nInteriorElementBoundaries_global,
						      int nElementBoundaries_element,
						      int nQuadraturePoints_elementBoundary,
						      int nDOF_test_element,
						      int *interiorElementBoundaries,
						      int *elementBoundaryElements,
						      int *elementBoundaryLocalElementBoundaries,
						      double *flux,
						      double *w_dS,
						      double *residual);
extern void calculateCFLADR2speeds(int nElements_global,
				   int nQuadraturePoints_element,
				   int nSpace,
				   double *elementDiameter,
				   double *dm,
				   double *df1,
				   double *df2,
				   double *cfl);
extern int checkElementBoundaryAndExteriorElementBoundaryArraysSame(int nElementBoundaries_element,
								    int nExteriorElementBoundaries_global,
								    int nQuadraturePoints_elementBoundary,
								    int nValuesPerQuadraturePoint,
								    double tolerance,
								    const int *exteriorElementBoundariesArray,
								    const int *elementBoundaryElementsArray,
								    const int *elementBoundaryLocalElementBoundariesArray,
								    const double *ebq_val,
								    const double *ebqe_val,
								    int *firstBadIndex);
extern int checkGlobalElementBoundaryAndExteriorElementBoundaryArraysSame(int nExteriorElementBoundaries_global,
									  int nQuadraturePoints_elementBoundary,
									  int nValuesPerQuadraturePoint,
									  double tolerance,
									  const int *exteriorElementBoundariesArray,
									  const int *elementBoundaryElementsArray,
									  const int *elementBoundaryLocalElementBoundariesArray,
									  const double *ebq_global_val,
									  const double *ebqe_val,
									  int *firstBadIndex);
extern void calculateExteriorElementBoundaryStress3D(int nExteriorElementBoundaries_global,
						     int nQuadraturePoints_elementBoundary,
						     int *elementBoundaryMaterialTypes,
						     int *exteriorElementBoundaries,
						     int *elementBoundaryElements,
						     int *elementBoundaryLocalElementBoundaries,
						     double *p,
						     double *mom_flux_vec_u,
						     double *mom_flux_vec_v,
						     double *mom_flux_vec_w,
						     double *dS,
						     double *n,
						     double *F);
extern void calculateExteriorElementBoundaryStress2D(int nExteriorElementBoundaries_global,
						     int nQuadraturePoints_elementBoundary,
						     int *elementBoundaryMaterialTypes,
						     int *exteriorElementBoundaries,
						     int *elementBoundaryElements,
						     int *elementBoundaryLocalElementBoundaries,
						     double *p,
						     double *mom_flux_vec_u,
						     double *mom_flux_vec_v,
						     double *dS,
						     double *n,
						     double *F);

/** @} */
#endif
