#ifndef NUMERICAL_FLUX_H
#define NUMERICAL_FLUX_H

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <strings.h>
#include <string.h>
#include <assert.h>

/**
 \file numericalFlux.h
 \brief C implementations of numericalFlux calculations
*/

/**
 \defgroup numericalFlux numericalFlux
 \brief c implementation of dg numerical flux approximations
 @{
*/

extern void calculateInteriorLesaintRaviartNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right);


extern void calculateInteriorNumericalAdvectiveFluxConvexOneSonicPoint(double sonicPoint,
                                                        double sonicFlux,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right);

extern void calculateExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* df_element,
                                                        double* flux,
                                                        double* dflux);

extern void calculateInteriorNumericalDiffusiveFlux(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux);
extern void updateInteriorNumericalDiffusiveFluxJacobian(
                                                        int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian
                                                        );
extern void calculateInteriorNumericalAdvectiveFlux(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        );
extern void updateInteriorNumericalAdvectiveFluxJacobian(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian
                                                        );
extern void calculateInteriorNumericalAdvectiveFlux_average(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right
                                                        );
extern void calculateExteriorNumericalAdvectiveFlux_NoBC(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left
                                                        );
extern void calculateInteriorNumericalDiffusiveFlux_LDG_upwind(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        );
extern void updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind(
                                                        int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* dphi,
                                                        double* V,
                                                        double* DV,
                                                        double* DV_eb,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian,
                                                        double* fluxJacobian_eb
                                                        );
extern void calculateExteriorNumericalDiffusiveFlux_LDG_upwind(
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* a,
                                                        double* phi_bc,
                                                        double* phi,
                                                        double* V,
                                                        double* penalty,
                                                        double* flux
                                                        );



extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian);

extern void setInflowFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int* exteriorElementBoundaries,
                                                        double* inflowFlux,
                                                        double* flux);

extern void updateInteriorTwoSidedNumericalFluxJacobian(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* dflux_left,
                                                        double* dflux_right,
                                                        double* v,
                                                        double* fluxJacobian_2sided);



extern void calculateGlobalExteriorNumericalAdvectiveFlux_NoBC(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left);

extern void calculateGlobalExteriorInflowNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* inflowFlux,
                                                        double* n,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux_left);


extern void updateExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian);

extern void calculateInteriorChengShuNumericalFlux(int nInteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nQuadraturePoints_element,
                                                        int nSpace,
                                                        int speedEvalFlag,
                                                        int* interiorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        double* n,
                                                        double* u,
                                                        double* H,
                                                        double* dH,
                                                        double* H_element,
                                                        double* dH_element,
                                                        double* flux,
                                                        double* dflux_left,
                                                        double* dflux_right);

extern void calculateGlobalExteriorNumericalFluxDarcyFCFF(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* bc_f_m,
                                                        const double* bc_a_wm,
                                                        const double* bc_a_mw,
                                                        const double* bc_a_mm,
                                                        const double* bc_grad_phi_w,
                                                        const double* bc_grad_phi_m,
                                                        const double* bc_u_w,
                                                        const double* bc_u_m,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* a_mw,
                                                        const double* a_mm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  advectiveFlux_m,
                                                        double*  dadvectiveFlux_m_dw,
                                                        double*  diffusiveFlux_wm,
                                                        double*  diffusiveFlux_mw,
                                                        double*  diffusiveFlux_mm);
extern void calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int nDOF_trial_element,
                                                        const int* l2g,
                                                        const int* exteriorElementBoundaries,
                                                        const int* elementBoundaryElements,
                                                        const int* elementBoundaryLocalElementBoundaries,
                                                        const int* isDOFBoundary_uw,
                                                        const int* isDOFBoundary_um,
                                                        const double* n,
                                                        const double* f_m,
                                                        const double* df_m_dw,
                                                        const double* a_wm,
                                                        const double* da_wm_dw,
                                                        const double* da_wm_dm,
                                                        const double* a_mw,
                                                        const double* da_mw_dw,
                                                        const double* da_mw_dm,
                                                        const double* a_mm,
                                                        const double* da_mm_dw,
                                                        const double* da_mm_dm,
                                                        const double* grad_phi_w,
                                                        const double* grad_phi_m,
                                                        const double* dphi_w_w,
                                                        const double* dphi_w_m,
                                                        const double* dphi_m_w,
                                                        const double* dphi_m_m,
                                                        const double* u_w,
                                                        const double* u_m,
                                                        const double* v,
                                                        const double* grad_v,
                                                        const double* penalty_w,
                                                        const double* penalty_m,
                                                        double*  fluxJacobian_ww,
                                                        double*  fluxJacobian_wm,
                                                        double*  fluxJacobian_mw,
                                                        double*  fluxJacobian_mm);

extern void updateExteriorNumericalStressFluxJacobian(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        int* isStressBoundary_u,
                                                        int* isStressBoundary_v,
                                                        int* isStressBoundary_w,
                                                        double* n,
                                                        double* dstress_u_u,
                                                        double* dstress_u_v,
                                                        double* dstress_u_w,
                                                        double* dstress_v_u,
                                                        double* dstress_v_v,
                                                        double* dstress_v_w,
                                                        double* dstress_w_u,
                                                        double* dstress_w_v,
                                                        double* dstress_w_w,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian_u_u,
                                                        double* fluxJacobian_u_v,
                                                        double* fluxJacobian_u_w,
                                                        double* fluxJacobian_v_u,
                                                        double* fluxJacobian_v_v,
                                                        double* fluxJacobian_v_w,
                                                        double* fluxJacobian_w_u,
                                                        double* fluxJacobian_w_v,
                                                        double* fluxJacobian_w_w);

extern void calculateExteriorNumericalFluxRichards_sd(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* isSeepageFace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* grad_psi,
                                                        double* u,
                                                        double* K_rho_g,
                                                        double* penalty,
                                                        double* diffusiveFlux);
extern void calculateExteriorNumericalFluxJacobianRichards_sd(int* rowptr,
                                                        int* colind,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_u,
                                                        double* K,
                                                        double* dK,
                                                        double* grad_psi,
                                                        double* grad_v,
                                                        double* u,
                                                        double* dK_rho_g,
                                                        double* v,
                                                        double* penalty,
                                                        double* fluxJacobian);
extern void calculateGlobalExteriorNumericalDiffusiveFlux_sd(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* rowptr,
                                                        int* colind,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* bc_a,
                                                        double* bc_grad_phi,
                                                        double* bc_u,
                                                        double* a,
                                                        double* grad_phi,
                                                        double* u,
                                                        double* penalty,
                                                        double* flux);
extern void calculateInteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                        int nInteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nQuadraturePoints_element,
                                        int nSpace,
                                        int* interiorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        double* n,
                                        double* u,
                                        double* f,
                                        double* lambda_bar_element,
                                        double* flux);
extern void calculateInteriorNumericalDiffusiveFlux_sd(int scale_penalty,
                                                    double penalty_floor,
                                                    int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* rowptr,
                            int* colind,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* a,
                            double* grad_phi,
                            double* u,
                            double* penalty,
                            double* flux);

extern void updateInteriorNumericalDiffusiveFluxJacobian_sd(int scale_penalty,
                                                        double penalty_floor,
                                                        int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* l2g,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* a,
                                double* da,
                                double* grad_phi,
                                double* dphi,
                                double* v,
                                double* grad_v,
                                double* penalty,
                                double* fluxJacobian);
extern void calculateExteriorNumericalDiffusiveFlux_sd(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    int* rowptr,
                                                    int* colind,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    double* n,
                                                    double* bc_a,
                                                    double* bc_grad_phi,
                                                    double* bc_u,
                                                    double* a,
                                                    double* grad_phi,
                                                    double* u,
                                                    double* penalty,
                                                    double* flux);
extern void updateExteriorNumericalDiffusiveFluxJacobian_sd(int scale_penalty,
                                                        double penalty_floor,
                                                        int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int nSpace,
                                                        int* rowptr,
                                                        int* colind,
                                                        int* l2g,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        double* n,
                                                        double* a,
                                                        double* da,
                                                        double* grad_phi,
                                                        double* dphi,
                                                        double* v,
                                                        double* grad_v,
                                                        double* penalty,
                                                        double* fluxJacobian);
extern void updateExteriorNumericalDiffusiveFluxJacobian_free_sd(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* l2g,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* a,
                                double* da,
                                double* grad_phi,
                                double* dphi,
                                double* v,
                                double* grad_v,
                                double* penalty,
                                double* fluxJacobian);
extern void calculateInteriorNumericalDiffusiveFlux_LDG_upwind_sd(int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* u,
                                double* a,
                                double* phi,
                                double* V,
                                double* penalty,
                                double* flux);
extern void updateInteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(int nInteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* interiorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian,
                                    double* fluxJacobian_eb);
extern void calculateExteriorNumericalDiffusiveFlux_LDG_upwind_sd(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* u,
                                double* a,
                                double* phi_bc,
                                double* phi,
                                double* V,
                                double* penalty,
                                double* flux);
extern void calculateDiffusionMatrixSplittings_LDG_sd(int aSplit,
                            int nElements_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int * rowptr,
                            const int * colind,
                            const double * ebq_a,
                            const double * q_a,
                            double *eb_aHat,
                            double *eb_aTilde,
                            double *aHat,
                            double *aTilde);
extern void calculateGlobalExteriorNumericalFluxDarcyFCFF_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_wm,
                                int* colind_wm,
                                int* rowptr_mw,
                                int* colind_mw,
                                int* rowptr_mm,
                                int* colind_mm,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_um,
                                const double* n,
                                const double* bc_f_m,
                                const double* bc_a_wm,
                                const double* bc_a_mw,
                                const double* bc_a_mm,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_m,
                                const double* bc_u_w,
                                const double* bc_u_m,
                                const double* f_m,
                                const double* df_m_dw,
                                const double* a_wm,
                                const double* a_mw,
                                const double* a_mm,
                                const double* grad_phi_w,
                                const double* grad_phi_m,
                                const double* u_w,
                                const double* u_m,
                                const double* penalty_w,
                                const double* penalty_m,
                                double* advectiveFlux_m,
                                double* dadvectiveFlux_m_dw,
                                double* diffusiveFlux_wm,
                                double* diffusiveFlux_mw,
                                double* diffusiveFlux_mm);
extern void calculateGlobalExteriorNumericalFluxDarcyFCFF_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nSpace,
                                            int nDOF_trial_element,
                                            int* rowptr_wm,
                                            int* colind_wm,
                                            int* rowptr_mw,
                                            int* colind_mw,
                                            int* rowptr_mm,
                                            int* colind_mm,
                                            const int* l2g,
                                            const int* exteriorElementBoundaries,
                                            const int* elementBoundaryElements,
                                            const int* elementBoundaryLocalElementBoundaries,
                                            const int* isDOFBoundary_uw,
                                            const int* isDOFBoundary_um,
                                            const double* n,
                                            const double* f_m,
                                            const double* df_m_dw,
                                            const double* a_wm,
                                            const double* da_wm_dw,
                                            const double* da_wm_dm,
                                            const double* a_mw,
                                            const double* da_mw_dw,
                                            const double* da_mw_dm,
                                            const double* a_mm,
                                            const double* da_mm_dw,
                                            const double* da_mm_dm,
                                            const double* grad_phi_w,
                                            const double* grad_phi_m,
                                            const double* dphi_w_w,
                                            const double* dphi_w_m,
                                            const double* dphi_m_w,
                                            const double* dphi_m_m,
                                            const double* u_w,
                                            const double* u_m,
                                            const double* v,
                                            const double* grad_v,
                                            const double* penalty_w,
                                            const double* penalty_m,
                                            double * fluxJacobian_ww,
                                            double * fluxJacobian_wm,
                                            double * fluxJacobian_mw,
                                            double * fluxJacobian_mm);
extern void calculateGlobalExteriorNumericalFluxDarcyFC(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int* exteriorElementBoundaries,
                            const int* elementBoundaryElements,
                            const int* elementBoundaryLocalElementBoundaries,
                            const int* isDOFBoundary_uw,
                            const int* isDOFBoundary_un,
                            int fluxBoundaryFlag_uw,
                            int fluxBoundaryFlag_un,
                            const double* n,
                            const double* bc_a_ww,
                            const double* bc_a_nn,
                            const double* bc_grad_phi_w,
                            const double* bc_grad_phi_n,
                            const double* bc_s_w,
                            const double* bc_psi_w,
                            const double* bc_psi_n,
                            const double* a_ww,
                            const double* a_nn,
                            const double* grad_phi_w,
                            const double* grad_phi_n,
                            const double* s_w,
                            const double* psi_w,
                            const double* psi_n,
                            const double* penalty_w,
                            const double* penalty_n,
                            double * diffusiveFlux_ww,
                            double * diffusiveFlux_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFC_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_ww,
                                int* colind_ww,
                                int* rowptr_nn,
                                int* colind_nn,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_un,
                                int fluxBoundaryFlag_uw,
                                int fluxBoundaryFlag_un,
                                const double* n,
                                const double* bc_a_ww,
                                const double* bc_a_nn,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_n,
                                const double* bc_s_w,
                                const double* bc_psi_w,
                                const double* bc_psi_n,
                                const double* a_ww,
                                const double* a_nn,
                                const double* grad_phi_w,
                                const double* grad_phi_n,
                                const double* s_w,
                                const double* psi_w,
                                const double* psi_n,
                                const double* penalty_w,
                                const double* penalty_n,
                                double * diffusiveFlux_ww,
                                double * diffusiveFlux_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* s_w,
                                        const double* psi_w,
                                        const double* psi_n,
                                        const double* dpsi_n_dsw,
                                        const double* dpsi_n_dpsiw,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFC_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        int* rowptr_ww,
                                        int* colind_ww,
                                        int* rowptr_nn,
                                        int* colind_nn,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* s_w,
                                        const double* psi_w,
                                        const double* psi_n,
                                        const double* dpsi_n_dsw,
                                        const double* dpsi_n_dpsiw,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFCPP(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            const int* exteriorElementBoundaries,
                            const int* elementBoundaryElements,
                            const int* elementBoundaryLocalElementBoundaries,
                            const int* isDOFBoundary_uw,
                            const int* isDOFBoundary_un,
                            int fluxBoundaryFlag_uw,
                            int fluxBoundaryFlag_un,
                            const double* n,
                            const double* bc_a_ww,
                            const double* bc_a_nn,
                            const double* bc_grad_phi_w,
                            const double* bc_grad_phi_n,
                            const double* bc_psi_w,
                            const double* bc_psi_c,
                            const double* bc_psi_n,
                            const double* a_ww,
                            const double* a_nn,
                            const double* grad_phi_w,
                            const double* grad_phi_n,
                            const double* psi_w,
                            const double* psi_c,
                            const double* psi_n,
                            const double* penalty_w,
                            const double* penalty_n,
                            double * diffusiveFlux_ww,
                            double * diffusiveFlux_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFCPP_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr_ww,
                                int* colind_ww,
                                int* rowptr_nn,
                                int* colind_nn,
                                const int* exteriorElementBoundaries,
                                const int* elementBoundaryElements,
                                const int* elementBoundaryLocalElementBoundaries,
                                const int* isDOFBoundary_uw,
                                const int* isDOFBoundary_un,
                                int fluxBoundaryFlag_uw,
                                int fluxBoundaryFlag_un,
                                const double* n,
                                const double* bc_a_ww,
                                const double* bc_a_nn,
                                const double* bc_grad_phi_w,
                                const double* bc_grad_phi_n,
                                const double* bc_psi_w,
                                const double* bc_psi_c,
                                const double* bc_psi_n,
                                const double* a_ww,
                                const double* a_nn,
                                const double* grad_phi_w,
                                const double* grad_phi_n,
                                const double* psi_w,
                                const double* psi_c,
                                const double* psi_n,
                                const double* penalty_w,
                                const double* penalty_n,
                                double * diffusiveFlux_ww,
                                double * diffusiveFlux_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian(int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nSpace,
                                        int nDOF_trial_element,
                                        const int* l2g,
                                        const int* exteriorElementBoundaries,
                                        const int* elementBoundaryElements,
                                        const int* elementBoundaryLocalElementBoundaries,
                                        const int* isDOFBoundary_uw,
                                        const int* isDOFBoundary_un,
                                        int fluxBoundaryFlag_uw,
                                        int fluxBoundaryFlag_un,
                                        const double* n,
                                        const double* a_ww,
                                        const double* da_ww_dw,
                                        const double* da_ww_dn,
                                        const double* a_nn,
                                        const double* da_nn_dw,
                                        const double* da_nn_dn,
                                        const double* grad_phi_w,
                                        const double* grad_phi_n,
                                        const double* dphi_w_w,
                                        const double* dphi_w_n,
                                        const double* dphi_n_w,
                                        const double* dphi_n_n,
                                        const double* psi_w,
                                        const double* psi_c,
                                        const double* psi_n,
                                        const double* dpsi_n_dpsiw,
                                        const double* dpsi_n_dpsic,
                                        const double* v,
                                        const double* grad_v,
                                        const double* penalty_w,
                                        const double* penalty_n,
                                        double * fluxJacobian_ww,
                                        double * fluxJacobian_wn,
                                        double * fluxJacobian_nw,
                                        double * fluxJacobian_nn);
extern void calculateGlobalExteriorNumericalFluxDarcyFCPP_diffusiveFluxJacobian_sd(int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nSpace,
                                            int nDOF_trial_element,
                                            int* rowptr_ww,
                                            int* colind_ww,
                                            int* rowptr_nn,
                                            int* colind_nn,
                                            const int* l2g,
                                            const int* exteriorElementBoundaries,
                                            const int* elementBoundaryElements,
                                            const int* elementBoundaryLocalElementBoundaries,
                                            const int* isDOFBoundary_uw,
                                            const int* isDOFBoundary_un,
                                            int fluxBoundaryFlag_uw,
                                            int fluxBoundaryFlag_un,
                                            const double* n,
                                            const double* a_ww,
                                            const double* da_ww_dw,
                                            const double* da_ww_dn,
                                            const double* a_nn,
                                            const double* da_nn_dw,
                                            const double* da_nn_dn,
                                            const double* grad_phi_w,
                                            const double* grad_phi_n,
                                            const double* dphi_w_w,
                                            const double* dphi_w_n,
                                            const double* dphi_n_w,
                                            const double* dphi_n_n,
                                            const double* psi_w,
                                            const double* psi_c,
                                            const double* psi_n,
                                            const double* dpsi_n_dpsiw,
                                            const double* dpsi_n_dpsic,
                                            const double* v,
                                            const double* grad_v,
                                            const double* penalty_w,
                                            const double* penalty_n,
                                            double * fluxJacobian_ww,
                                            double * fluxJacobian_wn,
                                            double * fluxJacobian_nw,
                                            double * fluxJacobian_nn);

extern void calculateInteriorNumericalFluxShallowWater_1D(int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            double h_eps,
                                                    double tol_u,
                                                    double g,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* h,
                            double* hu,
                            double* flux_h,
                            double* flux_hu);
extern void calculateExteriorNumericalFluxShallowWater_1D(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                            double g,
                            double* n,
                            double* h_lv,
                            double* hu_lv,
                            double* h_rv,
                            double* hu_rv,
                            double* flux_h,
                            double* flux_hu);
extern void calculateInteriorNumericalFluxShallowWater_2D(int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            double h_eps,
                                                    double tol_u,
                                                    double g,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* h,
                            double* hu,
                            double* hv,
                            double* flux_h,
                            double* flux_hu,
                            double* flux_hv);
extern void calculateExteriorNumericalFluxShallowWater_2D(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                                                    double h_eps,
                                                    double tol_u,
                            double g,
                            double* n,
                            double* h_lq,
                            double* hu_lq,
                            double* hv_lq,
                            double* h_rq,
                            double* hu_rq,
                            double* hv_rq,
                            double* flux_h,
                            double* flux_hu,
                            double* flux_hv);
extern void calculateInteriorNumericalFluxShallowWaterHLL_1D(int nInteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                double h_eps,
                                double tol_u,
                                double g,
                                int* interiorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                double* n,
                                double* h,
                                double* hu,
                                double* flux_h,
                                double* flux_hu);
extern void calculateExteriorNumericalFluxShallowWaterHLL_1D(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                double h_eps,
                                double tol_u,
                                double g,
                                double* n,
                                double* h_lv,
                                double* hu_lv,
                                double* h_rv,
                                double* hu_rv,
                                double* flux_h,
                                double* flux_hu);
extern void calculateGlobalExteriorNumericalStressFlux(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int *isDOFBoundary_u,
                            int *isDOFBoundary_v,
                            int *isDOFBoundary_w,
                            double* n,
                            double* bc_u,
                            double* bc_v,
                            double* bc_w,
                            double* sigma,
                            double* u,
                            double* v,
                            double* w,
                            double* penalty,
                            double* stressFlux_u,
                            double* stressFlux_v,
                            double* stressFlux_w);
extern void calculateGlobalExteriorNumericalAdvectiveFluxStokes3D(int nExteriorElementBoundaries_global,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_p,
                                                        double* bc_f_mass,
                                                        double* p,
                                                        double* f_mass,
                                                        double* df_mass_du,
                                                        double* df_mass_dv,
                                                        double* df_mass_dw,
                                                        double* flux_mass,
                                                        double* flux_umom,
                                                        double* flux_vmom,
                                                        double* flux_wmom,
                                                        double* dflux_mass_du,
                                                        double* dflux_mass_dv,
                                                        double* dflux_mass_dw,
                                                        double* dflux_umom_dp,
                                                        double* dflux_vmom_dp,
                                                        double* dflux_wmom_dp,
                                                        double* velocity);
extern void calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes3D(int nExteriorElementBoundaries_global,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nSpace,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                int* isDOFBoundary_p,
                                                                int* isDOFBoundary_u,
                                                                int* isDOFBoundary_v,
                                                                int* isDOFBoundary_w,
                                                                double* n,
                                                                double* bc_p,
                                                                double* bc_f_mass,
                                                                double* bc_f_umom,
                                                                double* bc_f_vmom,
                                                                double* bc_f_wmom,
                                                                double* p,
                                                                double* f_mass,
                                                                double* f_umom,
                                                                double* f_vmom,
                                                                double* f_wmom,
                                                                double* df_mass_du,
                                                                double* df_mass_dv,
                                                                double* df_mass_dw,
                                                                double* df_umom_dp,
                                                                double* df_umom_du,
                                                                double* df_umom_dv,
                                                                double* df_umom_dw,
                                                                double* df_vmom_dp,
                                                                double* df_vmom_du,
                                                                double* df_vmom_dv,
                                                                double* df_vmom_dw,
                                                                double* df_wmom_dp,
                                                                double* df_wmom_du,
                                                                double* df_wmom_dv,
                                                                double* df_wmom_dw,
                                                                double* flux_mass,
                                                                double* flux_umom,
                                                                double* flux_vmom,
                                                                double* flux_wmom,
                                                                double* dflux_mass_du,
                                                                double* dflux_mass_dv,
                                                                double* dflux_mass_dw,
                                                                double* dflux_umom_dp,
                                                                double* dflux_umom_du,
                                                                double* dflux_umom_dv,
                                                                double* dflux_umom_dw,
                                                                double* dflux_vmom_dp,
                                                                double* dflux_vmom_du,
                                                                double* dflux_vmom_dv,
                                                                double* dflux_vmom_dw,
                                                                double* dflux_wmom_dp,
                                                                double* dflux_wmom_du,
                                                                double* dflux_wmom_dv,
                                                                double* dflux_wmom_dw,
                                                                double* velocity);
extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian_sd(int scale_penalty,
                                                                    double penalty_floor,
                                                                    int nExteriorElementBoundaries_global,
                                                                    int nQuadraturePoints_elementBoundary,
                                                                    int nDOF_trial_element,
                                                                    int nSpace,
                                                                    int* rowptr,
                                                                    int* colind,
                                                                    int* l2g,
                                                                    int* exteriorElementBoundaries,
                                                                    int* elementBoundaryElements,
                                                                    int* elementBoundaryLocalElementBoundaries,
                                                                    int* isDOFBoundary,
                                                                    double* n,
                                                                    double* a,
                                                                    double* da,
                                                                    double* grad_phi,
                                                                    double* dphi,
                                                                    double* v,
                                                                    double* grad_v,
                                                                    double* penalty,
                                                                    double* fluxJacobian);

extern void calculateGlobalExteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                                int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nQuadraturePoints_element,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* df_element,
                                double* flux,
                                double* dflux);
extern void calculateGlobalExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                            int nExteriorElementBoundaries_global,
                                            int nQuadraturePoints_elementBoundary,
                                            int nQuadraturePoints_element,
                                            int nSpace,
                                            int* exteriorElementBoundaries,
                                            int* elementBoundaryElements,
                                            int* elementBoundaryLocalElementBoundaries,
                                            int* isDOFBoundary,
                                            int* inflowFlag,
                                            double* n,
                                            double* bc_u,
                                            double* bc_f,
                                            double* u,
                                            double* f,
                                            double* lambda_bar,
                                            double* flux);
extern void calculateExteriorNumericalAdvectiveFluxRusanovWithEigenvalueBound(double safetyFactor,
                                        int nExteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nQuadraturePoints_element,
                                        int nSpace,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        int* isDOFBoundary,
                                        int* inflowFlag,
                                        double* n,
                                        double* bc_u,
                                        double* bc_f,
                                        double* u,
                                        double* f,
                                        double* lambda_bar_element,
                                        double* flux);
extern void calculateExteriorNumericalDiffusiveFlux(int scale_penalty,
                                                double penalty_floor,
                                                int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                double* n,
                                                double* bc_a,
                                                double* bc_grad_phi,
                                                double* bc_u,
                                                double* a,
                                                double* grad_phi,
                                                double* u,
                                                double* penalty,
                                                double* flux);

extern void calculateGlobalExteriorNumericalDiffusiveFlux(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            double* n,
                            double* bc_a,
                            double* bc_grad_phi,
                            double* bc_u,
                            double* a,
                            double* grad_phi,
                            double* u,
                            double* penalty,
                            double* flux);
extern void calculateExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                double* n,
                                                double* bc_a,
                                                double* bc_grad_phi,
                                                double* bc_u,
                                                double* a,
                                                double* grad_phi,
                                                double* u,
                                                double* penalty,
                                                double* flux);
extern void calculateExteriorNumericalDiffusiveFlux_free_sd(int nExteriorElementBoundaries_global,
                                int nElementBoundaries_element,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux);
extern void calculateGlobalExteriorNumericalDiffusiveFlux_free(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux);
extern void calculateGlobalExteriorNumericalDiffusiveFlux_free_sd(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* rowptr,
                                int* colind,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                double* n,
                                double* bc_a,
                                double* bc_grad_phi,
                                double* bc_u,
                                double* a,
                                double* grad_phi,
                                double* u,
                                double* penalty,
                                double* flux);
extern void updateExteriorNumericalDiffusiveFluxJacobian(int scale_penalty,
                                                    double penalty_floor,
                                                    int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nDOF_trial_element,
                                                    int nSpace,
                                                    int* l2g,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    double* n,
                                                    double* a,
                                                    double* da,
                                                    double* grad_phi,
                                                    double* dphi,
                                                    double* v,
                                                    double* grad_v,
                                                    double* penalty,
                                                    double* fluxJacobian);

extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* l2g,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    int* isDOFBoundary,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* grad_phi,
                                    double* dphi,
                                    double* v,
                                    double* grad_v,
                                    double* penalty,
                                    double* fluxJacobian);
extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian_free_sd(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* l2g,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    int* isDOFBoundary,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* grad_phi,
                                    double* dphi,
                                    double* v,
                                    double* grad_v,
                                    double* penalty,
                                    double* fluxJacobian);
extern void calculateExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                                                int nElementBoundaries_element,
                                                int nQuadraturePoints_elementBoundary,
                                                int nSpace,
                                                int* exteriorElementBoundaries,
                                                int* elementBoundaryElements,
                                                int* elementBoundaryLocalElementBoundaries,
                                                int* isDOFBoundary,
                                                int* inflowFlag,
                                                double* n,
                                                double* bc_u,
                                                double* bc_f,
                                                double* bc_df,
                                                double* u,
                                                double* f,
                                                double* df,
                                                double* flux,
                                                double* dflux);
extern void calculateGlobalExteriorNumericalAdvectiveFlux(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            int* inflowFlag,
                            double* n,
                            double* bc_u,
                            double* bc_f,
                            double* bc_df,
                            double* u,
                            double* f,
                            double* df,
                            double* flux,
                            double* dflux);
extern void calculateExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nSpace,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* isDOFBoundary,
                                                    int* inflowFlag,
                                                    double* n,
                                                    double* bc_u,
                                                    double* bc_f,
                                                    double* bc_df,
                                                    double* u,
                                                    double* f,
                                                    double* df,
                                                    double* flux,
                                                    double* dflux);
extern void calculateGlobalExteriorNumericalAdvectiveFlux_free(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* flux,
                                double* dflux);
extern void calculateExteriorNumericalAdvectiveFluxStokesP2D(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp);
extern void calculateExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                            int nElementBoundaries_element,
                                                            int nQuadraturePoints_elementBoundary,
                                                            int nSpace,
                                                            int* exteriorElementBoundaries,
                                                            int* elementBoundaryElements,
                                                            int* elementBoundaryLocalElementBoundaries,
                                                            int* isDOFBoundary_p,
                                                            int* isDOFBoundary_u,
                                                            int* isDOFBoundary_v,
                                                            double* n,
                                                            double* bc_p,
                                                            double* bc_f_mass,
                                                            double* bc_f_umom,
                                                            double* bc_f_vmom,
                                                            double* p,
                                                            double* f_mass,
                                                            double* f_umom,
                                                            double* f_vmom,
                                                            double* df_mass_du,
                                                            double* df_mass_dv,
                                                            double* df_umom_du,
                                                            double* df_umom_dv,
                                                            double* df_vmom_du,
                                                            double* df_vmom_dv,
                                                            double* flux_mass,
                                                            double* flux_umom,
                                                            double* flux_vmom,
                                                            double* dflux_mass_du,
                                                            double* dflux_mass_dv,
                                                            double* dflux_umom_dp,
                                                            double* dflux_umom_du,
                                                            double* dflux_umom_dv,
                                                            double* dflux_vmom_dp,
                                                            double* dflux_vmom_du,
                                                            double* dflux_vmom_dv);
extern void calculateGlobalExteriorNumericalAdvectiveFluxNavierStokes2D(int nExteriorElementBoundaries_global,
                                                                    int nQuadraturePoints_elementBoundary,
                                                                    int nSpace,
                                                                    int* exteriorElementBoundaries,
                                                                    int* elementBoundaryElements,
                                                                    int* elementBoundaryLocalElementBoundaries,
                                                                    int* isDOFBoundary_p,
                                                                    int* isDOFBoundary_u,
                                                                    int* isDOFBoundary_v,
                                                                    double* n,
                                                                    double* bc_p,
                                                                    double* bc_f_mass,
                                                                    double* bc_f_umom,
                                                                    double* bc_f_vmom,
                                                                    double* p,
                                                                    double* oneByRho,
                                                                    double* f_mass,
                                                                    double* f_umom,
                                                                    double* f_vmom,
                                                                    double* df_mass_du,
                                                                    double* df_mass_dv,
                                                                    double* df_umom_dp,
                                                                    double* df_umom_du,
                                                                    double* df_umom_dv,
                                                                    double* df_vmom_dp,
                                                                    double* df_vmom_du,
                                                                    double* df_vmom_dv,
                                                                    double* flux_mass,
                                                                    double* flux_umom,
                                                                    double* flux_vmom,
                                                                    double* dflux_mass_dp,
                                                                    double* dflux_mass_du,
                                                                    double* dflux_mass_dv,
                                                                    double* dflux_umom_dp,
                                                                    double* dflux_umom_du,
                                                                    double* dflux_umom_dv,
                                                                    double* dflux_vmom_dp,
                                                                    double* dflux_vmom_du,
                                                                    double* dflux_vmom_dv,
                                                                    double* velocity);
extern void calculateGlobalExteriorNumericalAdvectiveFluxStokesP2D(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_p,
                                int* isDOFBoundary_u,
                                int* isDOFBoundary_v,
                                double* n,
                                double* bc_f,
                                double* bc_fpu,
                                double* bc_fpv,
                                double* f,
                                double* fpu,
                                double* fpv,
                                double* df_du,
                                double* df_dv,
                                double* dfpu_dp,
                                double* dfpv_dp,
                                double* flux,
                                double* fluxpu,
                                double* fluxpv,
                                double* dflux_du,
                                double* dflux_dv,
                                double* dfluxpu_dp,
                                double* dfluxpv_dp);
extern void calculateExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary_p,
                                                        int* isDOFBoundary_u,
                                                        int* isDOFBoundary_v,
                                                        int* isDOFBoundary_w,
                                                        double* n,
                                                        double* bc_f,
                                                        double* bc_fpu,
                                                        double* bc_fpv,
                                                        double* bc_fpw,
                                                        double* f,
                                                        double* fpu,
                                                        double* fpv,
                                                        double* fpw,
                                                        double* df_du,
                                                        double* df_dv,
                                                        double* df_dw,
                                                        double* dfpu_dp,
                                                        double* dfpv_dp,
                                                        double* dfpw_dp,
                                                        double* flux,
                                                        double* fluxpu,
                                                        double* fluxpv,
                                                        double* fluxpw,
                                                        double* dflux_du,
                                                        double* dflux_dv,
                                                        double* dflux_dw,
                                                        double* dfluxpu_dp,
                                                        double* dfluxpv_dp,
                                                        double* dfluxpw_dp);
extern void calculateGlobalExteriorNumericalAdvectiveFluxStokesP3D(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_p,
                                int* isDOFBoundary_u,
                                int* isDOFBoundary_v,
                                int* isDOFBoundary_w,
                                double* n,
                                double* bc_f,
                                double* bc_fpu,
                                double* bc_fpv,
                                double* bc_fpw,
                                double* f,
                                double* fpu,
                                double* fpv,
                                double* fpw,
                                double* df_du,
                                double* df_dv,
                                double* df_dw,
                                double* dfpu_dp,
                                double* dfpv_dp,
                                double* dfpw_dp,
                                double* flux,
                                double* fluxpu,
                                double* fluxpv,
                                double* fluxpw,
                                double* dflux_du,
                                double* dflux_dv,
                                double* dflux_dw,
                                double* dfluxpu_dp,
                                double* dfluxpv_dp,
                                double* dfluxpw_dp);
extern void calculateExteriorNumericalAdvectiveFlux_average(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nSpace,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* isDOFBoundary,
                                                        int* inflowFlag,
                                                        double* n,
                                                        double* bc_u,
                                                        double* bc_f,
                                                        double* bc_df,
                                                        double* u,
                                                        double* f,
                                                        double* df,
                                                        double* flux,
                                                        double* dflux);
extern void calculateGlobalExteriorNumericalAdvectiveFlux_average(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_f,
                                double* bc_df,
                                double* u,
                                double* f,
                                double* df,
                                double* flux,
                                double* dflux);
extern void updateExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
                                                    int nElementBoundaries_element,
                                                    int nQuadraturePoints_elementBoundary,
                                                    int nDOF_trial_element,
                                                    int* exteriorElementBoundaries,
                                                    int* elementBoundaryElements,
                                                    int* elementBoundaryLocalElementBoundaries,
                                                    int* inflowFlag,
                                                    double* dflux_left,
                                                    double* v,
                                                    double* fluxJacobian);
extern void updateGlobalExteriorNumericalAdvectiveFluxJacobian(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nDOF_trial_element,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* inflowFlag,
                                double* dflux_left,
                                double* v,
                                double* fluxJacobian);
extern void updateExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                        int nElementBoundaries_element,
                                                        int nQuadraturePoints_elementBoundary,
                                                        int nDOF_trial_element,
                                                        int* exteriorElementBoundaries,
                                                        int* elementBoundaryElements,
                                                        int* elementBoundaryLocalElementBoundaries,
                                                        int* inflowFlag,
                                                        double* dflux_left,
                                                        double* v,
                                                        double* fluxJacobian);
extern void updateGlobalExteriorNumericalAdvectiveFluxJacobian_free(int nExteriorElementBoundaries_global,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nDOF_trial_element,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                int* inflowFlag,
                                                                double* dflux_left,
                                                                double* v,
                                                                double* fluxJacobian);
extern void calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind(int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* u,
                                    double* a,
                                    double* phi_bc,
                                    double* phi,
                                    double* V,
                                    double* penalty,
                                    double* flux);
extern void calculateGlobalExteriorNumericalDiffusiveFlux_LDG_upwind_sd(int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* u,
                                    double* a,
                                    double* phi_bc,
                                    double* phi,
                                    double* V,
                                    double* penalty,
                                    double* flux);
extern void updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(int* isDiffusiveFluxBoundary,
                                                                int nExteriorElementBoundaries_global,
                                                                int nElementBoundaries_element,
                                                                int nQuadraturePoints_elementBoundary,
                                                                int nDOF_trial_element,
                                                                int nSpace,
                                                                int* exteriorElementBoundaries,
                                                                int* elementBoundaryElements,
                                                                int* elementBoundaryLocalElementBoundaries,
                                                                double* n,
                                                                double* a,
                                                                double* da,
                                                                double* dphi,
                                                                double* V,
                                                                double* DV,
                                                                double* DV_eb,
                                                                double* v,
                                                                double* penalty,
                                                                double* fluxJacobian,
                                                                double* fluxJacobian_eb);
extern void updateExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(int* isDiffusiveFluxBoundary,
                                    int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* rowptr,
                                    int* colind,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian,
                                    double* fluxJacobian_eb);
extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind(int* isDiffusiveFluxBoundary,
                                    int nExteriorElementBoundaries_global,
                                    int nElementBoundaries_element,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    int nSpace,
                                    int* exteriorElementBoundaries,
                                    int* elementBoundaryElements,
                                    int* elementBoundaryLocalElementBoundaries,
                                    double* n,
                                    double* a,
                                    double* da,
                                    double* dphi,
                                    double* V,
                                    double* DV,
                                    double* DV_eb,
                                    double* v,
                                    double* penalty,
                                    double* fluxJacobian_exterior,
                                    double* fluxJacobian_eb);
extern void updateGlobalExteriorNumericalDiffusiveFluxJacobian_LDG_upwind_sd(int* isDiffusiveFluxBoundary,
                                        int nExteriorElementBoundaries_global,
                                        int nElementBoundaries_element,
                                        int nQuadraturePoints_elementBoundary,
                                        int nDOF_trial_element,
                                        int nSpace,
                                        int* rowptr,
                                        int* colind,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        double* n,
                                        double* a,
                                        double* da,
                                        double* dphi,
                                        double* V,
                                        double* DV,
                                        double* DV_eb,
                                        double* v,
                                        double* penalty,
                                        double* fluxJacobian_exterior,
                                        double* fluxJacobian_eb);
extern void calculateExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nSpace,
                            int speedEvalFlag,
                            int* exteriorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            int* isDOFBoundary,
                            int* inflowFlag,
                            double* n,
                            double* bc_u,
                            double* bc_H,
                            double* bc_dH,
                            double* u,
                            double* H,
                            double* dH,
                            double* flux,
                            double* dflux);
extern void calculateGlobalExteriorLesaintRaviartNumericalFlux(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int speedEvalFlag,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary,
                                int* inflowFlag,
                                double* n,
                                double* bc_u,
                                double* bc_H,
                                double* bc_dH,
                                double* u,
                                double* H,
                                double* dH,
                                double* flux,
                                double* dflux);
extern void calculateGlobalExteriorNumericalAdvectiveFlux_DarcyFC(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int* isDOFBoundary_sw,
                                int* isDOFBoundary_psiw,
                                double* n,
                                double* bc_sw,
                                double* bc_psiw,
                                double* bc_fw,
                                double* bc_dfw_dsw,
                                double* bc_dfw_dpsiw,
                                double* bc_fn,
                                double* bc_dfn_dsw,
                                double* bc_dfn_dpsiw,
                                double* sw,
                                double* psiw,
                                double* fw,
                                double* dfw_dsw,
                                double* dfw_dpsiw,
                                double* fn,
                                double* dfn_dsw,
                                double* dfn_dpsiw,
                                double* fluxw,
                                double* dfluxw_dsw,
                                double* dfluxw_dpsiw,
                                double* fluxn,
                                double* dfluxn_dsw,
                                double* dfluxn_dpsiw);
extern void calculateGlobalExteriorNumericalFluxDarcySplitPressure(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    const int* exteriorElementBoundaries,
                                    const int* elementBoundaryElements,
                                    const int* elementBoundaryLocalElementBoundaries,
                                    const int* isDOFBoundary_u,
                                    const double* n,
                                    const double* bc_a,
                                    const double* bc_grad_phi,
                                    const double* bc_psi_w,
                                    const double* bc_psi_n,
                                    const double* a,
                                    const double* grad_phi,
                                    const double* psi_w,
                                    const double* psi_n,
                                    const double* penalty,
                                    double*  diffusiveFlux);
extern void calculateGlobalExteriorNumericalFluxDarcySplitPressure_sd(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nSpace,
                                    const int* rowptr,
                                    const int* colind,
                                    const int* exteriorElementBoundaries,
                                    const int* elementBoundaryElements,
                                    const int* elementBoundaryLocalElementBoundaries,
                                    const int* isDOFBoundary_u,
                                    const double* n,
                                    const double* bc_a,
                                    const double* bc_grad_phi,
                                    const double* bc_psi_w,
                                    const double* bc_psi_n,
                                    const double* a,
                                    const double* grad_phi,
                                    const double* psi_w,
                                    const double* psi_n,
                                    const double* penalty,
                                    double*  diffusiveFlux);
extern void updateGlobalExteriorNumericalDiffusiveFluxWithUpwindingJacobian_sd(int scale_penalty,
                                        double penalty_floor,
                                        int nExteriorElementBoundaries_global,
                                        int nQuadraturePoints_elementBoundary,
                                        int nDOF_trial_element,
                                        int nSpace,
                                        int* rowptr,
                                        int* colind,
                                        int* l2g,
                                        int* exteriorElementBoundaries,
                                        int* elementBoundaryElements,
                                        int* elementBoundaryLocalElementBoundaries,
                                        int* isDOFBoundary,
                                        int* fluxBoundaryFlag,
                                        double* n,
                                        double* a,
                                        double* da,
                                        double* grad_phi,
                                        double* dphi,
                                        double* v,
                                        double* grad_v,
                                        double* penalty,
                                        double* fluxJacobian);
extern void calculateGlobalExteriorNumericalAdvectiveFluxStokes2D(int nExteriorElementBoundaries_global,
                                int nQuadraturePoints_elementBoundary,
                                int nSpace,
                                int* exteriorElementBoundaries,
                                int* elementBoundaryElements,
                                int* elementBoundaryLocalElementBoundaries,
                                int *isDOFBoundary_p,
                                int *isDOFBoundary_u,
                                int *isDOFBoundary_v,
                                double* n,
                                double* bc_p,
                                double* bc_f_mass,
                                double* p,
                                double* f_mass,
                                double* df_mass_du,
                                double* df_mass_dv,
                                double* flux_mass,
                                double* flux_umom,
                                double* flux_vmom,
                                double* dflux_mass_du,
                                double* dflux_mass_dv,
                                double* dflux_umom_dp,
                                double* dflux_vmom_dp,
                                double* velocity);
extern void calculateInteriorNumericalAdvectiveFluxRusanov(double safetyFactor,
                            int nInteriorElementBoundaries_global,
                            int nElementBoundaries_element,
                            int nQuadraturePoints_elementBoundary,
                            int nQuadraturePoints_element,
                            int nSpace,
                            int* interiorElementBoundaries,
                            int* elementBoundaryElements,
                            int* elementBoundaryLocalElementBoundaries,
                            double* n,
                            double* u,
                            double* f,
                            double* df,
                            double* df_element,
                            double* flux,
                            double* dflux_left,
                            double* dflux_right);
#endif
