import numpy
cimport numpy
from proteus import *
from proteus.Transport import *
from proteus.Transport import OneLevelTransport

cdef extern from "VOF.h" namespace "proteus":
    cdef cppclass VOF_base:
        void calculateResidual_blending_spaces(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
		               double sc_uref, double sc_alpha,
                               #VRANS
                               double* q_porosity,
                               double* porosity_dof,
                               #
                               int* u_l2g, 
                               double* elementDiameter,
                               double* meshSize,
			       int degree_polynomial,
                               double* u_dof,
			       double* u_dof_old,
                               double* velocity,
                               double* q_m,
                               double* q_u,
			       double* q_grad_u,
                               double* q_m_betaBDF,
                               double* q_dV,
                               double* q_dV_last,
                               double* cfl,
			       double* edge_based_cfl,
                               double* q_numDiff_u, 
                               double* q_numDiff_u_last, 
                               int offset_u, int stride_u, 
                               double* globalResidual,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               double* ebqe_phi,double epsFact,
                               double* ebqe_u,
                               double* ebqe_flux,
			       double cE,
			       double cK,
			       double uL, 
			       double uR,
			       # PARAMETERS FOR EDGE VISCOSITY
			       int numDOFs,
			       int NNZ,
			       int* csrRowIndeces_DofLoops,
			       int* csrColumnOffsets_DofLoops,	
			       int* csrRowIndeces_CellLoops,
			       int* csrColumnOffsets_CellLoops,
			       int* csrColumnOffsets_eb_CellLoops,
                               double* Cx, 
			       double* Cy,
			       double* Cz,
			       double* CTx, 
			       double* CTy, 
			       double* CTz, 
			       double* ML, 
			       int LUMPED_MASS_MATRIX,
			       int STABILIZATION_TYPE,
			       int ENTROPY_TYPE,
			       double* low_order_solution,
			       double* dL_minus_dC,
			       double* min_u_bc,
			       double* max_u_bc,
			       double* force,
                               double* uexact,
			       double* gradx_uexact,
			       double* grady_uexact,
			       double* alpha_value,
			       double* alpha_dof,
			       double* aux_test_ref,
			       double* aux_grad_test_ref,
			       double* dLow,
			       double* quantDOFs,
                               double beta,
			       double epsilon)			       
        void calculateJacobian_blending_spaces(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
                               #VRANS
                               double* q_porosity,
                               #
                               int* u_l2g,
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof, 
                               double* velocity,
                               double* q_m_betaBDF, 
                               double* cfl,
                               double* q_numDiff_u_last, 
			       int* csrRowIndeces_u_u,int* csrColumnOffsets_u_u,
			       int numDOFs,
			       int* csrRowIndeces_DofLoops,
			       int* csrColumnOffsets_DofLoops,
                               double* globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               int* csrColumnOffsets_eb_u_u,
			       int LUMPED_MASS_MATRIX,
			       double* alpha_value,
			       double* alpha_dof,
			       double* aux_test_ref,
			       double* aux_grad_test_ref,
			       double* dLow,
			       double beta,
			       double epsilon)			       
        void calculateMassMatrix(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
                               #VRANS
                               double* q_porosity,
                               #
                               int* u_l2g,
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof, 
                               double* velocity,
                               double* q_m_betaBDF, 
                               double* cfl,
                               double* q_numDiff_u_last, 
			       int* csrRowIndeces_u_u,int* csrColumnOffsets_u_u,
			       int numDOFs,
			       int* csrRowIndeces_DofLoops,
			       int* csrColumnOffsets_DofLoops,
                               double* globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               int* csrColumnOffsets_eb_u_u,
			       int LUMPED_MASS_MATRIX,
			       double* alpha_value,
			       double* alpha_dof,
			       double* aux_test_ref,
			       double* aux_grad_test_ref)
        void calculateMetricsAtEOS(double* mesh_trial_ref,
                                   double* mesh_grad_trial_ref,
                                   double* mesh_dof,
                                   int* mesh_l2g,
                                   double* dV_ref,
                                   double* u_trial_ref,
                                   double* u_grad_trial_ref,
                                   double* u_test_ref,
                                   int nElements_global,
                                   int nElements_owned,
                                   int useMetrics,
                                   int* u_l2g,
                                   double* elementDiameter,
                                   double* meshSize,
                                   double* nodeDiametersArray,
                                   double epsFactHeaviside,
                                   double* q_uh,
				   double* q_grad_uh,
                                   double* u_exact,
                                   double* gradx_u_exact,
                                   double* grady_u_exact,
                                   int offset_u, int stride_u,
                                   double* global_L2,
                                   double* global_H1,
                                   double* global_L2_Omega1,
                                   double* global_H1_Omega1,
                                   double* global_Omega1,
                                   double* global_L2_Omega2,
                                   double* global_H1_Omega2,
				   double* global_Omega2,
                                   double* global_L2_sH,
                                   double* global_L2_1msH)
        void getLumpedL2Projection(double* mesh_trial_ref,
                                  double* mesh_grad_trial_ref,
                                  double* mesh_dof,
                                  int* mesh_l2g,
                                  double* dV_ref,
                                  double* u_trial_ref,
                                  double* u_grad_trial_ref,
                                  double* u_test_ref,
                                  int nElements_global,
                                  int* u_l2g,
                                  double* elementDiameter,
                                  double* q_alpha,
                                  int offset_u, int stride_u,
                                  int numDOFs,
                                  double* lumpedL2Projection)
    VOF_base* newVOF(int nSpaceIn,
                       int nQuadraturePoints_elementIn,
                       int nDOF_mesh_trial_elementIn,
                       int nDOF_trial_elementIn,
                       int nDOF_test_elementIn,
                       int nQuadraturePoints_elementBoundaryIn,
                       int CompKernelFlag)

cdef class cVOF_base:
   cdef VOF_base* thisptr
   def __cinit__(self,
                 int nSpaceIn,
                 int nQuadraturePoints_elementIn,
                 int nDOF_mesh_trial_elementIn,
                 int nDOF_trial_elementIn,
                 int nDOF_test_elementIn,
                 int nQuadraturePoints_elementBoundaryIn,
                 int CompKernelFlag):
       self.thisptr = newVOF(nSpaceIn,
                             nQuadraturePoints_elementIn,
                             nDOF_mesh_trial_elementIn,
                             nDOF_trial_elementIn,
                             nDOF_test_elementIn,
                             nQuadraturePoints_elementBoundaryIn,
                             CompKernelFlag)
   def __dealloc__(self):
       del self.thisptr
   def calculateResidual_blending_spaces(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
			 double sc_uref, double sc_alpha,
                         #VRANS
                         numpy.ndarray q_porosity,
                         numpy.ndarray porosity_dof,
                         #
                         numpy.ndarray u_l2g, 
                         numpy.ndarray elementDiameter,
                         numpy.ndarray meshSize,                                         
			 int degree_polynomial,
                         numpy.ndarray u_dof,
                 	 numpy.ndarray u_dof_old,
                         numpy.ndarray velocity,
                         numpy.ndarray q_m,
                         numpy.ndarray q_u,
			 numpy.ndarray q_grad_u,
                         numpy.ndarray q_m_betaBDF,
                         numpy.ndarray q_dV,
                         numpy.ndarray q_dV_last,
                         numpy.ndarray cfl,
                         numpy.ndarray edge_based_cfl,
                         numpy.ndarray q_numDiff_u, 
                         numpy.ndarray q_numDiff_u_last, 
                         int offset_u, int stride_u, 
                         numpy.ndarray globalResidual,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray ebqe_phi,double epsFact,
                         numpy.ndarray ebqe_u,
                         numpy.ndarray ebqe_flux,
			 double cE,
			 double cK,
			 double uL, 
			 double uR, 
			 int numDOFs,
			 int NNZ, 
			 numpy.ndarray csrRowIndeces_DofLoops,
			 numpy.ndarray csrColumnOffsets_DofLoops,
			 numpy.ndarray csrRowIndeces_CellLoops,
			 numpy.ndarray csrColumnOffsets_CellLoops,
			 numpy.ndarray csrColumnOffsets_eb_CellLoops,
			 numpy.ndarray Cx, 
			 numpy.ndarray Cy,
			 numpy.ndarray Cz,
			 numpy.ndarray CTx, 
			 numpy.ndarray CTy, 
			 numpy.ndarray CTz, 
			 numpy.ndarray ML, 
			 int LUMPED_MASS_MATRIX,
			 int STABILIZATION_TYPE,
			 int ENTROPY_TYPE,
			 numpy.ndarray low_order_solution,
			 numpy.ndarray dt_times_dH_minus_dL,
			 numpy.ndarray min_u_bc,
			 numpy.ndarray max_u_bc,
			 numpy.ndarray force,
                         numpy.ndarray uexact,
                         numpy.ndarray gradx_uexact,
                         numpy.ndarray grady_uexact,
			 numpy.ndarray alpha_value,
			 numpy.ndarray alpha_dof,
			 numpy.ndarray aux_test_ref,
			 numpy.ndarray aux_grad_test_ref,
			 numpy.ndarray dLow,
			 numpy.ndarray quantDOFs,
                         double beta,
			 double epsilon):
       self.thisptr.calculateResidual_blending_spaces(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
			               sc_uref, sc_alpha,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       <double*> porosity_dof.data,
                                       #
                                       <int*> u_l2g.data, 
                                       <double*> elementDiameter.data,
                                       <double*> meshSize.data,
				       degree_polynomial,
                                       <double*> u_dof.data,
				       <double*> u_dof_old.data,
                                       <double*> velocity.data,
                                       <double*> q_m.data,
                                       <double*> q_u.data,
				       <double*> q_grad_u.data,
                                       <double*> q_m_betaBDF.data,
                                       <double*> q_dV.data,
                                       <double*> q_dV_last.data,
                                       <double*> cfl.data,
                                       <double*> edge_based_cfl.data,
                                       <double*> q_numDiff_u.data, 
                                       <double*> q_numDiff_u_last.data, 
                                       offset_u, stride_u, 
                                       <double*> globalResidual.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <double*> ebqe_phi.data,
                                       epsFact,
                                       <double*> ebqe_u.data,
                                       <double*> ebqe_flux.data,
				       cE,
				       cK,
				       uL, 
				       uR,
				       numDOFs,
				       NNZ,
				       <int*> csrRowIndeces_DofLoops.data,
				       <int*> csrColumnOffsets_DofLoops.data,
				       <int*> csrRowIndeces_CellLoops.data,
				       <int*> csrColumnOffsets_CellLoops.data,
				       <int*> csrColumnOffsets_eb_CellLoops.data,
                                       <double*> Cx.data, 
				       <double*> Cy.data,
				       <double*> Cz.data,
				       <double*> CTx.data, 		       
				       <double*> CTy.data, 
				       <double*> CTz.data, 
				       <double*> ML.data, 
				       LUMPED_MASS_MATRIX,
				       STABILIZATION_TYPE,
				       ENTROPY_TYPE,
				       <double*> low_order_solution.data,
				       <double*> dt_times_dH_minus_dL.data,
				       <double*> min_u_bc.data,
				       <double*> max_u_bc.data,
				       <double*> force.data,
                                       <double*> uexact.data,
                                       <double*> gradx_uexact.data,
                                       <double*> grady_uexact.data,
				       <double*> alpha_value.data,
				       <double*> alpha_dof.data,
				       <double*> aux_test_ref.data,
				       <double*> aux_grad_test_ref.data,
				       <double*> dLow.data,
				       <double*> quantDOFs.data,
                                       beta,
				       epsilon)
   def calculateJacobian_blending_spaces(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
                         #VRANS
                         numpy.ndarray q_porosity,
                         #
                         numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof, 
                         numpy.ndarray velocity,
                         numpy.ndarray q_m_betaBDF, 
                         numpy.ndarray cfl,
                         numpy.ndarray q_numDiff_u_last, 
			 numpy.ndarray csrRowIndeces_u_u,numpy.ndarray csrColumnOffsets_u_u,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_DofLoops,
			 numpy.ndarray csrColumnOffsets_DofLoops,
                         globalJacobian,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray csrColumnOffsets_eb_u_u,
			 int LUMPED_MASS_MATRIX,
			 numpy.ndarray alpha_value,
			 numpy.ndarray alpha_dof,
			 numpy.ndarray aux_test_ref,
			 numpy.ndarray aux_grad_test_ref,
			 numpy.ndarray dLow,
			 double beta,
			 double epsilon):
       cdef numpy.ndarray rowptr,colind,globalJacobian_a
       (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
       self.thisptr.calculateJacobian_blending_spaces(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       #
                                       <int*> u_l2g.data,
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data, 
                                       <double*> velocity.data,
                                       <double*> q_m_betaBDF.data, 
                                       <double*> cfl.data,
                                       <double*> q_numDiff_u_last.data, 
 				       <int*> csrRowIndeces_u_u.data,<int*> csrColumnOffsets_u_u.data,
				       numDOFs,
				       <int*> csrRowIndeces_DofLoops.data,
			 	       <int*> csrColumnOffsets_DofLoops.data,
                                       <double*> globalJacobian_a.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <int*> csrColumnOffsets_eb_u_u.data, 
				       LUMPED_MASS_MATRIX,
				       <double*> alpha_value.data,
				       <double*> alpha_dof.data,
			 	       <double*> aux_test_ref.data,
			 	       <double*> aux_grad_test_ref.data,
				       <double*> dLow.data,
				       beta,
				       epsilon)
   def calculateMassMatrix(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
                         #VRANS
                         numpy.ndarray q_porosity,
                         #
                         numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof, 
                         numpy.ndarray velocity,
                         numpy.ndarray q_m_betaBDF, 
                         numpy.ndarray cfl,
                         numpy.ndarray q_numDiff_u_last, 
			 numpy.ndarray csrRowIndeces_u_u,numpy.ndarray csrColumnOffsets_u_u,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_DofLoops,
			 numpy.ndarray csrColumnOffsets_DofLoops,
                         globalJacobian,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray csrColumnOffsets_eb_u_u,
			 int LUMPED_MASS_MATRIX,
			 numpy.ndarray alpha_value,
			 numpy.ndarray alpha_dof,
			 numpy.ndarray aux_test_ref,
			 numpy.ndarray aux_grad_test_ref):
       cdef numpy.ndarray rowptr,colind,globalJacobian_a
       (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
       self.thisptr.calculateMassMatrix(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       #
                                       <int*> u_l2g.data,
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data, 
                                       <double*> velocity.data,
                                       <double*> q_m_betaBDF.data, 
                                       <double*> cfl.data,
                                       <double*> q_numDiff_u_last.data, 
 				       <int*> csrRowIndeces_u_u.data,<int*> csrColumnOffsets_u_u.data,
				       numDOFs,
				       <int*> csrRowIndeces_DofLoops.data,
			 	       <int*> csrColumnOffsets_DofLoops.data,
                                       <double*> globalJacobian_a.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <int*> csrColumnOffsets_eb_u_u.data, 
				       LUMPED_MASS_MATRIX,
				       <double*> alpha_value.data,
				       <double*> alpha_dof.data,
			 	       <double*> aux_test_ref.data,
			 	       <double*> aux_grad_test_ref.data)
   def calculateMetricsAtEOS(self,
                             numpy.ndarray mesh_trial_ref,
                             numpy.ndarray mesh_grad_trial_ref,
                             numpy.ndarray mesh_dof,
                             numpy.ndarray mesh_l2g,
                             numpy.ndarray dV_ref,
                             numpy.ndarray u_trial_ref,
                             numpy.ndarray u_grad_trial_ref,
                             numpy.ndarray u_test_ref,
                             int nElements_global,
                             int nElements_owned,
                             int useMetrics,
                             numpy.ndarray u_l2g,
                             numpy.ndarray elementDiameter,
                             numpy.ndarray meshSize,
                             numpy.ndarray nodeDiametersArray,
                             double epsFactHeaviside,
                  	     numpy.ndarray q_uh,
			     numpy.ndarray q_grad_uh,
                             numpy.ndarray u_exact,
                             numpy.ndarray gradx_u_exact,
                             numpy.ndarray grady_u_exact,
                             int offset_u, int stride_u):
        cdef double global_L2
        cdef double global_H1
        cdef double global_L2_Omega1
        cdef double global_H1_Omega1
        cdef double global_Omega1
        cdef double global_L2_Omega2
        cdef double global_H1_Omega2
        cdef double global_Omega2
        cdef double global_L2_sH
        cdef double global_L2_1msH
        self.thisptr.calculateMetricsAtEOS(<double*>mesh_trial_ref.data,
                                           <double*>mesh_grad_trial_ref.data,
                                           <double*>mesh_dof.data,
                                           <int*>mesh_l2g.data,
                                           <double*>dV_ref.data,
                                           <double*>u_trial_ref.data,
                                           <double*>u_grad_trial_ref.data,
                                           <double*>u_test_ref.data,
                                           nElements_global,
                                           nElements_owned,
                                           useMetrics,
                                           <int*>u_l2g.data,
                                           <double*>elementDiameter.data,
                                           <double*>meshSize.data,
                                           <double*>nodeDiametersArray.data,
                                           epsFactHeaviside,
                                           <double*>q_uh.data,
					   <double*>q_grad_uh.data,
                                           <double*>u_exact.data,
                                           <double*>gradx_u_exact.data,
                                           <double*>grady_u_exact.data,
                                           offset_u,
                                           stride_u,
                                           &global_L2,
                                           &global_H1,
                                           &global_L2_Omega1,
                                           &global_H1_Omega1,
                                           &global_Omega1,
                                           &global_L2_Omega2,
                                           &global_H1_Omega2,
                                           &global_Omega2,
                                           &global_L2_sH,
                                           &global_L2_1msH)
        return(global_L2,
               global_H1,
               global_L2_Omega1,
               global_H1_Omega1,
               global_Omega1,
               global_L2_Omega2,
               global_H1_Omega2,
               global_Omega2,
               global_L2_sH,
               global_L2_1msH)
   def getLumpedL2Projection(self,
                             numpy.ndarray mesh_trial_ref,
                             numpy.ndarray mesh_grad_trial_ref,
                             numpy.ndarray mesh_dof,
                             numpy.ndarray mesh_l2g,
                             numpy.ndarray dV_ref,
                             numpy.ndarray u_trial_ref,
                             numpy.ndarray u_grad_trial_ref,
                             numpy.ndarray u_test_ref,
                             int nElements_global,
                             numpy.ndarray u_l2g,
                             numpy.ndarray elementDiameter,
                             numpy.ndarray q_alpha,
                             int offset_u, int stride_u,
                             int numDOFs,
                             numpy.ndarray lumpedL2Projection):
       self.thisptr.getLumpedL2Projection(<double*> mesh_trial_ref.data,
                                         <double*> mesh_grad_trial_ref.data,
                                         <double*> mesh_dof.data,
                                         <int*> mesh_l2g.data,
                                         <double*> dV_ref.data,
                                         <double*> u_trial_ref.data,
                                         <double*> u_grad_trial_ref.data,
                                         <double*> u_test_ref.data,
                                         nElements_global,
                                         <int*> u_l2g.data,
                                         <double*> elementDiameter.data,
                                         <double*> q_alpha.data,
                                         offset_u, stride_u,
                                         numDOFs,
                                         <double*> lumpedL2Projection.data)
