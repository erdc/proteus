#ifndef RANS3PF_H
#define RANS3PF_H
#include <cmath>
#include <valarray>
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include "CompKernel.h"
#include "ModelFactory.h"
#include "SedClosure.h"
#include "equivalent_polynomials.h"
#include "xtensor-python/pyarray.hpp"
double sgn3p(double val) {
  return double((0.0 < val) - (val < 0.0));
}

//////////////////////
// ***** TODO ***** //
//////////////////////
// *fix the following w.r.t. not dividing momentum eqn by rho
//      * updateSolidParticleTerms
// *Double check the following w.r.t. not dividing momentum eqn by rho
//      * updateDarcyForchheimerTerms_Ergun
//      * updateTurbulenceClosure
//      * check pdeResidual_p. In particular check the term with q_dvos_dt
//      * double check exteriorNumericalAdvectiveFlux. I multiply from outside porosity*rho
//      * MOVING MESH. Double check.
//      * Turbulence: double check eddy_viscosity within evaluateCoefficients
// ***** END OF TODO *****

#define CELL_BASED_EV_COEFF 1
#define POWER_SMOOTHNESS_INDICATOR 2
#define EPS_FOR_GAMMA_INDICATOR 1E-10
#define C_FOR_GAMMA_INDICATOR 0.25 // increase gamma to make the indicator more agressive (less dissipative)
#define USE_GAMMA_INDICATOR 0
#define ANISOTROPIC_DIFFUSION 0



#define USE_CYLINDER_AS_PARTICLE//just for debug

namespace proteus
{
  template<int nSpace, int nP, int nQ>
  using GeneralizedFunctions = equivalent_polynomials::GeneralizedFunctions_mix<nSpace, nP, nQ>;

  class cppRANS3PF_base
  {
  public:
    std::valarray<double> TransportMatrix, TransposeTransportMatrix;
    std::valarray<double> uStar_psi, vStar_psi, wStar_psi;
    std::valarray<double> uStar_hi, vStar_hi, wStar_hi, den_hi;
    std::valarray<double> uStar_min_hiHe, vStar_min_hiHe, wStar_min_hiHe;
    std::valarray<double> uStar_gamma, vStar_gamma, wStar_gamma;
    virtual ~cppRANS3PF_base() {}
    virtual void setSedClosure(double aDarcy,
                               double betaForch,
                               double grain,
                               double packFraction,
                               double packMargin,
                               double maxFraction,
                               double frFraction,
                               double sigmaC,
                               double C3e,
                               double C4e,
                               double eR,
                               double fContact,
                               double mContact,
                               double nContact,
                               double angFriction,
                               double vos_limiter,
                               double mu_fr_limiter
                                ) {}
    virtual void calculateResidual(xt::pyarray<double>& mesh_trial_ref,
                                   xt::pyarray<double>& mesh_grad_trial_ref,
                                   xt::pyarray<double>& mesh_dof,
                                   xt::pyarray<double>& mesh_velocity_dof,
                                   double MOVING_DOMAIN, //0 or 1
                                   double PSTAB,
                                   xt::pyarray<int>& mesh_l2g,
                                   xt::pyarray<double>& x_ref,
                                   xt::pyarray<double>& dV_ref,
                                   int nDOF_per_element_pressure,
                                   xt::pyarray<double>& p_trial_ref,
                                   xt::pyarray<double>& p_grad_trial_ref,
                                   xt::pyarray<double>& p_test_ref,
                                   xt::pyarray<double>& p_grad_test_ref,
                                   xt::pyarray<double>& q_p,
                                   xt::pyarray<double>& q_grad_p,
                                   xt::pyarray<double>& ebqe_p,
                                   xt::pyarray<double>& ebqe_grad_p,
                                   xt::pyarray<double>& vel_trial_ref,
                                   xt::pyarray<double>& vel_grad_trial_ref,
                                   xt::pyarray<double>& vel_hess_trial_ref,
                                   xt::pyarray<double>& vel_test_ref,
                                   xt::pyarray<double>& vel_grad_test_ref,
                                   xt::pyarray<double>& mesh_trial_trace_ref,
                                   xt::pyarray<double>& mesh_grad_trial_trace_ref,
                                   xt::pyarray<double>& dS_ref,
                                   xt::pyarray<double>& p_trial_trace_ref,
                                   xt::pyarray<double>& p_grad_trial_trace_ref,
                                   xt::pyarray<double>& p_test_trace_ref,
                                   xt::pyarray<double>& p_grad_test_trace_ref,
                                   xt::pyarray<double>& vel_trial_trace_ref,
                                   xt::pyarray<double>& vel_grad_trial_trace_ref,
                                   xt::pyarray<double>& vel_test_trace_ref,
                                   xt::pyarray<double>& vel_grad_test_trace_ref,
                                   xt::pyarray<double>& normal_ref,
                                   xt::pyarray<double>& boundaryJac_ref,
                                   double eb_adjoint_sigma,
                                   xt::pyarray<double>& elementDiameter,
                                   xt::pyarray<double>& nodeDiametersArray,
                                   double hFactor,
                                   int nElements_global,
                                   int nElements_owned,
                                   int nElementBoundaries_global,
                                   int nElementBoundaries_owned,
                                   int nNodes_owned,
                                   double useRBLES,
                                   double useMetrics,
                                   double alphaBDF,
                                   double epsFact_rho,
                                   double epsFact_mu,
                                   double sigma,
                                   double rho_0,
                                   double nu_0,
                                   double rho_1,
                                   double nu_1,
                                   double smagorinskyConstant,
                                   int turbulenceClosureModel,
                                   double Ct_sge,
                                   double Cd_sge,
                                   double C_dc,
                                   double C_b,
                                   const xt::pyarray<double>& eps_solid,
                                   const xt::pyarray<double>& ebq_global_phi_solid,
                                   const xt::pyarray<double>& ebq_global_grad_phi_solid,
                                   const xt::pyarray<double>& ebq_particle_velocity_solid,
                                         xt::pyarray<double>& phi_solid_nodes,
                                         xt::pyarray<double>& phi_solid,
                                   const xt::pyarray<double>& q_velocity_solid,
                                   const xt::pyarray<double>& q_velocityStar_solid,
                                   const xt::pyarray<double>& q_vos,
                                   const xt::pyarray<double>& q_dvos_dt,
				   const xt::pyarray<double>& q_grad_vos,
                                   const xt::pyarray<double>& q_dragAlpha,
                                   const xt::pyarray<double>& q_dragBeta,
                                   const xt::pyarray<double>& q_mass_source,
                                   const xt::pyarray<double>& q_turb_var_0,
                                   const xt::pyarray<double>& q_turb_var_1,
                                   const xt::pyarray<double>& q_turb_var_grad_0,
                                   xt::pyarray<double>&  q_eddy_viscosity,
                                   xt::pyarray<int>& p_l2g,
                                   xt::pyarray<int>& vel_l2g,
                                   xt::pyarray<double>& p_dof,
                                   xt::pyarray<double>& u_dof,
                                   xt::pyarray<double>& v_dof,
                                   xt::pyarray<double>& w_dof,
                                   xt::pyarray<double>& u_dof_old,
                                   xt::pyarray<double>& v_dof_old,
                                   xt::pyarray<double>& w_dof_old,
                                   xt::pyarray<double>& u_dof_old_old,
                                   xt::pyarray<double>& v_dof_old_old,
                                   xt::pyarray<double>& w_dof_old_old,
				   xt::pyarray<double>& uStar_dof,
				   xt::pyarray<double>& vStar_dof,
				   xt::pyarray<double>& wStar_dof,
                                   xt::pyarray<double>& g,
                                   const double useVF,
                                   xt::pyarray<double>& vf,
                                   xt::pyarray<double>& phi,
                                   xt::pyarray<double>& phi_dof,
                                   xt::pyarray<double>& normal_phi,
                                   xt::pyarray<double>& kappa_phi,
                                   xt::pyarray<double>& q_mom_u_acc,
                                   xt::pyarray<double>& q_mom_v_acc,
                                   xt::pyarray<double>& q_mom_w_acc,
                                   xt::pyarray<double>& q_mass_adv,
                                   xt::pyarray<double>& q_mom_u_acc_beta_bdf,
                                   xt::pyarray<double>& q_mom_v_acc_beta_bdf,
                                   xt::pyarray<double>& q_mom_w_acc_beta_bdf,
                                   xt::pyarray<double>& q_dV,
                                   xt::pyarray<double>& q_dV_last,
                                   xt::pyarray<double>& q_velocity_sge,
                                   xt::pyarray<double>& ebqe_velocity_star,
                                   xt::pyarray<double>& q_cfl,
                                   xt::pyarray<double>& q_numDiff_u,
                                   xt::pyarray<double>& q_numDiff_v,
                                   xt::pyarray<double>& q_numDiff_w,
                                   xt::pyarray<double>& q_numDiff_u_last,
                                   xt::pyarray<double>& q_numDiff_v_last,
                                   xt::pyarray<double>& q_numDiff_w_last,
                                   xt::pyarray<int>& sdInfo_u_u_rowptr,
                                   xt::pyarray<int>& sdInfo_u_u_colind,
                                   xt::pyarray<int>& sdInfo_u_v_rowptr,
                                   xt::pyarray<int>& sdInfo_u_v_colind,
                                   xt::pyarray<int>& sdInfo_u_w_rowptr,
                                   xt::pyarray<int>& sdInfo_u_w_colind,
                                   xt::pyarray<int>& sdInfo_v_v_rowptr,
                                   xt::pyarray<int>& sdInfo_v_v_colind,
                                   xt::pyarray<int>& sdInfo_v_u_rowptr,
                                   xt::pyarray<int>& sdInfo_v_u_colind,
                                   xt::pyarray<int>& sdInfo_v_w_rowptr,
                                   xt::pyarray<int>& sdInfo_v_w_colind,
                                   xt::pyarray<int>& sdInfo_w_w_rowptr,
                                   xt::pyarray<int>& sdInfo_w_w_colind,
                                   xt::pyarray<int>& sdInfo_w_u_rowptr,
                                   xt::pyarray<int>& sdInfo_w_u_colind,
                                   xt::pyarray<int>& sdInfo_w_v_rowptr,
                                   xt::pyarray<int>& sdInfo_w_v_colind,
                                   int offset_p,
                                   int offset_u,
                                   int offset_v,
                                   int offset_w,
                                   int stride_p,
                                   int stride_u,
                                   int stride_v,
                                   int stride_w,
                                   xt::pyarray<double>& globalResidual,
                                   int nExteriorElementBoundaries_global,
                                   xt::pyarray<int>& exteriorElementBoundariesArray,
                                   xt::pyarray<int>& elementBoundariesArray,
                                   xt::pyarray<int>& elementBoundaryElementsArray,
                                   xt::pyarray<int>& elementBoundaryLocalElementBoundariesArray,
                                   xt::pyarray<double>& ebqe_vf_ext,
                                   xt::pyarray<double>& bc_ebqe_vf_ext,
                                   xt::pyarray<double>& ebqe_phi_ext,
                                   xt::pyarray<double>& bc_ebqe_phi_ext,
                                   xt::pyarray<double>& ebqe_normal_phi_ext,
                                   xt::pyarray<double>& ebqe_kappa_phi_ext,
                                   const xt::pyarray<double>& ebqe_vos_ext,
                                   const xt::pyarray<double>& ebqe_turb_var_0,
                                   const xt::pyarray<double>& ebqe_turb_var_1,
                                   xt::pyarray<int>& isDOFBoundary_p,
                                   xt::pyarray<int>& isDOFBoundary_u,
                                   xt::pyarray<int>& isDOFBoundary_v,
                                   xt::pyarray<int>& isDOFBoundary_w,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_p,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_u,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_v,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_w,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_u,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_v,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_w,
                                   xt::pyarray<double>& ebqe_bc_p_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mass_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_u_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_v_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_w_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_u_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_u_diff_ext,
                                   xt::pyarray<double>& ebqe_penalty_ext,
                                   xt::pyarray<double>& ebqe_bc_v_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_v_diff_ext,
                                   xt::pyarray<double>& ebqe_bc_w_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_w_diff_ext,
                                   xt::pyarray<double>& q_x,
                                   xt::pyarray<double>& q_velocity,
                                   xt::pyarray<double>& ebqe_velocity,
                                   xt::pyarray<double>& q_grad_u,
                                   xt::pyarray<double>& q_grad_v,
                                   xt::pyarray<double>& q_grad_w,
                                   xt::pyarray<double>& q_divU,
                                   xt::pyarray<double>& ebqe_grad_u,
                                   xt::pyarray<double>& ebqe_grad_v,
                                   xt::pyarray<double>& ebqe_grad_w,
                                   xt::pyarray<double>& flux,
                                   xt::pyarray<double>& elementResidual_p,
                                   xt::pyarray<int>& elementFlags,
                                   xt::pyarray<int>& boundaryFlags,
                                   xt::pyarray<double>& barycenters,
                                   xt::pyarray<double>& wettedAreas,
                                   xt::pyarray<double>& netForces_p,
                                   xt::pyarray<double>& netForces_v,
                                   xt::pyarray<double>& netMoments,
                                   xt::pyarray<double>& q_rho,
                                   xt::pyarray<double>& ebqe_rho,
                                   xt::pyarray<double>& q_nu,
                                   xt::pyarray<double>& ebqe_nu,
                                   int nParticles,
                                   double particle_epsFact,
                                   double particle_alpha,
                                   double particle_beta,
                                   double particle_penalty_constant,
                                   xt::pyarray<double>& particle_signed_distances,
                                   xt::pyarray<double>& particle_signed_distance_normals,
                                   xt::pyarray<double>& particle_velocities,
                                   xt::pyarray<double>& particle_centroids,
                                   xt::pyarray<double>& particle_netForces,
                                   xt::pyarray<double>& particle_netMoments,
                                   xt::pyarray<double>& particle_surfaceArea,
                                   double particle_nitsche,
                                   int use_ball_as_particle,
                                   xt::pyarray<double>& ball_center,
                                   xt::pyarray<double>& ball_radius,
                                   xt::pyarray<double>& ball_velocity,
                                   xt::pyarray<double>& ball_angular_velocity,
                                   xt::pyarray<double>& phisError,
                                   xt::pyarray<double>& phisErrorNodal,
                                   int USE_SUPG,
                                   int ARTIFICIAL_VISCOSITY,
                                   double cMax,
                                   double cE,
                                   int MULTIPLY_EXTERNAL_FORCE_BY_DENSITY,
                                   xt::pyarray<double>& forcex,
                                   xt::pyarray<double>& forcey,
                                   xt::pyarray<double>& forcez,
                                   int KILL_PRESSURE_TERM,
                                   double dt,
                                   xt::pyarray<double>& quantDOFs,
                                   int MATERIAL_PARAMETERS_AS_FUNCTION,
                                   xt::pyarray<double>& density_as_function,
                                   xt::pyarray<double>& dynamic_viscosity_as_function,
                                   xt::pyarray<double>& ebqe_density_as_function,
                                   xt::pyarray<double>& ebqe_dynamic_viscosity_as_function,
                                   double order_polynomial,
                                   xt::pyarray<double>& isActiveDOF,
                                   int USE_SBM,
                                   xt::pyarray<double>& ncDrag,
                                   xt::pyarray<double>& betaDrag,
                                   xt::pyarray<double>& vos_vel_nodes,
                                   // For edge based dissipation
				   xt::pyarray<double>&  entropyResidualPerNode,
				   xt::pyarray<double>&  laggedEntropyResidualPerNode,
				   xt::pyarray<double>&  uStar_dMatrix,
				   xt::pyarray<double>&  vStar_dMatrix,
				   xt::pyarray<double>&  wStar_dMatrix,
				   int numDOFs_1D,
				   int NNZ_1D,
				   xt::pyarray<int>& csrRowIndeces_1D, xt::pyarray<int>& csrColumnOffsets_1D,
				   xt::pyarray<int>& rowptr_1D, xt::pyarray<int>& colind_1D,
				   xt::pyarray<double>& isBoundary_1D,
				   // int by parts pressure
				   int INT_BY_PARTS_PRESSURE,
                                   bool useExact
				   )=0;

    virtual void calculateJacobian(//element
                                   xt::pyarray<double>& mesh_trial_ref,
                                   xt::pyarray<double>& mesh_grad_trial_ref,
                                   xt::pyarray<double>& mesh_dof,
                                   xt::pyarray<double>& mesh_velocity_dof,
                                   double MOVING_DOMAIN,
                                   double PSTAB,
                                   xt::pyarray<int>& mesh_l2g,
                                   xt::pyarray<double>& x_ref,
                                   xt::pyarray<double>& dV_ref,
                                   xt::pyarray<double>& p_trial_ref,
                                   xt::pyarray<double>& p_grad_trial_ref,
                                   xt::pyarray<double>& p_test_ref,
                                   xt::pyarray<double>& p_grad_test_ref,
                                   xt::pyarray<double>& q_p,
                                   xt::pyarray<double>& q_grad_p,
                                   xt::pyarray<double>& ebqe_p,
                                   xt::pyarray<double>& ebqe_grad_p,
                                   xt::pyarray<double>& vel_trial_ref,
                                   xt::pyarray<double>& vel_grad_trial_ref,
                                   xt::pyarray<double>& vel_hess_trial_ref,
                                   xt::pyarray<double>& vel_test_ref,
                                   xt::pyarray<double>& vel_grad_test_ref,
                                   //element boundary
                                   xt::pyarray<double>& mesh_trial_trace_ref,
                                   xt::pyarray<double>& mesh_grad_trial_trace_ref,
                                   xt::pyarray<double>& dS_ref,
                                   xt::pyarray<double>& p_trial_trace_ref,
                                   xt::pyarray<double>& p_grad_trial_trace_ref,
                                   xt::pyarray<double>& p_test_trace_ref,
                                   xt::pyarray<double>& p_grad_test_trace_ref,
                                   xt::pyarray<double>& vel_trial_trace_ref,
                                   xt::pyarray<double>& vel_grad_trial_trace_ref,
                                   xt::pyarray<double>& vel_test_trace_ref,
                                   xt::pyarray<double>& vel_grad_test_trace_ref,
                                   xt::pyarray<double>& normal_ref,
                                   xt::pyarray<double>& boundaryJac_ref,
                                   //physics
                                   double eb_adjoint_sigma,
                                   xt::pyarray<double>& elementDiameter,
                                   xt::pyarray<double>& nodeDiametersArray,
                                   double hFactor,
                                   int nElements_global,
                                   int nElements_owned,
                                   int nElementBoundaries_global,
                                   int nElementBoundaries_owned,
                                   int nNodes_owned,
                                   double useRBLES,
                                   double useMetrics,
                                   double alphaBDF,
                                   double epsFact_rho,
                                   double epsFact_mu,
                                   double sigma,
                                   double rho_0,
                                   double nu_0,
                                   double rho_1,
                                   double nu_1,
                                   double smagorinskyConstant,
                                   int turbulenceClosureModel,
                                   double Ct_sge,
                                   double Cd_sge,
                                   double C_dg,
                                   double C_b,
                                   //VRANS
                                   const xt::pyarray<double>& eps_solid,
                                   const xt::pyarray<double>& ebq_global_phi_solid,
                                   const xt::pyarray<double>& ebq_global_grad_phi_solid,
                                   const xt::pyarray<double>& ebq_particle_velocity_solid,
                                         xt::pyarray<double>& phi_solid_nodes,
                                   const xt::pyarray<double>& phi_solid,
                                   const xt::pyarray<double>& q_velocity_solid,
                                   const xt::pyarray<double>& q_velocityStar_solid,
                                   const xt::pyarray<double>& q_vos,
                                   const xt::pyarray<double>& q_dvos_dt,
                                   const xt::pyarray<double>& q_grad_vos,
                                   const xt::pyarray<double>& q_dragAlpha,
                                   const xt::pyarray<double>& q_dragBeta,
                                   const xt::pyarray<double>& q_mass_source,
                                   const xt::pyarray<double>& q_turb_var_0,
                                   const xt::pyarray<double>& q_turb_var_1,
                                   const xt::pyarray<double>& q_turb_var_grad_0,
                                   xt::pyarray<int>& p_l2g,
                                   xt::pyarray<int>& vel_l2g,
                                   xt::pyarray<double>& p_dof, xt::pyarray<double>& u_dof, xt::pyarray<double>& v_dof, xt::pyarray<double>& w_dof,
                                   xt::pyarray<double>& g,
                                   const double useVF,
                                   xt::pyarray<double>& vf,
                                   xt::pyarray<double>& phi,
                                   xt::pyarray<double>& phi_dof,
                                   xt::pyarray<double>& normal_phi,
                                   xt::pyarray<double>& kappa_phi,
                                   xt::pyarray<double>& q_mom_u_acc_beta_bdf, xt::pyarray<double>& q_mom_v_acc_beta_bdf, xt::pyarray<double>& q_mom_w_acc_beta_bdf,
                                   xt::pyarray<double>& q_dV,
                                   xt::pyarray<double>& q_dV_last,
                                   xt::pyarray<double>& q_velocity_sge,
                                   xt::pyarray<double>& ebqe_velocity_star,
                                   xt::pyarray<double>& q_cfl,
                                   xt::pyarray<double>& q_numDiff_u_last, xt::pyarray<double>& q_numDiff_v_last, xt::pyarray<double>& q_numDiff_w_last,
                                   xt::pyarray<int>& sdInfo_u_u_rowptr, xt::pyarray<int>& sdInfo_u_u_colind,
                                   xt::pyarray<int>& sdInfo_u_v_rowptr, xt::pyarray<int>& sdInfo_u_v_colind,
                                   xt::pyarray<int>& sdInfo_u_w_rowptr, xt::pyarray<int>& sdInfo_u_w_colind,
                                   xt::pyarray<int>& sdInfo_v_v_rowptr, xt::pyarray<int>& sdInfo_v_v_colind,
                                   xt::pyarray<int>& sdInfo_v_u_rowptr, xt::pyarray<int>& sdInfo_v_u_colind,
                                   xt::pyarray<int>& sdInfo_v_w_rowptr, xt::pyarray<int>& sdInfo_v_w_colind,
                                   xt::pyarray<int>& sdInfo_w_w_rowptr, xt::pyarray<int>& sdInfo_w_w_colind,
                                   xt::pyarray<int>& sdInfo_w_u_rowptr, xt::pyarray<int>& sdInfo_w_u_colind,
                                   xt::pyarray<int>& sdInfo_w_v_rowptr, xt::pyarray<int>& sdInfo_w_v_colind,
                                   xt::pyarray<int>& csrRowIndeces_p_p, xt::pyarray<int>& csrColumnOffsets_p_p,
                                   xt::pyarray<int>& csrRowIndeces_p_u, xt::pyarray<int>& csrColumnOffsets_p_u,
                                   xt::pyarray<int>& csrRowIndeces_p_v, xt::pyarray<int>& csrColumnOffsets_p_v,
                                   xt::pyarray<int>& csrRowIndeces_p_w, xt::pyarray<int>& csrColumnOffsets_p_w,
                                   xt::pyarray<int>& csrRowIndeces_u_p, xt::pyarray<int>& csrColumnOffsets_u_p,
                                   xt::pyarray<int>& csrRowIndeces_u_u, xt::pyarray<int>& csrColumnOffsets_u_u,
                                   xt::pyarray<int>& csrRowIndeces_u_v, xt::pyarray<int>& csrColumnOffsets_u_v,
                                   xt::pyarray<int>& csrRowIndeces_u_w, xt::pyarray<int>& csrColumnOffsets_u_w,
                                   xt::pyarray<int>& csrRowIndeces_v_p, xt::pyarray<int>& csrColumnOffsets_v_p,
                                   xt::pyarray<int>& csrRowIndeces_v_u, xt::pyarray<int>& csrColumnOffsets_v_u,
                                   xt::pyarray<int>& csrRowIndeces_v_v, xt::pyarray<int>& csrColumnOffsets_v_v,
                                   xt::pyarray<int>& csrRowIndeces_v_w, xt::pyarray<int>& csrColumnOffsets_v_w,
                                   xt::pyarray<int>& csrRowIndeces_w_p, xt::pyarray<int>& csrColumnOffsets_w_p,
                                   xt::pyarray<int>& csrRowIndeces_w_u, xt::pyarray<int>& csrColumnOffsets_w_u,
                                   xt::pyarray<int>& csrRowIndeces_w_v, xt::pyarray<int>& csrColumnOffsets_w_v,
                                   xt::pyarray<int>& csrRowIndeces_w_w, xt::pyarray<int>& csrColumnOffsets_w_w,
                                   xt::pyarray<double>& globalJacobian,
                                   int nExteriorElementBoundaries_global,
                                   xt::pyarray<int>& exteriorElementBoundariesArray,
                                   xt::pyarray<int>& elementBoundariesArray,
                                   xt::pyarray<int>& elementBoundaryElementsArray,
                                   xt::pyarray<int>& elementBoundaryLocalElementBoundariesArray,
                                   xt::pyarray<double>& ebqe_vf_ext,
                                   xt::pyarray<double>& bc_ebqe_vf_ext,
                                   xt::pyarray<double>& ebqe_phi_ext,
                                   xt::pyarray<double>& bc_ebqe_phi_ext,
                                   xt::pyarray<double>& ebqe_normal_phi_ext,
                                   xt::pyarray<double>& ebqe_kappa_phi_ext,
                                   //VRANS
                                   const xt::pyarray<double>& ebqe_vos_ext,
                                   const xt::pyarray<double>& ebqe_turb_var_0,
                                   const xt::pyarray<double>& ebqe_turb_var_1,
                                   //VRANS end
                                   xt::pyarray<int>& isDOFBoundary_p,
                                   xt::pyarray<int>& isDOFBoundary_u,
                                   xt::pyarray<int>& isDOFBoundary_v,
                                   xt::pyarray<int>& isDOFBoundary_w,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_p,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_u,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_v,
                                   xt::pyarray<int>& isAdvectiveFluxBoundary_w,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_u,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_v,
                                   xt::pyarray<int>& isDiffusiveFluxBoundary_w,
                                   xt::pyarray<double>& ebqe_bc_p_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mass_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_u_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_v_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_mom_w_adv_ext,
                                   xt::pyarray<double>& ebqe_bc_u_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_u_diff_ext,
                                   xt::pyarray<double>& ebqe_penalty_ext,
                                   xt::pyarray<double>& ebqe_bc_v_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_v_diff_ext,
                                   xt::pyarray<double>& ebqe_bc_w_ext,
                                   xt::pyarray<double>& ebqe_bc_flux_w_diff_ext,
                                   xt::pyarray<int>& csrColumnOffsets_eb_p_p,
                                   xt::pyarray<int>& csrColumnOffsets_eb_p_u,
                                   xt::pyarray<int>& csrColumnOffsets_eb_p_v,
                                   xt::pyarray<int>& csrColumnOffsets_eb_p_w,
                                   xt::pyarray<int>& csrColumnOffsets_eb_u_p,
                                   xt::pyarray<int>& csrColumnOffsets_eb_u_u,
                                   xt::pyarray<int>& csrColumnOffsets_eb_u_v,
                                   xt::pyarray<int>& csrColumnOffsets_eb_u_w,
                                   xt::pyarray<int>& csrColumnOffsets_eb_v_p,
                                   xt::pyarray<int>& csrColumnOffsets_eb_v_u,
                                   xt::pyarray<int>& csrColumnOffsets_eb_v_v,
                                   xt::pyarray<int>& csrColumnOffsets_eb_v_w,
                                   xt::pyarray<int>& csrColumnOffsets_eb_w_p,
                                   xt::pyarray<int>& csrColumnOffsets_eb_w_u,
                                   xt::pyarray<int>& csrColumnOffsets_eb_w_v,
                                   xt::pyarray<int>& csrColumnOffsets_eb_w_w,
                                   xt::pyarray<int>& elementFlags,
                                   int nParticles,
                                   double particle_epsFact,
                                   double particle_alpha,
                                   double particle_beta,
                                   double particle_penalty_constant,
                                   xt::pyarray<double>& particle_signed_distances,
                                   xt::pyarray<double>& particle_signed_distance_normals,
                                   xt::pyarray<double>& particle_velocities,
                                   xt::pyarray<double>& particle_centroids,
                                   double particle_nitsche,
                                   int use_ball_as_particle,
                                   xt::pyarray<double>& ball_center,
                                   xt::pyarray<double>& ball_radius,
                                   xt::pyarray<double>& ball_velocity,
                                   xt::pyarray<double>& ball_angular_velocity,
                                   int USE_SUPG,
                                   int KILL_PRESSURE_TERM,
                                   double dt,
                                   int MATERIAL_PARAMETERS_AS_FUNCTION,
                                   xt::pyarray<double>& density_as_function,
                                   xt::pyarray<double>& dynamic_viscosity_as_function,
                                   xt::pyarray<double>& ebqe_density_as_function,
                                   xt::pyarray<double>& ebqe_dynamic_viscosity_as_function,
                                   int USE_SBM,
				   // For edge based dissipation
				   int ARTIFICIAL_VISCOSITY,
				   xt::pyarray<double>&  uStar_dMatrix,
				   xt::pyarray<double>&  vStar_dMatrix,
				   xt::pyarray<double>&  wStar_dMatrix,
				   int numDOFs_1D,
				   int offset_u, int offset_v, int offset_w,
				   int stride_u, int stride_v, int stride_w,
				   xt::pyarray<int>& rowptr_1D, xt::pyarray<int>& colind_1D,
				   xt::pyarray<int>& rowptr, xt::pyarray<int>& colind,
				   // int by parts pressure
				   int INT_BY_PARTS_PRESSURE,
                                   bool useExact)=0;
    virtual void calculateVelocityAverage(int nExteriorElementBoundaries_global,
                                          xt::pyarray<int>& exteriorElementBoundariesArray,
                                          int nInteriorElementBoundaries_global,
                                          xt::pyarray<int>& interiorElementBoundariesArray,
                                          xt::pyarray<int>& elementBoundaryElementsArray,
                                          xt::pyarray<int>& elementBoundaryLocalElementBoundariesArray,
                                          xt::pyarray<double>& mesh_dof,
                                          xt::pyarray<double>& mesh_velocity_dof,
                                          double MOVING_DOMAIN, //0 or 1
                                          xt::pyarray<int>& mesh_l2g,
                                          xt::pyarray<double>& mesh_trial_trace_ref,
                                          xt::pyarray<double>& mesh_grad_trial_trace_ref,
                                          xt::pyarray<double>& normal_ref,
                                          xt::pyarray<double>& boundaryJac_ref,
                                          xt::pyarray<int>& vel_l2g,
                                          xt::pyarray<double>& u_dof,
                                          xt::pyarray<double>& v_dof,
                                          xt::pyarray<double>& w_dof,
                                          xt::pyarray<double>& vos_dof,
                                          xt::pyarray<double>& vel_trial_trace_ref,
                                          xt::pyarray<double>& ebqe_velocity,
                                          xt::pyarray<double>& velocityAverage) = 0;
    virtual void getBoundaryDOFs(xt::pyarray<double>& mesh_dof,
				 xt::pyarray<int>& mesh_l2g,
				 xt::pyarray<double>& mesh_trial_trace_ref,
				 xt::pyarray<double>& mesh_grad_trial_trace_ref,
				 xt::pyarray<double>& dS_ref,
				 xt::pyarray<double>& vel_test_trace_ref,
				 xt::pyarray<double>& normal_ref,
				 xt::pyarray<double>& boundaryJac_ref,
				 xt::pyarray<int>& vel_l2g,
				 int nExteriorElementBoundaries_global,
				 xt::pyarray<int>& exteriorElementBoundariesArray,
				 xt::pyarray<int>& elementBoundaryElementsArray,
				 xt::pyarray<int>& elementBoundaryLocalElementBoundariesArray,
				 xt::pyarray<double>& isBoundary_1D)=0;
  };

  cppRANS3PF_base* newRANS3PF(int nSpaceIn,
                                     int nQuadraturePoints_elementIn,
                                     int nDOF_mesh_trial_elementIn,
                                     int nDOF_trial_elementIn,
                                     int nDOF_test_elementIn,
                                     int nQuadraturePoints_elementBoundaryIn,
                                     int CompKernelFlag,
                                     double aDarcy,
                                     double betaForch,
                                     double grain,
                                     double packFraction,
                                     double packMargin,
                                     double maxFraction,
                                     double frFraction,
                                     double sigmaC,
                                     double C3e,
                                     double C4e,
                                     double eR,
                                     double fContact,
                                     double mContact,
                                     double nContact,
                                     double angFriction,
                                     double vos_limiter,
                                     double mu_fr_limiter
                                      );
} //proteus

#endif
