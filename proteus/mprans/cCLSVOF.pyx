import numpy
cimport numpy
from proteus import *
from proteus.Transport import *
from proteus.Transport import OneLevelTransport

cdef extern from "CLSVOF.h" namespace "proteus":
    cdef cppclass CLSVOF_base:
        void calculateResidual_MCorr_with_VOF(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
		               double sc_uref, double sc_alpha,
                               #VRANS
                               double* q_porosity,
                               double* porosity_dof,
                               #
                               int* u_l2g, 
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof,
			       double* u_dof_old,
			       double* uStar_dof,
                               double* velocity,
                               double* q_m,
                               double* q_u,
                               double* q_m_betaBDF,
                               double* q_dV,
                               double* q_dV_last,
                               double* cfl,
			       double* edge_based_cfl,
                               double* q_numDiff_u, 
                               double* q_numDiff_u_last, 
                               int offset_u, int stride_u, 
                               double* globalResidual,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               double* ebqe_phi,double epsFact,
                               double* ebqe_u,
                               double* ebqe_flux,
			       # PARAMETERS FOR EDGE VISCOSITY
			       int numDOFs,
			       int* csrRowIndeces_CellLoops,
			       int* csrColumnOffsets_CellLoops,
			       int* csrColumnOffsets_eb_CellLoops,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy,
			       double* quantDOFs)
        void calculateResidual_MCorr_with_VOF2(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
		               double sc_uref, double sc_alpha,
                               #VRANS
                               double* q_porosity,
                               double* porosity_dof,
                               #
                               int* u_l2g, 
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof,
			       double* u_dof_old,
			       double* uStar_dof,
                               double* velocity,
                               double* q_m,
                               double* q_u,
                               double* q_m_betaBDF,
                               double* q_dV,
                               double* q_dV_last,
                               double* cfl,
			       double* edge_based_cfl,
                               double* q_numDiff_u, 
                               double* q_numDiff_u_last, 
                               int offset_u, int stride_u, 
                               double* globalResidual,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               double* ebqe_phi,double epsFact,
                               double* ebqe_u,
                               double* ebqe_flux,
			       # PARAMETERS FOR EDGE VISCOSITY
			       int numDOFs,
			       int* csrRowIndeces_CellLoops,
			       int* csrColumnOffsets_CellLoops,
			       int* csrColumnOffsets_eb_CellLoops,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy,
			       double* quantDOFs)
        void calculateResidual_MCorr_with_VOF3(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
		               double sc_uref, double sc_alpha,
                               #VRANS
                               double* q_porosity,
                               double* porosity_dof,
                               #
                               int* u_l2g, 
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof,
			       double* u_dof_old,
			       double* uStar_dof,
                               double* velocity,
                               double* q_m,
                               double* q_u,
                               double* q_m_betaBDF,
                               double* q_dV,
                               double* q_dV_last,
                               double* cfl,
			       double* edge_based_cfl,
                               double* q_numDiff_u, 
                               double* q_numDiff_u_last, 
                               int offset_u, int stride_u, 
                               double* globalResidual,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               double* ebqe_phi,double epsFact,
                               double* ebqe_u,
                               double* ebqe_flux,
			       # PARAMETERS FOR EDGE VISCOSITY
			       int numDOFs,
			       int* csrRowIndeces_CellLoops,
			       int* csrColumnOffsets_CellLoops,
			       int* csrColumnOffsets_eb_CellLoops,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy,
			       double* quantDOFs)
        void calculateResidual_MCorr_with_VOF4(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
		               double sc_uref, double sc_alpha,
                               #VRANS
                               double* q_porosity,
                               double* porosity_dof,
                               #
                               int* u_l2g, 
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof,
			       double* u_dof_old,
			       double* uStar_dof,
                               double* velocity,
                               double* q_m,
                               double* q_u,
                               double* q_m_betaBDF,
                               double* q_dV,
                               double* q_dV_last,
                               double* cfl,
			       double* edge_based_cfl,
                               double* q_numDiff_u, 
                               double* q_numDiff_u_last, 
                               int offset_u, int stride_u, 
                               double* globalResidual,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               double* ebqe_phi,double epsFact,
                               double* ebqe_u,
                               double* ebqe_flux,
			       # PARAMETERS FOR EDGE VISCOSITY
			       int numDOFs,
			       int* csrRowIndeces_CellLoops,
			       int* csrColumnOffsets_CellLoops,
			       int* csrColumnOffsets_eb_CellLoops,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy,
			       double* quantDOFs)
        void calculateRhsL2p(double* mesh_trial_ref,
                                      double* mesh_grad_trial_ref,
                                      double* mesh_dof,
                                      int* mesh_l2g,
                                      double* dV_ref,                                 
                                      double* u_trial_ref,
				      double* u_grad_trial_ref,
				      double* u_test_ref,
                                      int nElements_global,
                                      int* u_l2g,
				      double* elementDiameter,
                                      double* u_dof,
				      double* phiHat_dof,
				      double* phiExact_dof,
                                      int offset_u, int stride_u, 
				      double* globalResidual,
				      double* global_mass_error,
				      double* global_L2_interface,
				      double* global_H1_interface,
				      double* global_L2_Hinterface,
				      double* global_H1_Hinterface,
				      double* global_L2_u,
				      double* global_H1_u)
        void normalReconstruction(
	                               double* mesh_trial_ref,
				       double* mesh_grad_trial_ref,	
        			       double* mesh_dof,
                              	       int* mesh_l2g,
                               	       double* dV_ref,
                               	       double* u_trial_ref,
				       double* u_grad_trial_ref,
                               	       double* u_test_ref,
				       int nElements_global,
                               	       int* u_l2g,
				       double* elementDiameter,
                               	       double* phi_dof,
                               	       int offset_u, int stride_u, 
			       	       int numDOFs,
				       double* lumped_wx,
				       double* lumped_wy)
        void calculateJacobian_MCorr_with_VOF(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
                               #VRANS
                               double* q_porosity,
                               #
                               int* u_l2g,
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof, 
                               double* velocity,
                               double* q_m_betaBDF, 
                               double* cfl,
                               double* q_numDiff_u_last, 
			       int* csrRowIndeces_u_u,int* csrColumnOffsets_u_u,
                               double* globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               int* csrColumnOffsets_eb_u_u,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy)
        void calculateJacobian_MCorr_with_VOF2(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
                               #VRANS
                               double* q_porosity,
                               #
                               int* u_l2g,
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof, 
                               double* velocity,
                               double* q_m_betaBDF, 
                               double* cfl,
                               double* q_numDiff_u_last, 
			       int* csrRowIndeces_u_u,int* csrColumnOffsets_u_u,
                               double* globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               int* csrColumnOffsets_eb_u_u,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy)
        void calculateJacobian_MCorr_with_VOF4(double dt,
                               double* mesh_trial_ref,
                               double* mesh_grad_trial_ref,
                               double* mesh_dof,
                               double* mesh_velocity_dof,
                               double MOVING_DOMAIN,
                               int* mesh_l2g,
                               double* dV_ref,
                               double* u_trial_ref,
                               double* u_grad_trial_ref,
                               double* u_test_ref,
                               double* u_grad_test_ref,
                               double* mesh_trial_trace_ref,
                               double* mesh_grad_trial_trace_ref,
                               double* dS_ref,
                               double* u_trial_trace_ref,
                               double* u_grad_trial_trace_ref,
                               double* u_test_trace_ref,
                               double* u_grad_test_trace_ref,
                               double* normal_ref,
                               double* boundaryJac_ref,
                               int nElements_global,
			       double useMetrics, 
                               double alphaBDF,
                               int lag_shockCapturing,
                               double shockCapturingDiffusion,
                               #VRANS
                               double* q_porosity,
                               #
                               int* u_l2g,
                               double* elementDiameter,
			       int degree_polynomial,
                               double* u_dof, 
                               double* velocity,
                               double* q_m_betaBDF, 
                               double* cfl,
                               double* q_numDiff_u_last, 
			       int* csrRowIndeces_u_u,int* csrColumnOffsets_u_u,
                               double* globalJacobian,
                               int nExteriorElementBoundaries_global,
                               int* exteriorElementBoundariesArray,
                               int* elementBoundaryElementsArray,
                               int* elementBoundaryLocalElementBoundariesArray,
                               double* ebqe_velocity_ext,
                               #VRANS
                               double* ebqe_porosity_ext,
                               #
                               int* isDOFBoundary_u,
                               double* ebqe_bc_u_ext,
                               int* isFluxBoundary_u,
                               double* ebqe_bc_flux_u_ext,
                               int* csrColumnOffsets_eb_u_u,
			       int useFullNewton,
			       double epsFactHeaviside,
			       double epsFactDirac,
			       double epsFactDiffusion,
			       double* phin_dof,
			       double* phiHat_dof,
			       double* lumped_wx,
			       double* lumped_wy)			       
    CLSVOF_base* newCLSVOF(int nSpaceIn,
                       int nQuadraturePoints_elementIn,
                       int nDOF_mesh_trial_elementIn,
                       int nDOF_trial_elementIn,
                       int nDOF_test_elementIn,
                       int nQuadraturePoints_elementBoundaryIn,
                       int CompKernelFlag)

cdef class cCLSVOF_base:
   cdef CLSVOF_base* thisptr
   def __cinit__(self,
                 int nSpaceIn,
                 int nQuadraturePoints_elementIn,
                 int nDOF_mesh_trial_elementIn,
                 int nDOF_trial_elementIn,
                 int nDOF_test_elementIn,
                 int nQuadraturePoints_elementBoundaryIn,
                 int CompKernelFlag):
       self.thisptr = newCLSVOF(nSpaceIn,
                             nQuadraturePoints_elementIn,
                             nDOF_mesh_trial_elementIn,
                             nDOF_trial_elementIn,
                             nDOF_test_elementIn,
                             nQuadraturePoints_elementBoundaryIn,
                             CompKernelFlag)
   def __dealloc__(self):
       del self.thisptr
   def calculateResidual_MCorr_with_VOF(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
			 double sc_uref, double sc_alpha,
                         #VRANS
                         numpy.ndarray q_porosity,
                         numpy.ndarray porosity_dof,
                         #
                         numpy.ndarray u_l2g, 
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof,
                 	 numpy.ndarray u_dof_old,
			 numpy.ndarray uStar_dof,
                         numpy.ndarray velocity,
                         numpy.ndarray q_m,
                         numpy.ndarray q_u,
                         numpy.ndarray q_m_betaBDF,
                         numpy.ndarray q_dV,
                         numpy.ndarray q_dV_last,
                         numpy.ndarray cfl,
                         numpy.ndarray edge_based_cfl,
                         numpy.ndarray q_numDiff_u, 
                         numpy.ndarray q_numDiff_u_last, 
                         int offset_u, int stride_u, 
                         numpy.ndarray globalResidual,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray ebqe_phi,double epsFact,
                         numpy.ndarray ebqe_u,
                         numpy.ndarray ebqe_flux,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_CellLoops,
			 numpy.ndarray csrColumnOffsets_CellLoops,
			 numpy.ndarray csrColumnOffsets_eb_CellLoops,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
		 	 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy,
			 numpy.ndarray quantDOFs):	
       self.thisptr.calculateResidual_MCorr_with_VOF(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
			               sc_uref, sc_alpha,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       <double*> porosity_dof.data,
                                       #
                                       <int*> u_l2g.data, 
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data,
				       <double*> u_dof_old.data,
				       <double*> uStar_dof.data,
                                       <double*> velocity.data,
                                       <double*> q_m.data,
                                       <double*> q_u.data,
                                       <double*> q_m_betaBDF.data,
                                       <double*> q_dV.data,
                                       <double*> q_dV_last.data,
                                       <double*> cfl.data,
                                       <double*> edge_based_cfl.data,
                                       <double*> q_numDiff_u.data, 
                                       <double*> q_numDiff_u_last.data, 
                                       offset_u, stride_u, 
                                       <double*> globalResidual.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <double*> ebqe_phi.data,
                                       epsFact,
                                       <double*> ebqe_u.data,
                                       <double*> ebqe_flux.data,
				       numDOFs,
				       <int*> csrRowIndeces_CellLoops.data,
				       <int*> csrColumnOffsets_CellLoops.data,
				       <int*> csrColumnOffsets_eb_CellLoops.data,
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
				       epsFactDiffusion,
				       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data,
				       <double*> quantDOFs.data)
   def calculateResidual_MCorr_with_VOF2(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
			 double sc_uref, double sc_alpha,
                         #VRANS
                         numpy.ndarray q_porosity,
                         numpy.ndarray porosity_dof,
                         #
                         numpy.ndarray u_l2g, 
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof,
                 	 numpy.ndarray u_dof_old,
			 numpy.ndarray uStar_dof,
                         numpy.ndarray velocity,
                         numpy.ndarray q_m,
                         numpy.ndarray q_u,
                         numpy.ndarray q_m_betaBDF,
                         numpy.ndarray q_dV,
                         numpy.ndarray q_dV_last,
                         numpy.ndarray cfl,
                         numpy.ndarray edge_based_cfl,
                         numpy.ndarray q_numDiff_u, 
                         numpy.ndarray q_numDiff_u_last, 
                         int offset_u, int stride_u, 
                         numpy.ndarray globalResidual,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray ebqe_phi,double epsFact,
                         numpy.ndarray ebqe_u,
                         numpy.ndarray ebqe_flux,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_CellLoops,
			 numpy.ndarray csrColumnOffsets_CellLoops,
			 numpy.ndarray csrColumnOffsets_eb_CellLoops,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
		 	 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy,
			 numpy.ndarray quantDOFs):	
       self.thisptr.calculateResidual_MCorr_with_VOF2(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
			               sc_uref, sc_alpha,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       <double*> porosity_dof.data,
                                       #
                                       <int*> u_l2g.data, 
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data,
				       <double*> u_dof_old.data,
				       <double*> uStar_dof.data,
                                       <double*> velocity.data,
                                       <double*> q_m.data,
                                       <double*> q_u.data,
                                       <double*> q_m_betaBDF.data,
                                       <double*> q_dV.data,
                                       <double*> q_dV_last.data,
                                       <double*> cfl.data,
                                       <double*> edge_based_cfl.data,
                                       <double*> q_numDiff_u.data, 
                                       <double*> q_numDiff_u_last.data, 
                                       offset_u, stride_u, 
                                       <double*> globalResidual.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <double*> ebqe_phi.data,
                                       epsFact,
                                       <double*> ebqe_u.data,
                                       <double*> ebqe_flux.data,
				       numDOFs,
				       <int*> csrRowIndeces_CellLoops.data,
				       <int*> csrColumnOffsets_CellLoops.data,
				       <int*> csrColumnOffsets_eb_CellLoops.data,
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
				       epsFactDiffusion,
				       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data,
				       <double*> quantDOFs.data)
   def calculateResidual_MCorr_with_VOF3(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
			 double sc_uref, double sc_alpha,
                         #VRANS
                         numpy.ndarray q_porosity,
                         numpy.ndarray porosity_dof,
                         #
                         numpy.ndarray u_l2g, 
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof,
                 	 numpy.ndarray u_dof_old,
			 numpy.ndarray uStar_dof,
                         numpy.ndarray velocity,
                         numpy.ndarray q_m,
                         numpy.ndarray q_u,
                         numpy.ndarray q_m_betaBDF,
                         numpy.ndarray q_dV,
                         numpy.ndarray q_dV_last,
                         numpy.ndarray cfl,
                         numpy.ndarray edge_based_cfl,
                         numpy.ndarray q_numDiff_u, 
                         numpy.ndarray q_numDiff_u_last, 
                         int offset_u, int stride_u, 
                         numpy.ndarray globalResidual,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray ebqe_phi,double epsFact,
                         numpy.ndarray ebqe_u,
                         numpy.ndarray ebqe_flux,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_CellLoops,
			 numpy.ndarray csrColumnOffsets_CellLoops,
			 numpy.ndarray csrColumnOffsets_eb_CellLoops,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
		 	 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy,
			 numpy.ndarray quantDOFs):	
       self.thisptr.calculateResidual_MCorr_with_VOF3(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
			               sc_uref, sc_alpha,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       <double*> porosity_dof.data,
                                       #
                                       <int*> u_l2g.data, 
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data,
				       <double*> u_dof_old.data,
				       <double*> uStar_dof.data,
                                       <double*> velocity.data,
                                       <double*> q_m.data,
                                       <double*> q_u.data,
                                       <double*> q_m_betaBDF.data,
                                       <double*> q_dV.data,
                                       <double*> q_dV_last.data,
                                       <double*> cfl.data,
                                       <double*> edge_based_cfl.data,
                                       <double*> q_numDiff_u.data, 
                                       <double*> q_numDiff_u_last.data, 
                                       offset_u, stride_u, 
                                       <double*> globalResidual.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <double*> ebqe_phi.data,
                                       epsFact,
                                       <double*> ebqe_u.data,
                                       <double*> ebqe_flux.data,
				       numDOFs,
				       <int*> csrRowIndeces_CellLoops.data,
				       <int*> csrColumnOffsets_CellLoops.data,
				       <int*> csrColumnOffsets_eb_CellLoops.data,
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
				       epsFactDiffusion,
				       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data,
				       <double*> quantDOFs.data)
   def calculateResidual_MCorr_with_VOF4(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
			 double sc_uref, double sc_alpha,
                         #VRANS
                         numpy.ndarray q_porosity,
                         numpy.ndarray porosity_dof,
                         #
                         numpy.ndarray u_l2g, 
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof,
                 	 numpy.ndarray u_dof_old,
			 numpy.ndarray uStar_dof,
                         numpy.ndarray velocity,
                         numpy.ndarray q_m,
                         numpy.ndarray q_u,
                         numpy.ndarray q_m_betaBDF,
                         numpy.ndarray q_dV,
                         numpy.ndarray q_dV_last,
                         numpy.ndarray cfl,
                         numpy.ndarray edge_based_cfl,
                         numpy.ndarray q_numDiff_u, 
                         numpy.ndarray q_numDiff_u_last, 
                         int offset_u, int stride_u, 
                         numpy.ndarray globalResidual,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray ebqe_phi,double epsFact,
                         numpy.ndarray ebqe_u,
                         numpy.ndarray ebqe_flux,
			 int numDOFs,
			 numpy.ndarray csrRowIndeces_CellLoops,
			 numpy.ndarray csrColumnOffsets_CellLoops,
			 numpy.ndarray csrColumnOffsets_eb_CellLoops,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
		 	 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy,
			 numpy.ndarray quantDOFs):	
       self.thisptr.calculateResidual_MCorr_with_VOF4(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
			               sc_uref, sc_alpha,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       <double*> porosity_dof.data,
                                       #
                                       <int*> u_l2g.data, 
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data,
				       <double*> u_dof_old.data,
				       <double*> uStar_dof.data,
                                       <double*> velocity.data,
                                       <double*> q_m.data,
                                       <double*> q_u.data,
                                       <double*> q_m_betaBDF.data,
                                       <double*> q_dV.data,
                                       <double*> q_dV_last.data,
                                       <double*> cfl.data,
                                       <double*> edge_based_cfl.data,
                                       <double*> q_numDiff_u.data, 
                                       <double*> q_numDiff_u_last.data, 
                                       offset_u, stride_u, 
                                       <double*> globalResidual.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <double*> ebqe_phi.data,
                                       epsFact,
                                       <double*> ebqe_u.data,
                                       <double*> ebqe_flux.data,
				       numDOFs,
				       <int*> csrRowIndeces_CellLoops.data,
				       <int*> csrColumnOffsets_CellLoops.data,
				       <int*> csrColumnOffsets_eb_CellLoops.data,
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
				       epsFactDiffusion,
				       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data,
				       <double*> quantDOFs.data)
   def calculateRhsL2p(self, 				      
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
			 numpy.ndarray u_grad_trial_ref,			 
                         numpy.ndarray u_test_ref,			 
                         int nElements_global,
			 numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,			 
                         numpy.ndarray u_dof,
                         numpy.ndarray phiHat_dof,
                         numpy.ndarray phiExact_dof,			 
                         int offset_u, int stride_u, 
			 numpy.ndarray globalResidual):
        cdef double global_mass_error
        cdef double global_L2_interface
        cdef double global_H1_interface
        cdef double global_L2_Hinterface
        cdef double global_H1_Hinterface
        cdef double global_L2_u
        cdef double global_H1_u
        self.thisptr.calculateRhsL2p(
                                       <double*>mesh_trial_ref.data,
                                       <double*>mesh_grad_trial_ref.data,
                                       <double*>mesh_dof.data,
                                       <int*>mesh_l2g.data,
                                       <double*>dV_ref.data,
                                       <double*>u_trial_ref.data,
				       <double*>u_grad_trial_ref.data,
                                       <double*>u_test_ref.data,     
                                       nElements_global,
                                       <int*>u_l2g.data,
				       <double*>elementDiameter.data,
                                       <double*>u_dof.data,
                                       <double*>phiHat_dof.data,
                                       <double*>phiExact_dof.data,
                                       offset_u, 
                                       stride_u, 
				       <double*>globalResidual.data,
				       &global_mass_error,
				       &global_L2_interface,
				       &global_H1_interface,
				       &global_L2_Hinterface,
				       &global_H1_Hinterface,
				       &global_L2_u,
				       &global_H1_u)
        return(global_mass_error,
		global_L2_interface,
		global_H1_interface,
		global_L2_Hinterface,
		global_H1_Hinterface,
		global_L2_u,
		global_H1_u)	
   def normalReconstruction(self,
				  numpy.ndarray mesh_trial_ref,
				  numpy.ndarray mesh_grad_trial_ref,
                         	  numpy.ndarray mesh_dof,
                         	  numpy.ndarray mesh_l2g,
                         	  numpy.ndarray dV_ref,
                         	  numpy.ndarray u_trial_ref,
				  numpy.ndarray u_grad_trial_ref,
                         	  numpy.ndarray u_test_ref,
                         	  int nElements_global,
                         	  numpy.ndarray u_l2g,
				  numpy.ndarray elementDiameter,
                         	  numpy.ndarray phi_dof,
                         	  int offset_u, int stride_u, 
			 	  int numDOFs,
			 	  numpy.ndarray lumped_wx,
			 	  numpy.ndarray lumped_wy):				  
       self.thisptr.normalReconstruction(
					       <double*> mesh_trial_ref.data,
					       <double*> mesh_grad_trial_ref.data,
                                       	       <double*> mesh_dof.data,
                                       	       <int*> mesh_l2g.data,
                                       	       <double*> dV_ref.data,
                                       	       <double*> u_trial_ref.data,
					       <double*> u_grad_trial_ref.data,
                                       	       <double*> u_test_ref.data,
                                       	       nElements_global,
                                       	       <int*> u_l2g.data,
					       <double*> elementDiameter.data, 
                                       	       <double*> phi_dof.data,
                                       	       offset_u, stride_u, 
				       	       numDOFs,
				       	       <double*> lumped_wx.data,
				       	       <double*> lumped_wy.data)
   def calculateJacobian_MCorr_with_VOF(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
                         #VRANS
                         numpy.ndarray q_porosity,
                         #
                         numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof, 
                         numpy.ndarray velocity,
                         numpy.ndarray q_m_betaBDF, 
                         numpy.ndarray cfl,
                         numpy.ndarray q_numDiff_u_last, 
			 numpy.ndarray csrRowIndeces_u_u,numpy.ndarray csrColumnOffsets_u_u,
                         globalJacobian,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray csrColumnOffsets_eb_u_u,
			 useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
			 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy):
       cdef numpy.ndarray rowptr,colind,globalJacobian_a
       (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
       self.thisptr.calculateJacobian_MCorr_with_VOF(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       #
                                       <int*> u_l2g.data,
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data, 
                                       <double*> velocity.data,
                                       <double*> q_m_betaBDF.data, 
                                       <double*> cfl.data,
                                       <double*> q_numDiff_u_last.data, 
 				       <int*> csrRowIndeces_u_u.data,<int*> csrColumnOffsets_u_u.data,
                                       <double*> globalJacobian_a.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <int*> csrColumnOffsets_eb_u_u.data, 
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
			       	       epsFactDiffusion,
			 	       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data)
   def calculateJacobian_MCorr_with_VOF2(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
                         #VRANS
                         numpy.ndarray q_porosity,
                         #
                         numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof, 
                         numpy.ndarray velocity,
                         numpy.ndarray q_m_betaBDF, 
                         numpy.ndarray cfl,
                         numpy.ndarray q_numDiff_u_last, 
			 numpy.ndarray csrRowIndeces_u_u,numpy.ndarray csrColumnOffsets_u_u,
                         globalJacobian,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray csrColumnOffsets_eb_u_u,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
			 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy):
       cdef numpy.ndarray rowptr,colind,globalJacobian_a
       (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
       self.thisptr.calculateJacobian_MCorr_with_VOF2(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       #
                                       <int*> u_l2g.data,
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data, 
                                       <double*> velocity.data,
                                       <double*> q_m_betaBDF.data, 
                                       <double*> cfl.data,
                                       <double*> q_numDiff_u_last.data, 
 				       <int*> csrRowIndeces_u_u.data,<int*> csrColumnOffsets_u_u.data,
                                       <double*> globalJacobian_a.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <int*> csrColumnOffsets_eb_u_u.data, 
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
			       	       epsFactDiffusion,
			 	       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data)
   def calculateJacobian_MCorr_with_VOF4(self,
                         double dt,
                         numpy.ndarray mesh_trial_ref,
                         numpy.ndarray mesh_grad_trial_ref,
                         numpy.ndarray mesh_dof,
                         numpy.ndarray mesh_velocity_dof,
                         double MOVING_DOMAIN,
                         numpy.ndarray mesh_l2g,
                         numpy.ndarray dV_ref,
                         numpy.ndarray u_trial_ref,
                         numpy.ndarray u_grad_trial_ref,
                         numpy.ndarray u_test_ref,
                         numpy.ndarray u_grad_test_ref,
                         numpy.ndarray mesh_trial_trace_ref,
                         numpy.ndarray mesh_grad_trial_trace_ref,
                         numpy.ndarray dS_ref,
                         numpy.ndarray u_trial_trace_ref,
                         numpy.ndarray u_grad_trial_trace_ref,
                         numpy.ndarray u_test_trace_ref,
                         numpy.ndarray u_grad_test_trace_ref,
                         numpy.ndarray normal_ref,
                         numpy.ndarray boundaryJac_ref,
                         int nElements_global,
			 double useMetrics, 
                         double alphaBDF,
                         int lag_shockCapturing,
                         double shockCapturingDiffusion,
                         #VRANS
                         numpy.ndarray q_porosity,
                         #
                         numpy.ndarray u_l2g,
                         numpy.ndarray elementDiameter,
			 int degree_polynomial,
                         numpy.ndarray u_dof, 
                         numpy.ndarray velocity,
                         numpy.ndarray q_m_betaBDF, 
                         numpy.ndarray cfl,
                         numpy.ndarray q_numDiff_u_last, 
			 numpy.ndarray csrRowIndeces_u_u,numpy.ndarray csrColumnOffsets_u_u,
                         globalJacobian,
                         int nExteriorElementBoundaries_global,
                         numpy.ndarray exteriorElementBoundariesArray,
                         numpy.ndarray elementBoundaryElementsArray,
                         numpy.ndarray elementBoundaryLocalElementBoundariesArray,
                         numpy.ndarray ebqe_velocity_ext,
                         #VRANS
                         numpy.ndarray ebqe_porosity_ext,
                         #
                         numpy.ndarray isDOFBoundary_u,
                         numpy.ndarray ebqe_bc_u_ext,
                         numpy.ndarray isFluxBoundary_u,
                         numpy.ndarray ebqe_bc_flux_u_ext,
                         numpy.ndarray csrColumnOffsets_eb_u_u,
			 int useFullNewton,
			 double epsFactHeaviside,
			 double epsFactDirac,
			 double epsFactDiffusion,
			 numpy.ndarray phin_dof,
			 numpy.ndarray phiHat_dof,
			 numpy.ndarray lumped_wx,
			 numpy.ndarray lumped_wy):
       cdef numpy.ndarray rowptr,colind,globalJacobian_a
       (rowptr,colind,globalJacobian_a) = globalJacobian.getCSRrepresentation()
       self.thisptr.calculateJacobian_MCorr_with_VOF4(dt, 
                                       <double*> mesh_trial_ref.data,
                                       <double*> mesh_grad_trial_ref.data,
                                       <double*> mesh_dof.data,
                                       <double*> mesh_velocity_dof.data,
                                       MOVING_DOMAIN,
                                       <int*> mesh_l2g.data,
                                       <double*> dV_ref.data,
                                       <double*> u_trial_ref.data,
                                       <double*> u_grad_trial_ref.data,
                                       <double*> u_test_ref.data,
                                       <double*> u_grad_test_ref.data,
                                       <double*> mesh_trial_trace_ref.data,
                                       <double*> mesh_grad_trial_trace_ref.data,
                                       <double*> dS_ref.data,
                                       <double*> u_trial_trace_ref.data,
                                       <double*> u_grad_trial_trace_ref.data,
                                       <double*> u_test_trace_ref.data,
                                       <double*> u_grad_test_trace_ref.data,
                                       <double*> normal_ref.data,
                                       <double*> boundaryJac_ref.data,
                                       nElements_global,
			               useMetrics, 
                                       alphaBDF,
                                       lag_shockCapturing,
                                       shockCapturingDiffusion,
                                       #VRANS
                                       <double*> q_porosity.data,
                                       #
                                       <int*> u_l2g.data,
                                       <double*> elementDiameter.data,
				       degree_polynomial,
                                       <double*> u_dof.data, 
                                       <double*> velocity.data,
                                       <double*> q_m_betaBDF.data, 
                                       <double*> cfl.data,
                                       <double*> q_numDiff_u_last.data, 
 				       <int*> csrRowIndeces_u_u.data,<int*> csrColumnOffsets_u_u.data,
                                       <double*> globalJacobian_a.data,
                                       nExteriorElementBoundaries_global,
                                       <int*> exteriorElementBoundariesArray.data,
                                       <int*> elementBoundaryElementsArray.data,
                                       <int*> elementBoundaryLocalElementBoundariesArray.data,
                                       <double*> ebqe_velocity_ext.data,
                                       #VRANS
                                       <double*> ebqe_porosity_ext.data,
                                       #
                                       <int*> isDOFBoundary_u.data,
                                       <double*> ebqe_bc_u_ext.data,
                                       <int*> isFluxBoundary_u.data,
                                       <double*> ebqe_bc_flux_u_ext.data,
                                       <int*> csrColumnOffsets_eb_u_u.data, 
				       useFullNewton,
				       epsFactHeaviside,
				       epsFactDirac,
			       	       epsFactDiffusion,
			 	       <double*> phin_dof.data,
				       <double*> phiHat_dof.data,
				       <double*> lumped_wx.data,
				       <double*> lumped_wy.data)