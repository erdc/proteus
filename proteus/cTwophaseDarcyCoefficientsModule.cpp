#include "Python.h"
#include "numpy/arrayobject.h"
#include "cTwophaseDarcyCoefficientsModule.h"
#include <iostream>
#define ND(p) ((PyArrayObject *)p)->nd
#define SHAPE(p) ((PyArrayObject *)p)->dimensions
#define DDATA(p) ((double *) (((PyArrayObject *)p)->data))
#define IDATA(p) ((int *) (((PyArrayObject *)p)->data))

extern "C"
{

  static PyObject *twophaseDarcy_fc_sd_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b;
    PyObject *rowptr,*colind;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw,  *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOdOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,&iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    //while debugging allow only one option
    //exponential for wetting phase
    assert(density_w_flag == 1);
    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_sd_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
											     IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(sw),
											     DDATA(psiw),
											     DDATA(mw),
											     DDATA(dmw),
											     DDATA(dmw_dpsiw),
											     DDATA(mn),
											     DDATA(dmn),
											     DDATA(dmn_dpsiw),
											     DDATA(psin),
											     DDATA(dpsin),
											     DDATA(dpsin_dpsiw),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dsw),
											     DDATA(aw),
											     DDATA(daw),
											     DDATA(daw_dpsiw),
											     DDATA(an),
											     DDATA(dan),
											     DDATA(dan_dpsiw));
	    break;
	  case 1:
	    twophaseDarcy_fc_sd_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
										       nPointsPerSimplex,
										       SHAPE(g)[0],
										       4,
										       IDATA(rowptr),
										       IDATA(colind),
										       IDATA(matType),
										       muw,
										       mun,
										       DDATA(omega),
										       DDATA(Kbar),
										       b,
										       DDATA(rwork_psk),
										       IDATA(iwork_psk),
										       DDATA(rwork_psk_tol),
										       DDATA(rwork_density_w),
										       DDATA(rwork_density_n),
										       DDATA(g),
										       DDATA(x),
										       DDATA(sw),
										       DDATA(psiw),
										       DDATA(mw),
										       DDATA(dmw),
										       DDATA(dmw_dpsiw),
										       DDATA(mn),
										       DDATA(dmn),
										       DDATA(dmn_dpsiw),
										       DDATA(psin),
										       DDATA(dpsin),
										       DDATA(dpsin_dpsiw),
										       DDATA(phi_psiw),
										       DDATA(dphi_psiw_dpsiw),
										       DDATA(phi_psin),
										       DDATA(dphi_psin_dpsiw),
										       DDATA(dphi_psin_dsw),
										       DDATA(aw),
										       DDATA(daw),
										       DDATA(daw_dpsiw),
										       DDATA(an),
										       DDATA(dan),
										       DDATA(dan_dpsiw));
	    break;
	  case 5:
	    twophaseDarcy_fc_sd_het_matType<PskSpline,ExponentialDensity,ExponentialDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     IDATA(iwork_psk)[1],
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
											     IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(sw),
											     DDATA(psiw),
											     DDATA(mw),
											     DDATA(dmw),
											     DDATA(dmw_dpsiw),
											     DDATA(mn),
											     DDATA(dmn),
											     DDATA(dmn_dpsiw),
											     DDATA(psin),
											     DDATA(dpsin),
											     DDATA(dpsin_dpsiw),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dsw),
											     DDATA(aw),
											     DDATA(daw),
											     DDATA(daw_dpsiw),
											     DDATA(an),
											     DDATA(dan),
											     DDATA(dan_dpsiw));
	    break;
	  default:
	    twophaseDarcy_fc_sd_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
											     IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(sw),
											     DDATA(psiw),
											     DDATA(mw),
											     DDATA(dmw),
											     DDATA(dmw_dpsiw),
											     DDATA(mn),
											     DDATA(dmn),
											     DDATA(dmn_dpsiw),
											     DDATA(psin),
											     DDATA(dpsin),
											     DDATA(dpsin_dpsiw),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dsw),
											     DDATA(aw),
											     DDATA(daw),
											     DDATA(daw_dpsiw),
											     DDATA(an),
											     DDATA(dan),
											     DDATA(dan_dpsiw));
	    break;
	  }
      }//exponential density for n
    else if (density_n_flag == 2) //nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_sd_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
										    nPointsPerSimplex,
										    SHAPE(g)[0],
										    2,
										    IDATA(rowptr),
										    IDATA(colind),
										    IDATA(matType),
										    muw,
										    mun,
										    DDATA(omega),
										    DDATA(Kbar),
										    b,
										    DDATA(rwork_psk),
										    IDATA(iwork_psk),
										    DDATA(rwork_psk_tol),
										    DDATA(rwork_density_w),
										    DDATA(rwork_density_n),
										    DDATA(g),
										    DDATA(x),
										    DDATA(sw),
										    DDATA(psiw),
										    DDATA(mw),
										    DDATA(dmw),
										    DDATA(dmw_dpsiw),
										    DDATA(mn),
										    DDATA(dmn),
										    DDATA(dmn_dpsiw),
										    DDATA(psin),
										    DDATA(dpsin),
										    DDATA(dpsin_dpsiw),
										    DDATA(phi_psiw),
										    DDATA(dphi_psiw_dpsiw),
										    DDATA(phi_psin),
										    DDATA(dphi_psin_dpsiw),
										    DDATA(dphi_psin_dsw),
										    DDATA(aw),
										    DDATA(daw),
										    DDATA(daw_dpsiw),
										    DDATA(an),
										    DDATA(dan),
										    DDATA(dan_dpsiw));
	    break;
	  case 1:
	    twophaseDarcy_fc_sd_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
										    nPointsPerSimplex,
										    SHAPE(g)[0],
										    4,
										    IDATA(rowptr),
										    IDATA(colind),
										    IDATA(matType),
										    muw,
										    mun,
										    DDATA(omega),
										    DDATA(Kbar),
										    b,
										    DDATA(rwork_psk),
										    IDATA(iwork_psk),
										    DDATA(rwork_psk_tol),
										    DDATA(rwork_density_w),
										    DDATA(rwork_density_n),
										    DDATA(g),
										    DDATA(x),
										    DDATA(sw),
										    DDATA(psiw),
										    DDATA(mw),
										    DDATA(dmw),
										    DDATA(dmw_dpsiw),
										    DDATA(mn),
										    DDATA(dmn),
										    DDATA(dmn_dpsiw),
										    DDATA(psin),
										    DDATA(dpsin),
										    DDATA(dpsin_dpsiw),
										    DDATA(phi_psiw),
										    DDATA(dphi_psiw_dpsiw),
										    DDATA(phi_psin),
										    DDATA(dphi_psin_dpsiw),
										    DDATA(dphi_psin_dsw),
										    DDATA(aw),
										    DDATA(daw),
										    DDATA(daw_dpsiw),
										    DDATA(an),
										    DDATA(dan),
										    DDATA(dan_dpsiw));
	    break;
	  case 5:
	    twophaseDarcy_fc_sd_het_matType<PskSpline,ExponentialDensity,IdealGasDensity>(nSimplex,
											  nPointsPerSimplex,
											  SHAPE(g)[0],
											  IDATA(iwork_psk)[1],
											  IDATA(rowptr),
											  IDATA(colind),
											  IDATA(matType),
											  muw,
											  mun,
											  DDATA(omega),
											  DDATA(Kbar),
											  b,
											  DDATA(rwork_psk),
											  IDATA(iwork_psk),
											  DDATA(rwork_psk_tol),
											  DDATA(rwork_density_w),
											  DDATA(rwork_density_n),
											  DDATA(g),
											  DDATA(x),
											  DDATA(sw),
											  DDATA(psiw),
											  DDATA(mw),
											  DDATA(dmw),
											  DDATA(dmw_dpsiw),
											  DDATA(mn),
											  DDATA(dmn),
											  DDATA(dmn_dpsiw),
											  DDATA(psin),
											  DDATA(dpsin),
											  DDATA(dpsin_dpsiw),
											  DDATA(phi_psiw),
											  DDATA(dphi_psiw_dpsiw),
											  DDATA(phi_psin),
											  DDATA(dphi_psin_dpsiw),
											  DDATA(dphi_psin_dsw),
											  DDATA(aw),
											  DDATA(daw),
											  DDATA(daw_dpsiw),
											  DDATA(an),
											  DDATA(dan),
											  DDATA(dan_dpsiw));
	    break;
	  default:
	    twophaseDarcy_fc_sd_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											  nPointsPerSimplex,
											  SHAPE(g)[0],
											  2,
											  IDATA(rowptr),
											  IDATA(colind),
											  IDATA(matType),
											  muw,
											  mun,
											  DDATA(omega),
											  DDATA(Kbar),
											  b,
											  DDATA(rwork_psk),
											  IDATA(iwork_psk),
											  DDATA(rwork_psk_tol),
											  DDATA(rwork_density_w),
											  DDATA(rwork_density_n),
											  DDATA(g),
											  DDATA(x),
											  DDATA(sw),
											  DDATA(psiw),
											  DDATA(mw),
											  DDATA(dmw),
											  DDATA(dmw_dpsiw),
											  DDATA(mn),
											  DDATA(dmn),
											  DDATA(dmn_dpsiw),
											  DDATA(psin),
											  DDATA(dpsin),
											  DDATA(dpsin_dpsiw),
											  DDATA(phi_psiw),
											  DDATA(dphi_psiw_dpsiw),
											  DDATA(phi_psin),
											  DDATA(dphi_psin_dpsiw),
											  DDATA(dphi_psin_dsw),
											  DDATA(aw),
											  DDATA(daw),
											  DDATA(daw_dpsiw),
											  DDATA(an),
											  DDATA(dan),
											  DDATA(dan_dpsiw));
	    break;
	  }
      }//constant density for n
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_fc_sd_het_matType_nonPotentialForm(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag,compressibilityFlag=0;
    double muw, mun, b;
    PyObject *rowptr,*colind;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw,  *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *fw, *dfw_dsw, *dfw_dpsiw, *fn, *dfn_dsw, *dfn_dpsiw, *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOdOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO|i",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
			 &fw,
			 &dfw_dsw,
			 &dfw_dpsiw,
			 &fn,
			 &dfn_dsw,
			 &dfn_dpsiw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw,
			 &compressibilityFlag)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    //while debugging allow only one option
    //exponential for wetting phase
    assert(density_w_flag == 1);
    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_sd_het_matType_nonPotentialForm<SimplePSK,ExponentialDensity,ExponentialDensity>(compressibilityFlag,nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
													      IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(sw),
											     DDATA(psiw),
											     DDATA(mw),
											     DDATA(dmw),
											     DDATA(dmw_dpsiw),
											     DDATA(mn),
											     DDATA(dmn),
											     DDATA(dmn_dpsiw),
											     DDATA(psin),
											     DDATA(dpsin),
											     DDATA(dpsin_dpsiw),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dsw),
											     DDATA(fw),
											     DDATA(dfw_dsw),
											     DDATA(dfw_dpsiw),
											     DDATA(fn),
											     DDATA(dfn_dsw),
											     DDATA(dfn_dpsiw),
											     DDATA(aw),
											     DDATA(daw),
											     DDATA(daw_dpsiw),
											     DDATA(an),
											     DDATA(dan),
											     DDATA(dan_dpsiw));
	    break;
	  case 1:
	    twophaseDarcy_fc_sd_het_matType_nonPotentialForm<VGM,ExponentialDensity,ExponentialDensity>(compressibilityFlag,nSimplex,
										       nPointsPerSimplex,
										       SHAPE(g)[0],
										       4,
										       IDATA(rowptr),
										       IDATA(colind),
										       IDATA(matType),
										       muw,
										       mun,
										       DDATA(omega),
										       DDATA(Kbar),
										       b,
													DDATA(rwork_psk),
													IDATA(iwork_psk),
										       DDATA(rwork_psk_tol),
										       DDATA(rwork_density_w),
										       DDATA(rwork_density_n),
										       DDATA(g),
										       DDATA(x),
										       DDATA(sw),
										       DDATA(psiw),
										       DDATA(mw),
										       DDATA(dmw),
										       DDATA(dmw_dpsiw),
										       DDATA(mn),
										       DDATA(dmn),
										       DDATA(dmn_dpsiw),
										       DDATA(psin),
										       DDATA(dpsin),
										       DDATA(dpsin_dpsiw),
										       DDATA(phi_psiw),
										       DDATA(dphi_psiw_dpsiw),
										       DDATA(phi_psin),
										       DDATA(dphi_psin_dpsiw),
										       DDATA(dphi_psin_dsw),
										       DDATA(fw),
										       DDATA(dfw_dsw),
										       DDATA(dfw_dpsiw),
										       DDATA(fn),
										       DDATA(dfn_dsw),
										       DDATA(dfn_dpsiw),
										       DDATA(aw),
										       DDATA(daw),
										       DDATA(daw_dpsiw),
										       DDATA(an),
										       DDATA(dan),
										       DDATA(dan_dpsiw));
	    break;
	  default:
	    twophaseDarcy_fc_sd_het_matType_nonPotentialForm<SimplePSK,ExponentialDensity,ExponentialDensity>(compressibilityFlag,nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
													      DDATA(rwork_psk),
													      IDATA(iwork_psk),
													      DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(sw),
											     DDATA(psiw),
											     DDATA(mw),
											     DDATA(dmw),
											     DDATA(dmw_dpsiw),
											     DDATA(mn),
											     DDATA(dmn),
											     DDATA(dmn_dpsiw),
											     DDATA(psin),
											     DDATA(dpsin),
											     DDATA(dpsin_dpsiw),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dsw),
											     DDATA(fw),
											     DDATA(dfw_dsw),
											     DDATA(dfw_dpsiw),
											     DDATA(fn),
											     DDATA(dfn_dsw),
											     DDATA(dfn_dpsiw),
											     DDATA(aw),
											     DDATA(daw),
											     DDATA(daw_dpsiw),
											     DDATA(an),
											     DDATA(dan),
											     DDATA(dan_dpsiw));
	    break;
	  }
      }//exponential density for n
    else if (density_n_flag == 2) //nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 1:
	    twophaseDarcy_fc_sd_het_matType_nonPotentialForm<VGM,ExponentialDensity,IdealGasDensity>(compressibilityFlag,nSimplex,
										    nPointsPerSimplex,
										    SHAPE(g)[0],
										    4,
										    IDATA(rowptr),
										    IDATA(colind),
										    IDATA(matType),
										    muw,
										    mun,
										    DDATA(omega),
										    DDATA(Kbar),
										    b,
												     DDATA(rwork_psk),
												     IDATA(iwork_psk),
												     DDATA(rwork_psk_tol),
										    DDATA(rwork_density_w),
										    DDATA(rwork_density_n),
										    DDATA(g),
										    DDATA(x),
										    DDATA(sw),
										    DDATA(psiw),
										    DDATA(mw),
										    DDATA(dmw),
										    DDATA(dmw_dpsiw),
										    DDATA(mn),
										    DDATA(dmn),
										    DDATA(dmn_dpsiw),
										    DDATA(psin),
										    DDATA(dpsin),
										    DDATA(dpsin_dpsiw),
										    DDATA(phi_psiw),
										    DDATA(dphi_psiw_dpsiw),
										    DDATA(phi_psin),
										    DDATA(dphi_psin_dpsiw),
										    DDATA(dphi_psin_dsw),
										    DDATA(fw),
										    DDATA(dfw_dsw),
										    DDATA(dfw_dpsiw),
										    DDATA(fn),
										    DDATA(dfn_dsw),
										    DDATA(dfn_dpsiw),
										    DDATA(aw),
										    DDATA(daw),
										    DDATA(daw_dpsiw),
										    DDATA(an),
										    DDATA(dan),
										    DDATA(dan_dpsiw));
	    break;
	  default:
	    twophaseDarcy_fc_sd_het_matType_nonPotentialForm<SimplePSK,ExponentialDensity,IdealGasDensity>(compressibilityFlag,nSimplex,
											  nPointsPerSimplex,
											  SHAPE(g)[0],
											  2,
											  IDATA(rowptr),
											  IDATA(colind),
											  IDATA(matType),
											  muw,
											  mun,
											  DDATA(omega),
											  DDATA(Kbar),
											  b,
													   DDATA(rwork_psk),
													   IDATA(iwork_psk),
													   DDATA(rwork_psk_tol),
											  DDATA(rwork_density_w),
											  DDATA(rwork_density_n),
											  DDATA(g),
											  DDATA(x),
											  DDATA(sw),
											  DDATA(psiw),
											  DDATA(mw),
											  DDATA(dmw),
											  DDATA(dmw_dpsiw),
											  DDATA(mn),
											  DDATA(dmn),
											  DDATA(dmn_dpsiw),
											  DDATA(psin),
											  DDATA(dpsin),
											  DDATA(dpsin_dpsiw),
											  DDATA(phi_psiw),
											  DDATA(dphi_psiw_dpsiw),
											  DDATA(phi_psin),
											  DDATA(dphi_psin_dpsiw),
											  DDATA(dphi_psin_dsw),
											  DDATA(fw),
											  DDATA(dfw_dsw),
											  DDATA(dfw_dpsiw),
											  DDATA(fn),
											  DDATA(dfn_dsw),
											  DDATA(dfn_dpsiw),
											  DDATA(aw),
											  DDATA(daw),
											  DDATA(daw_dpsiw),
											  DDATA(an),
											  DDATA(dan),
											  DDATA(dan_dpsiw));
	    break;
	  }
      }//constant density for n
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_pp_sd_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b;
    PyObject *rowptr,*colind;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol, *rwork_density_w, *rwork_density_n, *g, *x, *psic, *psiw, *sw, *mw, *dmw_dpsic,
      *dmw_dpsiw, *mn, *dmn_dpsic, *dmn_dpsiw,  *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dpsic,
      *aw, *daw_dpsic, *daw_dpsiw, *an, *dan_dpsic, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOdOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &psiw,
                         &psic,
			 &sw,
                         &mw,
                         &dmw_dpsiw,
                         &dmw_dpsic,
                         &mn,
                         &dmn_dpsiw,
                         &dmn_dpsic,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dpsic,
                         &aw,
                         &daw_dpsiw,
                         &daw_dpsic,
                         &an,
                         &dan_dpsiw,
			 &dan_dpsic)
       )
      return NULL;
    for(i=0; i < ND(psiw)-1; i++)
      nSimplex *= SHAPE(psiw)[i];
    for(i=ND(psiw)-1;i<ND(psiw);i++)
      nPointsPerSimplex *= SHAPE(psiw)[i];    

    //while debugging allow only one option
    //exponential for wetting phase
    assert(density_w_flag == 1);
    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_pp_sd_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
												nPointsPerSimplex,
												SHAPE(g)[0],
												2,
												IDATA(rowptr),
												IDATA(colind),
												IDATA(matType),
												muw,
												mun,
												DDATA(omega),
												DDATA(Kbar),
												b,
												DDATA(rwork_psk),
												IDATA(iwork_psk),
												DDATA(rwork_psk_tol),
												DDATA(rwork_density_w),
												DDATA(rwork_density_n),
												DDATA(g),
												DDATA(x),
												DDATA(psiw),
												DDATA(psic),
												DDATA(sw),
												DDATA(mw),
												DDATA(dmw_dpsiw),
												DDATA(dmw_dpsic),
												DDATA(mn),
												DDATA(dmn_dpsiw),
												DDATA(dmn_dpsic),
												DDATA(phi_psiw),
												DDATA(dphi_psiw_dpsiw),
												DDATA(phi_psin),
												DDATA(dphi_psin_dpsiw),
												DDATA(dphi_psin_dpsic),
												DDATA(aw),
												DDATA(daw_dpsiw),
												DDATA(daw_dpsic),
												DDATA(an),
												DDATA(dan_dpsiw),
												DDATA(dan_dpsic));
	    break;
	  case 1:
	    twophaseDarcy_fc_pp_sd_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
											  nPointsPerSimplex,
											  SHAPE(g)[0],
											  4,
											  IDATA(rowptr),
											  IDATA(colind),
											  IDATA(matType),
											  muw,
											  mun,
											  DDATA(omega),
											  DDATA(Kbar),
											  b,
											  DDATA(rwork_psk),
											  IDATA(iwork_psk),
											  DDATA(rwork_psk_tol),
											  DDATA(rwork_density_w),
											  DDATA(rwork_density_n),
											  DDATA(g),
											  DDATA(x),
											  DDATA(psiw),
											  DDATA(psic),
											  DDATA(sw),
											  DDATA(mw),
											  DDATA(dmw_dpsiw),
											  DDATA(dmw_dpsic),
											  DDATA(mn),
											  DDATA(dmn_dpsiw),
											  DDATA(dmn_dpsic),
											  DDATA(phi_psiw),
											  DDATA(dphi_psiw_dpsiw),
											  DDATA(phi_psin),
											  DDATA(dphi_psin_dpsiw),
											  DDATA(dphi_psin_dpsic),
											  DDATA(aw),
											  DDATA(daw_dpsiw),
											  DDATA(daw_dpsic),
											  DDATA(an),
											  DDATA(dan_dpsiw),
											  DDATA(dan_dpsic));
	    break;
	  default:
	    twophaseDarcy_fc_pp_sd_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
												nPointsPerSimplex,
												SHAPE(g)[0],
												2,
												IDATA(rowptr),
												IDATA(colind),
												IDATA(matType),
												muw,
												mun,
												DDATA(omega),
												DDATA(Kbar),
												b,
												DDATA(rwork_psk),
												IDATA(iwork_psk),
												DDATA(rwork_psk_tol),
												DDATA(rwork_density_w),
												DDATA(rwork_density_n),
												DDATA(g),
												DDATA(x),
												DDATA(psiw),
												DDATA(psic),
												DDATA(sw),
												DDATA(mw),
												DDATA(dmw_dpsiw),
												DDATA(dmw_dpsic),
												DDATA(mn),
												DDATA(dmn_dpsiw),
												DDATA(dmn_dpsic),
												DDATA(phi_psiw),
												DDATA(dphi_psiw_dpsiw),
												DDATA(phi_psin),
												DDATA(dphi_psin_dpsiw),
												DDATA(dphi_psin_dpsic),
												DDATA(aw),
												DDATA(daw_dpsiw),
												DDATA(daw_dpsic),
												DDATA(an),
												DDATA(dan_dpsiw),
												DDATA(dan_dpsic));
	    break;
	  }//
      }//exponential density for n
    else if (density_n_flag == 2) //nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_pp_sd_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
											     IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(psiw),
											     DDATA(psic),
											     DDATA(sw),
											     DDATA(mw),
											     DDATA(dmw_dpsiw),
											     DDATA(dmw_dpsic),
											     DDATA(mn),
											     DDATA(dmn_dpsiw),
											     DDATA(dmn_dpsic),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dpsic),
											     DDATA(aw),
											     DDATA(daw_dpsiw),
											     DDATA(daw_dpsic),
											     DDATA(an),
											     DDATA(dan_dpsiw),
											     DDATA(dan_dpsic));
	    break;
	  case 1:
	    twophaseDarcy_fc_pp_sd_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
										       nPointsPerSimplex,
										       SHAPE(g)[0],
										       4,
										       IDATA(rowptr),
										       IDATA(colind),
										       IDATA(matType),
										       muw,
										       mun,
										       DDATA(omega),
										       DDATA(Kbar),
										       b,
										       DDATA(rwork_psk),
										       IDATA(iwork_psk),
										       DDATA(rwork_psk_tol),
										       DDATA(rwork_density_w),
										       DDATA(rwork_density_n),
										       DDATA(g),
										       DDATA(x),
										       DDATA(psiw),
										       DDATA(psic),
										       DDATA(sw),
										       DDATA(mw),
										       DDATA(dmw_dpsiw),
										       DDATA(dmw_dpsic),
										       DDATA(mn),
										       DDATA(dmn_dpsiw),
										       DDATA(dmn_dpsic),
										       DDATA(phi_psiw),
										       DDATA(dphi_psiw_dpsiw),
										       DDATA(phi_psin),
										       DDATA(dphi_psin_dpsiw),
										       DDATA(dphi_psin_dpsic),
										       DDATA(aw),
										       DDATA(daw_dpsiw),
										       DDATA(daw_dpsic),
										       DDATA(an),
										       DDATA(dan_dpsiw),
										       DDATA(dan_dpsic));
	    break;
	  default:
	    twophaseDarcy_fc_pp_sd_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     2,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     DDATA(rwork_psk),
											     IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g),
											     DDATA(x),
											     DDATA(psiw),
											     DDATA(psic),
											     DDATA(sw),
											     DDATA(mw),
											     DDATA(dmw_dpsiw),
											     DDATA(dmw_dpsic),
											     DDATA(mn),
											     DDATA(dmn_dpsiw),
											     DDATA(dmn_dpsic),
											     DDATA(phi_psiw),
											     DDATA(dphi_psiw_dpsiw),
											     DDATA(phi_psin),
											     DDATA(dphi_psin_dpsiw),
											     DDATA(dphi_psin_dpsic),
											     DDATA(aw),
											     DDATA(daw_dpsiw),
											     DDATA(daw_dpsic),
											     DDATA(an),
											     DDATA(dan_dpsiw),
											     DDATA(dan_dpsic));
	    break;
	  }//
      }//ideal gas density for n
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }

    Py_INCREF(Py_None);
    return Py_None;

  }
  
  static PyObject *twophaseDarcy_incompressible_split_sd_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling,advectionScaling;
    PyObject *rowptr,*colind,*matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol,*rwork_density_w, *rwork_density_n, *g, *qt, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iOOOddOOdddOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
			 &advectionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_incompressible_split_sd_saturation_het_matType<SimplePSK>(nSimplex,
										nPointsPerSimplex,
										SHAPE(g)[0],
										2,
										IDATA(rowptr),
										IDATA(colind),
										IDATA(matType),
										muw,
										mun,
										DDATA(omega),
										DDATA(Kbar),
										b,
										capillaryDiffusionScaling,advectionScaling,
										DDATA(rwork_psk),
										IDATA(iwork_psk),
										DDATA(rwork_psk_tol),
										DDATA(rwork_density_w),
										DDATA(rwork_density_n),
										DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
										DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
										DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_incompressible_split_sd_saturation_het_matType<VGM>(nSimplex,
									  nPointsPerSimplex,
									  SHAPE(g)[0],
									  4,
									  IDATA(rowptr),
									  IDATA(colind),
									  IDATA(matType),
									  muw,
									  mun,
									  DDATA(omega),
									  DDATA(Kbar),
									  b,
									  capillaryDiffusionScaling,advectionScaling,
									  DDATA(rwork_psk),IDATA(iwork_psk),
									  DDATA(rwork_psk_tol),
									  DDATA(rwork_density_w),
									  DDATA(rwork_density_n),
									  DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
									  DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
									  DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_incompressible_split_sd_saturation_het_matType<SimplePSK>(nSimplex,
										nPointsPerSimplex,
										SHAPE(g)[0],
										2,
										IDATA(rowptr),
										IDATA(colind),
										IDATA(matType),
										muw,
										mun,
										DDATA(omega),
										DDATA(Kbar),
										b,
										capillaryDiffusionScaling,advectionScaling,
										DDATA(rwork_psk),
										IDATA(iwork_psk),
										DDATA(rwork_psk_tol),
										DDATA(rwork_density_w),
										DDATA(rwork_density_n),
										DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
										DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
										DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_incompressible_split_sd_pressure_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *rowptr,*colind,
      *matType,*omega,*Kbar,*rwork_psk, *rwork_psk_tol, *iwork_psk, *rwork_density_w, *rwork_density_n, *g, *sw, *grad_psic, *f, *a;
    if(!PyArg_ParseTuple(args,
                         "iOOOddOOddOOOOOOOOOO",
                         &pskModelFlag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &sw, &grad_psic, &f, &a))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_incompressible_split_sd_pressure_het_matType<SimplePSK>(nSimplex,
									      nPointsPerSimplex,
									      SHAPE(g)[0],
									      2,
									      IDATA(rowptr),
									      IDATA(colind),
									      IDATA(matType),
									      muw,
									      mun,
									      DDATA(omega),
									      DDATA(Kbar),
									      b,
									      capillaryDiffusionScaling,
									      DDATA(rwork_psk),
									      IDATA(iwork_psk),
									      DDATA(rwork_psk_tol),
									      DDATA(rwork_density_w),
									      DDATA(rwork_density_n),
									      DDATA(g), DDATA(sw),
									      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 1:
        twophaseDarcy_incompressible_split_sd_pressure_het_matType<VGM>(nSimplex,
									nPointsPerSimplex,
									SHAPE(g)[0],
									4,
									IDATA(rowptr),
									IDATA(colind),
									IDATA(matType),
									muw,
									mun,
									DDATA(omega),
									DDATA(Kbar),
									b,
									capillaryDiffusionScaling,
									DDATA(rwork_psk),
									IDATA(iwork_psk),
									DDATA(rwork_psk_tol),
									DDATA(rwork_density_w),
									DDATA(rwork_density_n),
									DDATA(g), DDATA(sw),
									DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      default:
        twophaseDarcy_incompressible_split_sd_pressure_het_matType<SimplePSK>(nSimplex,
									      nPointsPerSimplex,
									      SHAPE(g)[0],
									      2,
									      IDATA(rowptr),
									      IDATA(colind),
									      IDATA(matType),
									      muw,
									      mun,
									      DDATA(omega),
									      DDATA(Kbar),
									      b,
									      capillaryDiffusionScaling,
									      DDATA(rwork_psk),
									      IDATA(iwork_psk),
									      DDATA(rwork_psk_tol),
									      DDATA(rwork_density_w),
									      DDATA(rwork_density_n),
									      DDATA(g), DDATA(sw),
									      DDATA(grad_psic), DDATA(f), DDATA(a));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }



  static PyObject *twophaseDarcy_slightCompressible_split_sd_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b, capillaryDiffusionScaling,advectionScaling;
    PyObject *rowptr,*colind,*matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol,*rwork_density_w, *rwork_density_n, *g, *qt, *psiw, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOdddOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
			 &advectionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &psiw, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    //while debugging allow only one option
    //exponential for wetting phase
    assert(density_w_flag == 1);
    //for slight compressible, non-wetting phase density psk doesn't matter
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_slightCompressible_split_sd_saturation_het_matType<SimplePSK,ExponentialDensity>(nSimplex,
												       nPointsPerSimplex,
												       SHAPE(g)[0],
												       2,
												       IDATA(rowptr),
												       IDATA(colind),
												       IDATA(matType),
												       muw,
												       mun,
												       DDATA(omega),
												       DDATA(Kbar),
												       b,
												       capillaryDiffusionScaling,advectionScaling,
												       DDATA(rwork_psk),
												       IDATA(iwork_psk),
												       DDATA(rwork_psk_tol),
												       DDATA(rwork_density_w),
												       DDATA(rwork_density_n),
												       DDATA(g), DDATA(qt), DDATA(psiw),DDATA(sw), 
												       DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												       DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_slightCompressible_split_sd_saturation_het_matType<VGM,ExponentialDensity>(nSimplex,
												  nPointsPerSimplex,
												  SHAPE(g)[0],
												  4,
												  IDATA(rowptr),
												  IDATA(colind),
												  IDATA(matType),
												  muw,
												  mun,
												  DDATA(omega),
												  DDATA(Kbar),
												  b,
												  capillaryDiffusionScaling,advectionScaling,
												 DDATA(rwork_psk),IDATA(iwork_psk),
												 DDATA(rwork_psk_tol),
												  DDATA(rwork_density_w),
												  DDATA(rwork_density_n),
												  DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
												  DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												  DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_slightCompressible_split_sd_saturation_het_matType<VGM,ExponentialDensity>(nSimplex,
												  nPointsPerSimplex,
												  SHAPE(g)[0],
												  4,
												  IDATA(rowptr),
												  IDATA(colind),
												  IDATA(matType),
												  muw,
												  mun,
												  DDATA(omega),
												  DDATA(Kbar),
												  b,
												  capillaryDiffusionScaling,advectionScaling,
												 DDATA(rwork_psk),IDATA(iwork_psk),DDATA(rwork_psk_tol),
												  DDATA(rwork_density_w),
												  DDATA(rwork_density_n),
												  DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
												  DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												  DDATA(df), DDATA(a), DDATA(da));
	break;

      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_slightCompressible_split_sd_pressure_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag,density_w_flag,density_n_flag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *rowptr,*colind,
      *matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol, *rwork_density_w, *rwork_density_n, *g, *sw, *psiw, *psin, *grad_psic, 
      *m, *dm, *f, *a;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOddOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,&iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &sw, &psiw, &psin, &grad_psic, &m, &dm, &f, &a))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    //while debugging allow only one option
    //exponential for wetting phase
    assert(density_w_flag == 1);
    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
															      nPointsPerSimplex,
															      SHAPE(g)[0],
															      2,
															      IDATA(rowptr),
															      IDATA(colind),
															      IDATA(matType),
															      muw,
															      mun,
															      DDATA(omega),
															      DDATA(Kbar),
															      b,
															      capillaryDiffusionScaling,
															    DDATA(rwork_psk),IDATA(iwork_psk),
															    DDATA(rwork_psk_tol),
															      DDATA(rwork_density_w),
															      DDATA(rwork_density_n),
															      DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
															      DDATA(m), DDATA(dm), DDATA(f), DDATA(a));
	    break;
	  case 1:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
															nPointsPerSimplex,
															SHAPE(g)[0],
															4,
															IDATA(rowptr),
															IDATA(colind),
															IDATA(matType),
															muw,
															mun,
															DDATA(omega),
															DDATA(Kbar),
															b,
															capillaryDiffusionScaling,
														      DDATA(rwork_psk),IDATA(iwork_psk),
														      DDATA(rwork_psk_tol),
															DDATA(rwork_density_w),
															DDATA(rwork_density_n),
															DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
															DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  default:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
															nPointsPerSimplex,
															SHAPE(g)[0],
															4,
															IDATA(rowptr),
															IDATA(colind),
															IDATA(matType),
															muw,
															mun,
															DDATA(omega),
															DDATA(Kbar),
															b,
															capillaryDiffusionScaling,
														      DDATA(rwork_psk),IDATA(iwork_psk),
														      DDATA(rwork_psk_tol),
															DDATA(rwork_density_w),
															DDATA(rwork_density_n),
															DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
															DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  }
      }
    else if (density_n_flag == 2) //nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
															 nPointsPerSimplex,
															 SHAPE(g)[0],
															 2,
															 IDATA(rowptr),
															 IDATA(colind),
															 IDATA(matType),
															 muw,
															 mun,
															 DDATA(omega),
															 DDATA(Kbar),
															 b,
															 capillaryDiffusionScaling,
															 DDATA(rwork_psk),IDATA(iwork_psk),
															 DDATA(rwork_psk_tol),
															 DDATA(rwork_density_w),
															 DDATA(rwork_density_n),
															 DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
															 DDATA(m), DDATA(dm), DDATA(f), DDATA(a));
	    break;
	  case 1:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
														   nPointsPerSimplex,
														   SHAPE(g)[0],
														   4,
														   IDATA(rowptr),
														   IDATA(colind),
														   IDATA(matType),
														   muw,
														   mun,
														   DDATA(omega),
														   DDATA(Kbar),
														   b,
														   capillaryDiffusionScaling,
														   DDATA(rwork_psk),IDATA(iwork_psk),
														   DDATA(rwork_psk_tol),
														   DDATA(rwork_density_w),
														   DDATA(rwork_density_n),
														   DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
														   DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  default:
	    twophaseDarcy_slightCompressible_split_sd_pressure_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
														   nPointsPerSimplex,
														   SHAPE(g)[0],
														   4,
														   IDATA(rowptr),
														   IDATA(colind),
														   IDATA(matType),
														   muw,
														   mun,
														   DDATA(omega),
														   DDATA(Kbar),
														   b,
														   capillaryDiffusionScaling,
														   DDATA(rwork_psk),IDATA(iwork_psk),
														   DDATA(rwork_psk_tol),
														   DDATA(rwork_density_w),
														   DDATA(rwork_density_n),
														   DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
														   DDATA(m), DDATA(dm), DDATA(f), DDATA(a));
	    
	    break;
	  }
      }
    else
      {
 	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_compressibleN_split_sd_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b, capillaryDiffusionScaling,advectionScaling;
    PyObject *rowptr,*colind,*matType,*omega,*Kbar,*rwork_psk, *iwork_psk,*rwork_psk_tol,*rwork_density_w, *rwork_density_n, *g, *qt, *psiw, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOdddOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
			 &advectionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &psiw, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<SimplePSK,ExponentialDensity>(nSimplex,
												      nPointsPerSimplex,
												      SHAPE(g)[0],
												      2,
												      IDATA(rowptr),
												      IDATA(colind),
												      IDATA(matType),
												      muw,
												      mun,
												      DDATA(omega),
												      DDATA(Kbar),
												      b,
												      capillaryDiffusionScaling,advectionScaling,
												      DDATA(rwork_psk),IDATA(iwork_psk),
												      DDATA(rwork_psk_tol),
												      DDATA(rwork_density_w),
												      DDATA(rwork_density_n),
												      DDATA(g), DDATA(qt), DDATA(psiw),DDATA(sw), 
												      DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												      DDATA(df), DDATA(a), DDATA(da));
	    break;
	  case 1:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<VGM,ExponentialDensity>(nSimplex,
												nPointsPerSimplex,
												SHAPE(g)[0],
												4,
												IDATA(rowptr),
												IDATA(colind),
												IDATA(matType),
												muw,
												mun,
												DDATA(omega),
												DDATA(Kbar),
												b,
												capillaryDiffusionScaling,advectionScaling,
												DDATA(rwork_psk),IDATA(iwork_psk),
												DDATA(rwork_psk_tol),
												DDATA(rwork_density_w),
												DDATA(rwork_density_n),
												DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
												DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												DDATA(df), DDATA(a), DDATA(da));
	    break;
	  default:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<VGM,ExponentialDensity>(nSimplex,
												nPointsPerSimplex,
												SHAPE(g)[0],
												4,
												IDATA(rowptr),
												IDATA(colind),
												IDATA(matType),
												muw,
												mun,
												DDATA(omega),
												DDATA(Kbar),
												b,
												capillaryDiffusionScaling,advectionScaling,
												DDATA(rwork_psk),
												IDATA(iwork_psk),
												DDATA(rwork_psk_tol),
												DDATA(rwork_density_w),
												DDATA(rwork_density_n),
												DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
												DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												DDATA(df), DDATA(a), DDATA(da));
	    break;
	  }
      }
    else if (density_n_flag == 2)//nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<SimplePSK,IdealGasDensity>(nSimplex,
												   nPointsPerSimplex,
												   SHAPE(g)[0],
												   2,
												   IDATA(rowptr),
												   IDATA(colind),
												   IDATA(matType),
												   muw,
												   mun,
												   DDATA(omega),
												   DDATA(Kbar),
												   b,
												   capillaryDiffusionScaling,advectionScaling,
												   DDATA(rwork_psk),IDATA(iwork_psk),
												   DDATA(rwork_psk_tol),
												   DDATA(rwork_density_w),
												   DDATA(rwork_density_n),
												   DDATA(g), DDATA(qt), DDATA(psiw),DDATA(sw), 
												   DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
												   DDATA(df), DDATA(a), DDATA(da));
	    break;
	  case 1:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<VGM,IdealGasDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     4,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     capillaryDiffusionScaling,advectionScaling,
											     DDATA(rwork_psk),IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
											     DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
											     DDATA(df), DDATA(a), DDATA(da));
	    break;
	  default:
	    twophaseDarcy_compressibleN_split_sd_saturation_het_matType<VGM,IdealGasDensity>(nSimplex,
											     nPointsPerSimplex,
											     SHAPE(g)[0],
											     4,
											     IDATA(rowptr),
											     IDATA(colind),
											     IDATA(matType),
											     muw,
											     mun,
											     DDATA(omega),
											     DDATA(Kbar),
											     b,
											     capillaryDiffusionScaling,advectionScaling,
											     DDATA(rwork_psk),IDATA(iwork_psk),
											     DDATA(rwork_psk_tol),
											     DDATA(rwork_density_w),
											     DDATA(rwork_density_n),
											     DDATA(g), DDATA(qt), DDATA(psiw), DDATA(sw), 
											     DDATA(m), DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
											     DDATA(df), DDATA(a), DDATA(da));
	    break;
	  }
      }
    else
      {
 	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_compressibleN_split_sd_pressure_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag,density_w_flag,density_n_flag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *rowptr,*colind,
      *matType,*omega,*Kbar,*rwork_psk, *iwork_psk, *rwork_psk_tol, *rwork_density_w, *rwork_density_n, *g, *sw, *psiw, *psin, *grad_psic, 
      *m, *dm, *f, *a;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOddOOddOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &sw, &psiw, &psin, &grad_psic, &m, &dm, &f, &a))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    if (density_n_flag == 1) //nonwetting exponential
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<SimplePSK,ExponentialDensity>(nSimplex,
												    nPointsPerSimplex,
												    SHAPE(g)[0],
												    2,
												    IDATA(rowptr),
												    IDATA(colind),
												    IDATA(matType),
												    muw,
												    mun,
												    DDATA(omega),
												    DDATA(Kbar),
												    b,
												    capillaryDiffusionScaling,
												    DDATA(rwork_psk),IDATA(iwork_psk),
												    DDATA(rwork_psk_tol),
												    DDATA(rwork_density_w),
												    DDATA(rwork_density_n),
												    DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
												    DDATA(m), DDATA(dm), DDATA(f), DDATA(a));
	    break;
	  case 1:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<VGM,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      4,
											      IDATA(rowptr),
											      IDATA(colind),
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      capillaryDiffusionScaling,
											      DDATA(rwork_psk),IDATA(iwork_psk),
											      DDATA(rwork_psk_tol),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
											      DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  default:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<VGM,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      4,
											      IDATA(rowptr),
											      IDATA(colind),
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      capillaryDiffusionScaling,
											      DDATA(rwork_psk),
											      IDATA(iwork_psk),
											      DDATA(rwork_psk_tol),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
											      DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  }
      }
    else if (density_n_flag == 2) //nonwetting IdealGas
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<SimplePSK,IdealGasDensity>(nSimplex,
												 nPointsPerSimplex,
												 SHAPE(g)[0],
												 2,
												 IDATA(rowptr),
												 IDATA(colind),
												 IDATA(matType),
												 muw,
												 mun,
												 DDATA(omega),
												 DDATA(Kbar),
												 b,
												 capillaryDiffusionScaling,
												 DDATA(rwork_psk),
												 IDATA(iwork_psk),
												 DDATA(rwork_psk_tol),
												 DDATA(rwork_density_w),
												 DDATA(rwork_density_n),
												 DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
												 DDATA(m), DDATA(dm), DDATA(f), DDATA(a));
	    break;
	  case 1:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<VGM,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   4,
											   IDATA(rowptr),
											   IDATA(colind),
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   capillaryDiffusionScaling,
											   DDATA(rwork_psk),
											   IDATA(iwork_psk),
											   DDATA(rwork_psk_tol),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
											   DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  default:
	    twophaseDarcy_compressibleN_split_sd_pressure_het_matType<VGM,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   4,
											   IDATA(rowptr),
											   IDATA(colind),
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   capillaryDiffusionScaling,
											   DDATA(rwork_psk),
											   IDATA(iwork_psk),
											   DDATA(rwork_psk_tol),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g), DDATA(sw), DDATA(psiw), DDATA(psin), DDATA(grad_psic), 
											   DDATA(m), DDATA(dm), DDATA(f), DDATA(a));

	    break;
	  }
      }
    else
      {
 	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_vol_frac(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1;
    PyObject *matType,*omega,*sw,*vol_frac_w,*vol_frac_n;
    if(!PyArg_ParseTuple(args,
                         "OOOOO",
			 &matType,
			 &omega,
			 &sw,
			 &vol_frac_w,
			 &vol_frac_n))
      return NULL;

    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    

    twophaseDarcy_vol_frac(nSimplex,
			   nPointsPerSimplex,
			   IDATA(matType),
			   DDATA(omega),
			   DDATA(sw),
			   DDATA(vol_frac_w),
			   DDATA(vol_frac_n));

    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *ctwophaseDarcy_generateSplineTables(PyObject * self,PyObject * args)
  {
    int pskModelFlag,nknots=1,startIndex=0,calcFlag=0;
    PyObject *domain,*rwork_psk,*iwork_psk,*rwork_psk_tol,*splineTable;
    if(!PyArg_ParseTuple(args,
                         "iiiOOOOO",
			 &pskModelFlag,
			 &startIndex, //where to insert into splineTable
			 &calcFlag,   //f(Sw) or f(psic)
			 &domain,     //Sw or psic
			 &rwork_psk,  //psk parameter values
			 &iwork_psk,
			 &rwork_psk_tol,
			 &splineTable)) //
      return NULL;
    nknots = SHAPE(domain)[0];
    switch (pskModelFlag)
      {
      case 0:
	generateSplineTables<SimplePSK>(nknots,
					startIndex,
					calcFlag,
					DDATA(domain),
					DDATA(rwork_psk),
					IDATA(iwork_psk),
					DDATA(rwork_psk_tol),
					DDATA(splineTable));
	break;
      case 1:
	generateSplineTables<VGM>(nknots,
				  startIndex,
				  calcFlag,
				  DDATA(domain),
				  DDATA(rwork_psk),
				  IDATA(iwork_psk),
				  DDATA(rwork_psk_tol),
				  DDATA(splineTable));

	break;
      case 2:
	generateSplineTables<VGB>(nknots,
				  startIndex,
				  calcFlag,
				  DDATA(domain),
				  DDATA(rwork_psk),
				  IDATA(iwork_psk),
				  DDATA(rwork_psk_tol),
				  DDATA(splineTable));
	break;
      case 3:
	generateSplineTables<BCM>(nknots,
				  startIndex,
				  calcFlag,
				  DDATA(domain),
				  DDATA(rwork_psk),
				  IDATA(iwork_psk),
				  DDATA(rwork_psk_tol),
				  DDATA(splineTable));
	break;
      case 4:
	generateSplineTables<BCB>(nknots,
				  startIndex,
				  calcFlag,
				  DDATA(domain),
				  DDATA(rwork_psk),
				  IDATA(iwork_psk),
				  DDATA(rwork_psk_tol),
				  DDATA(splineTable));
	break;
      default:
	generateSplineTables<VGM>(nknots,
				  startIndex,
				  calcFlag,
				  DDATA(domain),
				  DDATA(rwork_psk),
				  IDATA(iwork_psk),
				  DDATA(rwork_psk_tol),
				  DDATA(splineTable));
	break;
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling,advectionScaling;
    PyObject *rowptr,*colind,*matType,*omega,*Kbar,*rwork_psk,*iwork_psk, *rwork_psk_tol,*rwork_density_w, *rwork_density_n, *g, *qt, *u,*sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iOOOddOOdddOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &rowptr,
			 &colind,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
			 &advectionScaling,
                         &rwork_psk,
			 &iwork_psk,
			 &rwork_psk_tol,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &u, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType<SimplePSK>(nSimplex,
										nPointsPerSimplex,
										SHAPE(g)[0],
										2,
										IDATA(rowptr),
										IDATA(colind),
										IDATA(matType),
										muw,
										mun,
										DDATA(omega),
										DDATA(Kbar),
										b,
										capillaryDiffusionScaling,advectionScaling,
										   DDATA(rwork_psk),IDATA(iwork_psk),
										   DDATA(rwork_psk_tol),
										DDATA(rwork_density_w),
										DDATA(rwork_density_n),
										DDATA(g), DDATA(qt), DDATA(u), DDATA(sw), DDATA(m),
										DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
										DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType<VGM>(nSimplex,
									  nPointsPerSimplex,
									  SHAPE(g)[0],
									  4,
									  IDATA(rowptr),
									  IDATA(colind),
									  IDATA(matType),
									  muw,
									  mun,
									  DDATA(omega),
									  DDATA(Kbar),
									  b,
									  capillaryDiffusionScaling,advectionScaling,
									     DDATA(rwork_psk),IDATA(iwork_psk),
									     DDATA(rwork_psk_tol),
									  DDATA(rwork_density_w),
									  DDATA(rwork_density_n),
									  DDATA(g), DDATA(qt), DDATA(u), DDATA(sw), DDATA(m),
									  DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
									  DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType<SimplePSK>(nSimplex,
										nPointsPerSimplex,
										SHAPE(g)[0],
										2,
										IDATA(rowptr),
										IDATA(colind),
										IDATA(matType),
										muw,
										mun,
										DDATA(omega),
										DDATA(Kbar),
										b,
										capillaryDiffusionScaling,advectionScaling,
										   DDATA(rwork_psk),IDATA(iwork_psk),
										   DDATA(rwork_psk_tol),
										DDATA(rwork_density_w),
										DDATA(rwork_density_n),
										DDATA(g), DDATA(qt), DDATA(u), DDATA(sw), DDATA(m),
										DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
										DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  //------------------------------ start  deprecated routines --------------------

  static PyObject *twophaseDarcy_fc(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, omega, Kbar, b;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw, *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiidddddOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw)
       )
      return NULL;
    for(i = 0; i < ND(x) - 1; i++)
      nPoints *= SHAPE(x)[i];
    if (density_w_flag == 0 && density_n_flag == 0) //constant density case
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc<SimplePSK>(nPoints,
					SHAPE(g)[0],
					muw,
					mun,
					omega,
					Kbar,
					b,
					DDATA(rwork_psk),
					DDATA(rwork_density_w),
					DDATA(rwork_density_n),
					DDATA(g),
					DDATA(x),
					DDATA(sw),
					DDATA(psiw),
					DDATA(mw),
					DDATA(dmw),
					DDATA(mn),
					DDATA(dmn),
					DDATA(psin),
					DDATA(dpsin),
					DDATA(dpsin_dpsiw),
					DDATA(phi_psiw),
					DDATA(dphi_psiw_dpsiw),
					DDATA(phi_psin),
					DDATA(dphi_psin_dpsiw),
					DDATA(dphi_psin_dsw),
					DDATA(aw),
					DDATA(daw),
					DDATA(an),
					DDATA(dan));
	    break;
	  case 1:
	    twophaseDarcy_fc<VGM>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 2:
	    twophaseDarcy_fc<VGB>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 3:
	    twophaseDarcy_fc<BCM>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 4:
	    twophaseDarcy_fc<BCB>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  default:
	    twophaseDarcy_fc<SimplePSK>(nPoints,
					SHAPE(g)[0],
					muw,
					mun,
					omega,
					Kbar,
					b,
					DDATA(rwork_psk),
					DDATA(rwork_density_w),
					DDATA(rwork_density_n),
					DDATA(g),
					DDATA(x),
					DDATA(sw),
					DDATA(psiw),
					DDATA(mw),
					DDATA(dmw),
					DDATA(mn),
					DDATA(dmn),
					DDATA(psin),
					DDATA(dpsin),
					DDATA(dpsin_dpsiw),
					DDATA(phi_psiw),
					DDATA(dphi_psiw_dpsiw),
					DDATA(phi_psin),
					DDATA(dphi_psin_dpsiw),
					DDATA(dphi_psin_dsw),
					DDATA(aw),
					DDATA(daw),
					DDATA(an),
					DDATA(dan));
	  }
      }//constant density case
    else if (density_w_flag != 0 || density_n_flag != 0) //variable density case
      {
	//while debugging allow only one option
	//exponential for wetting phase
	assert(density_w_flag == 1);
	if (density_n_flag == 0) //nonwetting constant 
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,ConstantDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc<VGM,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 2:
		twophaseDarcy_fc<VGB,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 3:
		twophaseDarcy_fc<BCM,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 4:
		twophaseDarcy_fc<BCB,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,ConstantDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));

	      }
	  }//density for n is constant
	else if (density_n_flag == 1) //exponential
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,ExponentialDensity>(nPoints,
										  SHAPE(g)[0],
										  muw,
										  mun,
										  omega,
										  Kbar,
										  b,
										  DDATA(rwork_psk),
										  DDATA(rwork_density_w),
										  DDATA(rwork_density_n),
										  DDATA(g),
										  DDATA(x),
										  DDATA(sw),
										  DDATA(psiw),
										  DDATA(mw),
										  DDATA(dmw),
										  DDATA(dmw_dpsiw),
										  DDATA(mn),
										  DDATA(dmn),
										  DDATA(dmn_dpsiw),
										  DDATA(psin),
										  DDATA(dpsin),
										  DDATA(dpsin_dpsiw),
										  DDATA(phi_psiw),
										  DDATA(dphi_psiw_dpsiw),
										  DDATA(phi_psin),
										  DDATA(dphi_psin_dpsiw),
										  DDATA(dphi_psin_dsw),
										  DDATA(aw),
										  DDATA(daw),
										  DDATA(daw_dpsiw),
										  DDATA(an),
										  DDATA(dan),
										  DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc<VGM,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc<VGB,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	  case 3:
		twophaseDarcy_fc<BCM,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc<BCB,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,ExponentialDensity>(nPoints,
										  SHAPE(g)[0],
										  muw,
										  mun,
										  omega,
										  Kbar,
										  b,
										  DDATA(rwork_psk),
										  DDATA(rwork_density_w),
										  DDATA(rwork_density_n),
										  DDATA(g),
										  DDATA(x),
										  DDATA(sw),
										  DDATA(psiw),
										  DDATA(mw),
										  DDATA(dmw),
										  DDATA(dmw_dpsiw),
										  DDATA(mn),
										  DDATA(dmn),
										  DDATA(dmn_dpsiw),
										  DDATA(psin),
										  DDATA(dpsin),
										  DDATA(dpsin_dpsiw),
										  DDATA(phi_psiw),
										  DDATA(dphi_psiw_dpsiw),
										  DDATA(phi_psin),
										  DDATA(dphi_psin_dpsiw),
										  DDATA(dphi_psin_dsw),
										  DDATA(aw),
										  DDATA(daw),
										  DDATA(daw_dpsiw),
										  DDATA(an),
										  DDATA(dan),
										  DDATA(dan_dpsiw));

	      }
	  }//constant density case
	else if (density_n_flag == 2) //Ideal Gas
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,IdealGasDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc<VGM,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 2:
		twophaseDarcy_fc<VGB,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 3:
		twophaseDarcy_fc<BCM,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 4:
		twophaseDarcy_fc<BCB,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc<SimplePSK,ExponentialDensity,IdealGasDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));

	      }
	  }//ideal gas case
	else
	  {
	    std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	    exit(1);
	  }
      }//variable density case
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_sd_diag(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, omega, Kbar, b;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw, *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiidddddOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw)
       )
      return NULL;
    for(i = 0; i < ND(x) - 1; i++)
      nPoints *= SHAPE(x)[i];
    if (density_w_flag == 0 && density_n_flag == 0) //constant density case
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_sd_diag<SimplePSK>(nPoints,
					SHAPE(g)[0],
					muw,
					mun,
					omega,
					Kbar,
					b,
					DDATA(rwork_psk),
					DDATA(rwork_density_w),
					DDATA(rwork_density_n),
					DDATA(g),
					DDATA(x),
					DDATA(sw),
					DDATA(psiw),
					DDATA(mw),
					DDATA(dmw),
					DDATA(mn),
					DDATA(dmn),
					DDATA(psin),
					DDATA(dpsin),
					DDATA(dpsin_dpsiw),
					DDATA(phi_psiw),
					DDATA(dphi_psiw_dpsiw),
					DDATA(phi_psin),
					DDATA(dphi_psin_dpsiw),
					DDATA(dphi_psin_dsw),
					DDATA(aw),
					DDATA(daw),
					DDATA(an),
					DDATA(dan));
	    break;
	  case 1:
	    twophaseDarcy_fc_sd_diag<VGM>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 2:
	    twophaseDarcy_fc_sd_diag<VGB>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 3:
	    twophaseDarcy_fc_sd_diag<BCM>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  case 4:
	    twophaseDarcy_fc_sd_diag<BCB>(nPoints,
				  SHAPE(g)[0],
				  muw,
				  mun,
				  omega,
				  Kbar,
				  b,
				  DDATA(rwork_psk),
				  DDATA(rwork_density_w),
				  DDATA(rwork_density_n),
				  DDATA(g),
				  DDATA(x),
				  DDATA(sw),
				  DDATA(psiw),
				  DDATA(mw),
				  DDATA(dmw),
				  DDATA(mn),
				  DDATA(dmn),
				  DDATA(psin),
				  DDATA(dpsin),
				  DDATA(dpsin_dpsiw),
				  DDATA(phi_psiw),
				  DDATA(dphi_psiw_dpsiw),
				  DDATA(phi_psin),
				  DDATA(dphi_psin_dpsiw),
				  DDATA(dphi_psin_dsw),
				  DDATA(aw),
				  DDATA(daw),
				  DDATA(an),
				  DDATA(dan));
	    break;
	  default:
	    twophaseDarcy_fc_sd_diag<SimplePSK>(nPoints,
					SHAPE(g)[0],
					muw,
					mun,
					omega,
					Kbar,
					b,
					DDATA(rwork_psk),
					DDATA(rwork_density_w),
					DDATA(rwork_density_n),
					DDATA(g),
					DDATA(x),
					DDATA(sw),
					DDATA(psiw),
					DDATA(mw),
					DDATA(dmw),
					DDATA(mn),
					DDATA(dmn),
					DDATA(psin),
					DDATA(dpsin),
					DDATA(dpsin_dpsiw),
					DDATA(phi_psiw),
					DDATA(dphi_psiw_dpsiw),
					DDATA(phi_psin),
					DDATA(dphi_psin_dpsiw),
					DDATA(dphi_psin_dsw),
					DDATA(aw),
					DDATA(daw),
					DDATA(an),
					DDATA(dan));
	  }
      }//constant density case
    else if (density_w_flag != 0 || density_n_flag != 0) //variable density case
      {
	//while debugging allow only one option
	//exponential for wetting phase
	assert(density_w_flag == 1);
	if (density_n_flag == 0) //nonwetting constant 
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,ConstantDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc_sd_diag<VGM,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 2:
		twophaseDarcy_fc_sd_diag<VGB,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 3:
		twophaseDarcy_fc_sd_diag<BCM,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 4:
		twophaseDarcy_fc_sd_diag<BCB,ExponentialDensity,ConstantDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,ConstantDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));

	      }
	  }//density for n is constant
	else if (density_n_flag == 1) //exponential
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,ExponentialDensity>(nPoints,
										  SHAPE(g)[0],
										  muw,
										  mun,
										  omega,
										  Kbar,
										  b,
										  DDATA(rwork_psk),
										  DDATA(rwork_density_w),
										  DDATA(rwork_density_n),
										  DDATA(g),
										  DDATA(x),
										  DDATA(sw),
										  DDATA(psiw),
										  DDATA(mw),
										  DDATA(dmw),
										  DDATA(dmw_dpsiw),
										  DDATA(mn),
										  DDATA(dmn),
										  DDATA(dmn_dpsiw),
										  DDATA(psin),
										  DDATA(dpsin),
										  DDATA(dpsin_dpsiw),
										  DDATA(phi_psiw),
										  DDATA(dphi_psiw_dpsiw),
										  DDATA(phi_psin),
										  DDATA(dphi_psin_dpsiw),
										  DDATA(dphi_psin_dsw),
										  DDATA(aw),
										  DDATA(daw),
										  DDATA(daw_dpsiw),
										  DDATA(an),
										  DDATA(dan),
										  DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc_sd_diag<VGM,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_sd_diag<VGB,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	  case 3:
		twophaseDarcy_fc_sd_diag<BCM,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_sd_diag<BCB,ExponentialDensity,ExponentialDensity>(nPoints,
									    SHAPE(g)[0],
									    muw,
									    mun,
									    omega,
									    Kbar,
									    b,
									    DDATA(rwork_psk),
									    DDATA(rwork_density_w),
									    DDATA(rwork_density_n),
									    DDATA(g),
									    DDATA(x),
									    DDATA(sw),
									    DDATA(psiw),
									    DDATA(mw),
									    DDATA(dmw),
									    DDATA(dmw_dpsiw),
									    DDATA(mn),
									    DDATA(dmn),
									    DDATA(dmn_dpsiw),
									    DDATA(psin),
									    DDATA(dpsin),
									    DDATA(dpsin_dpsiw),
									    DDATA(phi_psiw),
									    DDATA(dphi_psiw_dpsiw),
									    DDATA(phi_psin),
									    DDATA(dphi_psin_dpsiw),
									    DDATA(dphi_psin_dsw),
									    DDATA(aw),
									    DDATA(daw),
									    DDATA(daw_dpsiw),
									    DDATA(an),
									    DDATA(dan),
									    DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,ExponentialDensity>(nPoints,
										  SHAPE(g)[0],
										  muw,
										  mun,
										  omega,
										  Kbar,
										  b,
										  DDATA(rwork_psk),
										  DDATA(rwork_density_w),
										  DDATA(rwork_density_n),
										  DDATA(g),
										  DDATA(x),
										  DDATA(sw),
										  DDATA(psiw),
										  DDATA(mw),
										  DDATA(dmw),
										  DDATA(dmw_dpsiw),
										  DDATA(mn),
										  DDATA(dmn),
										  DDATA(dmn_dpsiw),
										  DDATA(psin),
										  DDATA(dpsin),
										  DDATA(dpsin_dpsiw),
										  DDATA(phi_psiw),
										  DDATA(dphi_psiw_dpsiw),
										  DDATA(phi_psin),
										  DDATA(dphi_psin_dpsiw),
										  DDATA(dphi_psin_dsw),
										  DDATA(aw),
										  DDATA(daw),
										  DDATA(daw_dpsiw),
										  DDATA(an),
										  DDATA(dan),
										  DDATA(dan_dpsiw));

	      }
	  }//constant density case
	else if (density_n_flag == 2) //Ideal Gas
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,IdealGasDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));
	    break;
	      case 1:
		twophaseDarcy_fc_sd_diag<VGM,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 2:
		twophaseDarcy_fc_sd_diag<VGB,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 3:
		twophaseDarcy_fc_sd_diag<BCM,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  case 4:
		twophaseDarcy_fc_sd_diag<BCB,ExponentialDensity,IdealGasDensity>(nPoints,
									 SHAPE(g)[0],
									 muw,
									 mun,
									 omega,
									 Kbar,
									 b,
									 DDATA(rwork_psk),
									 DDATA(rwork_density_w),
									 DDATA(rwork_density_n),
									 DDATA(g),
									 DDATA(x),
									 DDATA(sw),
									 DDATA(psiw),
									 DDATA(mw),
									 DDATA(dmw),
									 DDATA(dmw_dpsiw),
									 DDATA(mn),
									 DDATA(dmn),
									 DDATA(dmn_dpsiw),
									 DDATA(psin),
									 DDATA(dpsin),
									 DDATA(dpsin_dpsiw),
									 DDATA(phi_psiw),
									 DDATA(dphi_psiw_dpsiw),
									 DDATA(phi_psin),
									 DDATA(dphi_psin_dpsiw),
									 DDATA(dphi_psin_dsw),
									 DDATA(aw),
									 DDATA(daw),
									 DDATA(daw_dpsiw),
									 DDATA(an),
									 DDATA(dan),
									 DDATA(dan_dpsiw));
	    break;
	  default:
		twophaseDarcy_fc_sd_diag<SimplePSK,ExponentialDensity,IdealGasDensity>(nPoints,
									       SHAPE(g)[0],
									       muw,
									       mun,
									       omega,
									       Kbar,
									       b,
									       DDATA(rwork_psk),
									       DDATA(rwork_density_w),
									       DDATA(rwork_density_n),
									       DDATA(g),
									       DDATA(x),
									       DDATA(sw),
									       DDATA(psiw),
									       DDATA(mw),
									       DDATA(dmw),
									       DDATA(dmw_dpsiw),
									       DDATA(mn),
									       DDATA(dmn),
									       DDATA(dmn_dpsiw),
									       DDATA(psin),
									       DDATA(dpsin),
									       DDATA(dpsin_dpsiw),
									       DDATA(phi_psiw),
									       DDATA(dphi_psiw_dpsiw),
									       DDATA(phi_psin),
									       DDATA(dphi_psin_dpsiw),
									       DDATA(dphi_psin_dsw),
									       DDATA(aw),
									       DDATA(daw),
									       DDATA(daw_dpsiw),
									       DDATA(an),
									       DDATA(dan),
									       DDATA(dan_dpsiw));

	      }
	  }//ideal gas case
	else
	  {
	    std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	    exit(1);
	  }
      }//variable density case
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  static PyObject *twophaseDarcy_fc_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw,  *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiiOddOOdOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    if (density_w_flag == 0 && density_n_flag == 0) //constant density case
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_het_matType<SimplePSK>(nSimplex,
						    nPointsPerSimplex,
						    SHAPE(g)[0],
						    2,
						    IDATA(matType),
						    muw,
						    mun,
						    DDATA(omega),
						    DDATA(Kbar),
						    b,
						    DDATA(rwork_psk),
						    DDATA(rwork_density_w),
						    DDATA(rwork_density_n),
						    DDATA(g),
						    DDATA(x),
						    DDATA(sw),
						    DDATA(psiw),
						    DDATA(mw),
						    DDATA(dmw),
						    DDATA(mn),
						    DDATA(dmn),
						    DDATA(psin),
						    DDATA(dpsin),
						    DDATA(dpsin_dpsiw),
						    DDATA(phi_psiw),
						    DDATA(dphi_psiw_dpsiw),
						    DDATA(phi_psin),
						    DDATA(dphi_psin_dpsiw),
						    DDATA(dphi_psin_dsw),
						    DDATA(aw),
						    DDATA(daw),
						    DDATA(an),
						    DDATA(dan));
	    break;
	  case 1:
	    twophaseDarcy_fc_het_matType<VGM>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 2:
	    twophaseDarcy_fc_het_matType<VGB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 3:
	    twophaseDarcy_fc_het_matType<VGB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 4:
	    twophaseDarcy_fc_het_matType<BCB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  default:
	    twophaseDarcy_fc_het_matType<SimplePSK>(nSimplex,
						    nPointsPerSimplex,
						    SHAPE(g)[0],
						    2,
						    IDATA(matType),
						    muw,
						    mun,
						    DDATA(omega),
						    DDATA(Kbar),
						    b,
						    DDATA(rwork_psk),
						    DDATA(rwork_density_w),
						    DDATA(rwork_density_n),
						    DDATA(g),
						    DDATA(x),
						    DDATA(sw),
						    DDATA(psiw),
						    DDATA(mw),
						    DDATA(dmw),
						    DDATA(mn),
						    DDATA(dmn),
						    DDATA(psin),
						    DDATA(dpsin),
						    DDATA(dpsin_dpsiw),
						    DDATA(phi_psiw),
						    DDATA(dphi_psiw_dpsiw),
						    DDATA(phi_psin),
						    DDATA(dphi_psin_dpsiw),
						    DDATA(dphi_psin_dsw),
						    DDATA(aw),
						    DDATA(daw),
						    DDATA(an),
						    DDATA(dan));
	  }
      }//constant density
    else if (density_w_flag != 0 || density_n_flag != 0) //variable density case
      {
	//while debugging allow only one option
	//exponential for wetting phase
	assert(density_w_flag == 1);
	if (density_n_flag == 0) //nonwetting constant 
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,ConstantDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_het_matType<VGM,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_het_matType<BCB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,ConstantDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
	      }
	  }//constant density for n
	else if (density_n_flag == 1) //nonwetting exponential
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      2,
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      DDATA(rwork_psk),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g),
											      DDATA(x),
											      DDATA(sw),
											      DDATA(psiw),
											      DDATA(mw),
											      DDATA(dmw),
											      DDATA(dmw_dpsiw),
											      DDATA(mn),
											      DDATA(dmn),
											      DDATA(dmn_dpsiw),
											      DDATA(psin),
											      DDATA(dpsin),
											      DDATA(dpsin_dpsiw),
											      DDATA(phi_psiw),
											      DDATA(dphi_psiw_dpsiw),
											      DDATA(phi_psin),
											      DDATA(dphi_psin_dpsiw),
											      DDATA(dphi_psin_dsw),
											      DDATA(aw),
											      DDATA(daw),
											      DDATA(daw_dpsiw),
											      DDATA(an),
											      DDATA(dan),
											      DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_het_matType<BCB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      2,
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      DDATA(rwork_psk),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g),
											      DDATA(x),
											      DDATA(sw),
											      DDATA(psiw),
											      DDATA(mw),
											      DDATA(dmw),
											      DDATA(dmw_dpsiw),
											      DDATA(mn),
											      DDATA(dmn),
											      DDATA(dmn_dpsiw),
											      DDATA(psin),
											      DDATA(dpsin),
											      DDATA(dpsin_dpsiw),
											      DDATA(phi_psiw),
											      DDATA(dphi_psiw_dpsiw),
											      DDATA(phi_psin),
											      DDATA(dphi_psin_dpsiw),
											      DDATA(dphi_psin_dsw),
											      DDATA(aw),
											      DDATA(daw),
											      DDATA(daw_dpsiw),
											      DDATA(an),
											      DDATA(dan),
											      DDATA(dan_dpsiw));
	      }
	  }//exponential density for n
	else if (density_n_flag == 2) //nonwetting IdealGas
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_het_matType<VGB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_het_matType<BCB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
	      }
	  }//constant density for n
 	else
	  {
	    std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	    exit(1);
	  }
     }//nonconstant density	
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_sd_diag_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag, density_w_flag, density_n_flag;
    double muw, mun, b;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw, *dmw,
      *dmw_dpsiw, *mn, *dmn, *dmn_dpsiw,  *psin, *dpsin, *dpsin_dpsiw, *phi_psiw, *dphi_psiw_dpsiw, *phi_psin, *dphi_psin_dpsiw, *dphi_psin_dsw,
      *aw, *daw, *daw_dpsiw, *an, *dan, *dan_dpsiw;
    if(!PyArg_ParseTuple(args,
                         "iiiOddOOdOOOOOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
			 &density_w_flag,
			 &density_n_flag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw,
                         &dmw_dpsiw,
                         &mn,
                         &dmn,
                         &dmn_dpsiw,
			 &psin,
			 &dpsin,
			 &dpsin_dpsiw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &phi_psin,
                         &dphi_psin_dpsiw,
                         &dphi_psin_dsw,
                         &aw,
                         &daw,
                         &daw_dpsiw,
                         &an,
                         &dan,
			 &dan_dpsiw)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    if (density_w_flag == 0 && density_n_flag == 0) //constant density case
      {
	switch (pskModelFlag)
	  {
	  case 0:
	    twophaseDarcy_fc_sd_diag_het_matType<SimplePSK>(nSimplex,
						    nPointsPerSimplex,
						    SHAPE(g)[0],
						    2,
						    IDATA(matType),
						    muw,
						    mun,
						    DDATA(omega),
						    DDATA(Kbar),
						    b,
						    DDATA(rwork_psk),
						    DDATA(rwork_density_w),
						    DDATA(rwork_density_n),
						    DDATA(g),
						    DDATA(x),
						    DDATA(sw),
						    DDATA(psiw),
						    DDATA(mw),
						    DDATA(dmw),
						    DDATA(mn),
						    DDATA(dmn),
						    DDATA(psin),
						    DDATA(dpsin),
						    DDATA(dpsin_dpsiw),
						    DDATA(phi_psiw),
						    DDATA(dphi_psiw_dpsiw),
						    DDATA(phi_psin),
						    DDATA(dphi_psin_dpsiw),
						    DDATA(dphi_psin_dsw),
						    DDATA(aw),
						    DDATA(daw),
						    DDATA(an),
						    DDATA(dan));
	    break;
	  case 1:
	    twophaseDarcy_fc_sd_diag_het_matType<VGM>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 2:
	    twophaseDarcy_fc_sd_diag_het_matType<VGB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 3:
	    twophaseDarcy_fc_sd_diag_het_matType<VGB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  case 4:
	    twophaseDarcy_fc_sd_diag_het_matType<BCB>(nSimplex,
					      nPointsPerSimplex,
					      SHAPE(g)[0],
					      4,
					      IDATA(matType),
					      muw,
					      mun,
					      DDATA(omega),
					      DDATA(Kbar),
					      b,
					      DDATA(rwork_psk),
					      DDATA(rwork_density_w),
					      DDATA(rwork_density_n),
					      DDATA(g),
					      DDATA(x),
					      DDATA(sw),
					      DDATA(psiw),
					      DDATA(mw),
					      DDATA(dmw),
					      DDATA(mn),
					      DDATA(dmn),
					      DDATA(psin),
					      DDATA(dpsin),
					      DDATA(dpsin_dpsiw),
					      DDATA(phi_psiw),
					      DDATA(dphi_psiw_dpsiw),
					      DDATA(phi_psin),
					      DDATA(dphi_psin_dpsiw),
					      DDATA(dphi_psin_dsw),
					      DDATA(aw),
					      DDATA(daw),
					      DDATA(an),
					      DDATA(dan));
	    break;
	  default:
	    twophaseDarcy_fc_sd_diag_het_matType<SimplePSK>(nSimplex,
						    nPointsPerSimplex,
						    SHAPE(g)[0],
						    2,
						    IDATA(matType),
						    muw,
						    mun,
						    DDATA(omega),
						    DDATA(Kbar),
						    b,
						    DDATA(rwork_psk),
						    DDATA(rwork_density_w),
						    DDATA(rwork_density_n),
						    DDATA(g),
						    DDATA(x),
						    DDATA(sw),
						    DDATA(psiw),
						    DDATA(mw),
						    DDATA(dmw),
						    DDATA(mn),
						    DDATA(dmn),
						    DDATA(psin),
						    DDATA(dpsin),
						    DDATA(dpsin_dpsiw),
						    DDATA(phi_psiw),
						    DDATA(dphi_psiw_dpsiw),
						    DDATA(phi_psin),
						    DDATA(dphi_psin_dpsiw),
						    DDATA(dphi_psin_dsw),
						    DDATA(aw),
						    DDATA(daw),
						    DDATA(an),
						    DDATA(dan));
	  }
      }//constant density
    else if (density_w_flag != 0 || density_n_flag != 0) //variable density case
      {
	//while debugging allow only one option
	//exponential for wetting phase
	assert(density_w_flag == 1);
	if (density_n_flag == 0) //nonwetting constant 
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,ConstantDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_sd_diag_het_matType<VGM,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_sd_diag_het_matType<BCB,ExponentialDensity,ConstantDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,ConstantDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
	      }
	  }//constant density for n
	else if (density_n_flag == 1) //nonwetting exponential
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      2,
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      DDATA(rwork_psk),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g),
											      DDATA(x),
											      DDATA(sw),
											      DDATA(psiw),
											      DDATA(mw),
											      DDATA(dmw),
											      DDATA(dmw_dpsiw),
											      DDATA(mn),
											      DDATA(dmn),
											      DDATA(dmn_dpsiw),
											      DDATA(psin),
											      DDATA(dpsin),
											      DDATA(dpsin_dpsiw),
											      DDATA(phi_psiw),
											      DDATA(dphi_psiw_dpsiw),
											      DDATA(phi_psin),
											      DDATA(dphi_psin_dpsiw),
											      DDATA(dphi_psin_dsw),
											      DDATA(aw),
											      DDATA(daw),
											      DDATA(daw_dpsiw),
											      DDATA(an),
											      DDATA(dan),
											      DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_sd_diag_het_matType<VGM,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_sd_diag_het_matType<BCB,ExponentialDensity,ExponentialDensity>(nSimplex,
											nPointsPerSimplex,
											SHAPE(g)[0],
											4,
											IDATA(matType),
											muw,
											mun,
											DDATA(omega),
											DDATA(Kbar),
											b,
											DDATA(rwork_psk),
											DDATA(rwork_density_w),
											DDATA(rwork_density_n),
											DDATA(g),
											DDATA(x),
											DDATA(sw),
											DDATA(psiw),
											DDATA(mw),
											DDATA(dmw),
											DDATA(dmw_dpsiw),
											DDATA(mn),
											DDATA(dmn),
											DDATA(dmn_dpsiw),
											DDATA(psin),
											DDATA(dpsin),
											DDATA(dpsin_dpsiw),
											DDATA(phi_psiw),
											DDATA(dphi_psiw_dpsiw),
											DDATA(phi_psin),
											DDATA(dphi_psin_dpsiw),
											DDATA(dphi_psin_dsw),
											DDATA(aw),
											DDATA(daw),
											DDATA(daw_dpsiw),
											DDATA(an),
											DDATA(dan),
											DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,ExponentialDensity>(nSimplex,
											      nPointsPerSimplex,
											      SHAPE(g)[0],
											      2,
											      IDATA(matType),
											      muw,
											      mun,
											      DDATA(omega),
											      DDATA(Kbar),
											      b,
											      DDATA(rwork_psk),
											      DDATA(rwork_density_w),
											      DDATA(rwork_density_n),
											      DDATA(g),
											      DDATA(x),
											      DDATA(sw),
											      DDATA(psiw),
											      DDATA(mw),
											      DDATA(dmw),
											      DDATA(dmw_dpsiw),
											      DDATA(mn),
											      DDATA(dmn),
											      DDATA(dmn_dpsiw),
											      DDATA(psin),
											      DDATA(dpsin),
											      DDATA(dpsin_dpsiw),
											      DDATA(phi_psiw),
											      DDATA(dphi_psiw_dpsiw),
											      DDATA(phi_psin),
											      DDATA(dphi_psin_dpsiw),
											      DDATA(dphi_psin_dsw),
											      DDATA(aw),
											      DDATA(daw),
											      DDATA(daw_dpsiw),
											      DDATA(an),
											      DDATA(dan),
											      DDATA(dan_dpsiw));
	      }
	  }//exponential density for n
	else if (density_n_flag == 2) //nonwetting IdealGas
	  {
	    switch (pskModelFlag)
	      {
	      case 0:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
		break;
	      case 1:
		twophaseDarcy_fc_sd_diag_het_matType<VGM,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 2:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 3:
		twophaseDarcy_fc_sd_diag_het_matType<VGB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      case 4:
		twophaseDarcy_fc_sd_diag_het_matType<BCB,ExponentialDensity,IdealGasDensity>(nSimplex,
										     nPointsPerSimplex,
										     SHAPE(g)[0],
										     4,
										     IDATA(matType),
										     muw,
										     mun,
										     DDATA(omega),
										     DDATA(Kbar),
										     b,
										     DDATA(rwork_psk),
										     DDATA(rwork_density_w),
										     DDATA(rwork_density_n),
										     DDATA(g),
										     DDATA(x),
										     DDATA(sw),
										     DDATA(psiw),
										     DDATA(mw),
										     DDATA(dmw),
										     DDATA(dmw_dpsiw),
										     DDATA(mn),
										     DDATA(dmn),
										     DDATA(dmn_dpsiw),
										     DDATA(psin),
										     DDATA(dpsin),
										     DDATA(dpsin_dpsiw),
										     DDATA(phi_psiw),
										     DDATA(dphi_psiw_dpsiw),
										     DDATA(phi_psin),
										     DDATA(dphi_psin_dpsiw),
										     DDATA(dphi_psin_dsw),
										     DDATA(aw),
										     DDATA(daw),
										     DDATA(daw_dpsiw),
										     DDATA(an),
										     DDATA(dan),
										     DDATA(dan_dpsiw));
		break;
	      default:
		twophaseDarcy_fc_sd_diag_het_matType<SimplePSK,ExponentialDensity,IdealGasDensity>(nSimplex,
											   nPointsPerSimplex,
											   SHAPE(g)[0],
											   2,
											   IDATA(matType),
											   muw,
											   mun,
											   DDATA(omega),
											   DDATA(Kbar),
											   b,
											   DDATA(rwork_psk),
											   DDATA(rwork_density_w),
											   DDATA(rwork_density_n),
											   DDATA(g),
											   DDATA(x),
											   DDATA(sw),
											   DDATA(psiw),
											   DDATA(mw),
											   DDATA(dmw),
											   DDATA(dmw_dpsiw),
											   DDATA(mn),
											   DDATA(dmn),
											   DDATA(dmn_dpsiw),
											   DDATA(psin),
											   DDATA(dpsin),
											   DDATA(dpsin_dpsiw),
											   DDATA(phi_psiw),
											   DDATA(dphi_psiw_dpsiw),
											   DDATA(phi_psin),
											   DDATA(dphi_psin_dpsiw),
											   DDATA(dphi_psin_dsw),
											   DDATA(aw),
											   DDATA(daw),
											   DDATA(daw_dpsiw),
											   DDATA(an),
											   DDATA(dan),
											   DDATA(dan_dpsiw));
	      }
	  }//constant density for n
 	else
	  {
	    std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	    exit(1);
	  }
     }//nonconstant density	
    else
      {
	std::cout<<"configuration density_w_flag= "<<density_w_flag<<" and density_n_flag= "<<density_n_flag<<" not found "<<std::endl;
	exit(1);
      }
    
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_ff_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw,
                         *dmw_dsw,
                         *mm,
                         *dmm_dsw,
                         *phi_psic,
                         *dphi_psic_dsw,
                         *phi_psiw,
                         *dphi_psiw_dpsiw,
                         *fm,
                         *dfm_dsw,
                         *aw_psiw,
                         *daw_psiw_dsw,
                         *am_psiw,
                         *dam_psiw_dsw,
                         *am_psic,
      *dam_psic_dsw;
    if(!PyArg_ParseTuple(args,
                         "iOddOOdOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw_dsw,
                         &mm,
                         &dmm_dsw,
                         &phi_psic,
                         &dphi_psic_dsw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &fm,
                         &dfm_dsw,
                         &aw_psiw,
                         &daw_psiw_dsw,
                         &am_psiw,
                         &dam_psiw_dsw,
                         &am_psic,
                         &dam_psic_dsw)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_fc_ff_het_matType<SimplePSK>(nSimplex,
                                                   nPointsPerSimplex,
                                                   SHAPE(g)[0],
                                                   2,
                                                   IDATA(matType),
                                                   muw,
                                                   mun,
                                                   DDATA(omega),
                                                   DDATA(Kbar),
                                                   b,
                                                   DDATA(rwork_psk),
                                                   DDATA(rwork_density_w),
                                                   DDATA(rwork_density_n),
                                                   DDATA(g),
                                                   DDATA(x),
                                                   DDATA(sw),
                                                   DDATA(psiw),
                                                   DDATA(mw),
                                                   DDATA(dmw_dsw),
                                                   DDATA(mm),
                                                   DDATA(dmm_dsw),
                                                   DDATA(phi_psic),
                                                   DDATA(dphi_psic_dsw),
                                                   DDATA(phi_psiw),
                                                   DDATA(dphi_psiw_dpsiw),
                                                   DDATA(fm),
                                                   DDATA(dfm_dsw),
                                                   DDATA(aw_psiw),
                                                   DDATA(daw_psiw_dsw),
                                                   DDATA(am_psiw),
                                                   DDATA(dam_psiw_dsw),
                                                   DDATA(am_psic),
                                                   DDATA(dam_psic_dsw));
        break;
      case 1:
        twophaseDarcy_fc_ff_het_matType<VGM>(nSimplex,
                                             nPointsPerSimplex,
                                             SHAPE(g)[0],
                                             4,
                                             IDATA(matType),
                                             muw,
                                             mun,
                                             DDATA(omega),
                                             DDATA(Kbar),
                                             b,
                                             DDATA(rwork_psk),
                                             DDATA(rwork_density_w),
                                             DDATA(rwork_density_n),
                                             DDATA(g),
                                             DDATA(x),
                                             DDATA(sw),
                                             DDATA(psiw),
                                             DDATA(mw),
                                             DDATA(dmw_dsw),
                                             DDATA(mm),
                                             DDATA(dmm_dsw),
                                             DDATA(phi_psic),
                                             DDATA(dphi_psic_dsw),
                                             DDATA(phi_psiw),
                                             DDATA(dphi_psiw_dpsiw),
                                             DDATA(fm),
                                             DDATA(dfm_dsw),
                                             DDATA(aw_psiw),
                                             DDATA(daw_psiw_dsw),
                                             DDATA(am_psiw),
                                             DDATA(dam_psiw_dsw),
                                             DDATA(am_psic),
                                             DDATA(dam_psic_dsw));
        break;
      case 2:
        twophaseDarcy_fc_ff_het_matType<VGB>(nSimplex,
                                             nPointsPerSimplex,
                                             SHAPE(g)[0],
                                             4,
                                             IDATA(matType),
                                             muw,
                                             mun,
                                             DDATA(omega),
                                             DDATA(Kbar),
                                             b,
                                             DDATA(rwork_psk),
                                             DDATA(rwork_density_w),
                                             DDATA(rwork_density_n),
                                             DDATA(g),
                                             DDATA(x),
                                             DDATA(sw),
                                             DDATA(psiw),
                                             DDATA(mw),
                                             DDATA(dmw_dsw),
                                             DDATA(mm),
                                             DDATA(dmm_dsw),
                                             DDATA(phi_psic),
                                             DDATA(dphi_psic_dsw),
                                             DDATA(phi_psiw),
                                             DDATA(dphi_psiw_dpsiw),
                                             DDATA(fm),
                                             DDATA(dfm_dsw),
                                             DDATA(aw_psiw),
                                             DDATA(daw_psiw_dsw),
                                             DDATA(am_psiw),
                                             DDATA(dam_psiw_dsw),
                                             DDATA(am_psic),
                                             DDATA(dam_psic_dsw));
        break;
      case 3:
        twophaseDarcy_fc_ff_het_matType<BCB>(nSimplex,
                                             nPointsPerSimplex,
                                             SHAPE(g)[0],
                                             4,
                                             IDATA(matType),
                                             muw,
                                             mun,
                                             DDATA(omega),
                                             DDATA(Kbar),
                                             b,
                                             DDATA(rwork_psk),
                                             DDATA(rwork_density_w),
                                             DDATA(rwork_density_n),
                                             DDATA(g),
                                             DDATA(x),
                                             DDATA(sw),
                                             DDATA(psiw),
                                             DDATA(mw),
                                             DDATA(dmw_dsw),
                                             DDATA(mm),
                                             DDATA(dmm_dsw),
                                             DDATA(phi_psic),
                                             DDATA(dphi_psic_dsw),
                                             DDATA(phi_psiw),
                                             DDATA(dphi_psiw_dpsiw),
                                             DDATA(fm),
                                             DDATA(dfm_dsw),
                                             DDATA(aw_psiw),
                                             DDATA(daw_psiw_dsw),
                                             DDATA(am_psiw),
                                             DDATA(dam_psiw_dsw),
                                             DDATA(am_psic),
                                             DDATA(dam_psic_dsw));
        break;
      case 4:
        twophaseDarcy_fc_ff_het_matType<BCM>(nSimplex,
                                             nPointsPerSimplex,
                                             SHAPE(g)[0],
                                             4,
                                             IDATA(matType),
                                             muw,
                                             mun,
                                             DDATA(omega),
                                             DDATA(Kbar),
                                             b,
                                             DDATA(rwork_psk),
                                             DDATA(rwork_density_w),
                                             DDATA(rwork_density_n),
                                             DDATA(g),
                                             DDATA(x),
                                             DDATA(sw),
                                             DDATA(psiw),
                                             DDATA(mw),
                                             DDATA(dmw_dsw),
                                             DDATA(mm),
                                             DDATA(dmm_dsw),
                                             DDATA(phi_psic),
                                             DDATA(dphi_psic_dsw),
                                             DDATA(phi_psiw),
                                             DDATA(dphi_psiw_dpsiw),
                                             DDATA(fm),
                                             DDATA(dfm_dsw),
                                             DDATA(aw_psiw),
                                             DDATA(daw_psiw_dsw),
                                             DDATA(am_psiw),
                                             DDATA(dam_psiw_dsw),
                                             DDATA(am_psic),
                                             DDATA(dam_psic_dsw));
        break;
      default:
        twophaseDarcy_fc_ff_het_matType<SimplePSK>(nSimplex,
                                                   nPointsPerSimplex,
                                                   SHAPE(g)[0],
                                                   2,
                                                   IDATA(matType),
                                                   muw,
                                                   mun,
                                                   DDATA(omega),
                                                   DDATA(Kbar),
                                                   b,
                                                   DDATA(rwork_psk),
                                                   DDATA(rwork_density_w),
                                                   DDATA(rwork_density_n),
                                                   DDATA(g),
                                                   DDATA(x),
                                                   DDATA(sw),
                                                   DDATA(psiw),
                                                   DDATA(mw),
                                                   DDATA(dmw_dsw),
                                                   DDATA(mm),
                                                   DDATA(dmm_dsw),
                                                   DDATA(phi_psic),
                                                   DDATA(dphi_psic_dsw),
                                                   DDATA(phi_psiw),
                                                   DDATA(dphi_psiw_dpsiw),
                                                   DDATA(fm),
                                                   DDATA(dfm_dsw),
                                                   DDATA(aw_psiw),
                                                   DDATA(daw_psiw_dsw),
                                                   DDATA(am_psiw),
                                                   DDATA(dam_psiw_dsw),
                                                   DDATA(am_psic),
                                                   DDATA(dam_psic_dsw));
        break;
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_ff_sd_diag_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw,
                         *dmw_dsw,
                         *mm,
                         *dmm_dsw,
                         *phi_psic,
                         *dphi_psic_dsw,
                         *phi_psiw,
                         *dphi_psiw_dpsiw,
                         *fm,
                         *dfm_dsw,
                         *aw_psiw,
                         *daw_psiw_dsw,
                         *am_psiw,
                         *dam_psiw_dsw,
                         *am_psic,
      *dam_psic_dsw;
    if(!PyArg_ParseTuple(args,
                         "iOddOOdOOOOOOOOOOOOOOOOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g,
                         &x,
                         &sw,
                         &psiw,
                         &mw,
                         &dmw_dsw,
                         &mm,
                         &dmm_dsw,
                         &phi_psic,
                         &dphi_psic_dsw,
                         &phi_psiw,
                         &dphi_psiw_dpsiw,
                         &fm,
                         &dfm_dsw,
                         &aw_psiw,
                         &daw_psiw_dsw,
                         &am_psiw,
                         &dam_psiw_dsw,
                         &am_psic,
                         &dam_psic_dsw)
       )
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_fc_ff_sd_diag_het_matType<SimplePSK>(nSimplex,
							   nPointsPerSimplex,
							   SHAPE(g)[0],
							   2,
							   IDATA(matType),
							   muw,
							   mun,
							   DDATA(omega),
							   DDATA(Kbar),
							   b,
							   DDATA(rwork_psk),
							   DDATA(rwork_density_w),
							   DDATA(rwork_density_n),
							   DDATA(g),
							   DDATA(x),
							   DDATA(sw),
							   DDATA(psiw),
							   DDATA(mw),
							   DDATA(dmw_dsw),
							   DDATA(mm),
							   DDATA(dmm_dsw),
							   DDATA(phi_psic),
							   DDATA(dphi_psic_dsw),
							   DDATA(phi_psiw),
							   DDATA(dphi_psiw_dpsiw),
							   DDATA(fm),
							   DDATA(dfm_dsw),
							   DDATA(aw_psiw),
							   DDATA(daw_psiw_dsw),
							   DDATA(am_psiw),
							   DDATA(dam_psiw_dsw),
							   DDATA(am_psic),
							   DDATA(dam_psic_dsw));
        break;
      case 1:
        twophaseDarcy_fc_ff_sd_diag_het_matType<VGM>(nSimplex,
						     nPointsPerSimplex,
						     SHAPE(g)[0],
						     4,
						     IDATA(matType),
						     muw,
						     mun,
						     DDATA(omega),
						     DDATA(Kbar),
						     b,
						     DDATA(rwork_psk),
						     DDATA(rwork_density_w),
						     DDATA(rwork_density_n),
						     DDATA(g),
						     DDATA(x),
						     DDATA(sw),
						     DDATA(psiw),
						     DDATA(mw),
						     DDATA(dmw_dsw),
						     DDATA(mm),
						     DDATA(dmm_dsw),
						     DDATA(phi_psic),
						     DDATA(dphi_psic_dsw),
						     DDATA(phi_psiw),
						     DDATA(dphi_psiw_dpsiw),
						     DDATA(fm),
						     DDATA(dfm_dsw),
						     DDATA(aw_psiw),
						     DDATA(daw_psiw_dsw),
						     DDATA(am_psiw),
						     DDATA(dam_psiw_dsw),
						     DDATA(am_psic),
						     DDATA(dam_psic_dsw));
        break;
      case 2:
        twophaseDarcy_fc_ff_sd_diag_het_matType<VGB>(nSimplex,
						     nPointsPerSimplex,
						     SHAPE(g)[0],
						     4,
						     IDATA(matType),
						     muw,
						     mun,
						     DDATA(omega),
						     DDATA(Kbar),
						     b,
						     DDATA(rwork_psk),
						     DDATA(rwork_density_w),
						     DDATA(rwork_density_n),
						     DDATA(g),
						     DDATA(x),
						     DDATA(sw),
						     DDATA(psiw),
						     DDATA(mw),
						     DDATA(dmw_dsw),
						     DDATA(mm),
						     DDATA(dmm_dsw),
						     DDATA(phi_psic),
						     DDATA(dphi_psic_dsw),
						     DDATA(phi_psiw),
						     DDATA(dphi_psiw_dpsiw),
						     DDATA(fm),
						     DDATA(dfm_dsw),
						     DDATA(aw_psiw),
						     DDATA(daw_psiw_dsw),
						     DDATA(am_psiw),
						     DDATA(dam_psiw_dsw),
						     DDATA(am_psic),
						     DDATA(dam_psic_dsw));
        break;
      case 3:
        twophaseDarcy_fc_ff_sd_diag_het_matType<BCB>(nSimplex,
						     nPointsPerSimplex,
						     SHAPE(g)[0],
						     4,
						     IDATA(matType),
						     muw,
						     mun,
						     DDATA(omega),
						     DDATA(Kbar),
						     b,
						     DDATA(rwork_psk),
						     DDATA(rwork_density_w),
						     DDATA(rwork_density_n),
						     DDATA(g),
						     DDATA(x),
						     DDATA(sw),
						     DDATA(psiw),
						     DDATA(mw),
						     DDATA(dmw_dsw),
						     DDATA(mm),
						     DDATA(dmm_dsw),
						     DDATA(phi_psic),
						     DDATA(dphi_psic_dsw),
						     DDATA(phi_psiw),
						     DDATA(dphi_psiw_dpsiw),
						     DDATA(fm),
						     DDATA(dfm_dsw),
						     DDATA(aw_psiw),
						     DDATA(daw_psiw_dsw),
						     DDATA(am_psiw),
						     DDATA(dam_psiw_dsw),
						     DDATA(am_psic),
						     DDATA(dam_psic_dsw));
        break;
      case 4:
        twophaseDarcy_fc_ff_sd_diag_het_matType<BCM>(nSimplex,
						     nPointsPerSimplex,
						     SHAPE(g)[0],
						     4,
						     IDATA(matType),
						     muw,
						     mun,
						     DDATA(omega),
						     DDATA(Kbar),
						     b,
						     DDATA(rwork_psk),
						     DDATA(rwork_density_w),
						     DDATA(rwork_density_n),
						     DDATA(g),
						     DDATA(x),
						     DDATA(sw),
						     DDATA(psiw),
						     DDATA(mw),
						     DDATA(dmw_dsw),
						     DDATA(mm),
						     DDATA(dmm_dsw),
						     DDATA(phi_psic),
						     DDATA(dphi_psic_dsw),
						     DDATA(phi_psiw),
						     DDATA(dphi_psiw_dpsiw),
						     DDATA(fm),
						     DDATA(dfm_dsw),
						     DDATA(aw_psiw),
						     DDATA(daw_psiw_dsw),
						     DDATA(am_psiw),
						     DDATA(dam_psiw_dsw),
						     DDATA(am_psic),
						     DDATA(dam_psic_dsw));
        break;
      default:
        twophaseDarcy_fc_ff_sd_diag_het_matType<SimplePSK>(nSimplex,
							   nPointsPerSimplex,
							   SHAPE(g)[0],
							   2,
							   IDATA(matType),
							   muw,
							   mun,
							   DDATA(omega),
							   DDATA(Kbar),
							   b,
							   DDATA(rwork_psk),
							   DDATA(rwork_density_w),
							   DDATA(rwork_density_n),
							   DDATA(g),
							   DDATA(x),
							   DDATA(sw),
							   DDATA(psiw),
							   DDATA(mw),
							   DDATA(dmw_dsw),
							   DDATA(mm),
							   DDATA(dmm_dsw),
							   DDATA(phi_psic),
							   DDATA(dphi_psic_dsw),
							   DDATA(phi_psiw),
							   DDATA(dphi_psiw_dpsiw),
							   DDATA(fm),
							   DDATA(dfm_dsw),
							   DDATA(aw_psiw),
							   DDATA(daw_psiw_dsw),
							   DDATA(am_psiw),
							   DDATA(dam_psiw_dsw),
							   DDATA(am_psic),
							   DDATA(dam_psic_dsw));
        break;
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  static PyObject *twophaseDarcy_fc_ff(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw,
      *dmw_dsw, *mm, *dmm_dsw, *phi_psic, *dphi_psic_dsw, *phi_psiw, *dphi_psiw_dpsiw, *fm,
      *dfm_dsw, *aw_psiw, *daw_psiw_dsw, *am_psiw, *dam_psiw_dsw, *am_psic, *dam_psic_dsw;
    if(!PyArg_ParseTuple
       (args, "idddddOOOOOOOOOOOOOOOOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b,
	&rwork_psk, &rwork_density_w, &rwork_density_n, &g, &x, &sw, &psiw, &mw, &dmw_dsw,
	&mm, &dmm_dsw, &phi_psic, &dphi_psic_dsw, &phi_psiw, &dphi_psiw_dpsiw, &fm,
	&dfm_dsw, &aw_psiw, &daw_psiw_dsw, &am_psiw, &dam_psiw_dsw, &am_psic,
	&dam_psic_dsw))
      return NULL;
    for(i = 0; i < ND(x) - 1; i++)
      nPoints *= SHAPE(x)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_fc_ff<SimplePSK>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
        break;
      case 1:
        twophaseDarcy_fc_ff<VGM>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
        break;
      case 2:
        twophaseDarcy_fc_ff<VGB>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
        break;
      case 3:
        twophaseDarcy_fc_ff<BCM>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
        break;
      case 4:
        twophaseDarcy_fc_ff<BCB>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
        break;
      default:
        twophaseDarcy_fc_ff<SimplePSK>(nPoints, SHAPE(g)[0], muw, mun, omega,
                                 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
                                 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
                                 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
                                 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
                                 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
                                 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
                                 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
                                 DDATA(dam_psic_dsw));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_fc_ff_sd_diag(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *x, *sw, *psiw, *mw,
      *dmw_dsw, *mm, *dmm_dsw, *phi_psic, *dphi_psic_dsw, *phi_psiw, *dphi_psiw_dpsiw, *fm,
      *dfm_dsw, *aw_psiw, *daw_psiw_dsw, *am_psiw, *dam_psiw_dsw, *am_psic, *dam_psic_dsw;
    if(!PyArg_ParseTuple
       (args, "idddddOOOOOOOOOOOOOOOOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b,
	&rwork_psk, &rwork_density_w, &rwork_density_n, &g, &x, &sw, &psiw, &mw, &dmw_dsw,
	&mm, &dmm_dsw, &phi_psic, &dphi_psic_dsw, &phi_psiw, &dphi_psiw_dpsiw, &fm,
	&dfm_dsw, &aw_psiw, &daw_psiw_dsw, &am_psiw, &dam_psiw_dsw, &am_psic,
	&dam_psic_dsw))
      return NULL;
    for(i = 0; i < ND(x) - 1; i++)
      nPoints *= SHAPE(x)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_fc_ff_sd_diag<SimplePSK>(nPoints, SHAPE(g)[0], muw, mun, omega,
					       Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					       DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					       DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					       DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					       DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					       DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					       DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					       DDATA(dam_psic_dsw));
        break;
      case 1:
        twophaseDarcy_fc_ff_sd_diag<VGM>(nPoints, SHAPE(g)[0], muw, mun, omega,
					 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					 DDATA(dam_psic_dsw));
        break;
      case 2:
        twophaseDarcy_fc_ff_sd_diag<VGB>(nPoints, SHAPE(g)[0], muw, mun, omega,
					 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					 DDATA(dam_psic_dsw));
        break;
      case 3:
        twophaseDarcy_fc_ff_sd_diag<BCM>(nPoints, SHAPE(g)[0], muw, mun, omega,
					 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					 DDATA(dam_psic_dsw));
        break;
      case 4:
        twophaseDarcy_fc_ff_sd_diag<BCB>(nPoints, SHAPE(g)[0], muw, mun, omega,
					 Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					 DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					 DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					 DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					 DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					 DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					 DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					 DDATA(dam_psic_dsw));
        break;
      default:
        twophaseDarcy_fc_ff_sd_diag<SimplePSK>(nPoints, SHAPE(g)[0], muw, mun, omega,
					       Kbar, b, DDATA(rwork_psk), DDATA(rwork_density_w),
					       DDATA(rwork_density_n), DDATA(g), DDATA(x), DDATA(sw),
					       DDATA(psiw), DDATA(mw), DDATA(dmw_dsw), DDATA(mm),
					       DDATA(dmm_dsw), DDATA(phi_psic), DDATA(dphi_psic_dsw),
					       DDATA(phi_psiw), DDATA(dphi_psiw_dpsiw), DDATA(fm),
					       DDATA(dfm_dsw), DDATA(aw_psiw), DDATA(daw_psiw_dsw),
					       DDATA(am_psiw), DDATA(dam_psiw_dsw), DDATA(am_psic),
					       DDATA(dam_psic_dsw));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  static PyObject *twophaseDarcy_split_saturation(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b, capillaryDiffusionScaling;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *qt, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args, "iddddddOOOOOOOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b,&capillaryDiffusionScaling,
                         &rwork_psk, &rwork_density_w, &rwork_density_n, &g, &qt, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i = 0; i < ND(f) - 1; i++)
      nPoints *= SHAPE(f)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_saturation<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
						  DDATA(rwork_density_w), DDATA(rwork_density_n),
						  DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
						  DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
						  DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_split_saturation<VGM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 2:
        twophaseDarcy_split_saturation<VGB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 3:
        twophaseDarcy_split_saturation<BCM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 4:
        twophaseDarcy_split_saturation<BCB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_split_saturation<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_split_sd_diag_saturation(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b, capillaryDiffusionScaling;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *qt, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args, "iddddddOOOOOOOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b,&capillaryDiffusionScaling,
                         &rwork_psk, &rwork_density_w, &rwork_density_n, &g, &qt, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i = 0; i < ND(f) - 1; i++)
      nPoints *= SHAPE(f)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_sd_diag_saturation<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
						  DDATA(rwork_density_w), DDATA(rwork_density_n),
						  DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
						  DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
						  DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_split_sd_diag_saturation<VGM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 2:
        twophaseDarcy_split_sd_diag_saturation<VGB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 3:
        twophaseDarcy_split_sd_diag_saturation<BCM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      case 4:
        twophaseDarcy_split_sd_diag_saturation<BCB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_split_sd_diag_saturation<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
                                            Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk),
                                            DDATA(rwork_density_w), DDATA(rwork_density_n),
                                            DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
                                            DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
                                            DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_split_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *qt, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iOddOOddOOOOOOOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_saturation_het_matType<SimplePSK>(nSimplex,
							      nPointsPerSimplex,
							      SHAPE(g)[0],
							      2,
							      IDATA(matType),
							      muw,
							      mun,
							      DDATA(omega),
							      DDATA(Kbar),
							      b,
							      capillaryDiffusionScaling,
							      DDATA(rwork_psk),
							      DDATA(rwork_density_w),
							      DDATA(rwork_density_n),
							      DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							      DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							      DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_split_saturation_het_matType<VGM>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 2:
        twophaseDarcy_split_saturation_het_matType<VGB>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 3:
        twophaseDarcy_split_saturation_het_matType<BCM>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 4:
        twophaseDarcy_split_saturation_het_matType<BCB>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_split_saturation_het_matType<SimplePSK>(nSimplex,
							      nPointsPerSimplex,
							      SHAPE(g)[0],
							      2,
							      IDATA(matType),
							      muw,
							      mun,
							      DDATA(omega),
							      DDATA(Kbar),
							      b,
							      capillaryDiffusionScaling,
							      DDATA(rwork_psk),
							      DDATA(rwork_density_w),
							      DDATA(rwork_density_n),
							      DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							      DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							      DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_split_sd_diag_saturation_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *qt, *sw, *m, *dm, *phi,
      *dphi, *f, *df, *a, *da;
    if(!PyArg_ParseTuple(args,
                         "iOddOOddOOOOOOOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &qt, &sw, &m, &dm, &phi, &dphi,
                         &f, &df, &a, &da))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_sd_diag_saturation_het_matType<SimplePSK>(nSimplex,
							      nPointsPerSimplex,
							      SHAPE(g)[0],
							      2,
							      IDATA(matType),
							      muw,
							      mun,
							      DDATA(omega),
							      DDATA(Kbar),
							      b,
							      capillaryDiffusionScaling,
							      DDATA(rwork_psk),
							      DDATA(rwork_density_w),
							      DDATA(rwork_density_n),
							      DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							      DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							      DDATA(df), DDATA(a), DDATA(da));
        break;
      case 1:
        twophaseDarcy_split_sd_diag_saturation_het_matType<VGM>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 2:
        twophaseDarcy_split_sd_diag_saturation_het_matType<VGB>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 3:
        twophaseDarcy_split_sd_diag_saturation_het_matType<BCM>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      case 4:
        twophaseDarcy_split_sd_diag_saturation_het_matType<BCB>(nSimplex,
							nPointsPerSimplex,
							SHAPE(g)[0],
							4,
							IDATA(matType),
							muw,
							mun,
							DDATA(omega),
							DDATA(Kbar),
							b,
							capillaryDiffusionScaling,
							DDATA(rwork_psk),
							DDATA(rwork_density_w),
							DDATA(rwork_density_n),
							DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							DDATA(df), DDATA(a), DDATA(da));
        break;
      default:
        twophaseDarcy_split_sd_diag_saturation_het_matType<SimplePSK>(nSimplex,
							      nPointsPerSimplex,
							      SHAPE(g)[0],
							      2,
							      IDATA(matType),
							      muw,
							      mun,
							      DDATA(omega),
							      DDATA(Kbar),
							      b,
							      capillaryDiffusionScaling,
							      DDATA(rwork_psk),
							      DDATA(rwork_density_w),
							      DDATA(rwork_density_n),
							      DDATA(g), DDATA(qt), DDATA(sw), DDATA(m),
							      DDATA(dm), DDATA(phi), DDATA(dphi), DDATA(f),
							      DDATA(df), DDATA(a), DDATA(da));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }

  static PyObject *twophaseDarcy_split_pressure(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b, capillaryDiffusionScaling;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *sw, *grad_psic, *f, *a;
    if(!PyArg_ParseTuple
       (args, "iddddddOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b, &capillaryDiffusionScaling, &rwork_psk,
	&rwork_density_w, &rwork_density_n, &g, &sw, &grad_psic, &f, &a))
      return NULL;
    for(i = 0; i < ND(f) - 1; i++)
      nPoints *= SHAPE(f)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_pressure<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
						DDATA(rwork_density_n), DDATA(g), DDATA(sw),
						DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 1:
        twophaseDarcy_split_pressure<VGM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 2:
        twophaseDarcy_split_pressure<VGB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 3:
        twophaseDarcy_split_pressure<BCM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 4:
        twophaseDarcy_split_pressure<BCB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      default:
        twophaseDarcy_split_pressure<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
						DDATA(rwork_density_n), DDATA(g), DDATA(sw),
						DDATA(grad_psic), DDATA(f), DDATA(a));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_split_sd_diag_pressure(PyObject * self,PyObject * args)
  {
    int i, nPoints = 1, pskModelFlag;
    double muw, mun, omega, Kbar, b, capillaryDiffusionScaling;
    PyObject *rwork_psk, *rwork_density_w, *rwork_density_n, *g, *sw, *grad_psic, *f, *a;
    if(!PyArg_ParseTuple
       (args, "iddddddOOOOOOOO", &pskModelFlag, &muw, &mun, &omega, &Kbar, &b, &capillaryDiffusionScaling, &rwork_psk,
	&rwork_density_w, &rwork_density_n, &g, &sw, &grad_psic, &f, &a))
      return NULL;
    for(i = 0; i < ND(f) - 1; i++)
      nPoints *= SHAPE(f)[i];
    switch(pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_sd_diag_pressure<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
						DDATA(rwork_density_n), DDATA(g), DDATA(sw),
						DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 1:
        twophaseDarcy_split_sd_diag_pressure<VGM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
						  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
						  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 2:
        twophaseDarcy_split_sd_diag_pressure<VGB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 3:
        twophaseDarcy_split_sd_diag_pressure<BCM>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 4:
        twophaseDarcy_split_sd_diag_pressure<BCB>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
					  Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
					  DDATA(rwork_density_n), DDATA(g), DDATA(sw),
					  DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      default:
        twophaseDarcy_split_sd_diag_pressure<SimplePSK>(nPoints, SHAPE(f)[ND(f) - 1], muw, mun, omega,
						Kbar, b, capillaryDiffusionScaling, DDATA(rwork_psk), DDATA(rwork_density_w),
						DDATA(rwork_density_n), DDATA(g), DDATA(sw),
						DDATA(grad_psic), DDATA(f), DDATA(a));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  
  static PyObject *twophaseDarcy_split_pressure_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *sw, *grad_psic, *f, *a;
    if(!PyArg_ParseTuple(args,
                         "iOddOOddOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &sw, &grad_psic, &f, &a))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_pressure_het_matType<SimplePSK>(nSimplex,
							    nPointsPerSimplex,
							    SHAPE(g)[0],
							    2,
							    IDATA(matType),
							    muw,
							    mun,
							    DDATA(omega),
							    DDATA(Kbar),
							    b,
							    capillaryDiffusionScaling,
							    DDATA(rwork_psk),
							    DDATA(rwork_density_w),
							    DDATA(rwork_density_n),
							    DDATA(g), DDATA(sw),
							    DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 1:
        twophaseDarcy_split_pressure_het_matType<VGM>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 2:
        twophaseDarcy_split_pressure_het_matType<VGB>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 3:
        twophaseDarcy_split_pressure_het_matType<BCM>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 4:
        twophaseDarcy_split_pressure_het_matType<BCB>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      default:
        twophaseDarcy_split_pressure_het_matType<SimplePSK>(nSimplex,
							    nPointsPerSimplex,
							    SHAPE(g)[0],
							    2,
							    IDATA(matType),
							    muw,
							    mun,
							    DDATA(omega),
							    DDATA(Kbar),
							    b,
							    capillaryDiffusionScaling,
							    DDATA(rwork_psk),
							    DDATA(rwork_density_w),
							    DDATA(rwork_density_n),
							    DDATA(g), DDATA(sw),
							    DDATA(grad_psic), DDATA(f), DDATA(a));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  static PyObject *twophaseDarcy_split_sd_diag_pressure_het_matType(PyObject * self,PyObject * args)
  {
    int i,nSimplex=1,nPointsPerSimplex=1,pskModelFlag;
    double muw, mun, b, capillaryDiffusionScaling;
    PyObject *matType,*omega,*Kbar,*rwork_psk, *rwork_density_w, *rwork_density_n, *g, *sw, *grad_psic, *f, *a;
    if(!PyArg_ParseTuple(args,
                         "iOddOOddOOOOOOOO",
                         &pskModelFlag,
                         &matType,
                         &muw,
                         &mun,
                         &omega,
                         &Kbar,
                         &b,
			 &capillaryDiffusionScaling,
                         &rwork_psk,
                         &rwork_density_w,
                         &rwork_density_n,
                         &g, &sw, &grad_psic, &f, &a))
      return NULL;
    for(i=0; i < ND(sw)-1; i++)
      nSimplex *= SHAPE(sw)[i];
    for(i=ND(sw)-1;i<ND(sw);i++)
      nPointsPerSimplex *= SHAPE(sw)[i];    
    switch (pskModelFlag)
      {
      case 0:
        twophaseDarcy_split_sd_diag_pressure_het_matType<SimplePSK>(nSimplex,
							    nPointsPerSimplex,
							    SHAPE(g)[0],
							    2,
							    IDATA(matType),
							    muw,
							    mun,
							    DDATA(omega),
							    DDATA(Kbar),
							    b,
							    capillaryDiffusionScaling,
							    DDATA(rwork_psk),
							    DDATA(rwork_density_w),
							    DDATA(rwork_density_n),
							    DDATA(g), DDATA(sw),
							    DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 1:
        twophaseDarcy_split_sd_diag_pressure_het_matType<VGM>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 2:
        twophaseDarcy_split_sd_diag_pressure_het_matType<VGB>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 3:
        twophaseDarcy_split_sd_diag_pressure_het_matType<BCM>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      case 4:
        twophaseDarcy_split_sd_diag_pressure_het_matType<BCB>(nSimplex,
						      nPointsPerSimplex,
						      SHAPE(g)[0],
						      4,
						      IDATA(matType),
						      muw,
						      mun,
						      DDATA(omega),
						      DDATA(Kbar),
						      b,
						      capillaryDiffusionScaling,
						      DDATA(rwork_psk),
						      DDATA(rwork_density_w),
						      DDATA(rwork_density_n),
						      DDATA(g), DDATA(sw),
						      DDATA(grad_psic), DDATA(f), DDATA(a));
        break;
      default:
        twophaseDarcy_split_sd_diag_pressure_het_matType<SimplePSK>(nSimplex,
							    nPointsPerSimplex,
							    SHAPE(g)[0],
							    2,
							    IDATA(matType),
							    muw,
							    mun,
							    DDATA(omega),
							    DDATA(Kbar),
							    b,
							    capillaryDiffusionScaling,
							    DDATA(rwork_psk),
							    DDATA(rwork_density_w),
							    DDATA(rwork_density_n),
							    DDATA(g), DDATA(sw),
							    DDATA(grad_psic), DDATA(f), DDATA(a));
      }
    Py_INCREF(Py_None);
    return Py_None;
  }
  //------------------------------ end  deprecated routines --------------------

  static PyMethodDef cTwophaseDarcyCoefficientsMethods[] = {
    {"twophaseDarcy_fc_sd_het_matType",
     twophaseDarcy_fc_sd_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of (slightly) compressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep. for het"},
    {"twophaseDarcy_fc_sd_het_matType_nonPotentialForm",
     twophaseDarcy_fc_sd_het_matType_nonPotentialForm,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of (slightly) compressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep. for het"},
    {"twophaseDarcy_fc_pp_sd_het_matType",
     twophaseDarcy_fc_pp_sd_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of (slightly) compressible, two-phase Darcy flow for a heterogeneous medium, pressure-pressure sparse diffusion rep. for het"},
    {"twophaseDarcy_incompressible_split_sd_pressure_het_matType",
     twophaseDarcy_incompressible_split_sd_pressure_het_matType,
     METH_VARARGS,
     "Evaluate  the pressure coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_incompressible_split_sd_saturation_het_matType",
     twophaseDarcy_incompressible_split_sd_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the saturation coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_slightCompressible_split_sd_pressure_het_matType",
     twophaseDarcy_slightCompressible_split_sd_pressure_het_matType,
     METH_VARARGS,
     "Evaluate  the pressure coefficients of the split fractional flow formulation of slight compressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_slightCompressible_split_sd_saturation_het_matType",
     twophaseDarcy_slightCompressible_split_sd_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the saturation coefficients of the split fractional flow formulation of slight compressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_compressibleN_split_sd_pressure_het_matType",
     twophaseDarcy_compressibleN_split_sd_pressure_het_matType,
     METH_VARARGS,
     "Evaluate  the pressure coefficients of the split fractional flow formulation of compressible non-wetting phase, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_compressibleN_split_sd_saturation_het_matType",
     twophaseDarcy_compressibleN_split_sd_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the saturation coefficients of the split fractional flow formulation of compressible non-wetting phase, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het"},
    {"twophaseDarcy_vol_frac",
     twophaseDarcy_vol_frac,
     METH_VARARGS,
     "compute phase volume fractions from point-vals for sw and zoned material types for porosity (omega)"},
    {"generateSplineTables",
     ctwophaseDarcy_generateSplineTables,
     METH_VARARGS,
     "generate spline table look up arrays"},
    {"twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType",
     twophaseDarcy_incompressible_split_pp_sd_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the saturation coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep het capillary pressure is primary variable"},
    /*deprecated routines*/
   {"twophaseDarcy_fc",
     twophaseDarcy_fc,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of incompressible, two-phase Darcy flow"},
    {"twophaseDarcy_fc_sd_diag",
     twophaseDarcy_fc_sd_diag,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of incompressible, two-phase Darcy flow, sparse diffusion rep. assuming isotropic Ks"},
    {"twophaseDarcy_fc_het_matType",
     twophaseDarcy_fc_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of incompressible, two-phase Darcy flow for a heterogeneous medium"},
    {"twophaseDarcy_fc_sd_diag_het_matType",
     twophaseDarcy_fc_sd_diag_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion rep. assuming isotropic Ks"},
    {"twophaseDarcy_fc_ff",
     twophaseDarcy_fc_ff,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled fractional flow formulation of incompressible, two-phase Darcy flow"},
    {"twophaseDarcy_fc_ff_sd_diag",
     twophaseDarcy_fc_ff_sd_diag,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled fractional flow formulation of incompressible, two-phase Darcy flow, sparse diff. diagonal het"},
    {"twophaseDarcy_fc_ff_sd_diag_het_matType",
     twophaseDarcy_fc_ff_sd_diag_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diff. diagonal het"},
    {"twophaseDarcy_fc_ff_het_matType",
     twophaseDarcy_fc_ff_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the fully coupled fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium"},
    {"twophaseDarcy_split_saturation",
     twophaseDarcy_split_saturation,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow"},
    {"twophaseDarcy_split_sd_diag_saturation",
     twophaseDarcy_split_sd_diag_saturation,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow, sparse diff. diagonal het"},
    {"twophaseDarcy_split_saturation_het_matType",
     twophaseDarcy_split_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium"},
    {"twophaseDarcy_split_sd_diag_saturation_het_matType",
     twophaseDarcy_split_sd_diag_saturation_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion diagonal"},
    {"twophaseDarcy_split_pressure",
     twophaseDarcy_split_pressure,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow"},
    {"twophaseDarcy_split_sd_diag_pressure",
     twophaseDarcy_split_sd_diag_pressure,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow, sparse diffusion diagonal het"},
    {"twophaseDarcy_split_pressure_het_matType",
     twophaseDarcy_split_pressure_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium"},
    {"twophaseDarcy_split_sd_diag_pressure_het_matType",
     twophaseDarcy_split_sd_diag_pressure_het_matType,
     METH_VARARGS,
     "Evaluate  the coefficients of the split fractional flow formulation of incompressible, two-phase Darcy flow for a heterogeneous medium, sparse diffusion diagonal het"},
    {NULL, NULL, 0, NULL}
  };

  PyMODINIT_FUNC initcTwophaseDarcyCoefficients(void)
  {
    PyObject *m, *d;
    m = Py_InitModule("cTwophaseDarcyCoefficients", cTwophaseDarcyCoefficientsMethods);
    d = PyModule_GetDict(m);
    import_array();
  }
}
