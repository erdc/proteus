# A type of -*- python -*- file
import numpy as np
cimport numpy as np
cdef extern from "transportCoefficients.h":
    void clinearADR_ConstantCoefficientsEvaluate "linearADR_ConstantCoefficientsEvaluate"(const int nPoints,
                                                const int nSpace,
                                                const double M,
                                                const double* A,
                                                const double* B,
                                                const double C,
                                                const double t,
                                                const double* x,
                                                const double* u,
                                                double* m,
                                                double* dm,
                                                double* f,
                                                double* df,
                                                double* a,
                                                double* r,
                                                double* dr)
    void cgroundwaterTransportCoefficientsEvaluate "groundwaterTransportCoefficientsEvaluate"(const int nPoints,
                                                const int nSpace,
                                                const double omega,
                                                const double d,
                                                const double alpha_L,
                                                const double alpha_T,
                                                const double* v,
                                                const double* u,
                                                double* m,
                                                double* dm,
                                                double* f,
                                                double* df,
                                                double* a)
    void cgroundwaterBiodegradation01EvaluateFC "groundwaterBiodegradation01EvaluateFC"(const int nPoints,
                        const int nSpace,
                        const double omega,
                        const double d_c,
                        const double d_e,
                        const double alpha_L,
                        const double alpha_T,
                        const double Kox_max,
                        const double Kox_C,
                        const double Kox_E,
                        const double Kox_X,
                        const double Yield,
                        const double k_d,
                        const double* v,
                        const double* c_c,
                        const double* c_e,
                        const double* c_x,
                        double* m_c,
                        double* dm_c,
                        double* m_e,
                        double* dm_e,
                        double* m_x,
                        double* dm_x,
                        double* f_c,
                        double* df_c,
                        double* f_e,
                        double* df_e,
                        double* a_c,
                        double* a_e,
                        double* r_c,
                        double* dr_c_dc,
                        double* dr_c_de,
                        double* dr_c_dx,
                        double* r_e,
                        double* dr_e_dc,
                        double* dr_e_de,
                        double* dr_e_dx,
                        double* r_x,
                        double* dr_x_dc,
                        double* dr_x_de,
                        double* dr_x_dx)
    void cgroundwaterBryantDawsonIonExEvaluateFC "groundwaterBryantDawsonIonExEvaluateFC"(const int nPoints,
                            const int nSpace,
                            const double omega,
                            const double d_m,
                            const double d_h,
                            const double alpha_L,
                            const double alpha_T,
                            const double K_m,
                            const double K_h,
                            const double K_w,
                            const double Z_tot,
                            const double* v,
                            const double* c_m,
                            const double* c_h,
                            double* m_m,
                            double* dm_m_m,
                            double* dm_m_h,
                            double* m_h,
                            double* dm_h_m,
                            double* dm_h_h,
                            double* f_m,
                            double* df_m,
                            double* f_h,
                            double* df_h,
                            double* a_m,
                            double* a_h,
                            double* phi_h,
                            double* dphi_h,
                            double* r_m,
                            double* dr_m_dm,
                            double* dr_m_dh,
                            double* r_h,
                            double* dr_h_dm,
                            double* dr_h_dh)
    void cgroundwaterTransportCoefficientsEvaluate_hetMat "groundwaterTransportCoefficientsEvaluate_hetMat"(const int nSimplex,
                                const int nPointsPerSimplex,
                                const int nSpace,
                                const double d,
                                const int* materialTypes,
                                const double* omega_types,
                                const double* alpha_L_types,
                                const double* alpha_T_types,
                                const double* v,
                                const double* u,
                                double* m,
                                double* dm,
                                double* f,
                                double* df,
                                double* a)
    void cvariablySaturatedGroundwaterTransportCoefficientsEvaluate_hetMat "variablySaturatedGroundwaterTransportCoefficientsEvaluate_hetMat"(const int nSimplex,
                                        const int nPointsPerSimplex,
                                        const int nSpace,
                                        const double d,
                                        const int* materialTypes,
                                        const double* theta, 
                                        const double* alpha_L_types,
                                        const double* alpha_T_types,
                                        const double* v,
                                        const double* u,
                                        double* m,
                                        double* dm,
                                        double* f,
                                        double* df,
                                        double* a)
    void cvariablySaturatedGroundwaterEnergyTransportCoefficientsEvaluate_hetMat "variablySaturatedGroundwaterEnergyTransportCoefficientsEvaluate_hetMat"(const int nSimplex,
                                            const int nPointsPerSimplex,
                                            const int nSpace,
                                            const double rho_w,
                                            const double rho_n,
                                            const double specificHeat_w,
                                            const double specificHeat_n,
                                            const int* materialTypes,
                                            const double* theta, 
                                            const double* thetaS_types,
                                            const double* alpha_L_types,
                                            const double* alpha_T_types,
                                            const double* rho_s_types,
                                            const double* specificHeat_s_types,
                                            const double* Lambda_sat_types,
                                            const double* Lambda_dry_types,
                                            const double* Lambda_aniso_types,
                                            const double* v,
                                            const double* u,
                                            double* m,
                                            double* dm,
                                            double* f,
                                            double* df,
                                            double* a)
    void cnonlinearADR_pqrstEvaluate "nonlinearADR_pqrstEvaluate"(const int nPoints,
                                    const int nSpace,
                                    const double M,
                                    const double* A,
                                    const double* B,
                                    const double C,
                                    const double p_pow,
                                    const double q_pow,
                                    const double r_pow,
                                    const double s_pow,
                                    const double t_pow,
                                    const double t,
                                    const double* x,
                                    const double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da,
                                    double* phi,
                                    double* dphi,
                                    double* r,
                                    double* dr)
    void cnonlinearADR_pqrstDualEvaluate "nonlinearADR_pqrstDualEvaluate"(const int nPoints,
                                        const int nSpace,
                                        const double M,
                                        const double* A,
                                        const double* B,
                                        const double C,
                                        const double p1,
                                        const double q1,
                                        const double r1,
                                        const double s1,
                                        const double t1,
                                        const double p2,
                                        const double q2,
                                        const double r2,
                                        const double s2,
                                        const double t2,
                                        const double t,
                                        const double* x,
                                        const double* u,
                                        double* m,
                                        double* dm,
                                        double* f,
                                        double* df,
                                        double* a,
                                        double* da,
                                        double* phi,
                                        double* dphi,
                                        double* r,
                                        double* dr)
    void cunitSquareRotationEvaluate "unitSquareRotationEvaluate"(const int nPoints,
                                    const int nSpace,
                                    const double* x,
                                    const double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df)
    void cunitCubeRotationEvaluate "unitCubeRotationEvaluate"(const int nPoints,
                    const int nSpace,
                    const double* x,
                    const double* u,
                    double* m,
                    double* dm,
                    double* f,
                    double* df)
    void crotatingPulseVelEvaluate "rotatingPulseVelEvaluate"(const int nPoints,
                                const int nSpace,
                                const double self_a,
                                const double* x,
                                const double* u,
                                double* m,
                                double* dm,
                                double* f,
                                double* df,
                                double* a,
                                double* da,
                                double* phi,
                                double* dphi)
    void cdisRotatingPulseVelEvaluate "disRotatingPulseVelEvaluate"(const int nPoints,
                                    const int nSpace,
                                    const double self_a,
                                    const double* x,
                                    const double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da,
                                    double* phi,
                                    double* dphi)
    void cdisVelEvaluate "disVelEvaluate"(const int nPoints,
                        const int nSpace,
                        const double self_a,
                        const double* x,
                        const double* u,
                        double* m,
                        double* dm,
                        double* f,
                        double* df,
                        double* a,
                        double* da,
                        double* phi,
                        double* dphi)
    void cburgersDiagonalVelEvaluate "burgersDiagonalVelEvaluate"(const int nPoints,
                                    const int nSpace,
                                    const double self_a,
                    const double* self_v,
                                    const double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* phi,
                                    double* dphi)
    void cburgersDiagonalVelHJEvaluate "burgersDiagonalVelHJEvaluate"(const int nPoints,
                    const int nSpace,
                    const double self_a,
                    const double* self_v,
                    const double* u,
                    const double* grad_u,
                    double* m,
                    double* dm,
                    double* H,
                    double* dH,
                    double* a,
                    double* phi,
                    double* dphi)
    void ctwophasePotentialFlowEvaluate "twophasePotentialFlowEvaluate"(int nPoints,
                                    int nSpace,
                                    double* M,
                                    double* A,
                                    double* B,
                                    double* Bcon,
                                    double* C,
                                    double t,
                                    double* x,
                                    double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da,
                                    double* phi,
                                    double* dphi,
                                    double* r,
                                    double* dr)
    void ctwophasePotentialFlowUpdateFreeSurface "twophasePotentialFlowUpdateFreeSurface"(int nPoints,
                                            int nSpace,
                                            double eps,
                                            double* u_levelSet,
                                            double M1,
                                            double M2,
                                            double* M,
                                            double* A1,
                                            double* A2,
                                            double* A,
                                            double* B1,
                                            double* B2,
                                            double* B,
                                            double* Bcon1,
                                            double* Bcon2,
                                            double* Bcon,
                                            double C1,
                                            double C2,
                                            double* C)
    void ctwophaseLevelSetCoefficientsUpdateVelocity "twophaseLevelSetCoefficientsUpdateVelocity"(int nPoints,
                                                    int nSpace,
                                                    double v_scale,
                                                    double* vIn,
                                                    double* vOut)
    void ctwophaseLevelSetCoefficientsEvaluate "twophaseLevelSetCoefficientsEvaluate"(int nPoints,
                                          int nSpace,
                                          double* B,
                                          double  t,
                                          double* x,
                                          double* u,
                                          double* grad_u,
                                          double* m,
                                          double* dm,
                                          double* h,
                                          double* dh,
                                          double* rh)
    void ctwophaseLevelSetCoefficientsEvaluateCI "twophaseLevelSetCoefficientsEvaluateCI"(int nPoints,
                                            int nSpace,
                                            double* B,
                                            double  t,
                                            double* x,
                                            double* u,
                                            double* m,
                                            double* dm,
                                            double* f,
                                            double* df,
                                            double* a,
                                            double* da,
                                            double* phi,
                                            double* dphi,
                                            double* r,
                                            double* dr)
    void cncLevelSetCoefficientsEvaluate "ncLevelSetCoefficientsEvaluate"(int nPoints,
                                        int nSpace,
                                        double* v,
                                        double* u,
                                        double* grad_u,
                                        double* m,
                                        double* dm,
                                        double* H,
                                        double* dH)
    void ccLevelSetCoefficientsEvaluate "cLevelSetCoefficientsEvaluate"(int nPoints,
                                    int nSpace,
                                    double* v,
                                    double* u,
                                    double* m,
                                    double* dm,
                                    double* f,
                                    double* df)
    void cVOFCoefficientsEvaluate "VOFCoefficientsEvaluate"(int nPoints,
                                int nSpace,
                                double eps,
                                double* v,
                                double* phi,
                                double* u,
                                double* m,
                                double* dm,
                                double* f,
                                double* df)
    void clevelSetCurvatureCoefficientsEvaluate "levelSetCurvatureCoefficientsEvaluate"(int nPoints,
                                            int nSpace,
                                            double* grad_phi,
                                            double* u,
                                            double* f,
                                            double* r,
                                            double* dr)
    void ctwophaseLevelSetCoefficientsEvaluate "twophaseLevelSetCoefficientsEvaluate"(int nPoints,
                                          int nSpace,
                                          double* B,
                                          double  t,
                                          double* x,
                                          double* u,
                                          double* grad_u,
                                          double* m,
                                          double* dm,
                                          double* h,
                                          double* dh,
                                          double* rh)
    void ceikonalEquationEvaluate "eikonalEquationEvaluate"(int nPoints,
                    int nSpace,
                    double rhs,
                    double* u,
                    double* grad_u,
                    double* m,
                    double* dm,
                    double* H,
                    double* dH,
                    double* r)
    void credistanceLevelSetCoefficientsEvaluate "redistanceLevelSetCoefficientsEvaluate"(int nPoints,
                            int nSpace,
                            double eps,
                            double* u_levelSet,
                            double* u,
                            double* grad_u,
                            double* m,
                            double* dm,
                            double* H,
                            double* dH,
                            double* r)
    void credistanceLevelSetCoefficientsWithWeakPenaltyEvaluate "redistanceLevelSetCoefficientsWithWeakPenaltyEvaluate"(int nPoints,
                                int nSpace,
                                double eps,
                                double Lambda_penalty,
                                double* u_levelSet,
                                double* u,
                                double* grad_u,
                                double* m,
                                double* dm,
                                double* H,
                                double* dH,
                                double* r,
                                double* dr)
    void credistanceLevelSetSandFCoefficientsEvaluate "redistanceLevelSetSandFCoefficientsEvaluate"(int nSimplex, 
                            int nPointsPerSimplex,
                            int nSpace,
                            double eps,
                            double* u_levelSet,
                            double* dV,
                            double* u,
                            double* grad_u,
                            double* m,
                            double* dm,
                            double* H,
                            double* dH,
                            double* r)
    void csetWeakDirichletConditionsForLevelSet "setWeakDirichletConditionsForLevelSet"(int nElements_global,
                        int nDOF_trial_element,
                        double epsilon_freeze_factor,
                        const double* elementDiameter,
                        const int*  u_l2g,
                        const double* u_dof,
                        int*  freeze_nodes_tmp,
                        int*  weakDirichletConditionFlags)
    void csetSimpleWeakDirichletConditionsForLevelSet "setSimpleWeakDirichletConditionsForLevelSet"(int nElements_global,
                                                    int nDOF_trial_element,
                                                    double epsilon_freeze_factor,
                                                    const double* elementDiameter,
                                                    const int*  u_l2g,
                                                    const double* u_dof,
                                                    int*  freeze_nodes_tmp,
                                                    int*  weakDirichletConditionFlags)
    void cdarcySharpInterfaceFlowEvaluate "darcySharpInterfaceFlowEvaluate"(int nPoints,
                        int nSpace,
                        double Km, double rhoM,
                        double Kp, double rhoP,
                        double eps,
                        double*  gravity_u,
                        double*  u,
                        double*  gradu,
                        double*  u_levelSet,
                        double*  phi_pot,
                        double*  a,
                        double*  f,
                        double*  r,
                        double*  m,
                        double*  dphi_pot,
                        double*  da,
                        double*  df,
                        double*  dr,
                        double*  dm)
    void cdarcySharpInterfaceFlowImEvaluate "darcySharpInterfaceFlowImEvaluate"(int nPoints,
                        int nSpace,
                        double Km, double rhoM,
                        double Kp, double rhoP,
                        double eps,
                        double*  gravity_u,
                        double*  u,
                        double*  gradu,
                        double*  u_levelSet,
                        double*  phi_pot,
                        double*  a,
                        double*  f,
                        double*  r,
                        double*  m,
                        double*  dphi_pot,
                        double*  da,
                        double*  df,
                        double*  dr,
                        double*  dm)
    void cNavierStokes_2D_Evaluate "NavierStokes_2D_Evaluate"(const int nPoints,
                                const double rho,
                                const double nu,
                                const double* g,
                                const double* p,
                                const double* grad_p,
                                const double* u,
                                const double* v,
                                double* mom_u_acc,
                                double* dmom_u_acc_u,
                                double* mom_v_acc,
                                double* dmom_v_acc_v,
                                double* mass_adv,
                                double* dmass_adv_u,
                                double* dmass_adv_v,
                                double* mom_u_adv,
                                double* dmom_u_adv_u,
                                double* dmom_u_adv_v,
                                double* mom_v_adv,
                                double* dmom_v_adv_u,
                                double* dmom_v_adv_v,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* mom_u_ham,
                                double* dmom_u_ham_grad_p,
                                double* mom_v_ham,
                                double* dmom_v_ham_grad_p)
    void cNavierStokes_3D_Evaluate "NavierStokes_3D_Evaluate"(const int nPoints,
                                const double rho,
                                const double nu,
                                const double* g,
                                const double* p,
                                const double* grad_p,
                                const double* u,
                                const double* v,
                                const double* w,
                                double* mom_u_acc,
                                double* dmom_u_acc_u,
                                double* mom_v_acc,
                                double* dmom_v_acc_v,
                                double* mom_w_acc,
                                double* dmom_w_acc_w,
                                double* mass_adv,
                                double* dmass_adv_u,
                                double* dmass_adv_v,
                                double* dmass_adv_w,
                                double* mom_u_adv,
                                double* dmom_u_adv_u,
                                double* dmom_u_adv_v,
                                double* dmom_u_adv_w,
                                double* mom_v_adv,
                                double* dmom_v_adv_u,
                                double* dmom_v_adv_v,
                                double* dmom_v_adv_w,
                                double* mom_w_adv,
                                double* dmom_w_adv_u,
                                double* dmom_w_adv_v,
                                double* dmom_w_adv_w,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_w_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* mom_w_source,
                                double* mom_u_ham,
                                double* dmom_u_ham_grad_p,
                                double* mom_v_ham,
                                double* dmom_v_ham_grad_p,
                                double* mom_w_ham,
                                double* dmom_w_ham_grad_p)
    void cStokes_2D_Evaluate "Stokes_2D_Evaluate"(const int nPoints,
                            const double rho,
                            const double nu,
                            const double* g,
                            const double* p,
                            const double* grad_p,
                            const double* u,
                            const double* v,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                            double* mom_u_source,
                            double* mom_v_source,
                            double* mom_u_ham,
                            double* dmom_u_ham_grad_p,
                            double* mom_v_ham,
                            double* dmom_v_ham_grad_p)
    void cStokesP_2D_Evaluate "StokesP_2D_Evaluate"(const int nPoints,
                            const double rho,
                            const double nu,
                            const double* g,
                            const double* p,
                            const double* u,
                            const double* v,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                            double* mom_u_adv,
                            double* dmom_u_adv_p,
                            double* mom_v_adv,
                            double* dmom_v_adv_p,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                            double* mom_u_source,
                            double* mom_v_source)
    void cStokes_3D_Evaluate "Stokes_3D_Evaluate"(const int nPoints,
                            const double rho,
                            const double nu,
                            const double* g,
                            const double* p,
                            const double* grad_p,
                            const double* u,
                            const double* v,
                            const double* w,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                            double* mom_w_acc,
                            double* dmom_w_acc_w,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                            double* dmass_adv_w,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                            double* mom_w_diff_ten,
                            double* mom_u_source,
                            double* mom_v_source,
                            double* mom_w_source,
                            double* mom_u_ham,
                            double* dmom_u_ham_grad_p,
                            double* mom_v_ham,
                            double* dmom_v_ham_grad_p,
                            double* mom_w_ham,
                            double* dmom_w_ham_grad_p)
    void cStokesP_3D_Evaluate "StokesP_3D_Evaluate"(const int nPoints,
                            const double rho,
                            const double nu,
                            const double* g,
                            const double* p,
                            const double* u,
                            const double* v,
                            const double* w,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                double* mom_w_acc,
                double* dmom_w_acc_w,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                double* dmass_adv_w,
                            double* mom_u_adv,
                            double* dmom_u_adv_p,
                            double* mom_v_adv,
                            double* dmom_v_adv_p,
                double* mom_w_adv,
                double* dmom_w_adv_p,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                double* mom_w_diff_ten,
                            double* mom_u_source,
                            double* mom_v_source,
                double* mom_w_source)
    void cTwophaseNavierStokes_LS_SO_2D_Evaluate "TwophaseNavierStokes_LS_SO_2D_Evaluate"(const int nPoints,
                                                const double eps,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* phi,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p)
    void cTwophaseNavierStokes_ST_LS_SO_2D_Evaluate "TwophaseNavierStokes_ST_LS_SO_2D_Evaluate"(const int nPoints,
                                                const double eps_rho,
                                                const double eps_mu,
                                                const double sigma,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* phi,
                                                const double* n,
                                                const double* kappa,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_uv_diff_ten,
                                                double* mom_vu_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p)
    void cTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd "TwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd"(const int nPoints,
                                                    const double eps_rho,
                                                    const double eps_mu,
                                                    const double sigma,
                                                    const double rho_0,
                                                    const double nu_0,
                                                    const double rho_1,
                                                    const double nu_1,
                                                    const double* g,
                                                    const double* phi,
                                                    const double* n,
                                                    const double* kappa,
                                                    const double* p,
                                                    const double* grad_p,
                                                    const double* u,
                                                    const double* v,
                                                    double* mom_u_acc,
                                                    double* dmom_u_acc_u,
                                                    double* mom_v_acc,
                                                    double* dmom_v_acc_v,
                                                    double* mass_adv,
                                                    double* dmass_adv_u,
                                                    double* dmass_adv_v,
                                                    double* mom_u_adv,
                                                    double* dmom_u_adv_u,
                                                    double* dmom_u_adv_v,
                                                    double* mom_v_adv,
                                                    double* dmom_v_adv_u,
                                                    double* dmom_v_adv_v,
                                                    double* mom_u_diff_ten,
                                                    double* mom_v_diff_ten,
                                                    double* mom_uv_diff_ten,
                                                    double* mom_vu_diff_ten,
                                                    double* mom_u_source,
                                                    double* mom_v_source,
                                                    double* mom_u_ham,
                                                    double* dmom_u_ham_grad_p,
                                                    double* mom_v_ham,
                                                    double* dmom_v_ham_grad_p)
    void cThreephaseNavierStokes_ST_LS_SO_2D_Evaluate "ThreephaseNavierStokes_ST_LS_SO_2D_Evaluate"(const int nPoints,
                            const double boundaryPenaltyCoef,
                            const double volumePenaltyCoef,
                            const double eps_rho,
                            const double eps_mu,
                            const double sigma,
                            const double rho_0,
                            const double nu_0,
                            const double rho_1,
                            const double nu_1,
                            const double rho_s,
                            const double nu_s,
                            const double* g,
                            const double* phi,
                            const double* n,
                            const double* kappa,
                            const double* phi_s,
                            const double* n_s,
                            const double* p,
                            const double* grad_p,
                            const double* u,
                            const double* v,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                            double* mom_u_adv,
                            double* dmom_u_adv_u,
                            double* dmom_u_adv_v,
                            double* mom_v_adv,
                            double* dmom_v_adv_u,
                            double* dmom_v_adv_v,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                            double* mom_uv_diff_ten,
                            double* mom_vu_diff_ten,
                            double* mom_u_source,
                            double* dmom_u_source_u,
                            double* dmom_u_source_v,
                            double* mom_v_source,
                            double* dmom_v_source_u,
                            double* dmom_v_source_v,
                            double* mom_u_ham,
                            double* dmom_u_ham_grad_p,
                            double* mom_v_ham,
                            double* dmom_v_ham_grad_p)
    void cTwophaseNavierStokes_ST_LS_SO_3D_Evaluate "TwophaseNavierStokes_ST_LS_SO_3D_Evaluate"(const int nPoints,
                                                const double eps_rho,
                                                const double eps_mu,
                                                const double sigma,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* phi,
                                                const double* n,
                                                const double* kappa,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                const double* w,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mom_w_acc,
                                                double* dmom_w_acc_w,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* dmass_adv_w,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* dmom_u_adv_w,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* dmom_v_adv_w,
                                                double* mom_w_adv,
                                                double* dmom_w_adv_u,
                                                double* dmom_w_adv_v,
                                                double* dmom_w_adv_w,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_w_diff_ten,
                                                double* mom_uv_diff_ten,
                                                double* mom_uw_diff_ten,
                                                double* mom_vu_diff_ten,
                                                double* mom_vw_diff_ten,
                                                double* mom_wu_diff_ten,
                                                double* mom_wv_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_w_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p,
                                                double* mom_w_ham,
                                                double* dmom_w_ham_grad_p)
    void cTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd "TwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd"(const int nPoints,
                                                    const double eps_rho,
                                                    const double eps_mu,
                                                    const double sigma,
                                                    const double rho_0,
                                                    const double nu_0,
                                                    const double rho_1,
                                                    const double nu_1,
                                                    const double* g,
                                                    const double* phi,
                                                    const double* n,
                                                    const double* kappa,
                                                    const double* p,
                                                    const double* grad_p,
                                                    const double* u,
                                                    const double* v,
                                                    const double* w,
                                                    double* mom_u_acc,
                                                    double* dmom_u_acc_u,
                                                    double* mom_v_acc,
                                                    double* dmom_v_acc_v,
                                                    double* mom_w_acc,
                                                    double* dmom_w_acc_w,
                                                    double* mass_adv,
                                                    double* dmass_adv_u,
                                                    double* dmass_adv_v,
                                                    double* dmass_adv_w,
                                                    double* mom_u_adv,
                                                    double* dmom_u_adv_u,
                                                    double* dmom_u_adv_v,
                                                    double* dmom_u_adv_w,
                                                    double* mom_v_adv,
                                                    double* dmom_v_adv_u,
                                                    double* dmom_v_adv_v,
                                                    double* dmom_v_adv_w,
                                                    double* mom_w_adv,
                                                    double* dmom_w_adv_u,
                                                    double* dmom_w_adv_v,
                                                    double* dmom_w_adv_w,
                                                    double* mom_u_diff_ten,
                                                    double* mom_v_diff_ten,
                                                    double* mom_w_diff_ten,
                                                    double* mom_uv_diff_ten,
                                                    double* mom_uw_diff_ten,
                                                    double* mom_vu_diff_ten,
                                                    double* mom_vw_diff_ten,
                                                    double* mom_wu_diff_ten,
                                                    double* mom_wv_diff_ten,
                                                    double* mom_u_source,
                                                    double* mom_v_source,
                                                    double* mom_w_source,
                                                    double* mom_u_ham,
                                                    double* dmom_u_ham_grad_p,
                                                    double* mom_v_ham,
                                                    double* dmom_v_ham_grad_p,
                                                    double* mom_w_ham,
                                                    double* dmom_w_ham_grad_p)
    void cThreephaseNavierStokes_ST_LS_SO_3D_Evaluate "ThreephaseNavierStokes_ST_LS_SO_3D_Evaluate"(const int nPoints,
                            const double boundaryPenaltyCoef,
                            const double volumePenaltyCoef,
                            const double eps_rho,
                            const double eps_mu,
                            const double sigma,
                            const double rho_0,
                            const double nu_0,
                            const double rho_1,
                            const double nu_1,
                            const double rho_s,
                            const double nu_s,
                            const double* g,
                            const double* phi,
                            const double* n,
                            const double* kappa,
                            const double* phi_s,
                            const double* n_s,
                            const double* p,
                            const double* grad_p,
                            const double* u,
                            const double* v,
                            const double* w,
                            double* mom_u_acc,
                            double* dmom_u_acc_u,
                            double* mom_v_acc,
                            double* dmom_v_acc_v,
                            double* mom_w_acc,
                            double* dmom_w_acc_w,
                            double* mass_adv,
                            double* dmass_adv_u,
                            double* dmass_adv_v,
                            double* dmass_adv_w,
                            double* mom_u_adv,
                            double* dmom_u_adv_u,
                            double* dmom_u_adv_v,
                            double* dmom_u_adv_w,
                            double* mom_v_adv,
                            double* dmom_v_adv_u,
                            double* dmom_v_adv_v,
                            double* dmom_v_adv_w,
                            double* mom_w_adv,
                            double* dmom_w_adv_u,
                            double* dmom_w_adv_v,
                            double* dmom_w_adv_w,
                            double* mom_u_diff_ten,
                            double* mom_v_diff_ten,
                            double* mom_w_diff_ten,
                            double* mom_uv_diff_ten,
                            double* mom_uw_diff_ten,
                            double* mom_vu_diff_ten,
                            double* mom_vw_diff_ten,
                            double* mom_wu_diff_ten,
                            double* mom_wv_diff_ten,
                            double* mom_u_source,
                            double* dmom_u_source_u,
                            double* dmom_u_source_v,
                            double* dmom_u_source_w,
                            double* mom_v_source,
                            double* dmom_v_source_u,
                            double* dmom_v_source_v,
                            double* dmom_v_source_w,
                            double* mom_w_source,
                            double* dmom_w_source_u,
                            double* dmom_w_source_v,
                            double* dmom_w_source_w,
                            double* mom_u_ham,
                            double* dmom_u_ham_grad_p,
                            double* mom_v_ham,
                            double* dmom_v_ham_grad_p,
                            double* mom_w_ham,
                            double* dmom_w_ham_grad_p)
    void cTwophaseNavierStokes_LS_SO_3D_Evaluate "TwophaseNavierStokes_LS_SO_3D_Evaluate"(const int nPoints,
                                                const double eps,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* phi,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                const double* w,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mom_w_acc,
                                                double* dmom_w_acc_w,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* dmass_adv_w,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* dmom_u_adv_w,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* dmom_v_adv_w,
                                                double* mom_w_adv,
                                                double* dmom_w_adv_u,
                                                double* dmom_w_adv_v,
                                                double* dmom_w_adv_w,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_w_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_w_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p,
                                                double* mom_w_ham,
                                                double* dmom_w_ham_grad_p)
    void cTwophaseStokes_LS_SO_2D_Evaluate "TwophaseStokes_LS_SO_2D_Evaluate"(const int nPoints,
                                        const double eps,
                                        const double rho_0,
                                        const double nu_0,
                                        const double rho_1,
                                        const double nu_1,
                                        const double* g,
                                        const double* phi,
                                        const double* p,
                                        const double* grad_p,
                                        const double* u,
                                        const double* v,
                                        double* mom_u_acc,
                                        double* dmom_u_acc_u,
                                        double* mom_v_acc,
                                        double* dmom_v_acc_v,
                                        double* mass_adv,
                                        double* dmass_adv_u,
                                        double* dmass_adv_v,
                                        double* mom_u_diff_ten,
                                        double* mom_v_diff_ten,
                                        double* mom_u_source,
                                        double* mom_v_source,
                                        double* mom_u_ham,
                                        double* dmom_u_ham_grad_p,
                                        double* mom_v_ham,
                                        double* dmom_v_ham_grad_p)
    void cTwophaseStokes_LS_SO_3D_Evaluate "TwophaseStokes_LS_SO_3D_Evaluate"(const int nPoints,
                                        const double eps,
                                        const double rho_0,
                                        const double nu_0,
                                        const double rho_1,
                                        const double nu_1,
                                        const double* g,
                                        const double* phi,
                                        const double* p,
                                        const double* grad_p,
                                        const double* u,
                                        const double* v,
                                        const double* w,
                                        double* mom_u_acc,
                                        double* dmom_u_acc_u,
                                        double* mom_v_acc,
                                        double* dmom_v_acc_v,
                                        double* mom_w_acc,
                                        double* dmom_w_acc_w,
                                        double* mass_adv,
                                        double* dmass_adv_u,
                                        double* dmass_adv_v,
                                        double* dmass_adv_w,
                                        double* mom_u_diff_ten,
                                        double* mom_v_diff_ten,
                                        double* mom_w_diff_ten,
                                        double* mom_u_source,
                                        double* mom_v_source,
                                        double* mom_w_source,
                                        double* mom_u_ham,
                                        double* dmom_u_ham_grad_p,
                                        double* mom_v_ham,
                                        double* dmom_v_ham_grad_p,
                                        double* mom_w_ham,
                                        double* dmom_w_ham_grad_p)
    void cTwophaseNavierStokes_VOF_SO_2D_Evaluate "TwophaseNavierStokes_VOF_SO_2D_Evaluate"(const int nPoints,
                                                const double eps,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* vof,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p)
    void cTwophaseNavierStokes_VOF_SO_3D_Evaluate "TwophaseNavierStokes_VOF_SO_3D_Evaluate"(const int nPoints,
                                                const double eps,
                                                const double rho_0,
                                                const double nu_0,
                                                const double rho_1,
                                                const double nu_1,
                                                const double* g,
                                                const double* vof,
                                                const double* p,
                                                const double* grad_p,
                                                const double* u,
                                                const double* v,
                                                const double* w,
                                                double* mom_u_acc,
                                                double* dmom_u_acc_u,
                                                double* mom_v_acc,
                                                double* dmom_v_acc_v,
                                                double* mom_w_acc,
                                                double* dmom_w_acc_w,
                                                double* mass_adv,
                                                double* dmass_adv_u,
                                                double* dmass_adv_v,
                                                double* dmass_adv_w,
                                                double* mom_u_adv,
                                                double* dmom_u_adv_u,
                                                double* dmom_u_adv_v,
                                                double* dmom_u_adv_w,
                                                double* mom_v_adv,
                                                double* dmom_v_adv_u,
                                                double* dmom_v_adv_v,
                                                double* dmom_v_adv_w,
                                                double* mom_w_adv,
                                                double* dmom_w_adv_u,
                                                double* dmom_w_adv_v,
                                                double* dmom_w_adv_w,
                                                double* mom_u_diff_ten,
                                                double* mom_v_diff_ten,
                                                double* mom_w_diff_ten,
                                                double* mom_u_source,
                                                double* mom_v_source,
                                                double* mom_w_source,
                                                double* mom_u_ham,
                                                double* dmom_u_ham_grad_p,
                                                double* mom_v_ham,
                                                double* dmom_v_ham_grad_p,
                                                double* mom_w_ham,
                                                double* dmom_w_ham_grad_p)
    void cTwophaseStokes_VOF_SO_2D_Evaluate "TwophaseStokes_VOF_SO_2D_Evaluate"(const int nPoints,
                                        const double eps,
                                        const double rho_0,
                                        const double nu_0,
                                        const double rho_1,
                                        const double nu_1,
                                        const double* g,
                                        const double* vof,
                                        const double* p,
                                        const double* grad_p,
                                        const double* u,
                                        const double* v,
                                        double* mom_u_acc,
                                        double* dmom_u_acc_u,
                                        double* mom_v_acc,
                                        double* dmom_v_acc_v,
                                        double* mass_adv,
                                        double* dmass_adv_u,
                                        double* dmass_adv_v,
                                        double* mom_u_diff_ten,
                                        double* mom_v_diff_ten,
                                        double* mom_u_source,
                                        double* mom_v_source,
                                        double* mom_u_ham,
                                        double* dmom_u_ham_grad_p,
                                        double* mom_v_ham,
                                        double* dmom_v_ham_grad_p)
    void cTwophaseStokes_VOF_SO_3D_Evaluate "TwophaseStokes_VOF_SO_3D_Evaluate"(const int nPoints,
                                        const double eps,
                                        const double rho_0,
                                        const double nu_0,
                                        const double rho_1,
                                        const double nu_1,
                                        const double* g,
                                        const double* vof,
                                        const double* p,
                                        const double* grad_p,
                                        const double* u,
                                        const double* v,
                                        const double* w,
                                        double* mom_u_acc,
                                        double* dmom_u_acc_u,
                                        double* mom_v_acc,
                                        double* dmom_v_acc_v,
                                        double* mom_w_acc,
                                        double* dmom_w_acc_w,
                                        double* mass_adv,
                                        double* dmass_adv_u,
                                        double* dmass_adv_v,
                                        double* dmass_adv_w,
                                        double* mom_u_diff_ten,
                                        double* mom_v_diff_ten,
                                        double* mom_w_diff_ten,
                                        double* mom_u_source,
                                        double* mom_v_source,
                                        double* mom_w_source,
                                        double* mom_u_ham,
                                        double* dmom_u_ham_grad_p,
                                        double* mom_v_ham,
                                        double* dmom_v_ham_grad_p,
                                        double* mom_w_ham,
                                        double* dmom_w_ham_grad_p)
    void cunitSquareVortexEvaluate "unitSquareVortexEvaluate"(const int nPoints,
                    const int nSpace,
                    double t,
                    const double* x,
                    const double* u,
                    double* m,
                    double* dm,
                    double* f,
                    double* df)
    void cconstantVelocityLevelSetEvaluate "constantVelocityLevelSetEvaluate"(const int nPoints,
                        const int nSpace,
                        const double* b,
                        const double* x,
                        const double* u,
                        const double* gradu,
                        double* m,
                        double* dm,
                        double* f,
                        double* df,
                        double* H,
                        double* dH)
    void cconstantNormalVelocityLevelSetEvaluate "constantNormalVelocityLevelSetEvaluate"(const int nPoints,
                            const int nSpace,
                            double b,
                            const double* x,
                            const double* u,
                            const double* gradu,
                            double* m,
                            double* dm,
                            double* f,
                            double* df,
                            double* H,
                            double* dH)
    void cunitSquareVortexLevelSetEvaluate "unitSquareVortexLevelSetEvaluate"(const int nPoints,
                        const int nSpace,
                        double t,
                        const double* x,
                        const double* u,
                        const double* gradu,
                        double* m,
                        double* dm,
                        double* f,
                        double* df,
                        double* H,
                        double* dH)
    void cunitSquareRotationLevelSetEvaluate "unitSquareRotationLevelSetEvaluate"(const int nPoints,
                        const int nSpace,
                        double t,
                        const double* x,
                        const double* u,
                        const double* gradu,
                        double* m,
                        double* dm,
                        double* f,
                        double* df,
                        double* H,
                        double* dH)
    void cHJBurgersEvaluate "HJBurgersEvaluate"(const int nPoints,
                const int nSpace,
                const double offset,
                const double* u,
                const double* gradu,
                double* m,
                double* dm,
                double* H,
                double* dH)
    void cconservativeHeadRichardsMualemVanGenuchtenHomEvaluate "conservativeHeadRichardsMualemVanGenuchtenHomEvaluate"(const int nPoints,
                                                            const int nSpace,
                                                            const double rho,
                                                            const double beta,
                                                            const double* gravity,
                                                            const double* x,
                                                            const double alpha,
                                                            const double n,
                                                            const double m,
                                                            const double thetaR,
                                                            const double thetaSR,
                                                            const double KWs,
                                                            double* u,
                                                            double* mass,
                                                            double* dmass,
                                                            double* f,
                                                            double* df,
                                                            double* a,
                                                            double* da,
                                                            double* phi,
                                                            double* dphi)
    void cconservativeHeadRichardsL2projMualemVanGenuchtenHomEvaluate "conservativeHeadRichardsL2projMualemVanGenuchtenHomEvaluate"(const int nSimplices,
                                    const int nPointsPerSimplex,
                                    const int nSpace,
                                    const double rho,
                                    const double* gravity,
                                    const double alpha,
                                    const double n,
                                    const double m,
                                    const double thetaR,
                                    const double thetaSR,
                                    const double KWs,
                                    double* dV,
                                    double* u,
                                    double* mass,
                                    double* dmass,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da)
    void cconservativeHeadRichardsL2projBndMualemVanGenuchtenHomEvaluate "conservativeHeadRichardsL2projBndMualemVanGenuchtenHomEvaluate"(const int nElements,
                                        const int nElementBoundaries_element,
                                        const int nPointsPerElementBoundary,
                                        const int nSpace,
                                        const double rho,
                                        const double* gravity,
                                        const double alpha,
                                        const double n,
                                        const double m,
                                        const double thetaR,
                                        const double thetaSR,
                                        const double KWs,
                                        double* dV,
                                        double* u,
                                        double* mass,
                                        double* dmass,
                                        double* f,
                                        double* df,
                                        double* a,
                                        double* da)
    void cconservativeHeadRichardsL2projMualemVanGenuchtenHetEvaluate "conservativeHeadRichardsL2projMualemVanGenuchtenHetEvaluate"(const int nSimplices,
                                    const int nPointsPerSimplex,
                                    const int nSpace,
                                    const double rho,
                                    const double* gravity,
                                    const double* alpha,
                                    const double* n,
                                    const double* thetaR,
                                    const double* thetaSR,
                                    const double* KWs,
                                    double* dV,
                                    double* u,
                                    double* mass,
                                    double* dmass,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da)
    void cconservativeTotalHeadRichardsMualemVanGenuchtenHomEvaluate "conservativeTotalHeadRichardsMualemVanGenuchtenHomEvaluate"(const int nPoints,
                                    const int nSpace,
                                    const double rho,
                                    const double* gravity,
                                    const double* x,
                                    const double alpha,
                                    const double n,
                                    const double m,
                                    const double thetaR,
                                    const double thetaSR,
                                    const double KWs,
                                    double* u,
                                    double* mass,
                                    double* dmass,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da,
                                    double* phi,
                                    double* dphi)
    void cconservativeHeadRichardsMualemVanGenuchten_sd_het "conservativeHeadRichardsMualemVanGenuchten_sd_het"(const int nSimplex,
                                const int nPointsPerSimplex,
                                const int nSpace,
                                double pc_eps,
                                const int*  rowptr,
                                const int*  colind,
                                const int* materialTypes,
                                const double rho,
                                const double beta,
                                const double* gravity,
                                const double* alpha,
                                const double* n,
                                const double* thetaR,
                                const double* thetaSR,
                                const double* KWs,
                                double* u,
                                double* mass,
                                double* dmass,
                                double* f,
                                double* df,
                                double* a,
                                double* da,
                                double* vol_frac)
    void cconservativeHeadRichardsMualemVanGenuchten_sd_het_linearized_at_saturation "conservativeHeadRichardsMualemVanGenuchten_sd_het_linearized_at_saturation"(const int nSimplex,
                                const int nPointsPerSimplex,
                                const int nSpace,
                                double pc_eps,
                                const int*  rowptr,
                                const int*  colind,
                                const int* materialTypes,
                                const double rho,
                                const double beta,
                                const double* gravity,
                                const double* alpha,
                                const double* n,
                                const double* thetaR,
                                const double* thetaSR,
                                const double* KWs,
                                double* u,
                                double* mass,
                                double* dmass,
                                double* f,
                                double* df,
                                double* a,
                                double* da,
                                double* vol_frac)
    void cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2 "conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2"(const int nSimplex,
                                    const int nPointsPerSimplex,
                                    const int nSpace,
                                    const int* materialTypes,
                                    const double rho,
                                                                const double beta,
                                    const double* gravity,
                                    const double* alpha,
                                    const double* n,
                                    const double* thetaR,
                                    const double* thetaSR,
                                    const double* KWs,
                                    double* u,
                                    double* mass,
                                    double* dmass,
                                    double* f,
                                    double* df,
                                    double* a,
                                    double* da)
    void cseepageBrezis "seepageBrezis"(const int nSimplex,
            const int nPointsPerSimplex,
            const int nSpace,
            const int* materialTypes,
            const double epsFact,
            const double rho,
            const double beta,
            const double* elementDiameter,
            const double* gravity,
            const double* alpha,
            const double* n,
            const double* thetaR,
            const double* thetaSR,
            const double* KWs,
            double* u,
            double* mass,
            double* dmass,
            double* f,
            double* df,
            double* a,
            double* da)
    void cconservativeHeadRichardsMualemVanGenuchtenHetEvaluate "conservativeHeadRichardsMualemVanGenuchtenHetEvaluate"(const int nPoints,
                                                            const int nSpace,
                                                            const double rho,
                                                            const double* gravity,
                                                            const double* alpha,
                                                            const double* n,
                                                            const double* thetaR,
                                                            const double* thetaSR,
                                                            const double* KWs,
                                                            double* u,
                                                            double* mass,
                                                            double* dmass,
                                                            double* f,
                                                            double* df,
                                                            double* a,
                                                            double* da)
    void cconservativeSatRichardsMualemVanGenuchtenHomEvaluate "conservativeSatRichardsMualemVanGenuchtenHomEvaluate"(const int nPoints,
                                                            const int nSpace,
                                                            const double rho,
                                                            const double* gravity,
                                                            const double* x,
                                                            const double alpha,
                                                            const double n,
                                                            const double m,
                                                            const double thetaR,
                                                            const double thetaSR,
                                                            const double KWs,
                                                            double* u,
                                                            double* mass,
                                                            double* dmass,
                                                            double* f,
                                                            double* df,
                                                            double* a,
                                                            double* da,
                                                            double* phi,
                                                            double* dphi)
    void cconservativeHeadRichardsBrooksCoreyBurdineHetEvaluate "conservativeHeadRichardsBrooksCoreyBurdineHetEvaluate"(const int nPoints,
                                                            const int nSpace,
                                                            const double rho,
                                                            const double* gravity,
                                                            const double* Lambda,
                                                            const double* pd,
                                                            const double* thetaR,
                                                            const double* thetaS,
                                                            const double* KWs,
                                                            double* u,
                                                            double* mass,
                                                            double* dmass,
                                                            double* f,
                                                            double* df,
                                                            double* a,
                                                            double* da)
    void cconservativeHeadRichardsBrooksCoreyBurdineHomEvaluate "conservativeHeadRichardsBrooksCoreyBurdineHomEvaluate"(const int nPoints,
                                                            const int nSpace,
                                                            const double rho,
                                const double beta,
                                                            const double* gravity,
                                                            const double Lambda,
                                                            const double pd,
                                                            const double thetaR,
                                                            const double thetaSR,
                                                            const double KWs,
                                                            double* u,
                                                            double* mass,
                                                            double* dmass,
                                                            double* f,
                                                            double* df,
                                                            double* a,
                                                            double* da)
    void cconservativeSatRichardsBrooksCoreyBurdineHomEvaluate "conservativeSatRichardsBrooksCoreyBurdineHomEvaluate"(const int nPoints,
                                const int nSpace,
                                const double rho,
                                const double* gravity,
                                const double Lambda,
                                const double pd,
                                const double thetaR,
                                const double thetaSR,
                                const double KWs,
                                double* u,
                                double* mass,
                                double* dmass,
                                double* f,
                                double* df,
                                double* a,
                                double* da,
                                double* phi,
                                double* dphi)
    void cconservativeHeadRichardsBCBfromMVGHomEvaluate "conservativeHeadRichardsBCBfromMVGHomEvaluate"(const int nPoints,
                            const int nSpace,
                            const double rho,
                            const double* gravity,
                            const double alpha,
                            const double n,
                            const double m,
                            const double thetaR,
                            const double thetaSR,
                            const double KWs,
                            double* u,
                            double* mass,
                            double* dmass,
                            double* f,
                            double* df,
                            double* a,
                            double* da)
    void cLinearElasticity_1D_Evaluate "LinearElasticity_1D_Evaluate"(const int nPoints,
                                    const double E,
                                    const double nu,
                                    const double* g,
                                    const double* u,
                                    double* uu_diff_ten,
                                    double* u_force)
    void cLinearElasticity_2D_Evaluate "LinearElasticity_2D_Evaluate"(const int nPoints,
                                      const double E,
                                      const double nu,
                                      const double* g,
                                      const double* u,
                                      const double* v,
                                      double* uu_diff_ten,
                                      double* uv_diff_ten,
                                      double* vu_diff_ten,
                                      double* vv_diff_ten,
                                      double* u_force,
                                      double* v_force)
    void cLinearElasticity_3D_Evaluate "LinearElasticity_3D_Evaluate"(const int nPoints,
                                      const double E,
                                      const double nu,
                                      const double* g,
                                      const double* u,
                                      const double* v,
                                      const double* w,
                                      double* uu_diff_ten, 
                                      double* uv_diff_ten,
                                      double* uw_diff_ten,
                                      double* vu_diff_ten,
                                      double* vv_diff_ten,
                                      double* vw_diff_ten,
                                      double* wu_diff_ten,
                                      double* wv_diff_ten,
                                      double* ww_diff_ten,
                                      double* u_force,
                                      double* v_force,
                                      double* w_force)
    void cMovingMesh_2D_Evaluate "MovingMesh_2D_Evaluate"(const int nPoints,
                    const double E0,
                    const double nu,
                    const double* g,
                    const double* det_J,
                    const double* u,
                    const double* v,
                    double* uu_diff_ten,
                    double* uv_diff_ten,
                    double* vu_diff_ten,
                    double* vv_diff_ten,
                    double* u_force,
                    double* v_force)
    void cMovingMesh_3D_Evaluate "MovingMesh_3D_Evaluate"(const int nPoints,
                    const double E0,
                    const double nu,
                    const double* g,
                    const double* det_J,
                    const double* u,
                    const double* v,
                    const double* w,
                    double* uu_diff_ten,
                    double* uv_diff_ten,
                    double* uw_diff_ten,
                    double* vu_diff_ten,
                    double* vv_diff_ten,
                    double* vw_diff_ten,
                    double* wu_diff_ten,
                    double* wv_diff_ten,
                    double* ww_diff_ten,
                    double* u_force,
                    double* v_force,
                    double* w_force)
    void cMovingMesh_1D_Evaluate "MovingMesh_1D_Evaluate"(const int nPoints,
                    const double E0,
                    const double nu,
                    const double* g,
                    const double* det_J,
                    const double* u,
                    double* uu_diff_ten,
                    double* u_force)
    void clevelSetConservationCoefficientsEvaluate "levelSetConservationCoefficientsEvaluate"(int nPoints,
                                                int nSpace,
                                                double epsHeaviside,
                                                double epsDirac,
                                                double epsDiffusion,
                                                double* u_ls,
                                                double* H_vof,
                                                double* u,
                                                double* r,
                                                double* dr,
                                                double* a)
    void clevelSetConservationCoefficientsEvaluate_sd "levelSetConservationCoefficientsEvaluate_sd"(int nPoints,
                            double epsHeaviside,
                            double epsDirac,
                            double* u_ls,
                            double* H_vof,
                            double* u,
                            double* r,
                            double* dr)
    void cevaluateBuckleyLeverettLiuExample "evaluateBuckleyLeverettLiuExample"(int nPoints,
                        int nSpace,
                        const double*  x,
                        const double*  u,
                        double*  m,
                        double*  dm,
                        double*  f,
                        double*  df,
                        double*  a)
    void cVolumeAveragedNavierStokesFullDevStress_2D_Evaluate "VolumeAveragedNavierStokesFullDevStress_2D_Evaluate"(const int nPoints,
                                const double rho,
                                const double mu,
                                const double* meanGrainSize,
                                const double* g,
                                const double* p,
                                const double* grad_p,
                                const double* u,
                                const double* v,
                                const double* porosity,
                                double* mom_u_acc,
                                double* dmom_u_acc_u,
                                double* mom_v_acc,
                                double* dmom_v_acc_v,
                                double* mass_adv,
                                double* dmass_adv_u,
                                double* dmass_adv_v,
                                double* mom_u_adv,
                                double* dmom_u_adv_u,
                                double* dmom_u_adv_v,
                                double* mom_v_adv,
                                double* dmom_v_adv_u,
                                double* dmom_v_adv_v,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* dmom_u_source_u,
                                double* dmom_u_source_v,
                                double* dmom_v_source_u,
                                double* dmom_v_source_v,
                                double* mom_u_ham,
                                double* dmom_u_ham_grad_p,
                                double* mom_v_ham,
                                double* dmom_v_ham_grad_p)
    void cVolumeAveragedNavierStokesFullDevStress_3D_Evaluate "VolumeAveragedNavierStokesFullDevStress_3D_Evaluate"(const int nPoints,
                                const double rho,
                                const double mu,
                                const double* meanGrainSize,
                                const double* g,
                                const double* p,
                                const double* grad_p,
                                const double* u,
                                const double* v,
                                const double* w,
                                const double* porosity,
                                double* mom_u_acc,
                                double* dmom_u_acc_u,
                                double* mom_v_acc,
                                double* dmom_v_acc_v,
                                double* mom_w_acc,
                                double* dmom_w_acc_w,
                                double* mass_adv,
                                double* dmass_adv_u,
                                double* dmass_adv_v,
                                double* dmass_adv_w,
                                double* mom_u_adv,
                                double* dmom_u_adv_u,
                                double* dmom_u_adv_v,
                                double* dmom_u_adv_w,
                                double* mom_v_adv,
                                double* dmom_v_adv_u,
                                double* dmom_v_adv_v,
                                double* dmom_v_adv_w,
                                double* mom_w_adv,
                                double* dmom_w_adv_u,
                                double* dmom_w_adv_v,
                                double* dmom_w_adv_w,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_w_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_uw_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_vw_diff_ten,
                                double* mom_wu_diff_ten,
                                double* mom_wv_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* mom_w_source,
                                double* dmom_u_source_u,
                                double* dmom_u_source_v,
                                double* dmom_u_source_w,
                                double* dmom_v_source_u,
                                double* dmom_v_source_v,
                                double* dmom_v_source_w,
                                double* dmom_w_source_u,
                                double* dmom_w_source_v,
                                double* dmom_w_source_w,
                                double* mom_u_ham,
                                double* dmom_u_ham_grad_p,
                                double* mom_v_ham,
                                double* dmom_v_ham_grad_p,
                                double* mom_w_ham,
                                double* dmom_w_ham_grad_p)
    void cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate "VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate"(const int nPoints,
                                    const int killNonlinearDrag,
                                    const double eps_rho,
                                    const double eps_mu,
                                    const double sigma,
                                    const double rho_0,
                                    const double nu_0,
                                    const double rho_1,
                                    const double nu_1,
                                    const double* meanGrainSize,
                                    const double* g,
                                    const double* phi,
                                    const double* n,
                                    const double* kappa,
                                    const double* p,
                                    const double* grad_p,
                                    const double* u,
                                    const double* v,
                                    const double* porosity,
                                    double* mom_u_acc,
                                    double* dmom_u_acc_u,
                                    double* mom_v_acc,
                                    double* dmom_v_acc_v,
                                    double* mass_adv,
                                    double* dmass_adv_u,
                                    double* dmass_adv_v,
                                    double* mom_u_adv,
                                    double* dmom_u_adv_u,
                                    double* dmom_u_adv_v,
                                    double* mom_v_adv,
                                    double* dmom_v_adv_u,
                                    double* dmom_v_adv_v,
                                    double* mom_u_diff_ten,
                                    double* mom_v_diff_ten,
                                    double* mom_uv_diff_ten,
                                    double* mom_vu_diff_ten,
                                    double* mom_u_source,
                                    double* mom_v_source,
                                    double* dmom_u_source_u,
                                    double* dmom_u_source_v,
                                    double* dmom_v_source_u,
                                    double* dmom_v_source_v,
                                    double* mom_u_ham,
                                    double* dmom_u_ham_grad_p,
                                    double* mom_v_ham,
                                    double* dmom_v_ham_grad_p)
    void cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd "VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd"(const int nPoints,
                                    const int killNonlinearDrag,
                                    const double eps_rho,
                                    const double eps_mu,
                                    const double sigma,
                                    const double rho_0,
                                    const double nu_0,
                                    const double rho_1,
                                    const double nu_1,
                                    const double* meanGrainSize,
                                    const double* g,
                                    const double* phi,
                                    const double* n,
                                    const double* kappa,
                                    const double* p,
                                    const double* grad_p,
                                    const double* u,
                                    const double* v,
                                    const double* porosity,
                                    double* mom_u_acc,
                                    double* dmom_u_acc_u,
                                    double* mom_v_acc,
                                    double* dmom_v_acc_v,
                                    double* mass_adv,
                                    double* dmass_adv_u,
                                    double* dmass_adv_v,
                                    double* mom_u_adv,
                                    double* dmom_u_adv_u,
                                    double* dmom_u_adv_v,
                                    double* mom_v_adv,
                                    double* dmom_v_adv_u,
                                    double* dmom_v_adv_v,
                                    double* mom_u_diff_ten,
                                    double* mom_v_diff_ten,
                                    double* mom_uv_diff_ten,
                                    double* mom_vu_diff_ten,
                                    double* mom_u_source,
                                    double* mom_v_source,
                                    double* dmom_u_source_u,
                                    double* dmom_u_source_v,
                                    double* dmom_v_source_u,
                                    double* dmom_v_source_v,
                                    double* mom_u_ham,
                                    double* dmom_u_ham_grad_p,
                                    double* mom_v_ham,
                                    double* dmom_v_ham_grad_p)
    void cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate "VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate"(const int nPoints,
                                    const int killNonlinearDrag,
                                    const double eps_rho,
                                    const double eps_mu,
                                    const double sigma,
                                    const double rho_0,
                                    const double nu_0,
                                    const double rho_1,
                                    const double nu_1,
                                    const double* meanGrainSize,
                                    const double* g,
                                    const double* phi,
                                    const double* n,
                                    const double* kappa,
                                    const double* p,
                                    const double* grad_p,
                                    const double* u,
                                    const double* v,
                                    const double* w,
                                    const double* porosity,
                                    double* mom_u_acc,
                                    double* dmom_u_acc_u,
                                    double* mom_v_acc,
                                    double* dmom_v_acc_v,
                                    double* mom_w_acc,
                                    double* dmom_w_acc_w,
                                    double* mass_adv,
                                    double* dmass_adv_u,
                                    double* dmass_adv_v,
                                    double* dmass_adv_w,
                                    double* mom_u_adv,
                                    double* dmom_u_adv_u,
                                    double* dmom_u_adv_v,
                                    double* dmom_u_adv_w,
                                    double* mom_v_adv,
                                    double* dmom_v_adv_u,
                                    double* dmom_v_adv_v,
                                    double* dmom_v_adv_w,
                                    double* mom_w_adv,
                                    double* dmom_w_adv_u,
                                    double* dmom_w_adv_v,
                                    double* dmom_w_adv_w,
                                    double* mom_u_diff_ten,
                                    double* mom_v_diff_ten,
                                    double* mom_w_diff_ten,
                                    double* mom_uv_diff_ten,
                                    double* mom_uw_diff_ten,
                                    double* mom_vu_diff_ten,
                                    double* mom_vw_diff_ten,
                                    double* mom_wu_diff_ten,
                                    double* mom_wv_diff_ten,
                                    double* mom_u_source,
                                    double* mom_v_source,
                                    double* mom_w_source,
                                    double* dmom_u_source_u,
                                    double* dmom_u_source_v,
                                    double* dmom_u_source_w,
                                    double* dmom_v_source_u,
                                    double* dmom_v_source_v,
                                    double* dmom_v_source_w,
                                    double* dmom_w_source_u,
                                    double* dmom_w_source_v,
                                    double* dmom_w_source_w,
                                    double* mom_u_ham,
                                    double* dmom_u_ham_grad_p,
                                    double* mom_v_ham,
                                    double* dmom_v_ham_grad_p,
                                    double* mom_w_ham,
                                    double* dmom_w_ham_grad_p)
    void cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd "VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd"(const int nPoints,
                                    const int killNonlinearDrag,
                                    const double eps_rho,
                                    const double eps_mu,
                                    const double sigma,
                                    const double rho_0,
                                    const double nu_0,
                                    const double rho_1,
                                    const double nu_1,
                                    const double* meanGrainSize,
                                    const double* g,
                                    const double* phi,
                                    const double* n,
                                    const double* kappa,
                                    const double* p,
                                    const double* grad_p,
                                    const double* u,
                                    const double* v,
                                    const double* w,
                                    const double* porosity,
                                    double* mom_u_acc,
                                    double* dmom_u_acc_u,
                                    double* mom_v_acc,
                                    double* dmom_v_acc_v,
                                    double* mom_w_acc,
                                    double* dmom_w_acc_w,
                                    double* mass_adv,
                                    double* dmass_adv_u,
                                    double* dmass_adv_v,
                                    double* dmass_adv_w,
                                    double* mom_u_adv,
                                    double* dmom_u_adv_u,
                                    double* dmom_u_adv_v,
                                    double* dmom_u_adv_w,
                                    double* mom_v_adv,
                                    double* dmom_v_adv_u,
                                    double* dmom_v_adv_v,
                                    double* dmom_v_adv_w,
                                    double* mom_w_adv,
                                    double* dmom_w_adv_u,
                                    double* dmom_w_adv_v,
                                    double* dmom_w_adv_w,
                                    double* mom_u_diff_ten,
                                    double* mom_v_diff_ten,
                                    double* mom_w_diff_ten,
                                    double* mom_uv_diff_ten,
                                    double* mom_uw_diff_ten,
                                    double* mom_vu_diff_ten,
                                    double* mom_vw_diff_ten,
                                    double* mom_wu_diff_ten,
                                    double* mom_wv_diff_ten,
                                    double* mom_u_source,
                                    double* mom_v_source,
                                    double* mom_w_source,
                                    double* dmom_u_source_u,
                                    double* dmom_u_source_v,
                                    double* dmom_u_source_w,
                                    double* dmom_v_source_u,
                                    double* dmom_v_source_v,
                                    double* dmom_v_source_w,
                                    double* dmom_w_source_u,
                                    double* dmom_w_source_v,
                                    double* dmom_w_source_w,
                                    double* mom_u_ham,
                                    double* dmom_u_ham_grad_p,
                                    double* mom_v_ham,
                                    double* dmom_v_ham_grad_p,
                                    double* mom_w_ham,
                                    double* dmom_w_ham_grad_p)
    void cVolumeAveragedVOFCoefficientsEvaluate "VolumeAveragedVOFCoefficientsEvaluate"(int nPoints,
                        int nSpace,
                        double eps,
                        double* v,
                        double* phi,
                        double* porosity,
                        double* u,
                        double* m,
                        double* dm,
                        double* f,
                        double* df)
    void ckEpsilon_2D_Evaluate "kEpsilon_2D_Evaluate"(int nPoints,
                int nSpace,
                double sigma_k,
                double sigma_e,
                double c_1,
                double c_2,
                double c_mu,
                double c_e,
                double nu,
                double* velocity,
                double* gradu,
                double* gradv,
                double* k,
                double* epsilon,
                double* m_k,
                double* dm_k,
                double* m_e,
                double* dm_e,
                double* phi_k,
                double* dphi_k,
                double* phi_e,
                double* dphi_e,
                double* f_k,
                double* df_k,
                double* f_e,
                double* df_e,
                double* a_k,
                double* da_k_dk,
                double* da_k_de,
                double* a_e,
                double* da_e_dk,
                double* da_e_de,
                double* r_k,
                double* dr_k_dk,
                double* dr_k_de,
                double* r_e,
                double* dr_e_dk,
                double* dr_e_de)
    void ckEpsilon_2D_Evaluate_sd "kEpsilon_2D_Evaluate_sd"(int nPoints,
                    int nSpace,
                    double sigma_k,
                    double sigma_e,
                    double c_1,
                    double c_2,
                    double c_mu,
                    double c_e,
                    double nu,
                    double* velocity,
                    double* gradu,
                    double* gradv,
                    double* k,
                    double* epsilon,
                    double* m_k,
                    double* dm_k,
                    double* m_e,
                    double* dm_e,
                    double* phi_k,
                    double* dphi_k,
                    double* phi_e,
                    double* dphi_e,
                    double* f_k,
                    double* df_k,
                    double* f_e,
                    double* df_e,
                    double* a_k,
                    double* da_k_dk,
                    double* da_k_de,
                    double* a_e,
                    double* da_e_dk,
                    double* da_e_de,
                    double* r_k,
                    double* dr_k_dk,
                    double* dr_k_de,
                    double* r_e,
                    double* dr_e_dk,
                    double* dr_e_de)
    void ckEpsilon_3D_Evaluate_sd "kEpsilon_3D_Evaluate_sd"(int nPoints,
                    int nSpace,
                    double sigma_k,
                    double sigma_e,
                    double c_1,
                    double c_2,
                    double c_mu,
                    double c_e,
                    double nu,
                    double* velocity,
                    double* gradu,
                    double* gradv,
                    double* gradw,
                    double* k,
                    double* epsilon,
                    double* m_k,
                    double* dm_k,
                    double* m_e,
                    double* dm_e,
                    double* phi_k,
                    double* dphi_k,
                    double* phi_e,
                    double* dphi_e,
                    double* f_k,
                    double* df_k,
                    double* f_e,
                    double* df_e,
                    double* a_k,
                    double* da_k_dk,
                    double* da_k_de,
                    double* a_e,
                    double* da_e_dk,
                    double* da_e_de,
                    double* r_k,
                    double* dr_k_dk,
                    double* dr_k_de,
                    double* r_e,
                    double* dr_e_dk,
                    double* dr_e_de)
    void ckEpsilon_3D_Evaluate "kEpsilon_3D_Evaluate"(int nPoints,
                    int nSpace,
                    double sigma_k,
                    double sigma_e,
                    double c_1,
                    double c_2,
                    double c_mu,
                    double c_e,
                    double nu,
                    double* velocity,
                    double* gradu,
                    double* gradv,
                    double* gradw,
                    double* k,
                    double* epsilon,
                    double* m_k,
                    double* dm_k,
                    double* m_e,
                    double* dm_e,
                    double* phi_k,
                    double* dphi_k,
                    double* phi_e,
                    double* dphi_e,
                    double* f_k,
                    double* df_k,
                    double* f_e,
                    double* df_e,
                    double* a_k,
                    double* da_k_dk,
                    double* da_k_de,
                    double* a_e,
                    double* da_e_dk,
                    double* da_e_de,
                    double* r_k,
                    double* dr_k_dk,
                    double* dr_k_de,
                    double* r_e,
                    double* dr_e_dk,
                    double* dr_e_de)
    void ckEpsilon_k_2D_Evaluate_sd "kEpsilon_k_2D_Evaluate_sd"(int nPoints,
                    int nSpace,
                    double sigma_k,
                    double c_mu,
                    double nu,
                    double* velocity,
                    double* gradu,
                    double* gradv,
                    double* k,
                    double* epsilon,
                    double* m_k,
                    double* dm_k,
                    double* phi_k,
                    double* dphi_k,
                    double* f_k,
                    double* df_k,
                    double* a_k,
                    double* da_k_dk,
                    double* r_k,
                    double* dr_k_dk)
    void ckEpsilon_epsilon_2D_Evaluate_sd "kEpsilon_epsilon_2D_Evaluate_sd"(int nPoints,
                        int nSpace,
                        double sigma_e,
                        double c_1,
                        double c_2,
                        double c_mu,
                        double c_e,
                        double nu,
                        double* velocity,
                        double* gradu,
                        double* gradv,
                        double* k,
                        double* epsilon,
                        double* m_e,
                        double* dm_e,
                        double* phi_e,
                        double* dphi_e,
                        double* f_e,
                        double* df_e,
                        double* a_e,
                        double* da_e_de,
                        double* r_e,
                        double* dr_e_de)
    void ckEpsilon_k_3D_Evaluate_sd "kEpsilon_k_3D_Evaluate_sd"(int nPoints,
                    int nSpace,
                    double sigma_k,
                    double c_mu,
                    double nu,
                    double* velocity,
                    double* gradu,
                    double* gradv,
                    double* gradw,
                    double* k,
                    double* epsilon,
                    double* m_k,
                    double* dm_k,
                    double* phi_k,
                    double* dphi_k,
                    double* f_k,
                    double* df_k,
                    double* a_k,
                    double* da_k_dk,
                    double* r_k,
                    double* dr_k_dk)
    void ckEpsilon_epsilon_3D_Evaluate_sd "kEpsilon_epsilon_3D_Evaluate_sd"(int nPoints,
                        int nSpace,
                        double sigma_e,
                        double c_1,
                        double c_2,
                        double c_mu,
                        double c_e,
                        double nu,
                        double* velocity,
                        double* gradu,
                        double* gradv,
                        double* gradw,
                        double* k,
                        double* epsilon,
                        double* m_e,
                        double* dm_e,
                        double* phi_e,
                        double* dphi_e,
                        double* f_e,
                        double* df_e,
                        double* a_e,
                        double* da_e_de,
                        double* r_e,
                        double* dr_e_de)
    void cReynoldsAveragedNavierStokes_kEpsilon_2D_Update "ReynoldsAveragedNavierStokes_kEpsilon_2D_Update"(const int nPoints,
                                const double nu,
                                const double c_mu,
                                const double* k,
                                const double* grad_k,
                                const double* epsilon,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source)
    void cReynoldsAveragedNavierStokes_kEpsilon_2D_Update_sd "ReynoldsAveragedNavierStokes_kEpsilon_2D_Update_sd"(const int nPoints,
                                const double rho,
                                const double nu,
                                const double c_mu,
                                const double* k,
                                const double* grad_k,
                                const double* epsilon,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source)
    void cReynoldsAveragedNavierStokes_kEpsilon_3D_Update "ReynoldsAveragedNavierStokes_kEpsilon_3D_Update"(const int nPoints,
                                const double nu,
                                const double c_mu,
                                const double* k,
                                const double* grad_k,
                                const double* epsilon,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_w_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_uw_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_vw_diff_ten,
                                double* mom_wu_diff_ten,
                                double* mom_wv_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* mom_w_source)
    void cReynoldsAveragedNavierStokes_kEpsilon_3D_Update_sd "ReynoldsAveragedNavierStokes_kEpsilon_3D_Update_sd"(const int nPoints,
                                const double nu,
                                const double c_mu,
                                const double* k,
                                const double* grad_k,
                                const double* epsilon,
                                double* mom_u_diff_ten,
                                double* mom_v_diff_ten,
                                double* mom_w_diff_ten,
                                double* mom_uv_diff_ten,
                                double* mom_uw_diff_ten,
                                double* mom_vu_diff_ten,
                                double* mom_vw_diff_ten,
                                double* mom_wu_diff_ten,
                                double* mom_wv_diff_ten,
                                double* mom_u_source,
                                double* mom_v_source,
                                double* mom_w_source)
    void cscriptedSphereMotionSignedDistance "scriptedSphereMotionSignedDistance"(const int nPoints,
                        const double t,
                        const int nSpace,
                        const int nSpheres,
                        const double*  radii,
                        const double*  centers,
                        const double*  x,
                        double*  phi,
                        double*  n)
    void cshallowWater_1D_Evaluate "shallowWater_1D_Evaluate"(const int nPoints,
                                const double h_eps,
                                const double g,
                                const double bedFrictionCoefficient,
                                const double bedFrictionPower,
                                const double eddyViscosity,
                                const double* x,
                                const double* db_dx,
                                const double* h,
                                const double* hu,
                                double* H,
                                double* mass_acc,
                                double* dmass_acc_dh,
                                double* mom_acc,
                                double* dmom_acc_dhu,
                                double* mass_adv,
                                double* dmass_adv_dhu,
                                double* mom_adv,
                                double* dmom_adv_dh,
                                double* dmom_adv_dhu,
                                double* mom_source,
                                double* dmom_source_dh,
                                double* dmom_source_dhu,
                                double* mom_diff) 
    void cshallowWater_2D_Evaluate "shallowWater_2D_Evaluate"(const int nPoints,
                                        const double h_eps,
                                        const double g,
                                        const double bedFrictionCoefficient,
                                        const double bedFrictionPower,
                                        const double eddyViscosity,
                                        const double* x,
                                        const double* grad_b,
                                        const double* h,
                                        const double* hu,
                                        const double* hv,
                                        double* H,
                                        double* mass_acc,
                                        double* dmass_acc_dh,
                                        double* mom_u_acc,
                                        double* dmom_u_acc_dhu,
                                        double* mom_v_acc,
                                        double* dmom_v_acc_dhv,
                                        double* mass_adv,
                                        double* dmass_adv_dhu,
                                        double* dmass_adv_dhv,
                                        double* mom_u_adv,
                                        double* dmom_u_adv_dh,
                                        double* dmom_u_adv_dhu,
                                        double* dmom_u_adv_dhv,
                                        double* mom_v_adv,
                                        double* dmom_v_adv_dh,
                                        double* dmom_v_adv_dhu,
                                        double* dmom_v_adv_dhv,
                                        double* mom_u_diff,
                                        double* mom_v_diff,
                                        double* mom_u_source,
                                        double* dmom_u_source_dh,
                                        double* dmom_u_source_dhu,
                                        double* dmom_u_source_dhv,
                                        double* mom_v_source,
                                        double* dmom_v_source_dh,
                                        double* dmom_v_source_dhu,
                                        double* dmom_v_source_dhv) 
    void cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwind "conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwind"(const int upwindFlag,
                                        const int computeAverages,
                                        const int nSimplex,
                                        const int nPointsPerSimplex,
                                        const int nSpace,
                                        const int nQuadraturePoints_elementBoundary,
                                        const int* elementBoundaryElementsArray,
                                        const int* quadraturePointToElementBoundary,
                                        const int* materialTypes,
                                        const double rho,
                                        const double beta,
                                        const double* gravity,
                                        const double* alpha,
                                        const double* n_vg,
                                        const double* thetaR,
                                        const double* thetaSR,
                                        const double* KWs,
                                        const double* u,
                                        const double* gradu,
                                        const double* n_global,
                                        const double* dV,
                                        double* mass,
                                        double* dmass,
                                        double* f_avg,
                                        double* df_avg,
                                        double* a_avg,
                                        double* da_avg,
                                        double* f,
                                        double* df,
                                        double* a,
                                        double* da)
    void cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm "conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm"(const int upwindFlag,
                                            const int computeAverages,
                                            const int nSimplex,
                                            const int nPointsPerSimplex,
                                            const int nSpace,
                                            const int nQuadraturePoints_elementBoundary,
                                            const int* elementBoundaryElementsArray,
                                            const int* quadraturePointToElementBoundary,
                                            const int* materialTypes,
                                            const double rho,
                                            const double beta,
                                            const double* gravity,
                                            const double* alpha,
                                            const double* n_vg,
                                            const double* thetaR,
                                            const double* thetaSR,
                                            const double* KWs,
                                            const double* u,
                                            const double* gradu,
                                            const double* n_global,
                                            const double* dV,
                                            double* mass,
                                            double* dmass,
                                            double* f_avg,
                                            double* df_avg,
                                            double* a_avg,
                                            double* da_avg,
                                            double* f,
                                            double* df,
                                            double* a,
                                            double* da)
    void cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm_sd "conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm_sd"(const int upwindFlag,
                                            const int computeAverages,
                                            const int nSimplex,
                                            const int nPointsPerSimplex,
                                            const int nSpace,
                                            const int nQuadraturePoints_elementBoundary,
                                            const int* rowptr,
                                            const int* colind,
                                            const int* elementBoundaryElementsArray,
                                            const int* quadraturePointToElementBoundary,
                                            const int* materialTypes,
                                            const double rho,
                                            const double beta,
                                            const double* gravity,
                                            const double* alpha,
                                            const double* n_vg,
                                            const double* thetaR,
                                            const double* thetaSR,
                                            const double* KWs,
                                            const double* u,
                                            const double* gradu,
                                            const double* n_global,
                                            const double* dV,
                                            double* mass,
                                            double* dmass,
                                            double* f_avg,
                                            double* df_avg,
                                            double* a_avg,
                                            double* da_avg,
                                            double* f,
                                            double* df,
                                            double* a,
                                            double* da)
    void capplyContactLineSlip "applyContactLineSlip"(int nExteriorElementBoundaries_global,
                            int nQuadraturePoints_elementBoundary,
                            double eps,
                            int* isDOFBoundary,
                            double* phi,
                            double* advectiveFlux,
                            double* diffusiveFlux)
    void capplyContactLineSlipJacobian "applyContactLineSlipJacobian"(int nExteriorElementBoundaries_global,
                                    int nQuadraturePoints_elementBoundary,
                                    int nDOF_trial_element,
                                    double eps,
                                    int* isDOFBoundary,
                                    double* phi,
                                    double* fluxJacobian)
    void ccalculateEddyViscosity_Smagorinsky_2D "calculateEddyViscosity_Smagorinsky_2D"(const int nElements_global,
                        const int nQuadraturePoints_element,
                        const double smagorinskyConstant,
                        const double*  h_e,
                        const double*  grad_u,
                        const double*  grad_v,
                        double*  nu_t)
    void ccalculateEddyViscosity_Smagorinsky_3D "calculateEddyViscosity_Smagorinsky_3D"(const int nElements_global,
                        const int nQuadraturePoints_element,
                        const double smagorinskyConstant,
                        const double*  h_e,
                        const double*  grad_u,
                        const double*  grad_v,
                        const double*  grad_w,
                        double*  nu_t)
    void ccalculateEddyViscosity_Smagorinsky2P_2D "calculateEddyViscosity_Smagorinsky2P_2D"(const int nElements_global,
                            const int nQuadraturePoints_element,
                            const double smagorinskyConstant_0,
                            const double smagorinskyConstant_1,
                            const double  eps,
                            const double*  phi_ls,
                            const double*  h_e,
                            const double*  grad_u,
                            const double*  grad_v,
                            double*  nu_t)
    void ccalculateEddyViscosity_Smagorinsky2P_3D "calculateEddyViscosity_Smagorinsky2P_3D"(const int nElements_global,
                            const int nQuadraturePoints_element,
                            const double smagorinskyConstant_0,
                            const double smagorinskyConstant_1,
                            const double eps,
                            const double*  phi_ls,
                            const double*  h_e,
                            const double*  grad_u,
                            const double*  grad_v,
                            const double*  grad_w,
                            double*  nu_t)
    void ceddyViscosity_2D_Update "eddyViscosity_2D_Update"(const int nPoints,
                    const double* nu_t,
                    double* mom_u_diff_ten,
                    double* mom_v_diff_ten,
                    double* mom_uv_diff_ten,
                    double* mom_vu_diff_ten)
    void ceddyViscosity_2D_Update_sd "eddyViscosity_2D_Update_sd"(const int nPoints,
                    const double* nu_t,
                    double* mom_u_diff_ten,
                    double* mom_v_diff_ten,
                    double* mom_uv_diff_ten,
                    double* mom_vu_diff_ten)
    void ceddyViscosity_3D_Update "eddyViscosity_3D_Update"(const int nPoints,
                    const double* nu_t,
                    double* mom_u_diff_ten,
                    double* mom_v_diff_ten,
                    double* mom_w_diff_ten,
                    double* mom_uv_diff_ten,
                    double* mom_uw_diff_ten,
                    double* mom_vu_diff_ten,
                    double* mom_vw_diff_ten,
                    double* mom_wu_diff_ten,
                    double* mom_wv_diff_ten)
    void ceddyViscosity_3D_Update_sd "eddyViscosity_3D_Update_sd"(const int nPoints,
                    const double* nu_t,
                    double* mom_u_diff_ten,
                    double* mom_v_diff_ten,
                    double* mom_w_diff_ten,
                    double* mom_uv_diff_ten,
                    double* mom_uw_diff_ten,
                    double* mom_vu_diff_ten,
                    double* mom_vw_diff_ten,
                    double* mom_wu_diff_ten,
                    double* mom_wv_diff_ten)
    void ccalculateWaveFunction3d_ref "calculateWaveFunction3d_ref"(
                    int nElements_global,
                    int nDOF_element_mesh,
                    int nQuadraturePoints_element,
                    const double* mesh_trial_ref,
                    const double* mesh_dof,
                    const int* mesh_l2g,
                    const double* elementDiametersArray,
                    const double* omega_s_x, 
                    const double* omega_s_y,
                    const double* omega_s_z,
                    double t,
                    int waveFlag, 
                    double epsFact,
                    double waveHeight,
                    double waveCelerity,
                    double waveFrequency,
                    double waveNumber,
                    double waterDepth,
                    double* source)
    void cMass_2D_Evaluate "Mass_2D_Evaluate"(const int nPoints,
                double rho,
                double* p,
                double* u,
                double* v,
                double* mom_p_acc,
                double* mom_u_acc,
                double* mom_v_acc,
                double* dmom_p_acc_p,
                double* dmom_u_acc_u,
                double* dmom_v_acc_v)
    void cMass_3D_Evaluate "Mass_3D_Evaluate"(const int nPoints,
                double rho,
                double* p,
                double* u,
                double* v,
                double* w,
                double* mom_p_acc,
                double* mom_u_acc,
                double* mom_v_acc,
                double* mom_w_acc,
                double* dmom_p_acc_p,
                double* dmom_u_acc_u,
                double* dmom_v_acc_v,
                double* dmom_w_acc_w)
    void cTwoPhaseAdvection_2D_Evaluate "TwoPhaseAdvection_2D_Evaluate"(const int nPoints,
                                    const double eps,
                                    const double rho_0,
                                    const double nu_0,
                                    const double rho_1,
                                    const double nu_1,
                                    const double* phi,
                                    const double* p,
                                    const double* u,
                                    const double* v,
                                    double* mass_adv,
                                    double* dmass_adv_p,
                                    double* dmass_adv_u,
                                    double* dmass_adv_v,
                                    double* mom_u_adv,
                                    double* dmom_u_adv_u,
                                    double* dmom_u_adv_v,
                                    double* mom_v_adv,
                                    double* dmom_v_adv_u,
                                    double* dmom_v_adv_v)
    void ctwophaseSignedDistanceCoefficientsEvaluate "twophaseSignedDistanceCoefficientsEvaluate"(int nPoints,
                                                int nSpace,
                                                double* S,
                                                double* u,
                                                double* grad_u,
                                                double* m, 
                                                double* dm,
                                                double* h, 
                                                double* dh,
                                                double* rh)
    void ctwophaseSignedDistanceCoefficientsUpdateSignFunction "twophaseSignedDistanceCoefficientsUpdateSignFunction"(int nPoints,
                                                            double eps,
                                                            double* u_levelSet,
                                                            double* S)
    void cLaplace_Evaluate2D "Laplace_Evaluate2D"(const int nPoints,
                double* mom_p_diff_ten,
                double* mom_u_diff_ten,
                double* mom_v_diff_ten)
    void cLaplace_Evaluate3D "Laplace_Evaluate3D"(const int nPoints,
                double* mom_p_diff_ten,
                double* mom_u_diff_ten,
                double* mom_v_diff_ten,
                double* mom_w_diff_ten)
    void cl2projectScalar "l2projectScalar"(const int nSimplices,
                const int nPointsPerSimplex,
                double*  dV,
                double*  r)
    void cl2projectVector "l2projectVector"(const int nSimplices,
                const int nPointsPerSimplex,
                const int nSpace,
                double*  dV,
                double*  r)
    void cl2project2Tensor "l2project2Tensor"(const int nSimplices,
                const int nPointsPerSimplex,
                const int nSpace,
                double*  dV,
                double*  r)
    void cconservativeHeadRichardsJLeverett "conservativeHeadRichardsJLeverett"(const int nSimplex,
                                        const int nPointsPerSimplex,
                                        const int nSpace,
                                        const int* materialTypes,
                                        const double rho,
                                        const double beta,
                                        const double* gravity,
                                        const double* phi,
                                        const double* psiD,
                                        const double* ns,
                                        const double* nk,
                                        const double* S_wirr,
                                        const double* S_nwr,
                                        const double* kr0,
                                        double* u,
                                        double* mass,
                                        double* dmass,
                                        double* f,
                                        double* df,
                                        double* a,
                                        double* da)
    void cconservativeHeadRichardsJLeverettAni "conservativeHeadRichardsJLeverettAni"(const int nSimplex,
                                        const int nPointsPerSimplex,
                                        const int nSpace,
                                        const int* materialTypes,
                                        const double rho,
                                        const double beta,
                                        const double* gravity,
                                        const double* phi,
                                        const double* psiD,
                                        const double* ns,
                                        const double* nk,
                                        const double* S_wirr,
                                        const double* S_nwr,
                                        const double* kr0x,
                                        const double* kr0y,
                                        const double* kr0z,
                                        double* u,
                                        double* mass,
                                        double* dmass,
                                        double* f,
                                        double* df,
                                        double* a,
                                        double* da)
    void cdiffusiveWave1DEvaluate "diffusiveWave1DEvaluate"(const int nPoints,
                    const double alpha,
                    const double gamma,
                    const double epsilon,
                    const double* x,
                    const double* u,
                    const double* grad_u,
                    double* m,
                    double* dm,
                    double* a,
                    double* da)
    void cdiffusiveWave2DEvaluate "diffusiveWave2DEvaluate"(const int nd,
                    const int nPoints,
                    const double alpha,
                    const double gamma,
                    const double epsilon,
                    const double* x,
                    const double* u,
                    const double* grad_u,
                    double* m,
                    double* dm,
                    double* a,
                    double* da)
    double csmoothedHeaviside "smoothedHeaviside"(double eps, double phi)
    double csmoothedHeaviside_integral "smoothedHeaviside_integral"(double eps, double phi)
    double csmoothedDirac "smoothedDirac"(double eps, double phi)
##======================
def linearADR_ConstantCoefficientsEvaluate(const double M,
                                            np.ndarray A,
                                            np.ndarray B,
                                            const double C,
                                            const double t,
                                            np.ndarray x,
                                            np.ndarray u,
                                            np.ndarray m,
                                            np.ndarray dm,
                                            np.ndarray f,
                                            np.ndarray df,
                                            np.ndarray a,
                                            np.ndarray r,
                                            np.ndarray dr):
    clinearADR_ConstantCoefficientsEvaluate(x.size/x.shape[x.ndim-1],
                                            f.shape[f.ndim-1],
                                            M,
                                            <double*> A.data,
                                            <double*> B.data,
                                            C,
                                            t,
                                            <double*> x.data,
                                            <double*> u.data,
                                            <double*> m.data,
                                            <double*> dm.data,
                                            <double*> f.data,
                                            <double*> df.data,
                                            <double*> a.data,
                                            <double*> r.data,
                                            <double*> dr.data)
def groundwaterTransportCoefficientsEvaluate(const double omega,
                                              const double d,
                                              const double alpha_L,
                                              const double alpha_T,
                                              np.ndarray v,
                                              np.ndarray u,
                                              np.ndarray m,
                                              np.ndarray dm,
                                              np.ndarray f,
                                              np.ndarray df,
                                              np.ndarray a):
    cgroundwaterTransportCoefficientsEvaluate(f.size/f.shape[f.ndim-1],
                                            f.shape[f.ndim-1],
                                            omega,
                                            d,
                                            alpha_L,
                                            alpha_T,
                                            <double*> v.data,
                                            <double*> u.data,
                                            <double*> m.data,
                                            <double*> dm.data,
                                            <double*> f.data,
                                            <double*> df.data,
                                            <double*> a.data)
def groundwaterBiodegradation01EvaluateFC(const double omega,
                       const double d_c,
                       const double d_e,
                       const double alpha_L,
                       const double alpha_T,
                       const double Kox_max,
                       const double Kox_C,
                       const double Kox_E,
                       const double Kox_X,
                       const double Yield,
                       const double k_d,
                       np.ndarray v,
                       np.ndarray c_c,
                       np.ndarray c_e,
                       np.ndarray c_x,
                       np.ndarray m_c,
                       np.ndarray dm_c,
                       np.ndarray m_e,
                       np.ndarray dm_e,
                       np.ndarray m_x,
                       np.ndarray dm_x,
                       np.ndarray f_c,
                       np.ndarray df_c,
                       np.ndarray f_e,
                       np.ndarray df_e,
                       np.ndarray a_c,
                       np.ndarray a_e,
                       np.ndarray r_c,
                       np.ndarray dr_c_dc,
                       np.ndarray dr_c_de,
                       np.ndarray dr_c_dx,
                       np.ndarray r_e,
                       np.ndarray dr_e_dc,
                       np.ndarray dr_e_de,
                       np.ndarray dr_e_dx,
                       np.ndarray r_x,
                       np.ndarray dr_x_dc,
                       np.ndarray dr_x_de,
                       np.ndarray dr_x_dx):
    cgroundwaterBiodegradation01EvaluateFC(f_c.size/f_c.shape[f_c.ndim-1],
                       f_c.shape[f_c.ndim-1],
                       omega,
                       d_c,
                       d_e,
                       alpha_L,
                       alpha_T,
                       Kox_max,
                       Kox_C,
                       Kox_E,
                       Kox_X,
                       Yield,
                       k_d,
                       <double*> v.data,
                       <double*> c_c.data,
                       <double*> c_e.data,
                       <double*> c_x.data,
                       <double*> m_c.data,
                       <double*> dm_c.data,
                       <double*> m_e.data,
                       <double*> dm_e.data,
                       <double*> m_x.data,
                       <double*> dm_x.data,
                       <double*> f_c.data,
                       <double*> df_c.data,
                       <double*> f_e.data,
                       <double*> df_e.data,
                       <double*> a_c.data,
                       <double*> a_e.data,
                       <double*> r_c.data,
                       <double*> dr_c_dc.data,
                       <double*> dr_c_de.data,
                       <double*> dr_c_dx.data,
                       <double*> r_e.data,
                       <double*> dr_e_dc.data,
                       <double*> dr_e_de.data,
                       <double*> dr_e_dx.data,
                       <double*> r_x.data,
                       <double*> dr_x_dc.data,
                       <double*> dr_x_de.data,
                       <double*> dr_x_dx.data)
def groundwaterBryantDawsonIonExEvaluateFC(const double omega,
                        const double d_m,
                        const double d_h,
                        const double alpha_L,
                        const double alpha_T,
                        const double K_m,
                        const double K_h,
                        const double K_w,
                        const double Z_tot,
                        np.ndarray v,
                        np.ndarray c_m,
                        np.ndarray c_h,
                        np.ndarray m_m,
                        np.ndarray dm_m_m,
                        np.ndarray dm_m_h,
                        np.ndarray m_h,
                        np.ndarray dm_h_m,
                        np.ndarray dm_h_h,
                        np.ndarray f_m,
                        np.ndarray df_m,
                        np.ndarray f_h,
                        np.ndarray df_h,
                        np.ndarray a_m,
                        np.ndarray a_h,
                        np.ndarray phi_h,
                        np.ndarray dphi_h,
                        np.ndarray r_m,
                        np.ndarray dr_m_dm,
                        np.ndarray dr_m_dh,
                        np.ndarray r_h,
                        np.ndarray dr_h_dm,
                        np.ndarray dr_h_dh):
    cgroundwaterBryantDawsonIonExEvaluateFC(f_m.size/f_m.shape[f_m.ndim-1],
                        f_m.shape[f_m.ndim-1],
                        omega,
                        d_m,
                        d_h,
                        alpha_L,
                        alpha_T,
                        K_m,
                        K_h,
                        K_w,
                        Z_tot,
                        <double*> v.data,
                        <double*> c_m.data,
                        <double*> c_h.data,
                        <double*> m_m.data,
                        <double*> dm_m_m.data,
                        <double*> dm_m_h.data,
                        <double*> m_h.data,
                        <double*> dm_h_m.data,
                        <double*> dm_h_h.data,
                        <double*> f_m.data,
                        <double*> df_m.data,
                        <double*> f_h.data,
                        <double*> df_h.data,
                        <double*> a_m.data,
                        <double*> a_h.data,
                        <double*> phi_h.data,
                        <double*> dphi_h.data,
                        <double*> r_m.data,
                        <double*> dr_m_dm.data,
                        <double*> dr_m_dh.data,
                        <double*> r_h.data,
                        <double*> dr_h_dm.data,
                        <double*> dr_h_dh.data)
def groundwaterTransportCoefficientsEvaluate_hetMat(const double d,
                             np.ndarray materialTypes,
                             np.ndarray omega_types,
                             np.ndarray alpha_L_types,
                             np.ndarray alpha_T_types,
                             np.ndarray v,
                             np.ndarray u,
                             np.ndarray m,
                             np.ndarray dm,
                             np.ndarray f,
                             np.ndarray df,
                             np.ndarray a):
    assert u.ndim in [2,3]
    cgroundwaterTransportCoefficientsEvaluate_hetMat(u.size/u.shape[u.ndim-1],
                                                     u.shape[u.ndim-1],
                                                     f.shape[f.ndim-1],
                                                     d,
                                                     <int*> materialTypes.data,
                                                     <double*> omega_types.data,
                                                     <double*> alpha_L_types.data,
                                                     <double*> alpha_T_types.data,
                                                     <double*> v.data,
                                                     <double*> u.data,
                                                     <double*> m.data,
                                                     <double*> dm.data,
                                                     <double*> f.data,
                                                     <double*> df.data,
                                                     <double*> a.data)

def variablySaturatedGroundwaterTransportCoefficientsEvaluate_hetMat(const double d,
                                      np.ndarray materialTypes,
                                      np.ndarray theta, 
                                      np.ndarray alpha_L_types,
                                      np.ndarray alpha_T_types,
                                      np.ndarray v,
                                      np.ndarray u,
                                      np.ndarray m,
                                      np.ndarray dm,
                                      np.ndarray f,
                                      np.ndarray df,
                                      np.ndarray a):
    if u.ndim in [2,3]:
        if u.ndim == 2:
            nSimplex = u.shape[0]
            nPointsPerSimplex = u.shape[1]
        else:
            nSimplex = u.shape[0]*u.shape[1]
            nPointsPerSimplex = u.shape[2]
        cvariablySaturatedGroundwaterTransportCoefficientsEvaluate_hetMat(nSimplex,
                                      nPointsPerSimplex,
                                      f.shape[f.ndim-1],
                                      d,
                                      <int*> materialTypes.data,
                                      <double*> theta.data,
                                      <double*> alpha_L_types.data,
                                      <double*> alpha_T_types.data,
                                      <double*> v.data,
                                      <double*> u.data,
                                      <double*> m.data,
                                      <double*> dm.data,
                                      <double*> f.data,
                                      <double*> df.data,
                                      <double*> a.data)
    else:
        assert 0
def variablySaturatedGroundwaterEnergyTransportCoefficientsEvaluate_hetMat(const double rho_w,
                                        const double rho_n,
                                        const double specificHeat_w,
                                        const double specificHeat_n,
                                        np.ndarray materialTypes,
                                        np.ndarray theta, 
                                        np.ndarray thetaS_types,
                                        np.ndarray alpha_L_types,
                                        np.ndarray alpha_T_types,
                                        np.ndarray rho_s_types,
                                        np.ndarray specificHeat_s_types,
                                        np.ndarray Lambda_sat_types,
                                        np.ndarray Lambda_dry_types,
                                        np.ndarray Lambda_aniso_types,
                                        np.ndarray v,
                                        np.ndarray u,
                                        np.ndarray m,
                                        np.ndarray dm,
                                        np.ndarray f,
                                        np.ndarray df,
                                        np.ndarray a):
    if u.ndim in [2,3]:
        if u.ndim == 2:
            nSimplex = u.shape[0]
            nPointsPerSimplex = u.shape[1]
        else:
            nSimplex = u.shape[0]*u.shape[1]
            nPointsPerSimplex = u.shape[2]
        cvariablySaturatedGroundwaterEnergyTransportCoefficientsEvaluate_hetMat(nSimplex,
                                        nPointsPerSimplex,
                                        f.shape[f.ndim-1],
                                        rho_w,
                                        rho_n,
                                        specificHeat_w,
                                        specificHeat_n,
                                        <int*> materialTypes.data,
                                        <double*> theta.data,
                                        <double*> thetaS_types.data,
                                        <double*> alpha_L_types.data,
                                        <double*> alpha_T_types.data,
                                        <double*> rho_s_types.data,
                                        <double*> specificHeat_s_types.data,
                                        <double*> Lambda_sat_types.data,
                                        <double*> Lambda_dry_types.data,
                                        <double*> Lambda_aniso_types.data,
                                        <double*> v.data,
                                        <double*> u.data,
                                        <double*> m.data,
                                        <double*> dm.data,
                                        <double*> f.data,
                                        <double*> df.data,
                                        <double*> a.data)
    else:
        assert 0
def nonlinearADR_pqrstEvaluate(const double M,
                                np.ndarray A,
                                np.ndarray B,
                                const double C,
                                const double p_pow,
                                const double q_pow,
                                const double r_pow,
                                const double s_pow,
                                const double t_pow,
                                const double t,
                                np.ndarray x,
                                np.ndarray u,
                                np.ndarray m,
                                np.ndarray dm,
                                np.ndarray f,
                                np.ndarray df,
                                np.ndarray a,
                                np.ndarray da,
                                np.ndarray phi,
                                np.ndarray dphi,
                                np.ndarray r,
                                np.ndarray dr):
    cnonlinearADR_pqrstEvaluate(x.size/x.shape[x.ndim-1],
                                f.shape[f.ndim-1],
                                M,
                                <double*> A.data,
                                <double*> B.data,
                                C,
                                p_pow,
                                q_pow,
                                r_pow,
                                s_pow,
                                t_pow,
                                t,
                                <double*> x.data,
                                <double*> u.data,
                                <double*> m.data,
                                <double*> dm.data,
                                <double*> f.data,
                                <double*> df.data,
                                <double*> a.data,
                                <double*> da.data,
                                <double*> phi.data,
                                <double*> dphi.data,
                                <double*> r.data,
                                <double*> dr.data)
def nonlinearADR_pqrstDualEvaluate(const int nPoints,
                                    const int nSpace,
                                    const double M,
                                    np.ndarray A,
                                    np.ndarray B,
                                    const double C,
                                    const double p1,
                                    const double q1,
                                    const double r1,
                                    const double s1,
                                    const double t1,
                                    const double p2,
                                    const double q2,
                                    const double r2,
                                    const double s2,
                                    const double t2,
                                    const double t,
                                    np.ndarray x,
                                    np.ndarray u,
                                    np.ndarray m,
                                    np.ndarray dm,
                                    np.ndarray f,
                                    np.ndarray df,
                                    np.ndarray a,
                                    np.ndarray da,
                                    np.ndarray phi,
                                    np.ndarray dphi,
                                    np.ndarray r,
                                    np.ndarray dr):
    cnonlinearADR_pqrstDualEvaluate(nPoints,
                                    nSpace,
                                    M,
                                    <double*> A.data,
                                    <double*> B.data,
                                    C,
                                    p1,
                                    q1,
                                    r1,
                                    s1,
                                    t1,
                                    p2,
                                    q2,
                                    r2,
                                    s2,
                                    t2,
                                    t,
                                    <double*> x.data,
                                    <double*> u.data,
                                    <double*> m.data,
                                    <double*> dm.data,
                                    <double*> f.data,
                                    <double*> df.data,
                                    <double*> a.data,
                                    <double*> da.data,
                                    <double*> phi.data,
                                    <double*> dphi.data,
                                    <double*> r.data,
                                    <double*> dr.data)
def unitSquareRotationEvaluate(np.ndarray x,
                                np.ndarray u,
                                np.ndarray m,
                                np.ndarray dm,
                                np.ndarray f,
                                np.ndarray df):
    cunitSquareRotationEvaluate(x.size/x.shape[x.ndim-1],
                                f.shape[f.ndim-1],
                                <double*> x.data,
                                <double*> u.data,
                                <double*> m.data,
                                <double*> dm.data,
                                <double*> f.data,
                                <double*> df.data)
def unitCubeRotationEvaluate(np.ndarray x,
                             np.ndarray u,
                             np.ndarray m,
                             np.ndarray dm,
                             np.ndarray f,
                             np.ndarray df):
    cunitCubeRotationEvaluate(x.size/x.shape[x.ndim-1],
                              f.shape[f.ndim-1],
                              <double*> x.data,
                              <double*> u.data,
                              <double*> m.data,
                              <double*> dm.data,
                              <double*> f.data,
                              <double*> df.data)
def rotatingPulseVelEvaluate(const int nPoints,
                              const int nSpace,
                              const double self_a,
                              np.ndarray x,
                              np.ndarray u,
                              np.ndarray m,
                              np.ndarray dm,
                              np.ndarray f,
                              np.ndarray df,
                              np.ndarray a,
                              np.ndarray da,
                              np.ndarray phi,
                              np.ndarray dphi):
    crotatingPulseVelEvaluate(nPoints,
                              nSpace,
                              self_a,
                              <double*> x.data,
                              <double*> u.data,
                              <double*> m.data,
                              <double*> dm.data,
                              <double*> f.data,
                              <double*> df.data,
                              <double*> a.data,
                              <double*> da.data,
                              <double*> phi.data,
                              <double*> dphi.data)
def disRotatingPulseVelEvaluate(const int nPoints,
                                 const int nSpace,
                                 const double self_a,
                                 np.ndarray x,
                                 np.ndarray u,
                                 np.ndarray m,
                                 np.ndarray dm,
                                 np.ndarray f,
                                 np.ndarray df,
                                 np.ndarray a,
                                 np.ndarray da,
                                 np.ndarray phi,
                                 np.ndarray dphi):
    cdisRotatingPulseVelEvaluate(nPoints,
                                 nSpace,
                                 self_a,
                                 <double*> x.data,
                                 <double*> u.data,
                                 <double*> m.data,
                                 <double*> dm.data,
                                 <double*> f.data,
                                 <double*> df.data,
                                 <double*> a.data,
                                 <double*> da.data,
                                 <double*> phi.data,
                                 <double*> dphi.data)
def disVelEvaluate(const int nPoints,
                    const int nSpace,
                    const double self_a,
                    np.ndarray x,
                    np.ndarray u,
                    np.ndarray m,
                    np.ndarray dm,
                    np.ndarray f,
                    np.ndarray df,
                    np.ndarray a,
                    np.ndarray da,
                    np.ndarray phi,
                    np.ndarray dphi):
    cdisVelEvaluate(nPoints,
                    nSpace,
                    self_a,
                    <double*> x.data,
                    <double*> u.data,
                    <double*> m.data,
                    <double*> dm.data,
                    <double*> f.data,
                    <double*> df.data,
                    <double*> a.data,
                    <double*> da.data,
                    <double*> phi.data,
                    <double*> dphi.data)
def burgersDiagonalVelEvaluate(const double self_a,
                                np.ndarray self_v,
                                np.ndarray u,
                                np.ndarray m,
                                np.ndarray dm,
                                np.ndarray f,
                                np.ndarray df,
                                np.ndarray a,
                                np.ndarray phi,
                                np.ndarray dphi):
    cburgersDiagonalVelEvaluate(u.size,
                                f.shape[f.ndim-1],
                                self_a,
                                <double*> self_v.data,
                                <double*> u.data,
                                <double*> m.data,
                                <double*> dm.data,
                                <double*> f.data,
                                <double*> df.data,
                                <double*> a.data,
                                <double*> phi.data,
                                <double*> dphi.data)
def burgersDiagonalVelHJEvaluate(const double self_a,
                  np.ndarray self_v,
                  np.ndarray u,
                  np.ndarray grad_u,
                  np.ndarray m,
                  np.ndarray dm,
                  np.ndarray H,
                  np.ndarray dH,
                  np.ndarray a,
                  np.ndarray phi,
                  np.ndarray dphi):
    cburgersDiagonalVelHJEvaluate(u.size,
                  dH[dH.ndim-1],
                  self_a,
                  <double*> self_v.data,
                  <double*> u.data,
                  <double*> grad_u.data,
                  <double*> m.data,
                  <double*> dm.data,
                  <double*> H.data,
                  <double*> dH.data,
                  <double*> a.data,
                  <double*> phi.data,
                  <double*> dphi.data)
def twophasePotentialFlowEvaluate(int nPoints,
                                   int nSpace,
                                   np.ndarray M,
                                   np.ndarray A,
                                   np.ndarray B,
                                   np.ndarray Bcon,
                                   np.ndarray C,
                                   double t,
                                   np.ndarray x,
                                   np.ndarray u,
                                   np.ndarray m,
                                   np.ndarray dm,
                                   np.ndarray f,
                                   np.ndarray df,
                                   np.ndarray a,
                                   np.ndarray da,
                                   np.ndarray phi,
                                   np.ndarray dphi,
                                   np.ndarray r,
                                   np.ndarray dr):
    ctwophasePotentialFlowEvaluate( nPoints,
                                    nSpace,
                                   <double*> M.data,
                                   <double*> A.data,
                                   <double*> B.data,
                                   <double*> Bcon.data,
                                   <double*> C.data,
                                    t,
                                   <double*> x.data,
                                   <double*> u.data,
                                   <double*> m.data,
                                   <double*> dm.data,
                                   <double*> f.data,
                                   <double*> df.data,
                                   <double*> a.data,
                                   <double*> da.data,
                                   <double*> phi.data,
                                   <double*> dphi.data,
                                   <double*> r.data,
                                   <double*> dr.data)
def twophasePotentialFlowUpdateFreeSurface(int nPoints,
                                            int nSpace,
                                            double eps,
                                            np.ndarray u_levelSet,
                                            double M1,
                                            double M2,
                                            np.ndarray M,
                                            np.ndarray A1,
                                            np.ndarray A2,
                                            np.ndarray A,
                                            np.ndarray B1,
                                            np.ndarray B2,
                                            np.ndarray B,
                                            np.ndarray Bcon1,
                                            np.ndarray Bcon2,
                                            np.ndarray Bcon,
                                            double C1,
                                            double C2,
                                            np.ndarray C):
    ctwophasePotentialFlowUpdateFreeSurface( nPoints,
                                             nSpace,
                                             eps,
                                            <double*> u_levelSet.data,
                                             M1,
                                             M2,
                                            <double*> M.data,
                                            <double*> A1.data,
                                            <double*> A2.data,
                                            <double*> A.data,
                                            <double*> B1.data,
                                            <double*> B2.data,
                                            <double*> B.data,
                                            <double*> Bcon1.data,
                                            <double*> Bcon2.data,
                                            <double*> Bcon.data,
                                             C1,
                                             C2,
                                            <double*> C.data)
def twophaseLevelSetCoefficientsUpdateVelocity(int nPoints,
                                                int nSpace,
                                                double v_scale,
                                                np.ndarray vIn,
                                                np.ndarray vOut):
    ctwophaseLevelSetCoefficientsUpdateVelocity( nPoints,
                                                 nSpace,
                                                 v_scale,
                                                <double*> vIn.data,
                                                <double*> vOut.data)
def twophaseLevelSetCoefficientsEvaluate(int nPoints,
                                          int nSpace,
                                          np.ndarray B,
                                          double  t,
                                          np.ndarray x,
                                          np.ndarray u,
                                          np.ndarray grad_u,
                                          np.ndarray m, 
                                          np.ndarray dm,
                                          np.ndarray h, 
                                          np.ndarray dh,
                                          np.ndarray rh):
    ctwophaseLevelSetCoefficientsEvaluate( nPoints,
                                           nSpace,
                                          <double*> B.data,
                                            t,
                                          <double*> x.data,
                                          <double*> u.data,
                                          <double*> grad_u.data,
                                          <double*> m.data,
                                          <double*> dm.data,
                                          <double*> h.data,
                                          <double*> dh.data,
                                          <double*> rh.data)
def twophaseLevelSetCoefficientsEvaluateCI(int nPoints,
                                            int nSpace,
                                            np.ndarray B,
                                            double  t,
                                            np.ndarray x,
                                            np.ndarray u,
                                            np.ndarray m, 
                                            np.ndarray dm,
                                            np.ndarray f, 
                                            np.ndarray df,
                                            np.ndarray a, 
                                            np.ndarray da,
                                            np.ndarray phi, 
                                            np.ndarray dphi,
                                            np.ndarray r, 
                                            np.ndarray dr):
    ctwophaseLevelSetCoefficientsEvaluateCI( nPoints,
                                             nSpace,
                                            <double*> B.data,
                                              t,
                                            <double*> x.data,
                                            <double*> u.data,
                                            <double*> m.data,
                                            <double*> dm.data,
                                            <double*> f.data,
                                            <double*> df.data,
                                            <double*> a.data,
                                            <double*> da.data,
                                            <double*> phi.data,
                                            <double*> dphi.data,
                                            <double*> r.data,
                                            <double*> dr.data)
def ncLevelSetCoefficientsEvaluate(np.ndarray v,
                                    np.ndarray u,
                                    np.ndarray grad_u,
                                    np.ndarray m,
                                    np.ndarray dm,
                                    np.ndarray H,
                                    np.ndarray dH):
    cncLevelSetCoefficientsEvaluate(u.size,
                                    dH[dH.ndim-1],
                                    <double*> v.data,
                                    <double*> u.data,
                                    <double*> grad_u.data,
                                    <double*> m.data,
                                    <double*> dm.data,
                                    <double*> H.data,
                                    <double*> dH.data)
def cLevelSetCoefficientsEvaluate(np.ndarray v,
                                   np.ndarray u,
                                   np.ndarray m,
                                   np.ndarray dm,
                                   np.ndarray f,
                                   np.ndarray df):
    ccLevelSetCoefficientsEvaluate(u.size,
                                f.shape[f.ndim-1],
                                <double*> v.data,
                                <double*> u.data,
                                <double*> m.data,
                                <double*> dm.data,
                                <double*> f.data,
                                <double*> df.data)
def VOFCoefficientsEvaluate(double eps,
                             np.ndarray v,
                             np.ndarray phi,
                             np.ndarray u,
                             np.ndarray m,
                             np.ndarray dm,
                             np.ndarray f,
                             np.ndarray df):
    cVOFCoefficientsEvaluate(u.size,
                            f.shape[f.ndim-1],
                            eps,
                            <double*> v.data,
                            <double*> phi.data,
                            <double*> u.data,
                            <double*> m.data,
                            <double*> dm.data,
                            <double*> f.data,
                            <double*> df.data)
def levelSetCurvatureCoefficientsEvaluate(np.ndarray grad_phi,
                                           np.ndarray u,
                                           np.ndarray f,
                                           np.ndarray r,
                                           np.ndarray dr):
    clevelSetCurvatureCoefficientsEvaluate(u.size,
                                        f.shape[f.ndim-1],
                                        <double*> grad_phi.data,
                                        <double*> u.data,
                                        <double*> f.data,
                                        <double*> r.data,
                                        <double*> dr.data)
def twophaseSignedDistanceCoefficientsEvaluate(int nPoints,
                                                int nSpace,
                                                np.ndarray S,
                                                np.ndarray u,
                                                np.ndarray grad_u,
                                                np.ndarray m, 
                                                np.ndarray dm,
                                                np.ndarray h, 
                                                np.ndarray dh,
                                                np.ndarray rh):
    ctwophaseSignedDistanceCoefficientsEvaluate( nPoints,
                                                 nSpace,
                                                <double*> S.data,
                                                <double*> u.data,
                                                <double*> grad_u.data,
                                                <double*> m.data,
                                                <double*> dm.data,
                                                <double*> h.data,
                                                <double*> dh.data,
                                                <double*> rh.data)
def eikonalEquationEvaluate(double rhs,
                 np.ndarray u,
                 np.ndarray grad_u,
                 np.ndarray m,
                 np.ndarray dm,
                 np.ndarray H,
                 np.ndarray dH,
                 np.ndarray r):
    ceikonalEquationEvaluate(u.size,
                  dH[dH.ndim-1],
                  rhs,
                 <double*> u.data,
                 <double*> grad_u.data,
                 <double*> m.data,
                 <double*> dm.data,
                 <double*> H.data,
                 <double*> dH.data,
                 <double*> r.data)
def redistanceLevelSetCoefficientsEvaluate(double eps,
                        np.ndarray u_levelSet,
                        np.ndarray u,
                        np.ndarray grad_u,
                        np.ndarray m,
                        np.ndarray dm,
                        np.ndarray H,
                        np.ndarray dH,
                        np.ndarray r):
    credistanceLevelSetCoefficientsEvaluate(u.size,
                        dH[dH.ndim-1],
                        eps,
                        <double*> u_levelSet.data,
                        <double*> u.data,
                        <double*> grad_u.data,
                        <double*> m.data,
                        <double*> dm.data,
                        <double*> H.data,
                        <double*> dH.data,
                        <double*> r.data)
def redistanceLevelSetCoefficientsWithWeakPenaltyEvaluate(double eps,
                               double Lambda_penalty,
                               np.ndarray u_levelSet,
                               np.ndarray u,
                               np.ndarray grad_u,
                               np.ndarray m,
                               np.ndarray dm,
                               np.ndarray H,
                               np.ndarray dH,
                               np.ndarray r,
                               np.ndarray dr):
    credistanceLevelSetCoefficientsWithWeakPenaltyEvaluate(u.size,
                                dH[dH.ndim-1],
                                eps,
                                Lambda_penalty,
                                <double*> u_levelSet.data,
                                <double*> u.data,
                                <double*> grad_u.data,
                                <double*> m.data,
                                <double*> dm.data,
                                <double*> H.data,
                                <double*> dH.data,
                                <double*> r.data,
                                <double*> dr.data)
def redistanceLevelSetSandFCoefficientsEvaluate(double eps,
                         np.ndarray u_levelSet,
                         np.ndarray dV,
                         np.ndarray u,
                         np.ndarray grad_u,
                         np.ndarray m,
                         np.ndarray dm,
                         np.ndarray H,
                         np.ndarray dH,
                         np.ndarray r):
    if u.ndim in [2,3]:
        if u.ndim == 2:
            nSimplex = u.shape[0]
            nPointsPerSimplex = u.shape[1]
        else:
            nSimplex = u.shape[0]*u.shape[1]
            nPointsPerSimplex = u.shape[2]
        credistanceLevelSetSandFCoefficientsEvaluate( nSimplex, 
                          nPointsPerSimplex,
                          dH[dH.ndim-1],
                          eps,
                         <double*> u_levelSet.data,
                         <double*> dV.data,
                         <double*> u.data,
                         <double*> grad_u.data,
                         <double*> m.data,
                         <double*> dm.data,
                         <double*> H.data,
                         <double*> dH.data,
                         <double*> r.data)
    else:
        assert 0
def setWeakDirichletConditionsForLevelSet(int nElements_global,
                       int nDOF_trial_element,
                       double epsilon_freeze_factor,
                       np.ndarray elementDiameter,
                       np.ndarray  u_l2g,
                       np.ndarray u_dof,
                       np.ndarray  freeze_nodes_tmp,
                       np.ndarray  weakDirichletConditionFlags):
    csetWeakDirichletConditionsForLevelSet( nElements_global,
                        nDOF_trial_element,
                        epsilon_freeze_factor,
                       <double*> elementDiameter.data,
                       <int*>  u_l2g.data,
                       <double*> u_dof.data,
                       <int*>  freeze_nodes_tmp.data,
                       <int*>  weakDirichletConditionFlags.data)
def setSimpleWeakDirichletConditionsForLevelSet(int nElements_global,
                                                 int nDOF_trial_element,
                                                 double epsilon_freeze_factor,
                                                 np.ndarray elementDiameter,
                                                 np.ndarray  u_l2g,
                                                 np.ndarray u_dof,
                                                 np.ndarray  freeze_nodes_tmp,
                                                 np.ndarray  weakDirichletConditionFlags):
    csetSimpleWeakDirichletConditionsForLevelSet( nElements_global,
                                                  nDOF_trial_element,
                                                  epsilon_freeze_factor,
                                                 <double*> elementDiameter.data,
                                                 <int*>  u_l2g.data,
                                                 <double*> u_dof.data,
                                                 <int*>  freeze_nodes_tmp.data,
                                                 <int*>  weakDirichletConditionFlags.data)
def darcySharpInterfaceFlowEvaluate(double Km, 
                    double rhoM,
                    double Kp, 
                    double rhoP,
                    double eps,
                    np.ndarray  gravity_u,
                    np.ndarray  u,
                    np.ndarray  gradu,
                    np.ndarray  u_levelSet,
                    np.ndarray  phi_pot,
                    np.ndarray  a,
                    np.ndarray  f,
                    np.ndarray  r,
                    np.ndarray  m,
                    np.ndarray  dphi_pot,
                    np.ndarray  da,
                    np.ndarray  df,
                    np.ndarray  dr,
                    np.ndarray  dm):
    cdarcySharpInterfaceFlowEvaluate(u.size,
                    f.shape[f.ndim-1],
                    Km,  
                    rhoM,
                    Kp,  
                    rhoP,
                    eps,
                    <double*>  gravity_u.data,
                    <double*>  u.data,
                    <double*>  gradu.data,
                    <double*>  u_levelSet.data,
                    <double*>  phi_pot.data,
                    <double*>  a.data,
                    <double*>  f.data,
                    <double*>  r.data,
                    <double*>  m.data,
                    <double*>  dphi_pot.data,
                    <double*>  da.data,
                    <double*>  df.data,
                    <double*>  dr.data,
                    <double*>  dm.data)
def darcySharpInterfaceFlowImEvaluate(double Km, 
                        double rhoM,
                        double Kp, 
                        double rhoP,
                        double eps,
                        np.ndarray  gravity_u,
                        np.ndarray  u,
                        np.ndarray  gradu,
                        np.ndarray  u_levelSet,
                        np.ndarray  phi_pot,
                        np.ndarray  a,
                        np.ndarray  f,
                        np.ndarray  r,
                        np.ndarray  m,
                        np.ndarray  dphi_pot,
                        np.ndarray  da,
                        np.ndarray  df,
                        np.ndarray  dr,
                        np.ndarray  dm):
    cdarcySharpInterfaceFlowImEvaluate(u.size,
                        f.shape[f.ndim-1],
                        Km,  rhoM,
                        Kp,  rhoP,
                        eps,
                        <double*>  gravity_u.data,
                        <double*>  u.data,
                        <double*>  gradu.data,
                        <double*>  u_levelSet.data,
                        <double*>  phi_pot.data,
                        <double*>  a.data,
                        <double*>  f.data,
                        <double*>  r.data,
                        <double*>  m.data,
                        <double*>  dphi_pot.data,
                        <double*>  da.data,
                        <double*>  df.data,
                        <double*>  dr.data,
                        <double*>  dm.data)
def NavierStokes_2D_Evaluate(const double rho,
                              const double nu,
                              np.ndarray g,
                              np.ndarray p,
                              np.ndarray grad_p,
                              np.ndarray u,
                              np.ndarray v,
                              np.ndarray mom_u_acc,
                              np.ndarray dmom_u_acc_u,
                              np.ndarray mom_v_acc,
                              np.ndarray dmom_v_acc_v,
                              np.ndarray mass_adv,
                              np.ndarray dmass_adv_u,
                              np.ndarray dmass_adv_v,
                              np.ndarray mom_u_adv,
                              np.ndarray dmom_u_adv_u,
                              np.ndarray dmom_u_adv_v,
                              np.ndarray mom_v_adv,
                              np.ndarray dmom_v_adv_u,
                              np.ndarray dmom_v_adv_v,
                              np.ndarray mom_u_diff_ten,
                              np.ndarray mom_v_diff_ten,
                              np.ndarray mom_u_source,
                              np.ndarray mom_v_source,
                              np.ndarray mom_u_ham,
                              np.ndarray dmom_u_ham_grad_p,
                              np.ndarray mom_v_ham,
                              np.ndarray dmom_v_ham_grad_p):
    cNavierStokes_2D_Evaluate(p.size,
                              rho,
                              nu,
                              <double*> g.data,
                              <double*> p.data,
                              <double*> grad_p.data,
                              <double*> u.data,
                              <double*> v.data,
                              <double*> mom_u_acc.data,
                              <double*> dmom_u_acc_u.data,
                              <double*> mom_v_acc.data,
                              <double*> dmom_v_acc_v.data,
                              <double*> mass_adv.data,
                              <double*> dmass_adv_u.data,
                              <double*> dmass_adv_v.data,
                              <double*> mom_u_adv.data,
                              <double*> dmom_u_adv_u.data,
                              <double*> dmom_u_adv_v.data,
                              <double*> mom_v_adv.data,
                              <double*> dmom_v_adv_u.data,
                              <double*> dmom_v_adv_v.data,
                              <double*> mom_u_diff_ten.data,
                              <double*> mom_v_diff_ten.data,
                              <double*> mom_u_source.data,
                              <double*> mom_v_source.data,
                              <double*> mom_u_ham.data,
                              <double*> dmom_u_ham_grad_p.data,
                              <double*> mom_v_ham.data,
                              <double*> dmom_v_ham_grad_p.data)
def NavierStokes_3D_Evaluate(const double rho,
                              const double nu,
                              np.ndarray g,
                              np.ndarray p,
                              np.ndarray grad_p,
                              np.ndarray u,
                              np.ndarray v,
                              np.ndarray w,
                              np.ndarray mom_u_acc,
                              np.ndarray dmom_u_acc_u,
                              np.ndarray mom_v_acc,
                              np.ndarray dmom_v_acc_v,
                              np.ndarray mom_w_acc,
                              np.ndarray dmom_w_acc_w,
                              np.ndarray mass_adv,
                              np.ndarray dmass_adv_u,
                              np.ndarray dmass_adv_v,
                              np.ndarray dmass_adv_w,
                              np.ndarray mom_u_adv,
                              np.ndarray dmom_u_adv_u,
                              np.ndarray dmom_u_adv_v,
                              np.ndarray dmom_u_adv_w,
                              np.ndarray mom_v_adv,
                              np.ndarray dmom_v_adv_u,
                              np.ndarray dmom_v_adv_v,
                              np.ndarray dmom_v_adv_w,
                              np.ndarray mom_w_adv,
                              np.ndarray dmom_w_adv_u,
                              np.ndarray dmom_w_adv_v,
                              np.ndarray dmom_w_adv_w,
                              np.ndarray mom_u_diff_ten,
                              np.ndarray mom_v_diff_ten,
                              np.ndarray mom_w_diff_ten,
                              np.ndarray mom_u_source,
                              np.ndarray mom_v_source,
                              np.ndarray mom_w_source,
                              np.ndarray mom_u_ham,
                              np.ndarray dmom_u_ham_grad_p,
                              np.ndarray mom_v_ham,
                              np.ndarray dmom_v_ham_grad_p,
                              np.ndarray mom_w_ham,
                              np.ndarray dmom_w_ham_grad_p):
    cNavierStokes_3D_Evaluate(p.size,
                              rho,
                              nu,
                              <double*> g.data,
                              <double*> p.data,
                              <double*> grad_p.data,
                              <double*> u.data,
                              <double*> v.data,
                              <double*> w.data,
                              <double*> mom_u_acc.data,
                              <double*> dmom_u_acc_u.data,
                              <double*> mom_v_acc.data,
                              <double*> dmom_v_acc_v.data,
                              <double*> mom_w_acc.data,
                              <double*> dmom_w_acc_w.data,
                              <double*> mass_adv.data,
                              <double*> dmass_adv_u.data,
                              <double*> dmass_adv_v.data,
                              <double*> dmass_adv_w.data,
                              <double*> mom_u_adv.data,
                              <double*> dmom_u_adv_u.data,
                              <double*> dmom_u_adv_v.data,
                              <double*> dmom_u_adv_w.data,
                              <double*> mom_v_adv.data,
                              <double*> dmom_v_adv_u.data,
                              <double*> dmom_v_adv_v.data,
                              <double*> dmom_v_adv_w.data,
                              <double*> mom_w_adv.data,
                              <double*> dmom_w_adv_u.data,
                              <double*> dmom_w_adv_v.data,
                              <double*> dmom_w_adv_w.data,
                              <double*> mom_u_diff_ten.data,
                              <double*> mom_v_diff_ten.data,
                              <double*> mom_w_diff_ten.data,
                              <double*> mom_u_source.data,
                              <double*> mom_v_source.data,
                              <double*> mom_w_source.data,
                              <double*> mom_u_ham.data,
                              <double*> dmom_u_ham_grad_p.data,
                              <double*> mom_v_ham.data,
                              <double*> dmom_v_ham_grad_p.data,
                              <double*> mom_w_ham.data,
                              <double*> dmom_w_ham_grad_p.data)
def Stokes_2D_Evaluate(const double rho,
                        const double nu,
                        np.ndarray g,
                        np.ndarray p,
                        np.ndarray grad_p,
                        np.ndarray u,
                        np.ndarray v,
                        np.ndarray mom_u_acc,
                        np.ndarray dmom_u_acc_u,
                        np.ndarray mom_v_acc,
                        np.ndarray dmom_v_acc_v,
                        np.ndarray mass_adv,
                        np.ndarray dmass_adv_u,
                        np.ndarray dmass_adv_v,
                        np.ndarray mom_u_diff_ten,
                        np.ndarray mom_v_diff_ten,
                        np.ndarray mom_u_source,
                        np.ndarray mom_v_source,
                        np.ndarray mom_u_ham,
                        np.ndarray dmom_u_ham_grad_p,
                        np.ndarray mom_v_ham,
                        np.ndarray dmom_v_ham_grad_p):
    cStokes_2D_Evaluate(p.size,
                        rho,
                        nu,
                        <double*> g.data,
                        <double*> p.data,
                        <double*> grad_p.data,
                        <double*> u.data,
                        <double*> v.data,
                        <double*> mom_u_acc.data,
                        <double*> dmom_u_acc_u.data,
                        <double*> mom_v_acc.data,
                        <double*> dmom_v_acc_v.data,
                        <double*> mass_adv.data,
                        <double*> dmass_adv_u.data,
                        <double*> dmass_adv_v.data,
                        <double*> mom_u_diff_ten.data,
                        <double*> mom_v_diff_ten.data,
                        <double*> mom_u_source.data,
                        <double*> mom_v_source.data,
                        <double*> mom_u_ham.data,
                        <double*> dmom_u_ham_grad_p.data,
                        <double*> mom_v_ham.data,
                        <double*> dmom_v_ham_grad_p.data)
def StokesP_2D_Evaluate(const double rho,
                         const double nu,
                         np.ndarray g,
                         np.ndarray p,
                         np.ndarray u,
                         np.ndarray v,
                         np.ndarray mom_u_acc,
                         np.ndarray dmom_u_acc_u,
                         np.ndarray mom_v_acc,
                         np.ndarray dmom_v_acc_v,
                         np.ndarray mass_adv,
                         np.ndarray dmass_adv_u,
                         np.ndarray dmass_adv_v,
                         np.ndarray mom_u_adv,
                         np.ndarray dmom_u_adv_p,
                         np.ndarray mom_v_adv,
                         np.ndarray dmom_v_adv_p,
                         np.ndarray mom_u_diff_ten,
                         np.ndarray mom_v_diff_ten,
                         np.ndarray mom_u_source,
                         np.ndarray mom_v_source):
    cStokesP_2D_Evaluate(p.size,
                         rho,
                         nu,
                         <double*> g.data,
                         <double*> p.data,
                         <double*> u.data,
                         <double*> v.data,
                         <double*> mom_u_acc.data,
                         <double*> dmom_u_acc_u.data,
                         <double*> mom_v_acc.data,
                         <double*> dmom_v_acc_v.data,
                         <double*> mass_adv.data,
                         <double*> dmass_adv_u.data,
                         <double*> dmass_adv_v.data,
                         <double*> mom_u_adv.data,
                         <double*> dmom_u_adv_p.data,
                         <double*> mom_v_adv.data,
                         <double*> dmom_v_adv_p.data,
                         <double*> mom_u_diff_ten.data,
                         <double*> mom_v_diff_ten.data,
                         <double*> mom_u_source.data,
                         <double*> mom_v_source.data)
def Stokes_3D_Evaluate(const double rho,
                        const double nu,
                        np.ndarray g,
                        np.ndarray p,
                        np.ndarray grad_p,
                        np.ndarray u,
                        np.ndarray v,
                        np.ndarray w,
                        np.ndarray mom_u_acc,
                        np.ndarray dmom_u_acc_u,
                        np.ndarray mom_v_acc,
                        np.ndarray dmom_v_acc_v,
                        np.ndarray mom_w_acc,
                        np.ndarray dmom_w_acc_w,
                        np.ndarray mass_adv,
                        np.ndarray dmass_adv_u,
                        np.ndarray dmass_adv_v,
                        np.ndarray dmass_adv_w,
                        np.ndarray mom_u_diff_ten,
                        np.ndarray mom_v_diff_ten,
                        np.ndarray mom_w_diff_ten,
                        np.ndarray mom_u_source,
                        np.ndarray mom_v_source,
                        np.ndarray mom_w_source,
                        np.ndarray mom_u_ham,
                        np.ndarray dmom_u_ham_grad_p,
                        np.ndarray mom_v_ham,
                        np.ndarray dmom_v_ham_grad_p,
                        np.ndarray mom_w_ham,
                        np.ndarray dmom_w_ham_grad_p):
    cStokes_3D_Evaluate(p.size,
                        rho,
                        nu,
                        <double*> g.data,
                        <double*> p.data,
                        <double*> grad_p.data,
                        <double*> u.data,
                        <double*> v.data,
                        <double*> w.data,
                        <double*> mom_u_acc.data,
                        <double*> dmom_u_acc_u.data,
                        <double*> mom_v_acc.data,
                        <double*> dmom_v_acc_v.data,
                        <double*> mom_w_acc.data,
                        <double*> dmom_w_acc_w.data,
                        <double*> mass_adv.data,
                        <double*> dmass_adv_u.data,
                        <double*> dmass_adv_v.data,
                        <double*> dmass_adv_w.data,
                        <double*> mom_u_diff_ten.data,
                        <double*> mom_v_diff_ten.data,
                        <double*> mom_w_diff_ten.data,
                        <double*> mom_u_source.data,
                        <double*> mom_v_source.data,
                        <double*> mom_w_source.data,
                        <double*> mom_u_ham.data,
                        <double*> dmom_u_ham_grad_p.data,
                        <double*> mom_v_ham.data,
                        <double*> dmom_v_ham_grad_p.data,
                        <double*> mom_w_ham.data,
                        <double*> dmom_w_ham_grad_p.data)
def StokesP_3D_Evaluate(const int nPoints,
                         const double rho,
                         const double nu,
                         np.ndarray g,
                         np.ndarray p,
                         np.ndarray u,
                         np.ndarray v,
                         np.ndarray w,
                         np.ndarray mom_u_acc,
                         np.ndarray dmom_u_acc_u,
                         np.ndarray mom_v_acc,
                         np.ndarray dmom_v_acc_v,
             np.ndarray mom_w_acc,
             np.ndarray dmom_w_acc_w,
                         np.ndarray mass_adv,
                         np.ndarray dmass_adv_u,
                         np.ndarray dmass_adv_v,
             np.ndarray dmass_adv_w,
                         np.ndarray mom_u_adv,
                         np.ndarray dmom_u_adv_p,
                         np.ndarray mom_v_adv,
                         np.ndarray dmom_v_adv_p,
             np.ndarray mom_w_adv,
             np.ndarray dmom_w_adv_p,
                         np.ndarray mom_u_diff_ten,
                         np.ndarray mom_v_diff_ten,
             np.ndarray mom_w_diff_ten,
                         np.ndarray mom_u_source,
                         np.ndarray mom_v_source,
             np.ndarray mom_w_source):
    cStokesP_3D_Evaluate(nPoints,
                         rho,
                         nu,
                         <double*> g.data,
                         <double*> p.data,
                         <double*> u.data,
                         <double*> v.data,
                         <double*> w.data,
                         <double*> mom_u_acc.data,
                         <double*> dmom_u_acc_u.data,
                         <double*> mom_v_acc.data,
                         <double*> dmom_v_acc_v.data,
             <double*> mom_w_acc.data,
             <double*> dmom_w_acc_w.data,
                         <double*> mass_adv.data,
                         <double*> dmass_adv_u.data,
                         <double*> dmass_adv_v.data,
             <double*> dmass_adv_w.data,
                         <double*> mom_u_adv.data,
                         <double*> dmom_u_adv_p.data,
                         <double*> mom_v_adv.data,
                         <double*> dmom_v_adv_p.data,
             <double*> mom_w_adv.data,
             <double*> dmom_w_adv_p.data,
                         <double*> mom_u_diff_ten.data,
                         <double*> mom_v_diff_ten.data,
             <double*> mom_w_diff_ten.data,
                         <double*> mom_u_source.data,
                         <double*> mom_v_source.data,
             <double*> mom_w_source.data)
def TwophaseNavierStokes_LS_SO_2D_Evaluate(const double eps,
                                            const double rho_0,
                                            const double nu_0,
                                            const double rho_1,
                                            const double nu_1,
                                            np.ndarray g,
                                            np.ndarray phi,
                                            np.ndarray p,
                                            np.ndarray grad_p,
                                            np.ndarray u,
                                            np.ndarray v,
                                            np.ndarray mom_u_acc,
                                            np.ndarray dmom_u_acc_u,
                                            np.ndarray mom_v_acc,
                                            np.ndarray dmom_v_acc_v,
                                            np.ndarray mass_adv,
                                            np.ndarray dmass_adv_u,
                                            np.ndarray dmass_adv_v,
                                            np.ndarray mom_u_adv,
                                            np.ndarray dmom_u_adv_u,
                                            np.ndarray dmom_u_adv_v,
                                            np.ndarray mom_v_adv,
                                            np.ndarray dmom_v_adv_u,
                                            np.ndarray dmom_v_adv_v,
                                            np.ndarray mom_u_diff_ten,
                                            np.ndarray mom_v_diff_ten,
                                            np.ndarray mom_u_source,
                                            np.ndarray mom_v_source,
                                            np.ndarray mom_u_ham,
                                            np.ndarray dmom_u_ham_grad_p,
                                            np.ndarray mom_v_ham,
                                            np.ndarray dmom_v_ham_grad_p):
    cTwophaseNavierStokes_LS_SO_2D_Evaluate(p.size,
                                            eps,
                                            rho_0,
                                            nu_0,
                                            rho_1,
                                            nu_1,
                                            <double*> g.data,
                                            <double*> phi.data,
                                            <double*> p.data,
                                            <double*> grad_p.data,
                                            <double*> u.data,
                                            <double*> v.data,
                                            <double*> mom_u_acc.data,
                                            <double*> dmom_u_acc_u.data,
                                            <double*> mom_v_acc.data,
                                            <double*> dmom_v_acc_v.data,
                                            <double*> mass_adv.data,
                                            <double*> dmass_adv_u.data,
                                            <double*> dmass_adv_v.data,
                                            <double*> mom_u_adv.data,
                                            <double*> dmom_u_adv_u.data,
                                            <double*> dmom_u_adv_v.data,
                                            <double*> mom_v_adv.data,
                                            <double*> dmom_v_adv_u.data,
                                            <double*> dmom_v_adv_v.data,
                                            <double*> mom_u_diff_ten.data,
                                            <double*> mom_v_diff_ten.data,
                                            <double*> mom_u_source.data,
                                            <double*> mom_v_source.data,
                                            <double*> mom_u_ham.data,
                                            <double*> dmom_u_ham_grad_p.data,
                                            <double*> mom_v_ham.data,
                                            <double*> dmom_v_ham_grad_p.data)
def TwophaseNavierStokes_ST_LS_SO_2D_Evaluate(const double eps_rho,
                                               const double eps_mu,
                                               const double sigma,
                                               const double rho_0,
                                               const double nu_0,
                                               const double rho_1,
                                               const double nu_1,
                                               np.ndarray g,
                                               np.ndarray phi,
                                               np.ndarray n,
                                               np.ndarray kappa,
                                               np.ndarray p,
                                               np.ndarray grad_p,
                                               np.ndarray u,
                                               np.ndarray v,
                                               np.ndarray mom_u_acc,
                                               np.ndarray dmom_u_acc_u,
                                               np.ndarray mom_v_acc,
                                               np.ndarray dmom_v_acc_v,
                                               np.ndarray mass_adv,
                                               np.ndarray dmass_adv_u,
                                               np.ndarray dmass_adv_v,
                                               np.ndarray mom_u_adv,
                                               np.ndarray dmom_u_adv_u,
                                               np.ndarray dmom_u_adv_v,
                                               np.ndarray mom_v_adv,
                                               np.ndarray dmom_v_adv_u,
                                               np.ndarray dmom_v_adv_v,
                                               np.ndarray mom_u_diff_ten,
                                               np.ndarray mom_v_diff_ten,
                                               np.ndarray mom_uv_diff_ten,
                                               np.ndarray mom_vu_diff_ten,
                                               np.ndarray mom_u_source,
                                               np.ndarray mom_v_source,
                                               np.ndarray mom_u_ham,
                                               np.ndarray dmom_u_ham_grad_p,
                                               np.ndarray mom_v_ham,
                                               np.ndarray dmom_v_ham_grad_p):
    cTwophaseNavierStokes_ST_LS_SO_2D_Evaluate(p.size,
                                               eps_rho,
                                               eps_mu,
                                               sigma,
                                               rho_0,
                                               nu_0,
                                               rho_1,
                                               nu_1,
                                               <double*> g.data,
                                               <double*> phi.data,
                                               <double*> n.data,
                                               <double*> kappa.data,
                                               <double*> p.data,
                                               <double*> grad_p.data,
                                               <double*> u.data,
                                               <double*> v.data,
                                               <double*> mom_u_acc.data,
                                               <double*> dmom_u_acc_u.data,
                                               <double*> mom_v_acc.data,
                                               <double*> dmom_v_acc_v.data,
                                               <double*> mass_adv.data,
                                               <double*> dmass_adv_u.data,
                                               <double*> dmass_adv_v.data,
                                               <double*> mom_u_adv.data,
                                               <double*> dmom_u_adv_u.data,
                                               <double*> dmom_u_adv_v.data,
                                               <double*> mom_v_adv.data,
                                               <double*> dmom_v_adv_u.data,
                                               <double*> dmom_v_adv_v.data,
                                               <double*> mom_u_diff_ten.data,
                                               <double*> mom_v_diff_ten.data,
                                               <double*> mom_uv_diff_ten.data,
                                               <double*> mom_vu_diff_ten.data,
                                               <double*> mom_u_source.data,
                                               <double*> mom_v_source.data,
                                               <double*> mom_u_ham.data,
                                               <double*> dmom_u_ham_grad_p.data,
                                               <double*> mom_v_ham.data,
                                               <double*> dmom_v_ham_grad_p.data)
def TwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(const double eps_rho,
                                                  const double eps_mu,
                                                  const double sigma,
                                                  const double rho_0,
                                                  const double nu_0,
                                                  const double rho_1,
                                                  const double nu_1,
                                                  np.ndarray g,
                                                  np.ndarray phi,
                                                  np.ndarray n,
                                                  np.ndarray kappa,
                                                  np.ndarray p,
                                                  np.ndarray grad_p,
                                                  np.ndarray u,
                                                  np.ndarray v,
                                                  np.ndarray mom_u_acc,
                                                  np.ndarray dmom_u_acc_u,
                                                  np.ndarray mom_v_acc,
                                                  np.ndarray dmom_v_acc_v,
                                                  np.ndarray mass_adv,
                                                  np.ndarray dmass_adv_u,
                                                  np.ndarray dmass_adv_v,
                                                  np.ndarray mom_u_adv,
                                                  np.ndarray dmom_u_adv_u,
                                                  np.ndarray dmom_u_adv_v,
                                                  np.ndarray mom_v_adv,
                                                  np.ndarray dmom_v_adv_u,
                                                  np.ndarray dmom_v_adv_v,
                                                  np.ndarray mom_u_diff_ten,
                                                  np.ndarray mom_v_diff_ten,
                                                  np.ndarray mom_uv_diff_ten,
                                                  np.ndarray mom_vu_diff_ten,
                                                  np.ndarray mom_u_source,
                                                  np.ndarray mom_v_source,
                                                  np.ndarray mom_u_ham,
                                                  np.ndarray dmom_u_ham_grad_p,
                                                  np.ndarray mom_v_ham,
                                                  np.ndarray dmom_v_ham_grad_p):
    cTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(p.size,
                                                  eps_rho,
                                                  eps_mu,
                                                  sigma,
                                                  rho_0,
                                                  nu_0,
                                                  rho_1,
                                                  nu_1,
                                                  <double*> g.data,
                                                  <double*> phi.data,
                                                  <double*> n.data,
                                                  <double*> kappa.data,
                                                  <double*> p.data,
                                                  <double*> grad_p.data,
                                                  <double*> u.data,
                                                  <double*> v.data,
                                                  <double*> mom_u_acc.data,
                                                  <double*> dmom_u_acc_u.data,
                                                  <double*> mom_v_acc.data,
                                                  <double*> dmom_v_acc_v.data,
                                                  <double*> mass_adv.data,
                                                  <double*> dmass_adv_u.data,
                                                  <double*> dmass_adv_v.data,
                                                  <double*> mom_u_adv.data,
                                                  <double*> dmom_u_adv_u.data,
                                                  <double*> dmom_u_adv_v.data,
                                                  <double*> mom_v_adv.data,
                                                  <double*> dmom_v_adv_u.data,
                                                  <double*> dmom_v_adv_v.data,
                                                  <double*> mom_u_diff_ten.data,
                                                  <double*> mom_v_diff_ten.data,
                                                  <double*> mom_uv_diff_ten.data,
                                                  <double*> mom_vu_diff_ten.data,
                                                  <double*> mom_u_source.data,
                                                  <double*> mom_v_source.data,
                                                  <double*> mom_u_ham.data,
                                                  <double*> dmom_u_ham_grad_p.data,
                                                  <double*> mom_v_ham.data,
                                                  <double*> dmom_v_ham_grad_p.data)
def ThreephaseNavierStokes_ST_LS_SO_2D_Evaluate(const double boundaryPenaltyCoef,
                         const double volumePenaltyCoef,
                         const double eps_rho,
                         const double eps_mu,
                         const double sigma,
                         const double rho_0,
                         const double nu_0,
                         const double rho_1,
                         const double nu_1,
                         const double rho_s,
                         const double nu_s,
                         np.ndarray g,
                         np.ndarray phi,
                         np.ndarray n,
                         np.ndarray kappa,
                         np.ndarray phi_s,
                         np.ndarray n_s,
                         np.ndarray p,
                         np.ndarray grad_p,
                         np.ndarray u,
                         np.ndarray v,
                         np.ndarray mom_u_acc,
                         np.ndarray dmom_u_acc_u,
                         np.ndarray mom_v_acc,
                         np.ndarray dmom_v_acc_v,
                         np.ndarray mass_adv,
                         np.ndarray dmass_adv_u,
                         np.ndarray dmass_adv_v,
                         np.ndarray mom_u_adv,
                         np.ndarray dmom_u_adv_u,
                         np.ndarray dmom_u_adv_v,
                         np.ndarray mom_v_adv,
                         np.ndarray dmom_v_adv_u,
                         np.ndarray dmom_v_adv_v,
                         np.ndarray mom_u_diff_ten,
                         np.ndarray mom_v_diff_ten,
                         np.ndarray mom_uv_diff_ten,
                         np.ndarray mom_vu_diff_ten,
                         np.ndarray mom_u_source,
                         np.ndarray dmom_u_source_u,
                         np.ndarray dmom_u_source_v,
                         np.ndarray mom_v_source,
                         np.ndarray dmom_v_source_u,
                         np.ndarray dmom_v_source_v,
                         np.ndarray mom_u_ham,
                         np.ndarray dmom_u_ham_grad_p,
                         np.ndarray mom_v_ham,
                         np.ndarray dmom_v_ham_grad_p):
    cThreephaseNavierStokes_ST_LS_SO_2D_Evaluate(p.size,
                         boundaryPenaltyCoef,
                         volumePenaltyCoef,
                         eps_rho,
                         eps_mu,
                         sigma,
                         rho_0,
                         nu_0,
                         rho_1,
                         nu_1,
                         rho_s,
                         nu_s,
                         <double*> g.data,
                         <double*> phi.data,
                         <double*> n.data,
                         <double*> kappa.data,
                         <double*> phi_s.data,
                         <double*> n_s.data,
                         <double*> p.data,
                         <double*> grad_p.data,
                         <double*> u.data,
                         <double*> v.data,
                         <double*> mom_u_acc.data,
                         <double*> dmom_u_acc_u.data,
                         <double*> mom_v_acc.data,
                         <double*> dmom_v_acc_v.data,
                         <double*> mass_adv.data,
                         <double*> dmass_adv_u.data,
                         <double*> dmass_adv_v.data,
                         <double*> mom_u_adv.data,
                         <double*> dmom_u_adv_u.data,
                         <double*> dmom_u_adv_v.data,
                         <double*> mom_v_adv.data,
                         <double*> dmom_v_adv_u.data,
                         <double*> dmom_v_adv_v.data,
                         <double*> mom_u_diff_ten.data,
                         <double*> mom_v_diff_ten.data,
                         <double*> mom_uv_diff_ten.data,
                         <double*> mom_vu_diff_ten.data,
                         <double*> mom_u_source.data,
                         <double*> dmom_u_source_u.data,
                         <double*> dmom_u_source_v.data,
                         <double*> mom_v_source.data,
                         <double*> dmom_v_source_u.data,
                         <double*> dmom_v_source_v.data,
                         <double*> mom_u_ham.data,
                         <double*> dmom_u_ham_grad_p.data,
                         <double*> mom_v_ham.data,
                         <double*> dmom_v_ham_grad_p.data)
def TwophaseNavierStokes_ST_LS_SO_3D_Evaluate(const double eps_rho,
                                               const double eps_mu,
                                               const double sigma,
                                               const double rho_0,
                                               const double nu_0,
                                               const double rho_1,
                                               const double nu_1,
                                               np.ndarray g,
                                               np.ndarray phi,
                                               np.ndarray n,
                                               np.ndarray kappa,
                                               np.ndarray p,
                                               np.ndarray grad_p,
                                               np.ndarray u,
                                               np.ndarray v,
                                               np.ndarray w,
                                               np.ndarray mom_u_acc,
                                               np.ndarray dmom_u_acc_u,
                                               np.ndarray mom_v_acc,
                                               np.ndarray dmom_v_acc_v,
                                               np.ndarray mom_w_acc,
                                               np.ndarray dmom_w_acc_w,
                                               np.ndarray mass_adv,
                                               np.ndarray dmass_adv_u,
                                               np.ndarray dmass_adv_v,
                                               np.ndarray dmass_adv_w,
                                               np.ndarray mom_u_adv,
                                               np.ndarray dmom_u_adv_u,
                                               np.ndarray dmom_u_adv_v,
                                               np.ndarray dmom_u_adv_w,
                                               np.ndarray mom_v_adv,
                                               np.ndarray dmom_v_adv_u,
                                               np.ndarray dmom_v_adv_v,
                                               np.ndarray dmom_v_adv_w,
                                               np.ndarray mom_w_adv,
                                               np.ndarray dmom_w_adv_u,
                                               np.ndarray dmom_w_adv_v,
                                               np.ndarray dmom_w_adv_w,
                                               np.ndarray mom_u_diff_ten,
                                               np.ndarray mom_v_diff_ten,
                                               np.ndarray mom_w_diff_ten,
                                               np.ndarray mom_uv_diff_ten,
                                               np.ndarray mom_uw_diff_ten,
                                               np.ndarray mom_vu_diff_ten,
                                               np.ndarray mom_vw_diff_ten,
                                               np.ndarray mom_wu_diff_ten,
                                               np.ndarray mom_wv_diff_ten,
                                               np.ndarray mom_u_source,
                                               np.ndarray mom_v_source,
                                               np.ndarray mom_w_source,
                                               np.ndarray mom_u_ham,
                                               np.ndarray dmom_u_ham_grad_p,
                                               np.ndarray mom_v_ham,
                                               np.ndarray dmom_v_ham_grad_p,
                                               np.ndarray mom_w_ham,
                                               np.ndarray dmom_w_ham_grad_p):
    cTwophaseNavierStokes_ST_LS_SO_3D_Evaluate(p.size,
                                               eps_rho,
                                               eps_mu,
                                               sigma,
                                               rho_0,
                                               nu_0,
                                               rho_1,
                                               nu_1,
                                               <double*> g.data,
                                               <double*> phi.data,
                                               <double*> n.data,
                                               <double*> kappa.data,
                                               <double*> p.data,
                                               <double*> grad_p.data,
                                               <double*> u.data,
                                               <double*> v.data,
                                               <double*> w.data,
                                               <double*> mom_u_acc.data,
                                               <double*> dmom_u_acc_u.data,
                                               <double*> mom_v_acc.data,
                                               <double*> dmom_v_acc_v.data,
                                               <double*> mom_w_acc.data,
                                               <double*> dmom_w_acc_w.data,
                                               <double*> mass_adv.data,
                                               <double*> dmass_adv_u.data,
                                               <double*> dmass_adv_v.data,
                                               <double*> dmass_adv_w.data,
                                               <double*> mom_u_adv.data,
                                               <double*> dmom_u_adv_u.data,
                                               <double*> dmom_u_adv_v.data,
                                               <double*> dmom_u_adv_w.data,
                                               <double*> mom_v_adv.data,
                                               <double*> dmom_v_adv_u.data,
                                               <double*> dmom_v_adv_v.data,
                                               <double*> dmom_v_adv_w.data,
                                               <double*> mom_w_adv.data,
                                               <double*> dmom_w_adv_u.data,
                                               <double*> dmom_w_adv_v.data,
                                               <double*> dmom_w_adv_w.data,
                                               <double*> mom_u_diff_ten.data,
                                               <double*> mom_v_diff_ten.data,
                                               <double*> mom_w_diff_ten.data,
                                               <double*> mom_uv_diff_ten.data,
                                               <double*> mom_uw_diff_ten.data,
                                               <double*> mom_vu_diff_ten.data,
                                               <double*> mom_vw_diff_ten.data,
                                               <double*> mom_wu_diff_ten.data,
                                               <double*> mom_wv_diff_ten.data,
                                               <double*> mom_u_source.data,
                                               <double*> mom_v_source.data,
                                               <double*> mom_w_source.data,
                                               <double*> mom_u_ham.data,
                                               <double*> dmom_u_ham_grad_p.data,
                                               <double*> mom_v_ham.data,
                                               <double*> dmom_v_ham_grad_p.data,
                                               <double*> mom_w_ham.data,
                                               <double*> dmom_w_ham_grad_p.data)
def TwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(const double eps_rho,
                                                  const double eps_mu,
                                                  const double sigma,
                                                  const double rho_0,
                                                  const double nu_0,
                                                  const double rho_1,
                                                  const double nu_1,
                                                  np.ndarray g,
                                                  np.ndarray phi,
                                                  np.ndarray n,
                                                  np.ndarray kappa,
                                                  np.ndarray p,
                                                  np.ndarray grad_p,
                                                  np.ndarray u,
                                                  np.ndarray v,
                                                  np.ndarray w,
                                                  np.ndarray mom_u_acc,
                                                  np.ndarray dmom_u_acc_u,
                                                  np.ndarray mom_v_acc,
                                                  np.ndarray dmom_v_acc_v,
                                                  np.ndarray mom_w_acc,
                                                  np.ndarray dmom_w_acc_w,
                                                  np.ndarray mass_adv,
                                                  np.ndarray dmass_adv_u,
                                                  np.ndarray dmass_adv_v,
                                                  np.ndarray dmass_adv_w,
                                                  np.ndarray mom_u_adv,
                                                  np.ndarray dmom_u_adv_u,
                                                  np.ndarray dmom_u_adv_v,
                                                  np.ndarray dmom_u_adv_w,
                                                  np.ndarray mom_v_adv,
                                                  np.ndarray dmom_v_adv_u,
                                                  np.ndarray dmom_v_adv_v,
                                                  np.ndarray dmom_v_adv_w,
                                                  np.ndarray mom_w_adv,
                                                  np.ndarray dmom_w_adv_u,
                                                  np.ndarray dmom_w_adv_v,
                                                  np.ndarray dmom_w_adv_w,
                                                  np.ndarray mom_u_diff_ten,
                                                  np.ndarray mom_v_diff_ten,
                                                  np.ndarray mom_w_diff_ten,
                                                  np.ndarray mom_uv_diff_ten,
                                                  np.ndarray mom_uw_diff_ten,
                                                  np.ndarray mom_vu_diff_ten,
                                                  np.ndarray mom_vw_diff_ten,
                                                  np.ndarray mom_wu_diff_ten,
                                                  np.ndarray mom_wv_diff_ten,
                                                  np.ndarray mom_u_source,
                                                  np.ndarray mom_v_source,
                                                  np.ndarray mom_w_source,
                                                  np.ndarray mom_u_ham,
                                                  np.ndarray dmom_u_ham_grad_p,
                                                  np.ndarray mom_v_ham,
                                                  np.ndarray dmom_v_ham_grad_p,
                                                  np.ndarray mom_w_ham,
                                                  np.ndarray dmom_w_ham_grad_p):
    cTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(p.size,
                                                  eps_rho,
                                                  eps_mu,
                                                  sigma,
                                                  rho_0,
                                                  nu_0,
                                                  rho_1,
                                                  nu_1,
                                                  <double*> g.data,
                                                  <double*> phi.data,
                                                  <double*> n.data,
                                                  <double*> kappa.data,
                                                  <double*> p.data,
                                                  <double*> grad_p.data,
                                                  <double*> u.data,
                                                  <double*> v.data,
                                                  <double*> w.data,
                                                  <double*> mom_u_acc.data,
                                                  <double*> dmom_u_acc_u.data,
                                                  <double*> mom_v_acc.data,
                                                  <double*> dmom_v_acc_v.data,
                                                  <double*> mom_w_acc.data,
                                                  <double*> dmom_w_acc_w.data,
                                                  <double*> mass_adv.data,
                                                  <double*> dmass_adv_u.data,
                                                  <double*> dmass_adv_v.data,
                                                  <double*> dmass_adv_w.data,
                                                  <double*> mom_u_adv.data,
                                                  <double*> dmom_u_adv_u.data,
                                                  <double*> dmom_u_adv_v.data,
                                                  <double*> dmom_u_adv_w.data,
                                                  <double*> mom_v_adv.data,
                                                  <double*> dmom_v_adv_u.data,
                                                  <double*> dmom_v_adv_v.data,
                                                  <double*> dmom_v_adv_w.data,
                                                  <double*> mom_w_adv.data,
                                                  <double*> dmom_w_adv_u.data,
                                                  <double*> dmom_w_adv_v.data,
                                                  <double*> dmom_w_adv_w.data,
                                                  <double*> mom_u_diff_ten.data,
                                                  <double*> mom_v_diff_ten.data,
                                                  <double*> mom_w_diff_ten.data,
                                                  <double*> mom_uv_diff_ten.data,
                                                  <double*> mom_uw_diff_ten.data,
                                                  <double*> mom_vu_diff_ten.data,
                                                  <double*> mom_vw_diff_ten.data,
                                                  <double*> mom_wu_diff_ten.data,
                                                  <double*> mom_wv_diff_ten.data,
                                                  <double*> mom_u_source.data,
                                                  <double*> mom_v_source.data,
                                                  <double*> mom_w_source.data,
                                                  <double*> mom_u_ham.data,
                                                  <double*> dmom_u_ham_grad_p.data,
                                                  <double*> mom_v_ham.data,
                                                  <double*> dmom_v_ham_grad_p.data,
                                                  <double*> mom_w_ham.data,
                                                  <double*> dmom_w_ham_grad_p.data)
def ThreephaseNavierStokes_ST_LS_SO_3D_Evaluate(const double boundaryPenaltyCoef,
                         const double volumePenaltyCoef,
                         const double eps_rho,
                         const double eps_mu,
                         const double sigma,
                         const double rho_0,
                         const double nu_0,
                         const double rho_1,
                         const double nu_1,
                         const double rho_s,
                         const double nu_s,
                         np.ndarray g,
                         np.ndarray phi,
                         np.ndarray n,
                         np.ndarray kappa,
                         np.ndarray phi_s,
                         np.ndarray n_s,
                         np.ndarray p,
                         np.ndarray grad_p,
                         np.ndarray u,
                         np.ndarray v,
                         np.ndarray w,
                         np.ndarray mom_u_acc,
                         np.ndarray dmom_u_acc_u,
                         np.ndarray mom_v_acc,
                         np.ndarray dmom_v_acc_v,
                         np.ndarray mom_w_acc,
                         np.ndarray dmom_w_acc_w,
                         np.ndarray mass_adv,
                         np.ndarray dmass_adv_u,
                         np.ndarray dmass_adv_v,
                         np.ndarray dmass_adv_w,
                         np.ndarray mom_u_adv,
                         np.ndarray dmom_u_adv_u,
                         np.ndarray dmom_u_adv_v,
                         np.ndarray dmom_u_adv_w,
                         np.ndarray mom_v_adv,
                         np.ndarray dmom_v_adv_u,
                         np.ndarray dmom_v_adv_v,
                         np.ndarray dmom_v_adv_w,
                         np.ndarray mom_w_adv,
                         np.ndarray dmom_w_adv_u,
                         np.ndarray dmom_w_adv_v,
                         np.ndarray dmom_w_adv_w,
                         np.ndarray mom_u_diff_ten,
                         np.ndarray mom_v_diff_ten,
                         np.ndarray mom_w_diff_ten,
                         np.ndarray mom_uv_diff_ten,
                         np.ndarray mom_uw_diff_ten,
                         np.ndarray mom_vu_diff_ten,
                         np.ndarray mom_vw_diff_ten,
                         np.ndarray mom_wu_diff_ten,
                         np.ndarray mom_wv_diff_ten,
                         np.ndarray mom_u_source,
                         np.ndarray dmom_u_source_u,
                         np.ndarray dmom_u_source_v,
                         np.ndarray dmom_u_source_w,
                         np.ndarray mom_v_source,
                         np.ndarray dmom_v_source_u,
                         np.ndarray dmom_v_source_v,
                         np.ndarray dmom_v_source_w,
                         np.ndarray mom_w_source,
                         np.ndarray dmom_w_source_u,
                         np.ndarray dmom_w_source_v,
                         np.ndarray dmom_w_source_w,
                         np.ndarray mom_u_ham,
                         np.ndarray dmom_u_ham_grad_p,
                         np.ndarray mom_v_ham,
                         np.ndarray dmom_v_ham_grad_p,
                         np.ndarray mom_w_ham,
                         np.ndarray dmom_w_ham_grad_p):
    cThreephaseNavierStokes_ST_LS_SO_3D_Evaluate(p.size,
                         boundaryPenaltyCoef,
                         volumePenaltyCoef,
                         eps_rho,
                         eps_mu,
                         sigma,
                         rho_0,
                         nu_0,
                         rho_1,
                         nu_1,
                         rho_s,
                         nu_s,
                         <double*> g.data,
                         <double*> phi.data,
                         <double*> n.data,
                         <double*> kappa.data,
                         <double*> phi_s.data,
                         <double*> n_s.data,
                         <double*> p.data,
                         <double*> grad_p.data,
                         <double*> u.data,
                         <double*> v.data,
                         <double*> w.data,
                         <double*> mom_u_acc.data,
                         <double*> dmom_u_acc_u.data,
                         <double*> mom_v_acc.data,
                         <double*> dmom_v_acc_v.data,
                         <double*> mom_w_acc.data,
                         <double*> dmom_w_acc_w.data,
                         <double*> mass_adv.data,
                         <double*> dmass_adv_u.data,
                         <double*> dmass_adv_v.data,
                         <double*> dmass_adv_w.data,
                         <double*> mom_u_adv.data,
                         <double*> dmom_u_adv_u.data,
                         <double*> dmom_u_adv_v.data,
                         <double*> dmom_u_adv_w.data,
                         <double*> mom_v_adv.data,
                         <double*> dmom_v_adv_u.data,
                         <double*> dmom_v_adv_v.data,
                         <double*> dmom_v_adv_w.data,
                         <double*> mom_w_adv.data,
                         <double*> dmom_w_adv_u.data,
                         <double*> dmom_w_adv_v.data,
                         <double*> dmom_w_adv_w.data,
                         <double*> mom_u_diff_ten.data,
                         <double*> mom_v_diff_ten.data,
                         <double*> mom_w_diff_ten.data,
                         <double*> mom_uv_diff_ten.data,
                         <double*> mom_uw_diff_ten.data,
                         <double*> mom_vu_diff_ten.data,
                         <double*> mom_vw_diff_ten.data,
                         <double*> mom_wu_diff_ten.data,
                         <double*> mom_wv_diff_ten.data,
                         <double*> mom_u_source.data,
                         <double*> dmom_u_source_u.data,
                         <double*> dmom_u_source_v.data,
                         <double*> dmom_u_source_w.data,
                         <double*> mom_v_source.data,
                         <double*> dmom_v_source_u.data,
                         <double*> dmom_v_source_v.data,
                         <double*> dmom_v_source_w.data,
                         <double*> mom_w_source.data,
                         <double*> dmom_w_source_u.data,
                         <double*> dmom_w_source_v.data,
                         <double*> dmom_w_source_w.data,
                         <double*> mom_u_ham.data,
                         <double*> dmom_u_ham_grad_p.data,
                         <double*> mom_v_ham.data,
                         <double*> dmom_v_ham_grad_p.data,
                         <double*> mom_w_ham.data,
                         <double*> dmom_w_ham_grad_p.data)
def TwophaseNavierStokes_LS_SO_3D_Evaluate(const double eps,
                                            const double rho_0,
                                            const double nu_0,
                                            const double rho_1,
                                            const double nu_1,
                                            np.ndarray g,
                                            np.ndarray phi,
                                            np.ndarray p,
                                            np.ndarray grad_p,
                                            np.ndarray u,
                                            np.ndarray v,
                                            np.ndarray w,
                                            np.ndarray mom_u_acc,
                                            np.ndarray dmom_u_acc_u,
                                            np.ndarray mom_v_acc,
                                            np.ndarray dmom_v_acc_v,
                                            np.ndarray mom_w_acc,
                                            np.ndarray dmom_w_acc_w,
                                            np.ndarray mass_adv,
                                            np.ndarray dmass_adv_u,
                                            np.ndarray dmass_adv_v,
                                            np.ndarray dmass_adv_w,
                                            np.ndarray mom_u_adv,
                                            np.ndarray dmom_u_adv_u,
                                            np.ndarray dmom_u_adv_v,
                                            np.ndarray dmom_u_adv_w,
                                            np.ndarray mom_v_adv,
                                            np.ndarray dmom_v_adv_u,
                                            np.ndarray dmom_v_adv_v,
                                            np.ndarray dmom_v_adv_w,
                                            np.ndarray mom_w_adv,
                                            np.ndarray dmom_w_adv_u,
                                            np.ndarray dmom_w_adv_v,
                                            np.ndarray dmom_w_adv_w,
                                            np.ndarray mom_u_diff_ten,
                                            np.ndarray mom_v_diff_ten,
                                            np.ndarray mom_w_diff_ten,
                                            np.ndarray mom_u_source,
                                            np.ndarray mom_v_source,
                                            np.ndarray mom_w_source,
                                            np.ndarray mom_u_ham,
                                            np.ndarray dmom_u_ham_grad_p,
                                            np.ndarray mom_v_ham,
                                            np.ndarray dmom_v_ham_grad_p,
                                            np.ndarray mom_w_ham,
                                            np.ndarray dmom_w_ham_grad_p):
    cTwophaseNavierStokes_LS_SO_3D_Evaluate(p.size,
                                            eps,
                                            rho_0,
                                            nu_0,
                                            rho_1,
                                            nu_1,
                                            <double*> g.data,
                                            <double*> phi.data,
                                            <double*> p.data,
                                            <double*> grad_p.data,
                                            <double*> u.data,
                                            <double*> v.data,
                                            <double*> w.data,
                                            <double*> mom_u_acc.data,
                                            <double*> dmom_u_acc_u.data,
                                            <double*> mom_v_acc.data,
                                            <double*> dmom_v_acc_v.data,
                                            <double*> mom_w_acc.data,
                                            <double*> dmom_w_acc_w.data,
                                            <double*> mass_adv.data,
                                            <double*> dmass_adv_u.data,
                                            <double*> dmass_adv_v.data,
                                            <double*> dmass_adv_w.data,
                                            <double*> mom_u_adv.data,
                                            <double*> dmom_u_adv_u.data,
                                            <double*> dmom_u_adv_v.data,
                                            <double*> dmom_u_adv_w.data,
                                            <double*> mom_v_adv.data,
                                            <double*> dmom_v_adv_u.data,
                                            <double*> dmom_v_adv_v.data,
                                            <double*> dmom_v_adv_w.data,
                                            <double*> mom_w_adv.data,
                                            <double*> dmom_w_adv_u.data,
                                            <double*> dmom_w_adv_v.data,
                                            <double*> dmom_w_adv_w.data,
                                            <double*> mom_u_diff_ten.data,
                                            <double*> mom_v_diff_ten.data,
                                            <double*> mom_w_diff_ten.data,
                                            <double*> mom_u_source.data,
                                            <double*> mom_v_source.data,
                                            <double*> mom_w_source.data,
                                            <double*> mom_u_ham.data,
                                            <double*> dmom_u_ham_grad_p.data,
                                            <double*> mom_v_ham.data,
                                            <double*> dmom_v_ham_grad_p.data,
                                            <double*> mom_w_ham.data,
                                            <double*> dmom_w_ham_grad_p.data)
def TwophaseStokes_LS_SO_2D_Evaluate(const double eps,
                                      const double rho_0,
                                      const double nu_0,
                                      const double rho_1,
                                      const double nu_1,
                                      np.ndarray g,
                                      np.ndarray phi,
                                      np.ndarray p,
                                      np.ndarray grad_p,
                                      np.ndarray u,
                                      np.ndarray v,
                                      np.ndarray mom_u_acc,
                                      np.ndarray dmom_u_acc_u,
                                      np.ndarray mom_v_acc,
                                      np.ndarray dmom_v_acc_v,
                                      np.ndarray mass_adv,
                                      np.ndarray dmass_adv_u,
                                      np.ndarray dmass_adv_v,
                                      np.ndarray mom_u_diff_ten,
                                      np.ndarray mom_v_diff_ten,
                                      np.ndarray mom_u_source,
                                      np.ndarray mom_v_source,
                                      np.ndarray mom_u_ham,
                                      np.ndarray dmom_u_ham_grad_p,
                                      np.ndarray mom_v_ham,
                                      np.ndarray dmom_v_ham_grad_p):
    cTwophaseStokes_LS_SO_2D_Evaluate(p.size,
                                      eps,
                                      rho_0,
                                      nu_0,
                                      rho_1,
                                      nu_1,
                                      <double*> g.data,
                                      <double*> phi.data,
                                      <double*> p.data,
                                      <double*> grad_p.data,
                                      <double*> u.data,
                                      <double*> v.data,
                                      <double*> mom_u_acc.data,
                                      <double*> dmom_u_acc_u.data,
                                      <double*> mom_v_acc.data,
                                      <double*> dmom_v_acc_v.data,
                                      <double*> mass_adv.data,
                                      <double*> dmass_adv_u.data,
                                      <double*> dmass_adv_v.data,
                                      <double*> mom_u_diff_ten.data,
                                      <double*> mom_v_diff_ten.data,
                                      <double*> mom_u_source.data,
                                      <double*> mom_v_source.data,
                                      <double*> mom_u_ham.data,
                                      <double*> dmom_u_ham_grad_p.data,
                                      <double*> mom_v_ham.data,
                                      <double*> dmom_v_ham_grad_p.data)
def TwophaseStokes_LS_SO_3D_Evaluate(const double eps,
                                      const double rho_0,
                                      const double nu_0,
                                      const double rho_1,
                                      const double nu_1,
                                      np.ndarray g,
                                      np.ndarray phi,
                                      np.ndarray p,
                                      np.ndarray grad_p,
                                      np.ndarray u,
                                      np.ndarray v,
                                      np.ndarray w,
                                      np.ndarray mom_u_acc,
                                      np.ndarray dmom_u_acc_u,
                                      np.ndarray mom_v_acc,
                                      np.ndarray dmom_v_acc_v,
                                      np.ndarray mom_w_acc,
                                      np.ndarray dmom_w_acc_w,
                                      np.ndarray mass_adv,
                                      np.ndarray dmass_adv_u,
                                      np.ndarray dmass_adv_v,
                                      np.ndarray dmass_adv_w,
                                      np.ndarray mom_u_diff_ten,
                                      np.ndarray mom_v_diff_ten,
                                      np.ndarray mom_w_diff_ten,
                                      np.ndarray mom_u_source,
                                      np.ndarray mom_v_source,
                                      np.ndarray mom_w_source,
                                      np.ndarray mom_u_ham,
                                      np.ndarray dmom_u_ham_grad_p,
                                      np.ndarray mom_v_ham,
                                      np.ndarray dmom_v_ham_grad_p,
                                      np.ndarray mom_w_ham,
                                      np.ndarray dmom_w_ham_grad_p):
    cTwophaseStokes_LS_SO_3D_Evaluate(p.size,
                                      eps,
                                      rho_0,
                                      nu_0,
                                      rho_1,
                                      nu_1,
                                      <double*> g.data,
                                      <double*> phi.data,
                                      <double*> p.data,
                                      <double*> grad_p.data,
                                      <double*> u.data,
                                      <double*> v.data,
                                      <double*> w.data,
                                      <double*> mom_u_acc.data,
                                      <double*> dmom_u_acc_u.data,
                                      <double*> mom_v_acc.data,
                                      <double*> dmom_v_acc_v.data,
                                      <double*> mom_w_acc.data,
                                      <double*> dmom_w_acc_w.data,
                                      <double*> mass_adv.data,
                                      <double*> dmass_adv_u.data,
                                      <double*> dmass_adv_v.data,
                                      <double*> dmass_adv_w.data,
                                      <double*> mom_u_diff_ten.data,
                                      <double*> mom_v_diff_ten.data,
                                      <double*> mom_w_diff_ten.data,
                                      <double*> mom_u_source.data,
                                      <double*> mom_v_source.data,
                                      <double*> mom_w_source.data,
                                      <double*> mom_u_ham.data,
                                      <double*> dmom_u_ham_grad_p.data,
                                      <double*> mom_v_ham.data,
                                      <double*> dmom_v_ham_grad_p.data,
                                      <double*> mom_w_ham.data,
                                      <double*> dmom_w_ham_grad_p.data)
def TwophaseNavierStokes_VOF_SO_2D_Evaluate(const double eps,
                                             const double rho_0,
                                             const double nu_0,
                                             const double rho_1,
                                             const double nu_1,
                                             np.ndarray g,
                                             np.ndarray vof,
                                             np.ndarray p,
                                             np.ndarray grad_p,
                                             np.ndarray u,
                                             np.ndarray v,
                                             np.ndarray mom_u_acc,
                                             np.ndarray dmom_u_acc_u,
                                             np.ndarray mom_v_acc,
                                             np.ndarray dmom_v_acc_v,
                                             np.ndarray mass_adv,
                                             np.ndarray dmass_adv_u,
                                             np.ndarray dmass_adv_v,
                                             np.ndarray mom_u_adv,
                                             np.ndarray dmom_u_adv_u,
                                             np.ndarray dmom_u_adv_v,
                                             np.ndarray mom_v_adv,
                                             np.ndarray dmom_v_adv_u,
                                             np.ndarray dmom_v_adv_v,
                                             np.ndarray mom_u_diff_ten,
                                             np.ndarray mom_v_diff_ten,
                                             np.ndarray mom_u_source,
                                             np.ndarray mom_v_source,
                                             np.ndarray mom_u_ham,
                                             np.ndarray dmom_u_ham_grad_p,
                                             np.ndarray mom_v_ham,
                                             np.ndarray dmom_v_ham_grad_p):
    cTwophaseNavierStokes_VOF_SO_2D_Evaluate(p.size,
                                             eps,
                                             rho_0,
                                             nu_0,
                                             rho_1,
                                             nu_1,
                                             <double*> g.data,
                                             <double*> vof.data,
                                             <double*> p.data,
                                             <double*> grad_p.data,
                                             <double*> u.data,
                                             <double*> v.data,
                                             <double*> mom_u_acc.data,
                                             <double*> dmom_u_acc_u.data,
                                             <double*> mom_v_acc.data,
                                             <double*> dmom_v_acc_v.data,
                                             <double*> mass_adv.data,
                                             <double*> dmass_adv_u.data,
                                             <double*> dmass_adv_v.data,
                                             <double*> mom_u_adv.data,
                                             <double*> dmom_u_adv_u.data,
                                             <double*> dmom_u_adv_v.data,
                                             <double*> mom_v_adv.data,
                                             <double*> dmom_v_adv_u.data,
                                             <double*> dmom_v_adv_v.data,
                                             <double*> mom_u_diff_ten.data,
                                             <double*> mom_v_diff_ten.data,
                                             <double*> mom_u_source.data,
                                             <double*> mom_v_source.data,
                                             <double*> mom_u_ham.data,
                                             <double*> dmom_u_ham_grad_p.data,
                                             <double*> mom_v_ham.data,
                                             <double*> dmom_v_ham_grad_p.data)
def TwophaseNavierStokes_VOF_SO_3D_Evaluate(const double eps,
                                             const double rho_0,
                                             const double nu_0,
                                             const double rho_1,
                                             const double nu_1,
                                             np.ndarray g,
                                             np.ndarray vof,
                                             np.ndarray p,
                                             np.ndarray grad_p,
                                             np.ndarray u,
                                             np.ndarray v,
                                             np.ndarray w,
                                             np.ndarray mom_u_acc,
                                             np.ndarray dmom_u_acc_u,
                                             np.ndarray mom_v_acc,
                                             np.ndarray dmom_v_acc_v,
                                             np.ndarray mom_w_acc,
                                             np.ndarray dmom_w_acc_w,
                                             np.ndarray mass_adv,
                                             np.ndarray dmass_adv_u,
                                             np.ndarray dmass_adv_v,
                                             np.ndarray dmass_adv_w,
                                             np.ndarray mom_u_adv,
                                             np.ndarray dmom_u_adv_u,
                                             np.ndarray dmom_u_adv_v,
                                             np.ndarray dmom_u_adv_w,
                                             np.ndarray mom_v_adv,
                                             np.ndarray dmom_v_adv_u,
                                             np.ndarray dmom_v_adv_v,
                                             np.ndarray dmom_v_adv_w,
                                             np.ndarray mom_w_adv,
                                             np.ndarray dmom_w_adv_u,
                                             np.ndarray dmom_w_adv_v,
                                             np.ndarray dmom_w_adv_w,
                                             np.ndarray mom_u_diff_ten,
                                             np.ndarray mom_v_diff_ten,
                                             np.ndarray mom_w_diff_ten,
                                             np.ndarray mom_u_source,
                                             np.ndarray mom_v_source,
                                             np.ndarray mom_w_source,
                                             np.ndarray mom_u_ham,
                                             np.ndarray dmom_u_ham_grad_p,
                                             np.ndarray mom_v_ham,
                                             np.ndarray dmom_v_ham_grad_p,
                                             np.ndarray mom_w_ham,
                                             np.ndarray dmom_w_ham_grad_p):
    cTwophaseNavierStokes_VOF_SO_3D_Evaluate(p.size,
                                             eps,
                                             rho_0,
                                             nu_0,
                                             rho_1,
                                             nu_1,
                                             <double*> g.data,
                                             <double*> vof.data,
                                             <double*> p.data,
                                             <double*> grad_p.data,
                                             <double*> u.data,
                                             <double*> v.data,
                                             <double*> w.data,
                                             <double*> mom_u_acc.data,
                                             <double*> dmom_u_acc_u.data,
                                             <double*> mom_v_acc.data,
                                             <double*> dmom_v_acc_v.data,
                                             <double*> mom_w_acc.data,
                                             <double*> dmom_w_acc_w.data,
                                             <double*> mass_adv.data,
                                             <double*> dmass_adv_u.data,
                                             <double*> dmass_adv_v.data,
                                             <double*> dmass_adv_w.data,
                                             <double*> mom_u_adv.data,
                                             <double*> dmom_u_adv_u.data,
                                             <double*> dmom_u_adv_v.data,
                                             <double*> dmom_u_adv_w.data,
                                             <double*> mom_v_adv.data,
                                             <double*> dmom_v_adv_u.data,
                                             <double*> dmom_v_adv_v.data,
                                             <double*> dmom_v_adv_w.data,
                                             <double*> mom_w_adv.data,
                                             <double*> dmom_w_adv_u.data,
                                             <double*> dmom_w_adv_v.data,
                                             <double*> dmom_w_adv_w.data,
                                             <double*> mom_u_diff_ten.data,
                                             <double*> mom_v_diff_ten.data,
                                             <double*> mom_w_diff_ten.data,
                                             <double*> mom_u_source.data,
                                             <double*> mom_v_source.data,
                                             <double*> mom_w_source.data,
                                             <double*> mom_u_ham.data,
                                             <double*> dmom_u_ham_grad_p.data,
                                             <double*> mom_v_ham.data,
                                             <double*> dmom_v_ham_grad_p.data,
                                             <double*> mom_w_ham.data,
                                             <double*> dmom_w_ham_grad_p.data)
def TwophaseStokes_VOF_SO_2D_Evaluate(const double eps,
                                       const double rho_0,
                                       const double nu_0,
                                       const double rho_1,
                                       const double nu_1,
                                       np.ndarray g,
                                       np.ndarray vof,
                                       np.ndarray p,
                                       np.ndarray grad_p,
                                       np.ndarray u,
                                       np.ndarray v,
                                       np.ndarray mom_u_acc,
                                       np.ndarray dmom_u_acc_u,
                                       np.ndarray mom_v_acc,
                                       np.ndarray dmom_v_acc_v,
                                       np.ndarray mass_adv,
                                       np.ndarray dmass_adv_u,
                                       np.ndarray dmass_adv_v,
                                       np.ndarray mom_u_diff_ten,
                                       np.ndarray mom_v_diff_ten,
                                       np.ndarray mom_u_source,
                                       np.ndarray mom_v_source,
                                       np.ndarray mom_u_ham,
                                       np.ndarray dmom_u_ham_grad_p,
                                       np.ndarray mom_v_ham,
                                       np.ndarray dmom_v_ham_grad_p):
    cTwophaseStokes_VOF_SO_2D_Evaluate(p.size,
                                       eps,
                                       rho_0,
                                       nu_0,
                                       rho_1,
                                       nu_1,
                                       <double*> g.data,
                                       <double*> vof.data,
                                       <double*> p.data,
                                       <double*> grad_p.data,
                                       <double*> u.data,
                                       <double*> v.data,
                                       <double*> mom_u_acc.data,
                                       <double*> dmom_u_acc_u.data,
                                       <double*> mom_v_acc.data,
                                       <double*> dmom_v_acc_v.data,
                                       <double*> mass_adv.data,
                                       <double*> dmass_adv_u.data,
                                       <double*> dmass_adv_v.data,
                                       <double*> mom_u_diff_ten.data,
                                       <double*> mom_v_diff_ten.data,
                                       <double*> mom_u_source.data,
                                       <double*> mom_v_source.data,
                                       <double*> mom_u_ham.data,
                                       <double*> dmom_u_ham_grad_p.data,
                                       <double*> mom_v_ham.data,
                                       <double*> dmom_v_ham_grad_p.data)
def TwophaseStokes_VOF_SO_3D_Evaluate(const double eps,
                                       const double rho_0,
                                       const double nu_0,
                                       const double rho_1,
                                       const double nu_1,
                                       np.ndarray g,
                                       np.ndarray vof,
                                       np.ndarray p,
                                       np.ndarray grad_p,
                                       np.ndarray u,
                                       np.ndarray v,
                                       np.ndarray w,
                                       np.ndarray mom_u_acc,
                                       np.ndarray dmom_u_acc_u,
                                       np.ndarray mom_v_acc,
                                       np.ndarray dmom_v_acc_v,
                                       np.ndarray mom_w_acc,
                                       np.ndarray dmom_w_acc_w,
                                       np.ndarray mass_adv,
                                       np.ndarray dmass_adv_u,
                                       np.ndarray dmass_adv_v,
                                       np.ndarray dmass_adv_w,
                                       np.ndarray mom_u_diff_ten,
                                       np.ndarray mom_v_diff_ten,
                                       np.ndarray mom_w_diff_ten,
                                       np.ndarray mom_u_source,
                                       np.ndarray mom_v_source,
                                       np.ndarray mom_w_source,
                                       np.ndarray mom_u_ham,
                                       np.ndarray dmom_u_ham_grad_p,
                                       np.ndarray mom_v_ham,
                                       np.ndarray dmom_v_ham_grad_p,
                                       np.ndarray mom_w_ham,
                                       np.ndarray dmom_w_ham_grad_p):
    cTwophaseStokes_VOF_SO_3D_Evaluate(p.size,
                                       eps,
                                       rho_0,
                                       nu_0,
                                       rho_1,
                                       nu_1,
                                       <double*> g.data,
                                       <double*> vof.data,
                                       <double*> p.data,
                                       <double*> grad_p.data,
                                       <double*> u.data,
                                       <double*> v.data,
                                       <double*> w.data,
                                       <double*> mom_u_acc.data,
                                       <double*> dmom_u_acc_u.data,
                                       <double*> mom_v_acc.data,
                                       <double*> dmom_v_acc_v.data,
                                       <double*> mom_w_acc.data,
                                       <double*> dmom_w_acc_w.data,
                                       <double*> mass_adv.data,
                                       <double*> dmass_adv_u.data,
                                       <double*> dmass_adv_v.data,
                                       <double*> dmass_adv_w.data,
                                       <double*> mom_u_diff_ten.data,
                                       <double*> mom_v_diff_ten.data,
                                       <double*> mom_w_diff_ten.data,
                                       <double*> mom_u_source.data,
                                       <double*> mom_v_source.data,
                                       <double*> mom_w_source.data,
                                       <double*> mom_u_ham.data,
                                       <double*> dmom_u_ham_grad_p.data,
                                       <double*> mom_v_ham.data,
                                       <double*> dmom_v_ham_grad_p.data,
                                       <double*> mom_w_ham.data,
                                       <double*> dmom_w_ham_grad_p.data)
def unitSquareVortexEvaluate(double t,
                            np.ndarray x,
                            np.ndarray u,
                            np.ndarray m,
                            np.ndarray dm,
                            np.ndarray f,
                            np.ndarray df):
    cunitSquareVortexEvaluate(u.size,
                              f.shape[f.ndim-1],
                              t,
                              <double*> x.data,
                              <double*> u.data,
                              <double*> m.data,
                              <double*> dm.data,
                              <double*> f.data,
                              <double*> df.data)
def constantVelocityLevelSetEvaluate(np.ndarray b,
                      np.ndarray x,
                      np.ndarray u,
                      np.ndarray gradu,
                      np.ndarray m,
                      np.ndarray dm,
                      np.ndarray f,
                      np.ndarray df,
                      np.ndarray H,
                      np.ndarray dH):
    cconstantVelocityLevelSetEvaluate(u.size,
                      f.shape[f.ndim-1],
                      <double*> b.data,
                      <double*> x.data,
                      <double*> u.data,
                      <double*> gradu.data,
                      <double*> m.data,
                      <double*> dm.data,
                      <double*> f.data,
                      <double*> df.data,
                      <double*> H.data,
                      <double*> dH.data)
def constantNormalVelocityLevelSetEvaluate(double b,
                        np.ndarray x,
                        np.ndarray u,
                        np.ndarray gradu,
                        np.ndarray m,
                        np.ndarray dm,
                        np.ndarray f,
                        np.ndarray df,
                        np.ndarray H,
                        np.ndarray dH):
    cconstantNormalVelocityLevelSetEvaluate(u.size,
                        f.shape[f.ndim-1],
                        b,
                        <double*> x.data,
                        <double*> u.data,
                        <double*> gradu.data,
                        <double*> m.data,
                        <double*> dm.data,
                        <double*> f.data,
                        <double*> df.data,
                        <double*> H.data,
                        <double*> dH.data)
def unitSquareVortexLevelSetEvaluate(double t,
                      np.ndarray x,
                      np.ndarray u,
                      np.ndarray gradu,
                      np.ndarray m,
                      np.ndarray dm,
                      np.ndarray f,
                      np.ndarray df,
                      np.ndarray H,
                      np.ndarray dH):
    cunitSquareVortexLevelSetEvaluate(u.size,
                      f.shape[f.ndim-1],
                      t,
                      <double*> x.data,
                      <double*> u.data,
                      <double*> gradu.data,
                      <double*> m.data,
                      <double*> dm.data,
                      <double*> f.data,
                      <double*> df.data,
                      <double*> H.data,
                      <double*> dH.data)
def unitSquareRotationLevelSetEvaluate(double t,
                    np.ndarray x,
                    np.ndarray u,
                    np.ndarray gradu,
                    np.ndarray m,
                    np.ndarray dm,
                    np.ndarray f,
                    np.ndarray df,
                    np.ndarray H,
                    np.ndarray dH):
    cunitSquareRotationLevelSetEvaluate(u.size,
                    f.shape[f.ndim-1],
                     t,
                    <double*> x.data,
                    <double*> u.data,
                    <double*> gradu.data,
                    <double*> m.data,
                    <double*> dm.data,
                    <double*> f.data,
                    <double*> df.data,
                    <double*> H.data,
                    <double*> dH.data)
def HJBurgersEvaluate(const double offset,
               np.ndarray u,
               np.ndarray gradu,
               np.ndarray m,
               np.ndarray dm,
               np.ndarray H,
               np.ndarray dH):
    cHJBurgersEvaluate(u.size,
                dH[dH.ndim-1],
                offset,
                <double*> u.data,
                <double*> gradu.data,
                <double*> m.data,
                <double*> dm.data,
                <double*> H.data,
                <double*> dH.data)
def conservativeHeadRichardsMualemVanGenuchtenHomEvaluate(const double rho,
                                                           const double beta,
                                                           np.ndarray gravity,
                                                           np.ndarray x,
                                                           const double alpha,
                                                           const double n,
                                                           const double m,
                                                           const double thetaR,
                                                           const double thetaSR,
                                                           const double KWs,
                                                           np.ndarray u,
                                                           np.ndarray mass,
                                                           np.ndarray dmass,
                                                           np.ndarray f,
                                                           np.ndarray df,
                                                           np.ndarray a,
                                                           np.ndarray da,
                                                           np.ndarray phi,
                                                           np.ndarray dphi):
    cconservativeHeadRichardsMualemVanGenuchtenHomEvaluate(u.size,
                                                           f.shape[f.ndim-1],
                                                           rho,
                                                           beta,
                                                           <double*> gravity.data,
                                                           <double*> x.data,
                                                           alpha,
                                                           n,
                                                           m,
                                                           thetaR,
                                                           thetaSR,
                                                           KWs,
                                                           <double*> u.data,
                                                           <double*> mass.data,
                                                           <double*> dmass.data,
                                                           <double*> f.data,
                                                           <double*> df.data,
                                                           <double*> a.data,
                                                           <double*> da.data,
                                                           <double*> phi.data,
                                                           <double*> dphi.data)
def conservativeHeadRichardsL2projMualemVanGenuchtenHomEvaluate(const double rho,
                                 np.ndarray gravity,
                                 const double alpha,
                                 const double n,
                                 const double m,
                                 const double thetaR,
                                 const double thetaSR,
                                 const double KWs,
                                 np.ndarray dV,
                                 np.ndarray u,
                                 np.ndarray mass,
                                 np.ndarray dmass,
                                 np.ndarray f,
                                 np.ndarray df,
                                 np.ndarray a,
                                 np.ndarray da):
    assert f.ndim == 3
    cconservativeHeadRichardsL2projMualemVanGenuchtenHomEvaluate(f.shape[0],
                                 f.shape[1],
                                 f.shape[2],
                                 rho,
                                 <double*> gravity.data,
                                 alpha,
                                 n,
                                 m,
                                 thetaR,
                                 thetaSR,
                                 KWs,
                                 <double*> dV.data,
                                 <double*> u.data,
                                 <double*> mass.data,
                                 <double*> dmass.data,
                                 <double*> f.data,
                                 <double*> df.data,
                                 <double*> a.data,
                                 <double*> da.data)
def conservativeHeadRichardsL2projBndMualemVanGenuchtenHomEvaluate(const double rho,
                                    np.ndarray gravity,
                                    const double alpha,
                                    const double n,
                                    const double m,
                                    const double thetaR,
                                    const double thetaSR,
                                    const double KWs,
                                    np.ndarray dV,
                                    np.ndarray u,
                                    np.ndarray mass,
                                    np.ndarray dmass,
                                    np.ndarray f,
                                    np.ndarray df,
                                    np.ndarray a,
                                    np.ndarray da):
    assert f.ndim == 4
    cconservativeHeadRichardsL2projBndMualemVanGenuchtenHomEvaluate(f.shape[0],
                                    f.shape[1],
                                    f.shape[2],
                                    f.shape[3],
                                    rho,
                                    <double*> gravity.data,
                                    alpha,
                                    n,
                                    m,
                                    thetaR,
                                    thetaSR,
                                    KWs,
                                    <double*> dV.data,
                                    <double*> u.data,
                                    <double*> mass.data,
                                    <double*> dmass.data,
                                    <double*> f.data,
                                    <double*> df.data,
                                    <double*> a.data,
                                    <double*> da.data)
def conservativeHeadRichardsL2projMualemVanGenuchtenHetEvaluate(const double rho,
                                 np.ndarray gravity,
                                 np.ndarray alpha,
                                 np.ndarray n,
                                 np.ndarray thetaR,
                                 np.ndarray thetaSR,
                                 np.ndarray KWs,
                                 np.ndarray dV,
                                 np.ndarray u,
                                 np.ndarray mass,
                                 np.ndarray dmass,
                                 np.ndarray f,
                                 np.ndarray df,
                                 np.ndarray a,
                                 np.ndarray da):
    cconservativeHeadRichardsL2projMualemVanGenuchtenHetEvaluate(u.size/u.shape[u.ndim-1],
                                                                 u.shape[u.ndim-1],
                                 f.shape[f.ndim-1],
                                 rho,
                                 <double*> gravity.data,
                                 <double*> alpha.data,
                                 <double*> n.data,
                                 <double*> thetaR.data,
                                 <double*> thetaSR.data,
                                 <double*> KWs.data,
                                 <double*> dV.data,
                                 <double*> u.data,
                                 <double*> mass.data,
                                 <double*> dmass.data,
                                 <double*> f.data,
                                 <double*> df.data,
                                 <double*> a.data,
                                 <double*> da.data)
def conservativeTotalHeadRichardsMualemVanGenuchtenHomEvaluate(const double rho,
                                np.ndarray gravity,
                                np.ndarray x,
                                const double alpha,
                                const double n,
                                const double m,
                                const double thetaR,
                                const double thetaSR,
                                const double KWs,
                                np.ndarray u,
                                np.ndarray mass,
                                np.ndarray dmass,
                                np.ndarray f,
                                np.ndarray df,
                                np.ndarray a,
                                np.ndarray da,
                                np.ndarray phi,
                                np.ndarray dphi):
    cconservativeTotalHeadRichardsMualemVanGenuchtenHomEvaluate(u.size,
                                f.shape[f.ndim-1],
                                rho,
                                <double*> gravity.data,
                                <double*> x.data,
                                alpha,
                                n,
                                m,
                                thetaR,
                                thetaSR,
                                KWs,
                                <double*> u.data,
                                <double*> mass.data,
                                <double*> dmass.data,
                                <double*> f.data,
                                <double*> df.data,
                                <double*> a.data,
                                <double*> da.data,
                                <double*> phi.data,
                                <double*> dphi.data)
def conservativeHeadRichardsMualemVanGenuchten_sd_het(np.ndarray  rowptr,
                               np.ndarray  colind,
                               np.ndarray materialTypes,
                               const double rho,
                               const double beta,
                               np.ndarray gravity,
                               np.ndarray alpha,
                               np.ndarray n,
                               np.ndarray thetaR,
                               np.ndarray thetaSR,
                               np.ndarray KWs,
                               np.ndarray u,
                               np.ndarray mass,
                               np.ndarray dmass,
                               np.ndarray f,
                               np.ndarray df,
                               np.ndarray a,
                               np.ndarray da,
                               np.ndarray vol_frac,
                               int linearize_at_zero,
                               double pc_eps):
    if linearize_at_zero == 1:
        cconservativeHeadRichardsMualemVanGenuchten_sd_het_linearized_at_saturation(u.size/u.shape[u.ndim-1],
                                                                                    u.shape[u.ndim-1],
                               f.shape[f.ndim-1],
                                pc_eps,
                               <int*>  rowptr.data,
                               <int*>  colind.data,
                               <int*> materialTypes.data,
                               rho,
                               beta,
                               <double*> gravity.data,
                               <double*> alpha.data,
                               <double*> n.data,
                               <double*> thetaR.data,
                               <double*> thetaSR.data,
                               <double*> KWs.data,
                               <double*> u.data,
                               <double*> mass.data,
                               <double*> dmass.data,
                               <double*> f.data,
                               <double*> df.data,
                               <double*> a.data,
                               <double*> da.data,
                               <double*> vol_frac.data)
    else:
        cconservativeHeadRichardsMualemVanGenuchten_sd_het(u.size/u.shape[u.ndim-1],
                                                           u.shape[u.ndim-1],
                               f.shape[f.ndim-1],
                                pc_eps,
                               <int*>  rowptr.data,
                               <int*>  colind.data,
                               <int*> materialTypes.data,
                               rho,
                               beta,
                               <double*> gravity.data,
                               <double*> alpha.data,
                               <double*> n.data,
                               <double*> thetaR.data,
                               <double*> thetaSR.data,
                               <double*> KWs.data,
                               <double*> u.data,
                               <double*> mass.data,
                               <double*> dmass.data,
                               <double*> f.data,
                               <double*> df.data,
                               <double*> a.data,
                               <double*> da.data,
                               <double*> vol_frac.data)
def conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2(np.ndarray materialTypes,
                                 const double rho,
                                                             const double beta,
                                 np.ndarray gravity,
                                 np.ndarray alpha,
                                 np.ndarray n,
                                 np.ndarray thetaR,
                                 np.ndarray thetaSR,
                                 np.ndarray KWs,
                                 np.ndarray u,
                                 np.ndarray mass,
                                 np.ndarray dmass,
                                 np.ndarray f,
                                 np.ndarray df,
                                 np.ndarray a,
                                 np.ndarray da):
    cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2(u.size/u.shape[u.ndim-1],
                                                             u.shape[u.ndim-1],
                                 f.shape[f.ndim-1],
                                 <int*> materialTypes.data,
                                 rho,
                                                             beta,
                                 <double*> gravity.data,
                                 <double*> alpha.data,
                                 <double*> n.data,
                                 <double*> thetaR.data,
                                 <double*> thetaSR.data,
                                 <double*> KWs.data,
                                 <double*> u.data,
                                 <double*> mass.data,
                                 <double*> dmass.data,
                                 <double*> f.data,
                                 <double*> df.data,
                                 <double*> a.data,
                                 <double*> da.data)
def seepageBrezis(np.ndarray materialTypes,
           const double epsFact,
           const double rho,
           const double beta,
           np.ndarray elementDiameter,
           np.ndarray gravity,
           np.ndarray alpha,
           np.ndarray n,
           np.ndarray thetaR,
           np.ndarray thetaSR,
           np.ndarray KWs,
           np.ndarray u,
           np.ndarray mass,
           np.ndarray dmass,
           np.ndarray f,
           np.ndarray df,
           np.ndarray a,
           np.ndarray da):
    cseepageBrezis(u.size/u.shape[u.ndim-1],
                   u.shape[u.ndim-1],
            f.shape[f.ndim-1],
            <int*> materialTypes.data,
            epsFact,
            rho,
            beta,
            <double*> elementDiameter.data,
            <double*> gravity.data,
            <double*> alpha.data,
            <double*> n.data,
            <double*> thetaR.data,
            <double*> thetaSR.data,
            <double*> KWs.data,
            <double*> u.data,
            <double*> mass.data,
            <double*> dmass.data,
            <double*> f.data,
            <double*> df.data,
            <double*> a.data,
            <double*> da.data)
def conservativeHeadRichardsMualemVanGenuchtenHetEvaluate(const double rho,
                                                           np.ndarray gravity,
                                                           np.ndarray alpha,
                                                           np.ndarray n,
                                                           np.ndarray thetaR,
                                                           np.ndarray thetaSR,
                                                           np.ndarray KWs,
                                                           np.ndarray u,
                                                           np.ndarray mass,
                                                           np.ndarray dmass,
                                                           np.ndarray f,
                                                           np.ndarray df,
                                                           np.ndarray a,
                                                           np.ndarray da):
    cconservativeHeadRichardsMualemVanGenuchtenHetEvaluate(u.size/u.shape[u.ndim-1],
                                                           f.shape[f.ndim-1],
                                                           rho,
                                                           <double*> gravity.data,
                                                           <double*> alpha.data,
                                                           <double*> n.data,
                                                           <double*> thetaR.data,
                                                           <double*> thetaSR.data,
                                                           <double*> KWs.data,
                                                           <double*> u.data,
                                                           <double*> mass.data,
                                                           <double*> dmass.data,
                                                           <double*> f.data,
                                                           <double*> df.data,
                                                           <double*> a.data,
                                                           <double*> da.data)
def conservativeSatRichardsMualemVanGenuchtenHomEvaluate(const double rho,
                                                          np.ndarray gravity,
                                                          np.ndarray x,
                                                          const double alpha,
                                                          const double n,
                                                          const double m,
                                                          const double thetaR,
                                                          const double thetaSR,
                                                          const double KWs,
                                                          np.ndarray u,
                                                          np.ndarray mass,
                                                          np.ndarray dmass,
                                                          np.ndarray f,
                                                          np.ndarray df,
                                                          np.ndarray a,
                                                          np.ndarray da,
                                                          np.ndarray phi,
                                                          np.ndarray dphi):
    cconservativeSatRichardsMualemVanGenuchtenHomEvaluate(u.size,
                                                        f.shape[f.ndim-1],
                                                        rho,
                                                        <double*> gravity.data,
                                                        <double*> x.data,
                                                        alpha,
                                                        n,
                                                        m,
                                                        thetaR,
                                                        thetaSR,
                                                        KWs,
                                                        <double*> u.data,
                                                        <double*> mass.data,
                                                        <double*> dmass.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> a.data,
                                                        <double*> da.data,
                                                        <double*> phi.data,
                                                        <double*> dphi.data)
def conservativeHeadRichardsBrooksCoreyBurdineHetEvaluate(const double rho,
                                                           np.ndarray gravity,
                                                           np.ndarray Lambda,
                                                           np.ndarray pd,
                                                           np.ndarray thetaR,
                                                           np.ndarray thetaS,
                                                           np.ndarray KWs,
                                                           np.ndarray u,
                                                           np.ndarray mass,
                                                           np.ndarray dmass,
                                                           np.ndarray f,
                                                           np.ndarray df,
                                                           np.ndarray a,
                                                           np.ndarray da):
    cconservativeHeadRichardsBrooksCoreyBurdineHetEvaluate(u.size,
                                                        f.shape[f.ndim-1],
                                                        rho,
                                                        <double*> gravity.data,
                                                        <double*> Lambda.data,
                                                        <double*> pd.data,
                                                        <double*> thetaR.data,
                                                        <double*> thetaS.data,
                                                        <double*> KWs.data,
                                                        <double*> u.data,
                                                        <double*> mass.data,
                                                        <double*> dmass.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> a.data,
                                                        <double*> da.data)
def conservativeHeadRichardsBrooksCoreyBurdineHomEvaluate(const double rho,
                                                        const double beta,
                                                        np.ndarray gravity,
                                                        const double Lambda,
                                                        const double pd,
                                                        const double thetaR,
                                                        const double thetaSR,
                                                        const double KWs,
                                                        np.ndarray u,
                                                        np.ndarray mass,
                                                        np.ndarray dmass,
                                                        np.ndarray f,
                                                        np.ndarray df,
                                                        np.ndarray a,
                                                        np.ndarray da):
    cconservativeHeadRichardsBrooksCoreyBurdineHomEvaluate(u.size,
                                                        f.shape[f.ndim-1],
                                                        rho,
                                                        beta,
                                                        <double*> gravity.data,
                                                        Lambda,
                                                        pd,
                                                        thetaR,
                                                        thetaSR,
                                                        KWs,
                                                        <double*> u.data,
                                                        <double*> mass.data,
                                                        <double*> dmass.data,
                                                        <double*> f.data,
                                                        <double*> df.data,
                                                        <double*> a.data,
                                                        <double*> da.data)
def conservativeSatRichardsBrooksCoreyBurdineHomEvaluate(const int nPoints,
                              const int nSpace,
                              const double rho,
                              np.ndarray gravity,
                              const double Lambda,
                              const double pd,
                              const double thetaR,
                              const double thetaSR,
                              const double KWs,
                              np.ndarray u,
                              np.ndarray mass,
                              np.ndarray dmass,
                              np.ndarray f,
                              np.ndarray df,
                              np.ndarray a,
                              np.ndarray da,
                              np.ndarray phi,
                              np.ndarray dphi):
    cconservativeSatRichardsBrooksCoreyBurdineHomEvaluate(nPoints,
                              nSpace,
                              rho,
                              <double*> gravity.data,
                              Lambda,
                              pd,
                              thetaR,
                              thetaSR,
                              KWs,
                              <double*> u.data,
                              <double*> mass.data,
                              <double*> dmass.data,
                              <double*> f.data,
                              <double*> df.data,
                              <double*> a.data,
                              <double*> da.data,
                              <double*> phi.data,
                              <double*> dphi.data)
def conservativeHeadRichardsBCBfromMVGHomEvaluate(const double rho,
                           np.ndarray gravity,
                           const double alpha,
                           const double n,
                           const double m,
                           const double thetaR,
                           const double thetaSR,
                           const double KWs,
                           np.ndarray u,
                           np.ndarray mass,
                           np.ndarray dmass,
                           np.ndarray f,
                           np.ndarray df,
                           np.ndarray a,
                           np.ndarray da):
    cconservativeHeadRichardsBCBfromMVGHomEvaluate(u.size,
                                                f.shape[f.ndim-1],
                                                rho,
                                                <double*> gravity.data,
                                                alpha,
                                                n,
                                                m,
                                                thetaR,
                                                thetaSR,
                                                KWs,
                                                <double*> u.data,
                                                <double*> mass.data,
                                                <double*> dmass.data,
                                                <double*> f.data,
                                                <double*> df.data,
                                                <double*> a.data,
                                                <double*> da.data)
def LinearElasticity_1D_Evaluate(const double E,
                                  const double nu,
                                  np.ndarray g,
                                  np.ndarray u,
                                  np.ndarray uu_diff_ten,
                                  np.ndarray u_force):
    cLinearElasticity_1D_Evaluate(u.size,
                                  E,
                                  nu,
                                  <double*> g.data,
                                  <double*> u.data,
                                  <double*> uu_diff_ten.data,
                                  <double*> u_force.data)
def LinearElasticity_2D_Evaluate(const double E,
                                  const double nu,
                                  np.ndarray g,
                                  np.ndarray u,
                                  np.ndarray v,
                                  np.ndarray uu_diff_ten,
                                  np.ndarray uv_diff_ten,
                                  np.ndarray vu_diff_ten,
                                  np.ndarray vv_diff_ten,
                                  np.ndarray u_force,
                                  np.ndarray v_force):
    cLinearElasticity_2D_Evaluate(u.size,
                                  E,
                                  nu,
                                  <double*> g.data,
                                  <double*> u.data,
                                  <double*> v.data,
                                  <double*> uu_diff_ten.data,
                                  <double*> uv_diff_ten.data,
                                  <double*> vu_diff_ten.data,
                                  <double*> vv_diff_ten.data,
                                  <double*> u_force.data,
                                  <double*> v_force.data)
def LinearElasticity_3D_Evaluate(const double E,
                                  const double nu,
                                  np.ndarray g,
                                  np.ndarray u,
                                  np.ndarray v,
                                  np.ndarray w,
                                  np.ndarray uu_diff_ten, 
                                  np.ndarray uv_diff_ten,
                                  np.ndarray uw_diff_ten,
                                  np.ndarray vu_diff_ten,
                                  np.ndarray vv_diff_ten,
                                  np.ndarray vw_diff_ten,
                                  np.ndarray wu_diff_ten,
                                  np.ndarray wv_diff_ten,
                                  np.ndarray ww_diff_ten,
                                  np.ndarray u_force,
                                  np.ndarray v_force,
                                  np.ndarray w_force):
    cLinearElasticity_3D_Evaluate(u.size,
                                  E,
                                  nu,
                                  <double*> g.data,
                                  <double*> u.data,
                                  <double*> v.data,
                                  <double*> w.data,
                                  <double*> uu_diff_ten.data,
                                  <double*> uv_diff_ten.data,
                                  <double*> uw_diff_ten.data,
                                  <double*> vu_diff_ten.data,
                                  <double*> vv_diff_ten.data,
                                  <double*> vw_diff_ten.data,
                                  <double*> wu_diff_ten.data,
                                  <double*> wv_diff_ten.data,
                                  <double*> ww_diff_ten.data,
                                  <double*> u_force.data,
                                  <double*> v_force.data,
                                  <double*> w_force.data)
def MovingMesh_2D_Evaluate(const double E0,
                const double nu,
                np.ndarray g,
                np.ndarray det_J,
                np.ndarray u,
                np.ndarray v,
                np.ndarray uu_diff_ten,
                np.ndarray uv_diff_ten,
                np.ndarray vu_diff_ten,
                np.ndarray vv_diff_ten,
                np.ndarray u_force,
                np.ndarray v_force):
    cMovingMesh_2D_Evaluate(u.size,
                E0,
                nu,
                <double*> g.data,
                <double*> det_J.data,
                <double*> u.data,
                <double*> v.data,
                <double*> uu_diff_ten.data,
                <double*> uv_diff_ten.data,
                <double*> vu_diff_ten.data,
                <double*> vv_diff_ten.data,
                <double*> u_force.data,
                <double*> v_force.data)
def MovingMesh_3D_Evaluate(const double E0,
                const double nu,
                np.ndarray g,
                np.ndarray det_J,
                np.ndarray u,
                np.ndarray v,
                np.ndarray w,
                np.ndarray uu_diff_ten,
                np.ndarray uv_diff_ten,
                np.ndarray uw_diff_ten,
                np.ndarray vu_diff_ten,
                np.ndarray vv_diff_ten,
                np.ndarray vw_diff_ten,
                np.ndarray wu_diff_ten,
                np.ndarray wv_diff_ten,
                np.ndarray ww_diff_ten,
                np.ndarray u_force,
                np.ndarray v_force,
                np.ndarray w_force):
    cMovingMesh_3D_Evaluate(u.size,
                E0,
                nu,
                <double*> g.data,
                <double*> det_J.data,
                <double*> u.data,
                <double*> v.data,
                <double*> w.data,
                <double*> uu_diff_ten.data,
                <double*> uv_diff_ten.data,
                <double*> uw_diff_ten.data,
                <double*> vu_diff_ten.data,
                <double*> vv_diff_ten.data,
                <double*> vw_diff_ten.data,
                <double*> wu_diff_ten.data,
                <double*> wv_diff_ten.data,
                <double*> ww_diff_ten.data,
                <double*> u_force.data,
                <double*> v_force.data,
                <double*> w_force.data)
def MovingMesh_1D_Evaluate(const double E0,
                const double nu,
                np.ndarray g,
                np.ndarray det_J,
                np.ndarray u,
                np.ndarray uu_diff_ten,
                np.ndarray u_force):
    cMovingMesh_1D_Evaluate(u.size,
                E0,
                nu,
                <double*> g.data,
                <double*> det_J.data,
                <double*> u.data,
                <double*> uu_diff_ten.data,
                <double*> u_force.data)
def levelSetConservationCoefficientsEvaluate(double epsHeaviside,
                                              double epsDirac,
                                              double epsDiffusion,
                                              np.ndarray u_ls,
                                              np.ndarray H_vof,
                                              np.ndarray u,
                                              np.ndarray r,
                                              np.ndarray dr,
                                              np.ndarray a):
    clevelSetConservationCoefficientsEvaluate(u.size,
                                               a.shape[-1],
                                               epsHeaviside,
                                               epsDirac,
                                               epsDiffusion,
                                              <double*> u_ls.data,
                                              <double*> H_vof.data,
                                              <double*> u.data,
                                              <double*> r.data,
                                              <double*> dr.data,
                                              <double*> a.data)
def levelSetConservationCoefficientsEvaluate_sd(double epsHeaviside,
                         double epsDirac,
                         np.ndarray u_ls,
                         np.ndarray H_vof,
                         np.ndarray u,
                         np.ndarray r,
                         np.ndarray dr):
    clevelSetConservationCoefficientsEvaluate_sd(u.size,
                          epsHeaviside,
                          epsDirac,
                         <double*> u_ls.data,
                         <double*> H_vof.data,
                         <double*> u.data,
                         <double*> r.data,
                         <double*> dr.data)
def evaluateBuckleyLeverettLiuExample(np.ndarray  x,
                       np.ndarray  u,
                       np.ndarray  m,
                       np.ndarray  dm,
                       np.ndarray  f,
                       np.ndarray  df,
                       np.ndarray  a):
    cevaluateBuckleyLeverettLiuExample(u.size,
                                f.shape[f.ndim-1],
                                <double*>  x.data,
                                <double*>  u.data,
                                <double*>  m.data,
                                <double*>  dm.data,
                                <double*>  f.data,
                                <double*>  df.data,
                                <double*>  a.data)
def VolumeAveragedNavierStokesFullDevStress_2D_Evaluate(const double rho,
                             const double mu,
                             np.ndarray meanGrainSize,
                             np.ndarray g,
                             np.ndarray p,
                             np.ndarray grad_p,
                             np.ndarray u,
                             np.ndarray v,
                             np.ndarray porosity,
                             np.ndarray mom_u_acc,
                             np.ndarray dmom_u_acc_u,
                             np.ndarray mom_v_acc,
                             np.ndarray dmom_v_acc_v,
                             np.ndarray mass_adv,
                             np.ndarray dmass_adv_u,
                             np.ndarray dmass_adv_v,
                             np.ndarray mom_u_adv,
                             np.ndarray dmom_u_adv_u,
                             np.ndarray dmom_u_adv_v,
                             np.ndarray mom_v_adv,
                             np.ndarray dmom_v_adv_u,
                             np.ndarray dmom_v_adv_v,
                             np.ndarray mom_u_diff_ten,
                             np.ndarray mom_v_diff_ten,
                             np.ndarray mom_uv_diff_ten,
                             np.ndarray mom_vu_diff_ten,
                             np.ndarray mom_u_source,
                             np.ndarray mom_v_source,
                             np.ndarray dmom_u_source_u,
                             np.ndarray dmom_u_source_v,
                             np.ndarray dmom_v_source_u,
                             np.ndarray dmom_v_source_v,
                             np.ndarray mom_u_ham,
                             np.ndarray dmom_u_ham_grad_p,
                             np.ndarray mom_v_ham,
                             np.ndarray dmom_v_ham_grad_p):
    cVolumeAveragedNavierStokesFullDevStress_2D_Evaluate(p.size,
                             rho,
                             mu,
                             <double*> meanGrainSize.data,
                             <double*> g.data,
                             <double*> p.data,
                             <double*> grad_p.data,
                             <double*> u.data,
                             <double*> v.data,
                             <double*> porosity.data,
                             <double*> mom_u_acc.data,
                             <double*> dmom_u_acc_u.data,
                             <double*> mom_v_acc.data,
                             <double*> dmom_v_acc_v.data,
                             <double*> mass_adv.data,
                             <double*> dmass_adv_u.data,
                             <double*> dmass_adv_v.data,
                             <double*> mom_u_adv.data,
                             <double*> dmom_u_adv_u.data,
                             <double*> dmom_u_adv_v.data,
                             <double*> mom_v_adv.data,
                             <double*> dmom_v_adv_u.data,
                             <double*> dmom_v_adv_v.data,
                             <double*> mom_u_diff_ten.data,
                             <double*> mom_v_diff_ten.data,
                             <double*> mom_uv_diff_ten.data,
                             <double*> mom_vu_diff_ten.data,
                             <double*> mom_u_source.data,
                             <double*> mom_v_source.data,
                             <double*> dmom_u_source_u.data,
                             <double*> dmom_u_source_v.data,
                             <double*> dmom_v_source_u.data,
                             <double*> dmom_v_source_v.data,
                             <double*> mom_u_ham.data,
                             <double*> dmom_u_ham_grad_p.data,
                             <double*> mom_v_ham.data,
                             <double*> dmom_v_ham_grad_p.data)
def VolumeAveragedNavierStokesFullDevStress_3D_Evaluate(const double rho,
                             const double mu,
                             np.ndarray meanGrainSize,
                             np.ndarray g,
                             np.ndarray p,
                             np.ndarray grad_p,
                             np.ndarray u,
                             np.ndarray v,
                             np.ndarray w,
                             np.ndarray porosity,
                             np.ndarray mom_u_acc,
                             np.ndarray dmom_u_acc_u,
                             np.ndarray mom_v_acc,
                             np.ndarray dmom_v_acc_v,
                             np.ndarray mom_w_acc,
                             np.ndarray dmom_w_acc_w,
                             np.ndarray mass_adv,
                             np.ndarray dmass_adv_u,
                             np.ndarray dmass_adv_v,
                             np.ndarray dmass_adv_w,
                             np.ndarray mom_u_adv,
                             np.ndarray dmom_u_adv_u,
                             np.ndarray dmom_u_adv_v,
                             np.ndarray dmom_u_adv_w,
                             np.ndarray mom_v_adv,
                             np.ndarray dmom_v_adv_u,
                             np.ndarray dmom_v_adv_v,
                             np.ndarray dmom_v_adv_w,
                             np.ndarray mom_w_adv,
                             np.ndarray dmom_w_adv_u,
                             np.ndarray dmom_w_adv_v,
                             np.ndarray dmom_w_adv_w,
                             np.ndarray mom_u_diff_ten,
                             np.ndarray mom_v_diff_ten,
                             np.ndarray mom_w_diff_ten,
                             np.ndarray mom_uv_diff_ten,
                             np.ndarray mom_uw_diff_ten,
                             np.ndarray mom_vu_diff_ten,
                             np.ndarray mom_vw_diff_ten,
                             np.ndarray mom_wu_diff_ten,
                             np.ndarray mom_wv_diff_ten,
                             np.ndarray mom_u_source,
                             np.ndarray mom_v_source,
                             np.ndarray mom_w_source,
                             np.ndarray dmom_u_source_u,
                             np.ndarray dmom_u_source_v,
                             np.ndarray dmom_u_source_w,
                             np.ndarray dmom_v_source_u,
                             np.ndarray dmom_v_source_v,
                             np.ndarray dmom_v_source_w,
                             np.ndarray dmom_w_source_u,
                             np.ndarray dmom_w_source_v,
                             np.ndarray dmom_w_source_w,
                             np.ndarray mom_u_ham,
                             np.ndarray dmom_u_ham_grad_p,
                             np.ndarray mom_v_ham,
                             np.ndarray dmom_v_ham_grad_p,
                             np.ndarray mom_w_ham,
                             np.ndarray dmom_w_ham_grad_p):
    cVolumeAveragedNavierStokesFullDevStress_3D_Evaluate(p.size,
                             rho,
                             mu,
                             <double*> meanGrainSize.data,
                             <double*> g.data,
                             <double*> p.data,
                             <double*> grad_p.data,
                             <double*> u.data,
                             <double*> v.data,
                             <double*> w.data,
                             <double*> porosity.data,
                             <double*> mom_u_acc.data,
                             <double*> dmom_u_acc_u.data,
                             <double*> mom_v_acc.data,
                             <double*> dmom_v_acc_v.data,
                             <double*> mom_w_acc.data,
                             <double*> dmom_w_acc_w.data,
                             <double*> mass_adv.data,
                             <double*> dmass_adv_u.data,
                             <double*> dmass_adv_v.data,
                             <double*> dmass_adv_w.data,
                             <double*> mom_u_adv.data,
                             <double*> dmom_u_adv_u.data,
                             <double*> dmom_u_adv_v.data,
                             <double*> dmom_u_adv_w.data,
                             <double*> mom_v_adv.data,
                             <double*> dmom_v_adv_u.data,
                             <double*> dmom_v_adv_v.data,
                             <double*> dmom_v_adv_w.data,
                             <double*> mom_w_adv.data,
                             <double*> dmom_w_adv_u.data,
                             <double*> dmom_w_adv_v.data,
                             <double*> dmom_w_adv_w.data,
                             <double*> mom_u_diff_ten.data,
                             <double*> mom_v_diff_ten.data,
                             <double*> mom_w_diff_ten.data,
                             <double*> mom_uv_diff_ten.data,
                             <double*> mom_uw_diff_ten.data,
                             <double*> mom_vu_diff_ten.data,
                             <double*> mom_vw_diff_ten.data,
                             <double*> mom_wu_diff_ten.data,
                             <double*> mom_wv_diff_ten.data,
                             <double*> mom_u_source.data,
                             <double*> mom_v_source.data,
                             <double*> mom_w_source.data,
                             <double*> dmom_u_source_u.data,
                             <double*> dmom_u_source_v.data,
                             <double*> dmom_u_source_w.data,
                             <double*> dmom_v_source_u.data,
                             <double*> dmom_v_source_v.data,
                             <double*> dmom_v_source_w.data,
                             <double*> dmom_w_source_u.data,
                             <double*> dmom_w_source_v.data,
                             <double*> dmom_w_source_w.data,
                             <double*> mom_u_ham.data,
                             <double*> dmom_u_ham_grad_p.data,
                             <double*> mom_v_ham.data,
                             <double*> dmom_v_ham_grad_p.data,
                             <double*> mom_w_ham.data,
                             <double*> dmom_w_ham_grad_p.data)
def VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate(const int killNonlinearDrag,
                                 const double eps_rho,
                                 const double eps_mu,
                                 const double sigma,
                                 const double rho_0,
                                 const double nu_0,
                                 const double rho_1,
                                 const double nu_1,
                                 np.ndarray meanGrainSize,
                                 np.ndarray g,
                                 np.ndarray phi,
                                 np.ndarray n,
                                 np.ndarray kappa,
                                 np.ndarray p,
                                 np.ndarray grad_p,
                                 np.ndarray u,
                                 np.ndarray v,
                                 np.ndarray porosity,
                                 np.ndarray mom_u_acc,
                                 np.ndarray dmom_u_acc_u,
                                 np.ndarray mom_v_acc,
                                 np.ndarray dmom_v_acc_v,
                                 np.ndarray mass_adv,
                                 np.ndarray dmass_adv_u,
                                 np.ndarray dmass_adv_v,
                                 np.ndarray mom_u_adv,
                                 np.ndarray dmom_u_adv_u,
                                 np.ndarray dmom_u_adv_v,
                                 np.ndarray mom_v_adv,
                                 np.ndarray dmom_v_adv_u,
                                 np.ndarray dmom_v_adv_v,
                                 np.ndarray mom_u_diff_ten,
                                 np.ndarray mom_v_diff_ten,
                                 np.ndarray mom_uv_diff_ten,
                                 np.ndarray mom_vu_diff_ten,
                                 np.ndarray mom_u_source,
                                 np.ndarray mom_v_source,
                                 np.ndarray dmom_u_source_u,
                                 np.ndarray dmom_u_source_v,
                                 np.ndarray dmom_v_source_u,
                                 np.ndarray dmom_v_source_v,
                                 np.ndarray mom_u_ham,
                                 np.ndarray dmom_u_ham_grad_p,
                                 np.ndarray mom_v_ham,
                                 np.ndarray dmom_v_ham_grad_p):
    cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate(p.size,
                                 killNonlinearDrag,
                                 eps_rho,
                                 eps_mu,
                                 sigma,
                                 rho_0,
                                 nu_0,
                                 rho_1,
                                 nu_1,
                                 <double*> meanGrainSize.data,
                                 <double*> g.data,
                                 <double*> phi.data,
                                 <double*> n.data,
                                 <double*> kappa.data,
                                 <double*> p.data,
                                 <double*> grad_p.data,
                                 <double*> u.data,
                                 <double*> v.data,
                                 <double*> porosity.data,
                                 <double*> mom_u_acc.data,
                                 <double*> dmom_u_acc_u.data,
                                 <double*> mom_v_acc.data,
                                 <double*> dmom_v_acc_v.data,
                                 <double*> mass_adv.data,
                                 <double*> dmass_adv_u.data,
                                 <double*> dmass_adv_v.data,
                                 <double*> mom_u_adv.data,
                                 <double*> dmom_u_adv_u.data,
                                 <double*> dmom_u_adv_v.data,
                                 <double*> mom_v_adv.data,
                                 <double*> dmom_v_adv_u.data,
                                 <double*> dmom_v_adv_v.data,
                                 <double*> mom_u_diff_ten.data,
                                 <double*> mom_v_diff_ten.data,
                                 <double*> mom_uv_diff_ten.data,
                                 <double*> mom_vu_diff_ten.data,
                                 <double*> mom_u_source.data,
                                 <double*> mom_v_source.data,
                                 <double*> dmom_u_source_u.data,
                                 <double*> dmom_u_source_v.data,
                                 <double*> dmom_v_source_u.data,
                                 <double*> dmom_v_source_v.data,
                                 <double*> mom_u_ham.data,
                                 <double*> dmom_u_ham_grad_p.data,
                                 <double*> mom_v_ham.data,
                                 <double*> dmom_v_ham_grad_p.data)
def VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(const int killNonlinearDrag,
                                const double eps_rho,
                                const double eps_mu,
                                const double sigma,
                                const double rho_0,
                                const double nu_0,
                                const double rho_1,
                                const double nu_1,
                                np.ndarray meanGrainSize,
                                np.ndarray g,
                                np.ndarray phi,
                                np.ndarray n,
                                np.ndarray kappa,
                                np.ndarray p,
                                np.ndarray grad_p,
                                np.ndarray u,
                                np.ndarray v,
                                np.ndarray porosity,
                                np.ndarray mom_u_acc,
                                np.ndarray dmom_u_acc_u,
                                np.ndarray mom_v_acc,
                                np.ndarray dmom_v_acc_v,
                                np.ndarray mass_adv,
                                np.ndarray dmass_adv_u,
                                np.ndarray dmass_adv_v,
                                np.ndarray mom_u_adv,
                                np.ndarray dmom_u_adv_u,
                                np.ndarray dmom_u_adv_v,
                                np.ndarray mom_v_adv,
                                np.ndarray dmom_v_adv_u,
                                np.ndarray dmom_v_adv_v,
                                np.ndarray mom_u_diff_ten,
                                np.ndarray mom_v_diff_ten,
                                np.ndarray mom_uv_diff_ten,
                                np.ndarray mom_vu_diff_ten,
                                np.ndarray mom_u_source,
                                np.ndarray mom_v_source,
                                np.ndarray dmom_u_source_u,
                                np.ndarray dmom_u_source_v,
                                np.ndarray dmom_v_source_u,
                                np.ndarray dmom_v_source_v,
                                np.ndarray mom_u_ham,
                                np.ndarray dmom_u_ham_grad_p,
                                np.ndarray mom_v_ham,
                                np.ndarray dmom_v_ham_grad_p):
    cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(p.size,
                                killNonlinearDrag,
                                eps_rho,
                                eps_mu,
                                sigma,
                                rho_0,
                                nu_0,
                                rho_1,
                                nu_1,
                                <double*> meanGrainSize.data,
                                <double*> g.data,
                                <double*> phi.data,
                                <double*> n.data,
                                <double*> kappa.data,
                                <double*> p.data,
                                <double*> grad_p.data,
                                <double*> u.data,
                                <double*> v.data,
                                <double*> porosity.data,
                                <double*> mom_u_acc.data,
                                <double*> dmom_u_acc_u.data,
                                <double*> mom_v_acc.data,
                                <double*> dmom_v_acc_v.data,
                                <double*> mass_adv.data,
                                <double*> dmass_adv_u.data,
                                <double*> dmass_adv_v.data,
                                <double*> mom_u_adv.data,
                                <double*> dmom_u_adv_u.data,
                                <double*> dmom_u_adv_v.data,
                                <double*> mom_v_adv.data,
                                <double*> dmom_v_adv_u.data,
                                <double*> dmom_v_adv_v.data,
                                <double*> mom_u_diff_ten.data,
                                <double*> mom_v_diff_ten.data,
                                <double*> mom_uv_diff_ten.data,
                                <double*> mom_vu_diff_ten.data,
                                <double*> mom_u_source.data,
                                <double*> mom_v_source.data,
                                <double*> dmom_u_source_u.data,
                                <double*> dmom_u_source_v.data,
                                <double*> dmom_v_source_u.data,
                                <double*> dmom_v_source_v.data,
                                <double*> mom_u_ham.data,
                                <double*> dmom_u_ham_grad_p.data,
                                <double*> mom_v_ham.data,
                                <double*> dmom_v_ham_grad_p.data)
def VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate(const int killNonlinearDrag,
                                 const double eps_rho,
                                 const double eps_mu,
                                 const double sigma,
                                 const double rho_0,
                                 const double nu_0,
                                 const double rho_1,
                                 const double nu_1,
                                 np.ndarray meanGrainSize,
                                 np.ndarray g,
                                 np.ndarray phi,
                                 np.ndarray n,
                                 np.ndarray kappa,
                                 np.ndarray p,
                                 np.ndarray grad_p,
                                 np.ndarray u,
                                 np.ndarray v,
                                 np.ndarray w,
                                 np.ndarray porosity,
                                 np.ndarray mom_u_acc,
                                 np.ndarray dmom_u_acc_u,
                                 np.ndarray mom_v_acc,
                                 np.ndarray dmom_v_acc_v,
                                 np.ndarray mom_w_acc,
                                 np.ndarray dmom_w_acc_w,
                                 np.ndarray mass_adv,
                                 np.ndarray dmass_adv_u,
                                 np.ndarray dmass_adv_v,
                                 np.ndarray dmass_adv_w,
                                 np.ndarray mom_u_adv,
                                 np.ndarray dmom_u_adv_u,
                                 np.ndarray dmom_u_adv_v,
                                 np.ndarray dmom_u_adv_w,
                                 np.ndarray mom_v_adv,
                                 np.ndarray dmom_v_adv_u,
                                 np.ndarray dmom_v_adv_v,
                                 np.ndarray dmom_v_adv_w,
                                 np.ndarray mom_w_adv,
                                 np.ndarray dmom_w_adv_u,
                                 np.ndarray dmom_w_adv_v,
                                 np.ndarray dmom_w_adv_w,
                                 np.ndarray mom_u_diff_ten,
                                 np.ndarray mom_v_diff_ten,
                                 np.ndarray mom_w_diff_ten,
                                 np.ndarray mom_uv_diff_ten,
                                 np.ndarray mom_uw_diff_ten,
                                 np.ndarray mom_vu_diff_ten,
                                 np.ndarray mom_vw_diff_ten,
                                 np.ndarray mom_wu_diff_ten,
                                 np.ndarray mom_wv_diff_ten,
                                 np.ndarray mom_u_source,
                                 np.ndarray mom_v_source,
                                 np.ndarray mom_w_source,
                                 np.ndarray dmom_u_source_u,
                                 np.ndarray dmom_u_source_v,
                                 np.ndarray dmom_u_source_w,
                                 np.ndarray dmom_v_source_u,
                                 np.ndarray dmom_v_source_v,
                                 np.ndarray dmom_v_source_w,
                                 np.ndarray dmom_w_source_u,
                                 np.ndarray dmom_w_source_v,
                                 np.ndarray dmom_w_source_w,
                                 np.ndarray mom_u_ham,
                                 np.ndarray dmom_u_ham_grad_p,
                                 np.ndarray mom_v_ham,
                                 np.ndarray dmom_v_ham_grad_p,
                                 np.ndarray mom_w_ham,
                                 np.ndarray dmom_w_ham_grad_p):
    cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate(p.size,
                                 killNonlinearDrag,
                                 eps_rho,
                                 eps_mu,
                                 sigma,
                                 rho_0,
                                 nu_0,
                                 rho_1,
                                 nu_1,
                                 <double*> meanGrainSize.data,
                                 <double*> g.data,
                                 <double*> phi.data,
                                 <double*> n.data,
                                 <double*> kappa.data,
                                 <double*> p.data,
                                 <double*> grad_p.data,
                                 <double*> u.data,
                                 <double*> v.data,
                                 <double*> w.data,
                                 <double*> porosity.data,
                                 <double*> mom_u_acc.data,
                                 <double*> dmom_u_acc_u.data,
                                 <double*> mom_v_acc.data,
                                 <double*> dmom_v_acc_v.data,
                                 <double*> mom_w_acc.data,
                                 <double*> dmom_w_acc_w.data,
                                 <double*> mass_adv.data,
                                 <double*> dmass_adv_u.data,
                                 <double*> dmass_adv_v.data,
                                 <double*> dmass_adv_w.data,
                                 <double*> mom_u_adv.data,
                                 <double*> dmom_u_adv_u.data,
                                 <double*> dmom_u_adv_v.data,
                                 <double*> dmom_u_adv_w.data,
                                 <double*> mom_v_adv.data,
                                 <double*> dmom_v_adv_u.data,
                                 <double*> dmom_v_adv_v.data,
                                 <double*> dmom_v_adv_w.data,
                                 <double*> mom_w_adv.data,
                                 <double*> dmom_w_adv_u.data,
                                 <double*> dmom_w_adv_v.data,
                                 <double*> dmom_w_adv_w.data,
                                 <double*> mom_u_diff_ten.data,
                                 <double*> mom_v_diff_ten.data,
                                 <double*> mom_w_diff_ten.data,
                                 <double*> mom_uv_diff_ten.data,
                                 <double*> mom_uw_diff_ten.data,
                                 <double*> mom_vu_diff_ten.data,
                                 <double*> mom_vw_diff_ten.data,
                                 <double*> mom_wu_diff_ten.data,
                                 <double*> mom_wv_diff_ten.data,
                                 <double*> mom_u_source.data,
                                 <double*> mom_v_source.data,
                                 <double*> mom_w_source.data,
                                 <double*> dmom_u_source_u.data,
                                 <double*> dmom_u_source_v.data,
                                 <double*> dmom_u_source_w.data,
                                 <double*> dmom_v_source_u.data,
                                 <double*> dmom_v_source_v.data,
                                 <double*> dmom_v_source_w.data,
                                 <double*> dmom_w_source_u.data,
                                 <double*> dmom_w_source_v.data,
                                 <double*> dmom_w_source_w.data,
                                 <double*> mom_u_ham.data,
                                 <double*> dmom_u_ham_grad_p.data,
                                 <double*> mom_v_ham.data,
                                 <double*> dmom_v_ham_grad_p.data,
                                 <double*> mom_w_ham.data,
                                 <double*> dmom_w_ham_grad_p.data)
def VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(const int killNonlinearDrag,
                                 const double eps_rho,
                                 const double eps_mu,
                                 const double sigma,
                                 const double rho_0,
                                 const double nu_0,
                                 const double rho_1,
                                 const double nu_1,
                                 np.ndarray meanGrainSize,
                                 np.ndarray g,
                                 np.ndarray phi,
                                 np.ndarray n,
                                 np.ndarray kappa,
                                 np.ndarray p,
                                 np.ndarray grad_p,
                                 np.ndarray u,
                                 np.ndarray v,
                                 np.ndarray w,
                                 np.ndarray porosity,
                                 np.ndarray mom_u_acc,
                                 np.ndarray dmom_u_acc_u,
                                 np.ndarray mom_v_acc,
                                 np.ndarray dmom_v_acc_v,
                                 np.ndarray mom_w_acc,
                                 np.ndarray dmom_w_acc_w,
                                 np.ndarray mass_adv,
                                 np.ndarray dmass_adv_u,
                                 np.ndarray dmass_adv_v,
                                 np.ndarray dmass_adv_w,
                                 np.ndarray mom_u_adv,
                                 np.ndarray dmom_u_adv_u,
                                 np.ndarray dmom_u_adv_v,
                                 np.ndarray dmom_u_adv_w,
                                 np.ndarray mom_v_adv,
                                 np.ndarray dmom_v_adv_u,
                                 np.ndarray dmom_v_adv_v,
                                 np.ndarray dmom_v_adv_w,
                                 np.ndarray mom_w_adv,
                                 np.ndarray dmom_w_adv_u,
                                 np.ndarray dmom_w_adv_v,
                                 np.ndarray dmom_w_adv_w,
                                 np.ndarray mom_u_diff_ten,
                                 np.ndarray mom_v_diff_ten,
                                 np.ndarray mom_w_diff_ten,
                                 np.ndarray mom_uv_diff_ten,
                                 np.ndarray mom_uw_diff_ten,
                                 np.ndarray mom_vu_diff_ten,
                                 np.ndarray mom_vw_diff_ten,
                                 np.ndarray mom_wu_diff_ten,
                                 np.ndarray mom_wv_diff_ten,
                                 np.ndarray mom_u_source,
                                 np.ndarray mom_v_source,
                                 np.ndarray mom_w_source,
                                 np.ndarray dmom_u_source_u,
                                 np.ndarray dmom_u_source_v,
                                 np.ndarray dmom_u_source_w,
                                 np.ndarray dmom_v_source_u,
                                 np.ndarray dmom_v_source_v,
                                 np.ndarray dmom_v_source_w,
                                 np.ndarray dmom_w_source_u,
                                 np.ndarray dmom_w_source_v,
                                 np.ndarray dmom_w_source_w,
                                 np.ndarray mom_u_ham,
                                 np.ndarray dmom_u_ham_grad_p,
                                 np.ndarray mom_v_ham,
                                 np.ndarray dmom_v_ham_grad_p,
                                 np.ndarray mom_w_ham,
                                 np.ndarray dmom_w_ham_grad_p):
    cVolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(p.size,
                                 killNonlinearDrag,
                                 eps_rho,
                                 eps_mu,
                                 sigma,
                                 rho_0,
                                 nu_0,
                                 rho_1,
                                 nu_1,
                                 <double*> meanGrainSize.data,
                                 <double*> g.data,
                                 <double*> phi.data,
                                 <double*> n.data,
                                 <double*> kappa.data,
                                 <double*> p.data,
                                 <double*> grad_p.data,
                                 <double*> u.data,
                                 <double*> v.data,
                                 <double*> w.data,
                                 <double*> porosity.data,
                                 <double*> mom_u_acc.data,
                                 <double*> dmom_u_acc_u.data,
                                 <double*> mom_v_acc.data,
                                 <double*> dmom_v_acc_v.data,
                                 <double*> mom_w_acc.data,
                                 <double*> dmom_w_acc_w.data,
                                 <double*> mass_adv.data,
                                 <double*> dmass_adv_u.data,
                                 <double*> dmass_adv_v.data,
                                 <double*> dmass_adv_w.data,
                                 <double*> mom_u_adv.data,
                                 <double*> dmom_u_adv_u.data,
                                 <double*> dmom_u_adv_v.data,
                                 <double*> dmom_u_adv_w.data,
                                 <double*> mom_v_adv.data,
                                 <double*> dmom_v_adv_u.data,
                                 <double*> dmom_v_adv_v.data,
                                 <double*> dmom_v_adv_w.data,
                                 <double*> mom_w_adv.data,
                                 <double*> dmom_w_adv_u.data,
                                 <double*> dmom_w_adv_v.data,
                                 <double*> dmom_w_adv_w.data,
                                 <double*> mom_u_diff_ten.data,
                                 <double*> mom_v_diff_ten.data,
                                 <double*> mom_w_diff_ten.data,
                                 <double*> mom_uv_diff_ten.data,
                                 <double*> mom_uw_diff_ten.data,
                                 <double*> mom_vu_diff_ten.data,
                                 <double*> mom_vw_diff_ten.data,
                                 <double*> mom_wu_diff_ten.data,
                                 <double*> mom_wv_diff_ten.data,
                                 <double*> mom_u_source.data,
                                 <double*> mom_v_source.data,
                                 <double*> mom_w_source.data,
                                 <double*> dmom_u_source_u.data,
                                 <double*> dmom_u_source_v.data,
                                 <double*> dmom_u_source_w.data,
                                 <double*> dmom_v_source_u.data,
                                 <double*> dmom_v_source_v.data,
                                 <double*> dmom_v_source_w.data,
                                 <double*> dmom_w_source_u.data,
                                 <double*> dmom_w_source_v.data,
                                 <double*> dmom_w_source_w.data,
                                 <double*> mom_u_ham.data,
                                 <double*> dmom_u_ham_grad_p.data,
                                 <double*> mom_v_ham.data,
                                 <double*> dmom_v_ham_grad_p.data,
                                 <double*> mom_w_ham.data,
                                 <double*> dmom_w_ham_grad_p.data)
def VolumeAveragedVOFCoefficientsEvaluate(double eps,
                       np.ndarray v,
                       np.ndarray phi,
                       np.ndarray porosity,
                       np.ndarray u,
                       np.ndarray m,
                       np.ndarray dm,
                       np.ndarray f,
                       np.ndarray df):
    cVolumeAveragedVOFCoefficientsEvaluate(u.size,
                        f.shape[f.ndim-1],
                        eps,
                       <double*> v.data,
                       <double*> phi.data,
                       <double*> porosity.data,
                       <double*> u.data,
                       <double*> m.data,
                       <double*> dm.data,
                       <double*> f.data,
                       <double*> df.data)
def kEpsilon_2D_Evaluate(double sigma_k,
              double sigma_e,
              double c_1,
              double c_2,
              double c_mu,
              double c_e,
              double nu,
              np.ndarray velocity,
              np.ndarray gradu,
              np.ndarray gradv,
              np.ndarray k,
              np.ndarray epsilon,
              np.ndarray m_k,
              np.ndarray dm_k,
              np.ndarray m_e,
              np.ndarray dm_e,
              np.ndarray phi_k,
              np.ndarray dphi_k,
              np.ndarray phi_e,
              np.ndarray dphi_e,
              np.ndarray f_k,
              np.ndarray df_k,
              np.ndarray f_e,
              np.ndarray df_e,
              np.ndarray a_k,
              np.ndarray da_k_dk,
              np.ndarray da_k_de,
              np.ndarray a_e,
              np.ndarray da_e_dk,
              np.ndarray da_e_de,
              np.ndarray r_k,
              np.ndarray dr_k_dk,
              np.ndarray dr_k_de,
              np.ndarray r_e,
              np.ndarray dr_e_dk,
              np.ndarray dr_e_de):
    ckEpsilon_2D_Evaluate(k.size,
               f_k.shape[f_k.ndim-1],
               sigma_k,
               sigma_e,
               c_1,
               c_2,
               c_mu,
               c_e,
               nu,
              <double*> velocity.data,
              <double*> gradu.data,
              <double*> gradv.data,
              <double*> k.data,
              <double*> epsilon.data,
              <double*> m_k.data,
              <double*> dm_k.data,
              <double*> m_e.data,
              <double*> dm_e.data,
              <double*> phi_k.data,
              <double*> dphi_k.data,
              <double*> phi_e.data,
              <double*> dphi_e.data,
              <double*> f_k.data,
              <double*> df_k.data,
              <double*> f_e.data,
              <double*> df_e.data,
              <double*> a_k.data,
              <double*> da_k_dk.data,
              <double*> da_k_de.data,
              <double*> a_e.data,
              <double*> da_e_dk.data,
              <double*> da_e_de.data,
              <double*> r_k.data,
              <double*> dr_k_dk.data,
              <double*> dr_k_de.data,
              <double*> r_e.data,
              <double*> dr_e_dk.data,
              <double*> dr_e_de.data)
def kEpsilon_2D_Evaluate_sd(double sigma_k,
                 double sigma_e,
                 double c_1,
                 double c_2,
                 double c_mu,
                 double c_e,
                 double nu,
                 np.ndarray velocity,
                 np.ndarray gradu,
                 np.ndarray gradv,
                 np.ndarray k,
                 np.ndarray epsilon,
                 np.ndarray m_k,
                 np.ndarray dm_k,
                 np.ndarray m_e,
                 np.ndarray dm_e,
                 np.ndarray phi_k,
                 np.ndarray dphi_k,
                 np.ndarray phi_e,
                 np.ndarray dphi_e,
                 np.ndarray f_k,
                 np.ndarray df_k,
                 np.ndarray f_e,
                 np.ndarray df_e,
                 np.ndarray a_k,
                 np.ndarray da_k_dk,
                 np.ndarray da_k_de,
                 np.ndarray a_e,
                 np.ndarray da_e_dk,
                 np.ndarray da_e_de,
                 np.ndarray r_k,
                 np.ndarray dr_k_dk,
                 np.ndarray dr_k_de,
                 np.ndarray r_e,
                 np.ndarray dr_e_dk,
                 np.ndarray dr_e_de):
    ckEpsilon_2D_Evaluate_sd(k.size,
                  f_k.shape[f_k.ndim-1],
                  sigma_k,
                  sigma_e,
                  c_1,
                  c_2,
                  c_mu,
                  c_e,
                  nu,
                 <double*> velocity.data,
                 <double*> gradu.data,
                 <double*> gradv.data,
                 <double*> k.data,
                 <double*> epsilon.data,
                 <double*> m_k.data,
                 <double*> dm_k.data,
                 <double*> m_e.data,
                 <double*> dm_e.data,
                 <double*> phi_k.data,
                 <double*> dphi_k.data,
                 <double*> phi_e.data,
                 <double*> dphi_e.data,
                 <double*> f_k.data,
                 <double*> df_k.data,
                 <double*> f_e.data,
                 <double*> df_e.data,
                 <double*> a_k.data,
                 <double*> da_k_dk.data,
                 <double*> da_k_de.data,
                 <double*> a_e.data,
                 <double*> da_e_dk.data,
                 <double*> da_e_de.data,
                 <double*> r_k.data,
                 <double*> dr_k_dk.data,
                 <double*> dr_k_de.data,
                 <double*> r_e.data,
                 <double*> dr_e_dk.data,
                 <double*> dr_e_de.data)
def kEpsilon_3D_Evaluate_sd(double sigma_k,
                 double sigma_e,
                 double c_1,
                 double c_2,
                 double c_mu,
                 double c_e,
                 double nu,
                 np.ndarray velocity,
                 np.ndarray gradu,
                 np.ndarray gradv,
                 np.ndarray gradw,
                 np.ndarray k,
                 np.ndarray epsilon,
                 np.ndarray m_k,
                 np.ndarray dm_k,
                 np.ndarray m_e,
                 np.ndarray dm_e,
                 np.ndarray phi_k,
                 np.ndarray dphi_k,
                 np.ndarray phi_e,
                 np.ndarray dphi_e,
                 np.ndarray f_k,
                 np.ndarray df_k,
                 np.ndarray f_e,
                 np.ndarray df_e,
                 np.ndarray a_k,
                 np.ndarray da_k_dk,
                 np.ndarray da_k_de,
                 np.ndarray a_e,
                 np.ndarray da_e_dk,
                 np.ndarray da_e_de,
                 np.ndarray r_k,
                 np.ndarray dr_k_dk,
                 np.ndarray dr_k_de,
                 np.ndarray r_e,
                 np.ndarray dr_e_dk,
                 np.ndarray dr_e_de):
    ckEpsilon_3D_Evaluate_sd(k.size,
                  f_k.shape[f_k.ndim-1],
                  sigma_k,
                  sigma_e,
                  c_1,
                  c_2,
                  c_mu,
                  c_e,
                  nu,
                 <double*> velocity.data,
                 <double*> gradu.data,
                 <double*> gradv.data,
                 <double*> gradw.data,
                 <double*> k.data,
                 <double*> epsilon.data,
                 <double*> m_k.data,
                 <double*> dm_k.data,
                 <double*> m_e.data,
                 <double*> dm_e.data,
                 <double*> phi_k.data,
                 <double*> dphi_k.data,
                 <double*> phi_e.data,
                 <double*> dphi_e.data,
                 <double*> f_k.data,
                 <double*> df_k.data,
                 <double*> f_e.data,
                 <double*> df_e.data,
                 <double*> a_k.data,
                 <double*> da_k_dk.data,
                 <double*> da_k_de.data,
                 <double*> a_e.data,
                 <double*> da_e_dk.data,
                 <double*> da_e_de.data,
                 <double*> r_k.data,
                 <double*> dr_k_dk.data,
                 <double*> dr_k_de.data,
                 <double*> r_e.data,
                 <double*> dr_e_dk.data,
                 <double*> dr_e_de.data)
def kEpsilon_3D_Evaluate(double sigma_k,
                 double sigma_e,
                 double c_1,
                 double c_2,
                 double c_mu,
                 double c_e,
                 double nu,
                 np.ndarray velocity,
                 np.ndarray gradu,
                 np.ndarray gradv,
                 np.ndarray gradw,
                 np.ndarray k,
                 np.ndarray epsilon,
                 np.ndarray m_k,
                 np.ndarray dm_k,
                 np.ndarray m_e,
                 np.ndarray dm_e,
                 np.ndarray phi_k,
                 np.ndarray dphi_k,
                 np.ndarray phi_e,
                 np.ndarray dphi_e,
                 np.ndarray f_k,
                 np.ndarray df_k,
                 np.ndarray f_e,
                 np.ndarray df_e,
                 np.ndarray a_k,
                 np.ndarray da_k_dk,
                 np.ndarray da_k_de,
                 np.ndarray a_e,
                 np.ndarray da_e_dk,
                 np.ndarray da_e_de,
                 np.ndarray r_k,
                 np.ndarray dr_k_dk,
                 np.ndarray dr_k_de,
                 np.ndarray r_e,
                 np.ndarray dr_e_dk,
                 np.ndarray dr_e_de):
    ckEpsilon_3D_Evaluate(k.size,
                  f_k.shape[f_k.ndim-1],
                  sigma_k,
                  sigma_e,
                  c_1,
                  c_2,
                  c_mu,
                  c_e,
                  nu,
                 <double*> velocity.data,
                 <double*> gradu.data,
                 <double*> gradv.data,
                 <double*> gradw.data,
                 <double*> k.data,
                 <double*> epsilon.data,
                 <double*> m_k.data,
                 <double*> dm_k.data,
                 <double*> m_e.data,
                 <double*> dm_e.data,
                 <double*> phi_k.data,
                 <double*> dphi_k.data,
                 <double*> phi_e.data,
                 <double*> dphi_e.data,
                 <double*> f_k.data,
                 <double*> df_k.data,
                 <double*> f_e.data,
                 <double*> df_e.data,
                 <double*> a_k.data,
                 <double*> da_k_dk.data,
                 <double*> da_k_de.data,
                 <double*> a_e.data,
                 <double*> da_e_dk.data,
                 <double*> da_e_de.data,
                 <double*> r_k.data,
                 <double*> dr_k_dk.data,
                 <double*> dr_k_de.data,
                 <double*> r_e.data,
                 <double*> dr_e_dk.data,
                 <double*> dr_e_de.data)
def kEpsilon_k_2D_Evaluate_sd(double sigma_k,
                   double c_mu,
                   double nu,
                   np.ndarray velocity,
                   np.ndarray gradu,
                   np.ndarray gradv,
                   np.ndarray k,
                   np.ndarray epsilon,
                   np.ndarray m_k,
                   np.ndarray dm_k,
                   np.ndarray phi_k,
                   np.ndarray dphi_k,
                   np.ndarray f_k,
                   np.ndarray df_k,
                   np.ndarray a_k,
                   np.ndarray da_k_dk,
                   np.ndarray r_k,
                   np.ndarray dr_k_dk):
    ckEpsilon_k_2D_Evaluate_sd(k.size,
                    f_k.shape[f_k.ndim-1],
                    sigma_k,
                    c_mu,
                    nu,
                   <double*> velocity.data,
                   <double*> gradu.data,
                   <double*> gradv.data,
                   <double*> k.data,
                   <double*> epsilon.data,
                   <double*> m_k.data,
                   <double*> dm_k.data,
                   <double*> phi_k.data,
                   <double*> dphi_k.data,
                   <double*> f_k.data,
                   <double*> df_k.data,
                   <double*> a_k.data,
                   <double*> da_k_dk.data,
                   <double*> r_k.data,
                   <double*> dr_k_dk.data)
def kEpsilon_epsilon_2D_Evaluate_sd(double sigma_e,
                     double c_1,
                     double c_2,
                     double c_mu,
                     double c_e,
                     double nu,
                     np.ndarray velocity,
                     np.ndarray gradu,
                     np.ndarray gradv,
                     np.ndarray k,
                     np.ndarray epsilon,
                     np.ndarray m_e,
                     np.ndarray dm_e,
                     np.ndarray phi_e,
                     np.ndarray dphi_e,
                     np.ndarray f_e,
                     np.ndarray df_e,
                     np.ndarray a_e,
                     np.ndarray da_e_de,
                     np.ndarray r_e,
                     np.ndarray dr_e_de):
    ckEpsilon_epsilon_2D_Evaluate_sd(epsilon.size,
                      f_e.shape[f_e.ndim-1],
                      sigma_e,
                      c_1,
                      c_2,
                      c_mu,
                      c_e,
                      nu,
                     <double*> velocity.data,
                     <double*> gradu.data,
                     <double*> gradv.data,
                     <double*> k.data,
                     <double*> epsilon.data,
                     <double*> m_e.data,
                     <double*> dm_e.data,
                     <double*> phi_e.data,
                     <double*> dphi_e.data,
                     <double*> f_e.data,
                     <double*> df_e.data,
                     <double*> a_e.data,
                     <double*> da_e_de.data,
                     <double*> r_e.data,
                     <double*> dr_e_de.data)
def kEpsilon_k_3D_Evaluate_sd(double sigma_k,
                   double c_mu,
                   double nu,
                   np.ndarray velocity,
                   np.ndarray gradu,
                   np.ndarray gradv,
                   np.ndarray gradw,
                   np.ndarray k,
                   np.ndarray epsilon,
                   np.ndarray m_k,
                   np.ndarray dm_k,
                   np.ndarray phi_k,
                   np.ndarray dphi_k,
                   np.ndarray f_k,
                   np.ndarray df_k,
                   np.ndarray a_k,
                   np.ndarray da_k_dk,
                   np.ndarray r_k,
                   np.ndarray dr_k_dk):
    ckEpsilon_k_3D_Evaluate_sd(k.size,
                    f_k.shape[f_k.ndim-1],
                    sigma_k,
                    c_mu,
                    nu,
                   <double*> velocity.data,
                   <double*> gradu.data,
                   <double*> gradv.data,
                   <double*> gradw.data,
                   <double*> k.data,
                   <double*> epsilon.data,
                   <double*> m_k.data,
                   <double*> dm_k.data,
                   <double*> phi_k.data,
                   <double*> dphi_k.data,
                   <double*> f_k.data,
                   <double*> df_k.data,
                   <double*> a_k.data,
                   <double*> da_k_dk.data,
                   <double*> r_k.data,
                   <double*> dr_k_dk.data)
def kEpsilon_epsilon_3D_Evaluate_sd(double sigma_e,
                     double c_1,
                     double c_2,
                     double c_mu,
                     double c_e,
                     double nu,
                     np.ndarray velocity,
                     np.ndarray gradu,
                     np.ndarray gradv,
                     np.ndarray gradw,
                     np.ndarray k,
                     np.ndarray epsilon,
                     np.ndarray m_e,
                     np.ndarray dm_e,
                     np.ndarray phi_e,
                     np.ndarray dphi_e,
                     np.ndarray f_e,
                     np.ndarray df_e,
                     np.ndarray a_e,
                     np.ndarray da_e_de,
                     np.ndarray r_e,
                     np.ndarray dr_e_de):
    ckEpsilon_epsilon_3D_Evaluate_sd(epsilon.size,
                      f_e.shape[f_e.ndim-1],
                      sigma_e,
                      c_1,
                      c_2,
                      c_mu,
                      c_e,
                      nu,
                     <double*> velocity.data,
                     <double*> gradu.data,
                     <double*> gradv.data,
                     <double*> gradw.data,
                     <double*> k.data,
                     <double*> epsilon.data,
                     <double*> m_e.data,
                     <double*> dm_e.data,
                     <double*> phi_e.data,
                     <double*> dphi_e.data,
                     <double*> f_e.data,
                     <double*> df_e.data,
                     <double*> a_e.data,
                     <double*> da_e_de.data,
                     <double*> r_e.data,
                     <double*> dr_e_de.data)
def ReynoldsAveragedNavierStokes_kEpsilon_2D_Update(const double nu,
                             const double c_mu,
                             np.ndarray k,
                             np.ndarray grad_k,
                             np.ndarray epsilon,
                             np.ndarray mom_u_diff_ten,
                             np.ndarray mom_v_diff_ten,
                             np.ndarray mom_uv_diff_ten,
                             np.ndarray mom_vu_diff_ten,
                             np.ndarray mom_u_source,
                             np.ndarray mom_v_source):
    cReynoldsAveragedNavierStokes_kEpsilon_2D_Update(k.size,
                             nu,
                             c_mu,
                             <double*> k.data,
                             <double*> grad_k.data,
                             <double*> epsilon.data,
                             <double*> mom_u_diff_ten.data,
                             <double*> mom_v_diff_ten.data,
                             <double*> mom_uv_diff_ten.data,
                             <double*> mom_vu_diff_ten.data,
                             <double*> mom_u_source.data,
                             <double*> mom_v_source.data)
def ReynoldsAveragedNavierStokes_kEpsilon_2D_Update_sd(const double rho,
                            const double nu,
                            const double c_mu,
                            np.ndarray k,
                            np.ndarray grad_k,
                            np.ndarray epsilon,
                            np.ndarray mom_u_diff_ten,
                            np.ndarray mom_v_diff_ten,
                            np.ndarray mom_uv_diff_ten,
                            np.ndarray mom_vu_diff_ten,
                            np.ndarray mom_u_source,
                            np.ndarray mom_v_source):
    cReynoldsAveragedNavierStokes_kEpsilon_2D_Update_sd(k.size,
                            rho,
                            nu,
                            c_mu,
                            <double*> k.data,
                            <double*> grad_k.data,
                            <double*> epsilon.data,
                            <double*> mom_u_diff_ten.data,
                            <double*> mom_v_diff_ten.data,
                            <double*> mom_uv_diff_ten.data,
                            <double*> mom_vu_diff_ten.data,
                            <double*> mom_u_source.data,
                            <double*> mom_v_source.data)
def ReynoldsAveragedNavierStokes_kEpsilon_3D_Update(const double nu,
                             const double c_mu,
                             np.ndarray k,
                             np.ndarray grad_k,
                             np.ndarray epsilon,
                             np.ndarray mom_u_diff_ten,
                             np.ndarray mom_v_diff_ten,
                             np.ndarray mom_w_diff_ten,
                             np.ndarray mom_uv_diff_ten,
                             np.ndarray mom_uw_diff_ten,
                             np.ndarray mom_vu_diff_ten,
                             np.ndarray mom_vw_diff_ten,
                             np.ndarray mom_wu_diff_ten,
                             np.ndarray mom_wv_diff_ten,
                             np.ndarray mom_u_source,
                             np.ndarray mom_v_source,
                             np.ndarray mom_w_source):
    cReynoldsAveragedNavierStokes_kEpsilon_3D_Update(k.size,
                             nu,
                             c_mu,
                             <double*> k.data,
                             <double*> grad_k.data,
                             <double*> epsilon.data,
                             <double*> mom_u_diff_ten.data,
                             <double*> mom_v_diff_ten.data,
                             <double*> mom_w_diff_ten.data,
                             <double*> mom_uv_diff_ten.data,
                             <double*> mom_uw_diff_ten.data,
                             <double*> mom_vu_diff_ten.data,
                             <double*> mom_vw_diff_ten.data,
                             <double*> mom_wu_diff_ten.data,
                             <double*> mom_wv_diff_ten.data,
                             <double*> mom_u_source.data,
                             <double*> mom_v_source.data,
                             <double*> mom_w_source.data)
def ReynoldsAveragedNavierStokes_kEpsilon_3D_Update_sd(const double nu,
                            const double c_mu,
                            np.ndarray k,
                            np.ndarray grad_k,
                            np.ndarray epsilon,
                            np.ndarray mom_u_diff_ten,
                            np.ndarray mom_v_diff_ten,
                            np.ndarray mom_w_diff_ten,
                            np.ndarray mom_uv_diff_ten,
                            np.ndarray mom_uw_diff_ten,
                            np.ndarray mom_vu_diff_ten,
                            np.ndarray mom_vw_diff_ten,
                            np.ndarray mom_wu_diff_ten,
                            np.ndarray mom_wv_diff_ten,
                            np.ndarray mom_u_source,
                            np.ndarray mom_v_source,
                            np.ndarray mom_w_source):
    cReynoldsAveragedNavierStokes_kEpsilon_3D_Update_sd(k.size,
                            nu,
                            c_mu,
                            <double*> k.data,
                            <double*> grad_k.data,
                            <double*> epsilon.data,
                            <double*> mom_u_diff_ten.data,
                            <double*> mom_v_diff_ten.data,
                            <double*> mom_w_diff_ten.data,
                            <double*> mom_uv_diff_ten.data,
                            <double*> mom_uw_diff_ten.data,
                            <double*> mom_vu_diff_ten.data,
                            <double*> mom_vw_diff_ten.data,
                            <double*> mom_wu_diff_ten.data,
                            <double*> mom_wv_diff_ten.data,
                            <double*> mom_u_source.data,
                            <double*> mom_v_source.data,
                            <double*> mom_w_source.data)
def scriptedSphereMotionSignedDistance(const double t,
                    np.ndarray  radii,
                    np.ndarray  centers,
                    np.ndarray  x,
                    np.ndarray  phi,
                    np.ndarray  n):
    cscriptedSphereMotionSignedDistance(phi.size,
                    t,
                    n.shape[n.ndim-1],
                    radii.shape[0],
                    <double*>  radii.data,
                    <double*>  centers.data,
                    <double*>  x.data,
                    <double*>  phi.data,
                    <double*>  n.data)
def shallowWater_1D_Evaluate(const double h_eps,
                            const double g,
                            const double bedFrictionCoefficient,
                            const double bedFrictionPower,
                            const double eddyViscosity,
                            np.ndarray x,
                            np.ndarray db_dx,
                            np.ndarray h,
                            np.ndarray hu,
                            np.ndarray H,
                            np.ndarray mass_acc,
                            np.ndarray dmass_acc_dh,
                            np.ndarray mom_acc,
                            np.ndarray dmom_acc_dhu,
                            np.ndarray mass_adv,
                            np.ndarray dmass_adv_dhu,
                            np.ndarray mom_adv,
                            np.ndarray dmom_adv_dh,
                            np.ndarray dmom_adv_dhu,
                            np.ndarray mom_source,
                            np.ndarray dmom_source_dh,
                            np.ndarray dmom_source_dhu,
                            np.ndarray mom_diff):
    cshallowWater_1D_Evaluate(h.size,
                            h_eps,
                            g,
                            bedFrictionCoefficient,
                            bedFrictionPower,
                            eddyViscosity,
                            <double*> x.data,
                            <double*> db_dx.data,
                            <double*> h.data,
                            <double*> hu.data,
                            <double*> H.data,
                            <double*> mass_acc.data,
                            <double*> dmass_acc_dh.data,
                            <double*> mom_acc.data,
                            <double*> dmom_acc_dhu.data,
                            <double*> mass_adv.data,
                            <double*> dmass_adv_dhu.data,
                            <double*> mom_adv.data,
                            <double*> dmom_adv_dh.data,
                            <double*> dmom_adv_dhu.data,
                            <double*> mom_source.data,
                            <double*> dmom_source_dh.data,
                            <double*> dmom_source_dhu.data,
                            <double*> mom_diff.data)
def shallowWater_2D_Evaluate(const double h_eps,
                            const double g,
                            const double bedFrictionCoefficient,
                            const double bedFrictionPower,
                            const double eddyViscosity,
                            np.ndarray x,
                            np.ndarray grad_b,
                            np.ndarray h,
                            np.ndarray hu,
                            np.ndarray hv,
                            np.ndarray H,
                            np.ndarray mass_acc,
                            np.ndarray dmass_acc_dh,
                            np.ndarray mom_u_acc,
                            np.ndarray dmom_u_acc_dhu,
                            np.ndarray mom_v_acc,
                            np.ndarray dmom_v_acc_dhv,
                            np.ndarray mass_adv,
                            np.ndarray dmass_adv_dhu,
                            np.ndarray dmass_adv_dhv,
                            np.ndarray mom_u_adv,
                            np.ndarray dmom_u_adv_dh,
                            np.ndarray dmom_u_adv_dhu,
                            np.ndarray dmom_u_adv_dhv,
                            np.ndarray mom_v_adv,
                            np.ndarray dmom_v_adv_dh,
                            np.ndarray dmom_v_adv_dhu,
                            np.ndarray dmom_v_adv_dhv,
                            np.ndarray mom_u_diff,
                            np.ndarray mom_v_diff,
                            np.ndarray mom_u_source,
                            np.ndarray dmom_u_source_dh,
                            np.ndarray dmom_u_source_dhu,
                            np.ndarray dmom_u_source_dhv,
                            np.ndarray mom_v_source,
                            np.ndarray dmom_v_source_dh,
                            np.ndarray dmom_v_source_dhu,
                            np.ndarray dmom_v_source_dhv):
    cshallowWater_2D_Evaluate(h.size,
                            h_eps,
                            g,
                            bedFrictionCoefficient,
                            bedFrictionPower,
                            eddyViscosity,
                            <double*> x.data,
                            <double*> grad_b.data,
                            <double*> h.data,
                            <double*> hu.data,
                            <double*> hv.data,
                            <double*> H.data,
                            <double*> mass_acc.data,
                            <double*> dmass_acc_dh.data,
                            <double*> mom_u_acc.data,
                            <double*> dmom_u_acc_dhu.data,
                            <double*> mom_v_acc.data,
                            <double*> dmom_v_acc_dhv.data,
                            <double*> mass_adv.data,
                            <double*> dmass_adv_dhu.data,
                            <double*> dmass_adv_dhv.data,
                            <double*> mom_u_adv.data,
                            <double*> dmom_u_adv_dh.data,
                            <double*> dmom_u_adv_dhu.data,
                            <double*> dmom_u_adv_dhv.data,
                            <double*> mom_v_adv.data,
                            <double*> dmom_v_adv_dh.data,
                            <double*> dmom_v_adv_dhu.data,
                            <double*> dmom_v_adv_dhv.data,
                            <double*> mom_u_diff.data,
                            <double*> mom_v_diff.data,
                            <double*> mom_u_source.data,
                            <double*> dmom_u_source_dh.data,
                            <double*> dmom_u_source_dhu.data,
                            <double*> dmom_u_source_dhv.data,
                            <double*> mom_v_source.data,
                            <double*> dmom_v_source_dh.data,
                            <double*> dmom_v_source_dhu.data,
                            <double*> dmom_v_source_dhv.data)
def conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwind(const int upwindFlag,
                                       const int computeAverages,
                                       const int nQuadraturePoints_elementBoundary,
                                       np.ndarray elementBoundaryElementsArray,
                                       np.ndarray quadraturePointToElementBoundary,
                                       np.ndarray materialTypes,
                                       const double rho,
                                       const double beta,
                                       np.ndarray gravity,
                                       np.ndarray alpha,
                                       np.ndarray n_vg,
                                       np.ndarray thetaR,
                                       np.ndarray thetaSR,
                                       np.ndarray KWs,
                                       np.ndarray u,
                                       np.ndarray gradu,
                                       np.ndarray n_global,
                                       np.ndarray dV,
                                       np.ndarray mass,
                                       np.ndarray dmass,
                                       np.ndarray f_avg,
                                       np.ndarray df_avg,
                                       np.ndarray a_avg,
                                       np.ndarray da_avg,
                                       np.ndarray f,
                                       np.ndarray df,
                                       np.ndarray a,
                                       np.ndarray da):
    cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwind(upwindFlag,
                                    computeAverages,
                                    f.size/f.shape[f.ndim-1]/f.shape[f.ndim-2],
                                    f.shape[f.ndim-2],
                                    f.shape[f.ndim-1],
                                    nQuadraturePoints_elementBoundary,
                                    <int*> elementBoundaryElementsArray.data,
                                    <int*> quadraturePointToElementBoundary.data,
                                    <int*> materialTypes.data,
                                    rho,
                                    beta,
                                    <double*> gravity.data,
                                    <double*> alpha.data,
                                    <double*> n_vg.data,
                                    <double*> thetaR.data,
                                    <double*> thetaSR.data,
                                    <double*> KWs.data,
                                    <double*> u.data,
                                    <double*> gradu.data,
                                    <double*> n_global.data,
                                    <double*> dV.data,
                                    <double*> mass.data,
                                    <double*> dmass.data,
                                    <double*> f_avg.data,
                                    <double*> df_avg.data,
                                    <double*> a_avg.data,
                                    <double*> da_avg.data,
                                    <double*> f.data,
                                    <double*> df.data,
                                    <double*> a.data,
                                    <double*> da.data)
def conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm(const int upwindFlag,
                                          const int computeAverages,
                                          const int nQuadraturePoints_elementBoundary,
                                          np.ndarray elementBoundaryElementsArray,
                                          np.ndarray quadraturePointToElementBoundary,
                                          np.ndarray materialTypes,
                                          const double rho,
                                          const double beta,
                                          np.ndarray gravity,
                                          np.ndarray alpha,
                                          np.ndarray n_vg,
                                          np.ndarray thetaR,
                                          np.ndarray thetaSR,
                                          np.ndarray KWs,
                                          np.ndarray u,
                                          np.ndarray gradu,
                                          np.ndarray n_global,
                                          np.ndarray dV,
                                          np.ndarray mass,
                                          np.ndarray dmass,
                                          np.ndarray f_avg,
                                          np.ndarray df_avg,
                                          np.ndarray a_avg,
                                          np.ndarray da_avg,
                                          np.ndarray f,
                                          np.ndarray df,
                                          np.ndarray a,
                                          np.ndarray da):
    cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm(upwindFlag,
                                        computeAverages,
                                        f.size/f.shape[f.ndim-1]/f.shape[f.ndim-2],
                                        f.shape[f.ndim-2],
                                        f.shape[f.ndim-1],
                                        nQuadraturePoints_elementBoundary,
                                        <int*> elementBoundaryElementsArray.data,
                                        <int*> quadraturePointToElementBoundary.data,
                                        <int*> materialTypes.data,
                                        rho,
                                        beta,
                                        <double*> gravity.data,
                                        <double*> alpha.data,
                                        <double*> n_vg.data,
                                        <double*> thetaR.data,
                                        <double*> thetaSR.data,
                                        <double*> KWs.data,
                                        <double*> u.data,
                                        <double*> gradu.data,
                                        <double*> n_global.data,
                                        <double*> dV.data,
                                        <double*> mass.data,
                                        <double*> dmass.data,
                                        <double*> f_avg.data,
                                        <double*> df_avg.data,
                                        <double*> a_avg.data,
                                        <double*> da_avg.data,
                                        <double*> f.data,
                                        <double*> df.data,
                                        <double*> a.data,
                                        <double*> da.data)
def conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm_sd(const int upwindFlag,
                                         const int computeAverages,
                                         const int nQuadraturePoints_elementBoundary,
                                         np.ndarray rowptr,
                                         np.ndarray colind,
                                         np.ndarray elementBoundaryElementsArray,
                                         np.ndarray quadraturePointToElementBoundary,
                                         np.ndarray materialTypes,
                                         const double rho,
                                         const double beta,
                                         np.ndarray gravity,
                                         np.ndarray alpha,
                                         np.ndarray n_vg,
                                         np.ndarray thetaR,
                                         np.ndarray thetaSR,
                                         np.ndarray KWs,
                                         np.ndarray u,
                                         np.ndarray gradu,
                                         np.ndarray n_global,
                                         np.ndarray dV,
                                         np.ndarray mass,
                                         np.ndarray dmass,
                                         np.ndarray f_avg,
                                         np.ndarray df_avg,
                                         np.ndarray a_avg,
                                         np.ndarray da_avg,
                                         np.ndarray f,
                                         np.ndarray df,
                                         np.ndarray a,
                                         np.ndarray da):
    cconservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm_sd(upwindFlag,
                                        computeAverages,
                                        f.size/f.shape[f.ndim-1]/f.shape[f.ndim-2],
                                        f.shape[f.ndim-2],
                                        f.shape[f.ndim-1],
                                        nQuadraturePoints_elementBoundary,
                                        <int*> rowptr.data,
                                        <int*> colind.data,
                                        <int*> elementBoundaryElementsArray.data,
                                        <int*> quadraturePointToElementBoundary.data,
                                        <int*> materialTypes.data,
                                        rho,
                                        beta,
                                        <double*> gravity.data,
                                        <double*> alpha.data,
                                        <double*> n_vg.data,
                                        <double*> thetaR.data,
                                        <double*> thetaSR.data,
                                        <double*> KWs.data,
                                        <double*> u.data,
                                        <double*> gradu.data,
                                        <double*> n_global.data,
                                        <double*> dV.data,
                                        <double*> mass.data,
                                        <double*> dmass.data,
                                        <double*> f_avg.data,
                                        <double*> df_avg.data,
                                        <double*> a_avg.data,
                                        <double*> da_avg.data,
                                        <double*> f.data,
                                        <double*> df.data,
                                        <double*> a.data,
                                        <double*> da.data)
def applyContactLineSlip(double eps,
                          np.ndarray isDOFBoundary,
                          np.ndarray phi,
                          np.ndarray advectiveFlux,
                          np.ndarray diffusiveFlux):
    capplyContactLineSlip(phi.shape[0],
                        phi.shape[1],
                        eps,
                        <int*> isDOFBoundary.data,
                        <double*> phi.data,
                        <double*> advectiveFlux.data,
                        <double*> diffusiveFlux.data)
def applyContactLineSlipJacobian(double eps,
                                  np.ndarray isDOFBoundary,
                                  np.ndarray phi,
                                  np.ndarray fluxJacobian):
    capplyContactLineSlipJacobian(fluxJacobian.shape[0],
                                fluxJacobian.shape[1],
                                fluxJacobian.shape[2],
                                eps,
                                <int*> isDOFBoundary.data,
                                <double*> phi.data,
                                <double*> fluxJacobian.data)
def calculateEddyViscosity_Smagorinsky_2D(const double smagorinskyConstant,
                       np.ndarray  h_e,
                       np.ndarray  grad_u,
                       np.ndarray  grad_v,
                       np.ndarray  nu_t):
    ccalculateEddyViscosity_Smagorinsky_2D(grad_u.shape[0],
                       grad_u.shape[1],
                       smagorinskyConstant,
                       <double*>  h_e.data,
                       <double*>  grad_u.data,
                       <double*>  grad_v.data,
                       <double*>  nu_t.data)
def calculateEddyViscosity_Smagorinsky_3D(const double smagorinskyConstant,
                       np.ndarray  h_e,
                       np.ndarray  grad_u,
                       np.ndarray  grad_v,
                       np.ndarray  grad_w,
                       np.ndarray  nu_t):
    ccalculateEddyViscosity_Smagorinsky_3D(grad_u.shape[0],
                       grad_u.shape[1],
                       smagorinskyConstant,
                       <double*>  h_e.data,
                       <double*>  grad_u.data,
                       <double*>  grad_v.data,
                       <double*>  grad_w.data,
                       <double*>  nu_t.data)
def calculateEddyViscosity_Smagorinsky2P_2D(const double smagorinskyConstant_0,
                         const double smagorinskyConstant_1,
                         const double  eps,
                         np.ndarray  phi_ls,
                         np.ndarray  h_e,
                         np.ndarray  grad_u,
                         np.ndarray  grad_v,
                         np.ndarray  nu_t):
    ccalculateEddyViscosity_Smagorinsky2P_2D(grad_u.shape[0],
                         grad_u.shape[1],
                         smagorinskyConstant_0,
                         smagorinskyConstant_1,
                          eps,
                         <double*>  phi_ls.data,
                         <double*>  h_e.data,
                         <double*>  grad_u.data,
                         <double*>  grad_v.data,
                         <double*>  nu_t.data)
def calculateEddyViscosity_Smagorinsky2P_3D(const double smagorinskyConstant_0,
                         const double smagorinskyConstant_1,
                         const double eps,
                         np.ndarray  phi_ls,
                         np.ndarray  h_e,
                         np.ndarray  grad_u,
                         np.ndarray  grad_v,
                         np.ndarray  grad_w,
                         np.ndarray  nu_t):
    ccalculateEddyViscosity_Smagorinsky2P_3D(grad_u.shape[0],
                         grad_u.shape[1],
                         smagorinskyConstant_0,
                         smagorinskyConstant_1,
                         eps,
                         <double*>  phi_ls.data,
                         <double*>  h_e.data,
                         <double*>  grad_u.data,
                         <double*>  grad_v.data,
                         <double*>  grad_w.data,
                         <double*>  nu_t.data)
def eddyViscosity_2D_Update(np.ndarray nu_t,
                 np.ndarray mom_u_diff_ten,
                 np.ndarray mom_v_diff_ten,
                 np.ndarray mom_uv_diff_ten,
                 np.ndarray mom_vu_diff_ten):
    ceddyViscosity_2D_Update(nu_t.size,
                 <double*> nu_t.data,
                 <double*> mom_u_diff_ten.data,
                 <double*> mom_v_diff_ten.data,
                 <double*> mom_uv_diff_ten.data,
                 <double*> mom_vu_diff_ten.data)
def eddyViscosity_2D_Update_sd(np.ndarray nu_t,
                np.ndarray mom_u_diff_ten,
                np.ndarray mom_v_diff_ten,
                np.ndarray mom_uv_diff_ten,
                np.ndarray mom_vu_diff_ten):
    ceddyViscosity_2D_Update_sd(nu_t.size,
                <double*> nu_t.data,
                <double*> mom_u_diff_ten.data,
                <double*> mom_v_diff_ten.data,
                <double*> mom_uv_diff_ten.data,
                <double*> mom_vu_diff_ten.data)
def eddyViscosity_3D_Update(np.ndarray nu_t,
                 np.ndarray mom_u_diff_ten,
                 np.ndarray mom_v_diff_ten,
                 np.ndarray mom_w_diff_ten,
                 np.ndarray mom_uv_diff_ten,
                 np.ndarray mom_uw_diff_ten,
                 np.ndarray mom_vu_diff_ten,
                 np.ndarray mom_vw_diff_ten,
                 np.ndarray mom_wu_diff_ten,
                 np.ndarray mom_wv_diff_ten):
    ceddyViscosity_3D_Update(nu_t.size,
                 <double*> nu_t.data,
                 <double*> mom_u_diff_ten.data,
                 <double*> mom_v_diff_ten.data,
                 <double*> mom_w_diff_ten.data,
                 <double*> mom_uv_diff_ten.data,
                 <double*> mom_uw_diff_ten.data,
                 <double*> mom_vu_diff_ten.data,
                 <double*> mom_vw_diff_ten.data,
                 <double*> mom_wu_diff_ten.data,
                 <double*> mom_wv_diff_ten.data)
def eddyViscosity_3D_Update_sd(np.ndarray nu_t,
                np.ndarray mom_u_diff_ten,
                np.ndarray mom_v_diff_ten,
                np.ndarray mom_w_diff_ten,
                np.ndarray mom_uv_diff_ten,
                np.ndarray mom_uw_diff_ten,
                np.ndarray mom_vu_diff_ten,
                np.ndarray mom_vw_diff_ten,
                np.ndarray mom_wu_diff_ten,
                np.ndarray mom_wv_diff_ten):
    ceddyViscosity_3D_Update_sd(nu_t.size,
                <double*> nu_t.data,
                <double*> mom_u_diff_ten.data,
                <double*> mom_v_diff_ten.data,
                <double*> mom_w_diff_ten.data,
                <double*> mom_uv_diff_ten.data,
                <double*> mom_uw_diff_ten.data,
                <double*> mom_vu_diff_ten.data,
                <double*> mom_vw_diff_ten.data,
                <double*> mom_wu_diff_ten.data,
                <double*> mom_wv_diff_ten.data)
def calculateWaveFunction3d_ref(np.ndarray mesh_trial_ref,
                 np.ndarray mesh_dof,
                 np.ndarray mesh_l2g,
                 np.ndarray elementDiametersArray,
                 np.ndarray omega_s_x, 
                 np.ndarray omega_s_y,
                 np.ndarray omega_s_z,
                 double t,
                 int waveFlag, 
                 double epsFact,
                 double waveHeight,
                 double waveCelerity,
                 double waveFrequency,
                 double waveNumber,
                 double waterDepth,
                 np.ndarray source):
    ccalculateWaveFunction3d_ref(mesh_l2g.shape[0],
                    mesh_l2g.shape[1],
                    mesh_trial_ref.shape[0],
                    <double*> mesh_trial_ref.data,
                    <double*> mesh_dof.data,
                    <int*> mesh_l2g.data,
                    <double*> elementDiametersArray.data,
                    <double*> omega_s_x.data,
                    <double*> omega_s_y.data,
                    <double*> omega_s_z.data,
                    t,
                    waveFlag, 
                    epsFact,
                    waveHeight,
                    waveCelerity,
                    waveFrequency,
                    waveNumber,
                    waterDepth,
                    <double*> source.data)
def Mass_2D_Evaluate(double rho,
              np.ndarray p,
              np.ndarray u,
              np.ndarray v,
              np.ndarray mom_p_acc,
              np.ndarray mom_u_acc,
              np.ndarray mom_v_acc,
              np.ndarray dmom_p_acc_p,
              np.ndarray dmom_u_acc_u,
              np.ndarray dmom_v_acc_v):
    cMass_2D_Evaluate(p.size,
               rho,
              <double*> p.data,
              <double*> u.data,
              <double*> v.data,
              <double*> mom_p_acc.data,
              <double*> mom_u_acc.data,
              <double*> mom_v_acc.data,
              <double*> dmom_p_acc_p.data,
              <double*> dmom_u_acc_u.data,
              <double*> dmom_v_acc_v.data)
def Mass_3D_Evaluate(double rho,
              np.ndarray p,
              np.ndarray u,
              np.ndarray v,
              np.ndarray w,
              np.ndarray mom_p_acc,
              np.ndarray mom_u_acc,
              np.ndarray mom_v_acc,
              np.ndarray mom_w_acc,
              np.ndarray dmom_p_acc_p,
              np.ndarray dmom_u_acc_u,
              np.ndarray dmom_v_acc_v,
              np.ndarray dmom_w_acc_w):
    cMass_3D_Evaluate(p.size,
               rho,
              <double*> p.data,
              <double*> u.data,
              <double*> v.data,
              <double*> w.data,
              <double*> mom_p_acc.data,
              <double*> mom_u_acc.data,
              <double*> mom_v_acc.data,
              <double*> mom_w_acc.data,
              <double*> dmom_p_acc_p.data,
              <double*> dmom_u_acc_u.data,
              <double*> dmom_v_acc_v.data,
              <double*> dmom_w_acc_w.data)
def TwoPhaseAdvection_2D_Evaluate(const double eps,
                                  const double rho_0,
                                  const double nu_0,
                                  const double rho_1,
                                  const double nu_1,
                                  np.ndarray phi,
                                  np.ndarray p,
                                  np.ndarray u,
                                  np.ndarray v,
                                  np.ndarray mass_adv,
                                  np.ndarray dmass_adv_p,
                                  np.ndarray dmass_adv_u,
                                  np.ndarray dmass_adv_v,
                                  np.ndarray mom_u_adv,
                                  np.ndarray dmom_u_adv_u,
                                  np.ndarray dmom_u_adv_v,
                                  np.ndarray mom_v_adv,
                                  np.ndarray dmom_v_adv_u,
                                  np.ndarray dmom_v_adv_v):
    cTwoPhaseAdvection_2D_Evaluate(p.size,
                                  eps,
                                  rho_0,
                                  nu_0,
                                  rho_1,
                                  nu_1,
                                  <double*> phi.data,
                                  <double*> p.data,
                                  <double*> u.data,
                                  <double*> v.data,
                                  <double*> mass_adv.data,
                                  <double*> dmass_adv_p.data,
                                  <double*> dmass_adv_u.data,
                                  <double*> dmass_adv_v.data,
                                  <double*> mom_u_adv.data,
                                  <double*> dmom_u_adv_u.data,
                                  <double*> dmom_u_adv_v.data,
                                  <double*> mom_v_adv.data,
                                  <double*> dmom_v_adv_u.data,
                                  <double*> dmom_v_adv_v.data)
def twophaseSignedDistanceUpdateSignFunction(int nPoints,
                                                          double eps,
                                                          np.ndarray u_levelSet,
                                                          np.ndarray S):
    ctwophaseSignedDistanceCoefficientsUpdateSignFunction( nPoints,
                                                           eps,
                                                          <double*> u_levelSet.data,
                                                          <double*> S.data)
def Laplace_2D_Evaluate(np.ndarray p,
                np.ndarray u,
                np.ndarray v,
                np.ndarray w,
                np.ndarray mom_p_diff_ten,
                np.ndarray mom_u_diff_ten,
                np.ndarray mom_v_diff_ten):
    cLaplace_Evaluate2D(p.size,
              <double*> mom_p_diff_ten.data,
              <double*> mom_u_diff_ten.data,
              <double*> mom_v_diff_ten.data)
def Laplace_3D_Evaluate(np.ndarray p,
                np.ndarray u,
                np.ndarray v,
                np.ndarray w,
                np.ndarray mom_p_diff_ten,
                np.ndarray mom_u_diff_ten,
                np.ndarray mom_v_diff_ten,
                np.ndarray mom_w_diff_ten):
    cLaplace_Evaluate3D(p.size,
              <double*> mom_p_diff_ten.data,
              <double*> mom_u_diff_ten.data,
              <double*> mom_v_diff_ten.data,
              <double*> mom_w_diff_ten.data)
def l2projectScalar(const int nSimplices,
             const int nPointsPerSimplex,
             np.ndarray  dV,
             np.ndarray  r):
    cl2projectScalar(nSimplices,
             nPointsPerSimplex,
             <double*>  dV.data,
             <double*>  r.data)
def l2projectVector(const int nSimplices,
             const int nPointsPerSimplex,
             const int nSpace,
             np.ndarray  dV,
             np.ndarray  r):
    cl2projectVector(nSimplices,
             nPointsPerSimplex,
             nSpace,
             <double*>  dV.data,
             <double*>  r.data)
def l2project2Tensor(const int nSimplices,
              const int nPointsPerSimplex,
              const int nSpace,
              np.ndarray  dV,
              np.ndarray  r):
    cl2project2Tensor(nSimplices,
              nPointsPerSimplex,
              nSpace,
              <double*>  dV.data,
              <double*>  r.data)
def L2projectEvaluate(int rank,
                    np.ndarray dV,
                    np.ndarray r):
    if rank == 0:
        l2projectScalar(r.shape[0],r.shape[1],dV,r)
    elif rank == 1:
        l2projectVector(r.shape[0],r.shape[1],r.shape[2],dV,r)
    elif rank == 2:
        l2project2Tensor(r.shape[0],r.shape[1],r.shape[2],dV,r)
    else:
        assert 0
def conservativeHeadRichardsJLeverettEvaluate(np.ndarray materialTypes,
                                       const double rho,
                                       const double beta,
                                       np.ndarray gravity,
                                       np.ndarray phi,
                                       np.ndarray psiD,
                                       np.ndarray ns,
                                       np.ndarray nk,
                                       np.ndarray S_wirr,
                                       np.ndarray S_nwr,
                                       np.ndarray kr0,
                                       np.ndarray u,
                                       np.ndarray mass,
                                       np.ndarray dmass,
                                       np.ndarray f,
                                       np.ndarray df,
                                       np.ndarray a,
                                       np.ndarray da):
    cconservativeHeadRichardsJLeverett(f.size/f.shape[f.ndim-1]/f.shape[f.ndim-2],
                                    f.shape[f.ndim-2],
                                    f.shape[f.ndim-1],
                                    <int*> materialTypes.data,
                                    rho,
                                    beta,
                                    <double*> gravity.data,
                                    <double*> phi.data,
                                    <double*> psiD.data,
                                    <double*> ns.data,
                                    <double*> nk.data,
                                    <double*> S_wirr.data,
                                    <double*> S_nwr.data,
                                    <double*> kr0.data,
                                    <double*> u.data,
                                    <double*> mass.data,
                                    <double*> dmass.data,
                                    <double*> f.data,
                                    <double*> df.data,
                                    <double*> a.data,
                                    <double*> da.data)
def conservativeHeadRichardsJLeverettAniEvaluate(np.ndarray materialTypes,
                                       const double rho,
                                       const double beta,
                                       np.ndarray gravity,
                                       np.ndarray phi,
                                       np.ndarray psiD,
                                       np.ndarray ns,
                                       np.ndarray nk,
                                       np.ndarray S_wirr,
                                       np.ndarray S_nwr,
                                       np.ndarray kr0x,
                                       np.ndarray kr0y,
                                       np.ndarray kr0z,
                                       np.ndarray u,
                                       np.ndarray mass,
                                       np.ndarray dmass,
                                       np.ndarray f,
                                       np.ndarray df,
                                       np.ndarray a,
                                       np.ndarray da):
    cconservativeHeadRichardsJLeverettAni(f.size/f.shape[f.ndim-1]/f.shape[f.ndim-2],
                                    f.shape[f.ndim-2],
                                    f.shape[f.ndim-1],
                                    <int*> materialTypes.data,
                                    rho,
                                    beta,
                                    <double*> gravity.data,
                                    <double*> phi.data,
                                    <double*> psiD.data,
                                    <double*> ns.data,
                                    <double*> nk.data,
                                    <double*> S_wirr.data,
                                    <double*> S_nwr.data,
                                    <double*> kr0x.data,
                                    <double*> kr0y.data,
                                    <double*> kr0z.data,
                                    <double*> u.data,
                                    <double*> mass.data,
                                    <double*> dmass.data,
                                    <double*> f.data,
                                    <double*> df.data,
                                    <double*> a.data,
                                    <double*> da.data)
def diffusiveWave1DCoefficientsEvaluate(const double alpha,
                 const double gamma,
                 const double epsilon,
                 np.ndarray x,
                 np.ndarray u,
                 np.ndarray grad_u,
                 np.ndarray m,
                 np.ndarray dm,
                 np.ndarray a,
                 np.ndarray da):
    cdiffusiveWave1DEvaluate(u.size,
                 alpha,
                 gamma,
                 epsilon,
                 <double*> x.data,
                 <double*> u.data,
                 <double*> grad_u.data,
                 <double*> m.data,
                 <double*> dm.data,
                 <double*> a.data,
                 <double*> da.data)
def diffusiveWave2DCoefficientsEvaluate(const int nd,
                 const double alpha,
                 const double gamma,
                 const double epsilon,
                 np.ndarray x,
                 np.ndarray u,
                 np.ndarray grad_u,
                 np.ndarray m,
                 np.ndarray dm,
                 np.ndarray a,
                 np.ndarray da):
    cdiffusiveWave2DEvaluate(nd,
                 u.size,
                 alpha,
                 gamma,
                 epsilon,
                 <double*> x.data,
                 <double*> u.data,
                 <double*> grad_u.data,
                 <double*> m.data,
                 <double*> dm.data,
                 <double*> a.data,
                 <double*> da.data)

def smoothedHeaviside (double eps, double phi):
    return csmoothedHeaviside(eps,phi)
def smoothedHeaviside_integral (double eps, double phi):
    return csmoothedHeaviside_integral(eps,phi)
def smoothedDirac (double eps, double phi):
    return csmoothedDirac(eps,phi)

##------------
