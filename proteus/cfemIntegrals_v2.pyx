# A type of -*- python -*- file
import numpy as np
cimport numpy as np

cdef extern from "femIntegrals_v2.h":
     void cparametricFiniteElementSpace_getHessianValues "parametricFiniteElementSpace_getHessianValues"(int nElements_global,
     							                                                 int nQuadraturePoints_element,
							                                                 int nDOF_element,	
							                                                 int nSpace_global,
							                                                 double* Hessian_psi,
							                                                 double* inverseJacobianArray,
							                                                 double* Hessian_vArray)
     void cupdateDiffusion2_strong "updateDiffusion2_strong"(int nElements_global,
				                             int nQuadraturePoints_element,
				                             int nSpace,
				                             double *a,
				                             double *Hess_phi,
				                             double *strong_residual)
     void cupdateDiffusionJacobian2_strong "updateDiffusionJacobian2_strong"(int nElements_global,
					                                     int nQuadraturePoints_element,
					                                     int nDOF_trial_element,
					                                     int nSpace,
					                                     int *l2g,
					                                     double *a,
					                                     double *da,
					                                     double *v,
					                                     double *Hess_phi,
					                                     double *dphi,
					                                     double *Hess_v,
					                                     double *dstrong_residual)
     void cupdateDiffusion2_adjoint "updateDiffusion2_adjoint"(int nElements_global,
				                               int nQuadraturePoints_element,
				                               int nDOF_test_element,
				                               int nSpace,
				                               double *a,
				                               double *Hess_w_dV,
				                               double *Lstar_w_dV)
     void ccalculateWeightedShapeHessians "calculateWeightedShapeHessians"(int nElements_global,
					                                   int nQuadraturePoints_element,
					                                   int nDOF_test_element,
					                                   int nSpace,
					                                   double *dVR,
					                                   double *abs_det_jac,
					                                   double *Hess_w,
					                                   double *Hess_w_dV)
     void ccalculateFiniteElementFunctionHessianValues "calculateFiniteElementFunctionHessianValues"(int nElements_global,
						                                                     int nQuadraturePoints_element,
						                                                     int nDOF_trial_element,
						                                                     int nComponents,
						                                                     int nSpace,
						                                                     int *l2g,
						                                                     double *dof,
						                                                     double *Hessian_v,
						                                                     double *Hessian_u)
     void cupdateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_CSR "updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_CSR"(int nInteriorElementBoundaries_global,
										                                                                           int nElementBoundaries_element,
										                                                                           int nQuadraturePoints_elementBoundary,
										                                                                           int nDOF_test_element,
										                                                                           int nDOF_trial_element,
										                                                                           int *interiorElementBoundaries,
										                                                                           int *elementBoundaryElements,
										                                                                           int *elementBoundaryLocalElementBoundaries,
										                                                                           int *nFreeDOF_element_r,
										                                                                           int *freeLocal_r,
										                                                                           int *nFreeDOF_element_u,
										                                                                           int *freeLocal_u,
										                                                                           int *csrRowIndeces_ru,
										                                                                           int *csrColumnOffsets_eb_ru,
										                                                                           double *elementBoundaryFluxJacobian_2sided,
										                                                                           double *w_dS,
										                                                                           double *jac)
     void cupdateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_dense "updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_dense"(int nInteriorElementBoundaries_global,
										                                                                               int nElementBoundaries_element,
										                                                                               int nQuadraturePoints_elementBoundary,
										                                                                               int nDOF_test_element,
										                                                                               int nDOF_trial_element,
										                                                                               int offset_r,
										                                                                               int stride_r,
										                                                                               int offset_u,
										                                                                               int stride_u,
										                                                                               int nFreeVDOF_global,
										                                                                               int *interiorElementBoundaries,
										                                                                               int *elementBoundaryElements,
										                                                                               int *elementBoundaryLocalElementBoundaries,
										                                                                               int *nFreeDOF_element_r,
										                                                                               int *nFreeDOF_element_u,
										                                                                               int *freeLocal_r,
										                                                                               int *freeGlobal_r,
										                                                                               int *freeLocal_u,
										                                                                               int *freeGlobal_u,
										                                                                               double *elementBoundaryFluxJacobian_2sided,
										                                                                               double *w_dS,
										                                                                               double *jac)
     void cupdateInteriorTwoSidedElementBoundaryFlux "updateInteriorTwoSidedElementBoundaryFlux"(int nInteriorElementBoundaries_global,
						                                                 int nElementBoundaries_element,
						                                                 int nQuadraturePoints_elementBoundary,
						                                                 int nDOF_test_element,
						                                                 int *interiorElementBoundaries,
						                                                 int *elementBoundaryElements,
						                                                 int *elementBoundaryLocalElementBoundaries,
						                                                 double *flux,
						                                                 double *w_dS,
						                                                 double *residual)
     void ccalculateCFLADR2speeds "calculateCFLADR2speeds"(int nElements_global,
				                           int nQuadraturePoints_element,
				                           int nSpace,
				                           double *elementDiameter,
				                           double *dm,
				                           double *df1,
				                           double *df2,
				                           double *cfl)
     int ccheckElementBoundaryAndExteriorElementBoundaryArraysSame "checkElementBoundaryAndExteriorElementBoundaryArraysSame"(int nElementBoundaries_element,
								                                                              int nExteriorElementBoundaries_global,
								                                                              int nQuadraturePoints_elementBoundary,
								                                                              int nValuesPerQuadraturePoint,
								                                                              double tolerance,
								                                                              int *exteriorElementBoundariesArray,
								                                                              int *elementBoundaryElementsArray,
								                                                              int *elementBoundaryLocalElementBoundariesArray,
								                                                              double *ebq_val,
								                                                              double *ebqe_val,
								                                                              int *firstBadIndex)
     int ccheckGlobalElementBoundaryAndExteriorElementBoundaryArraysSame "checkGlobalElementBoundaryAndExteriorElementBoundaryArraysSame"(int nExteriorElementBoundaries_global,
									                                                                  int nQuadraturePoints_elementBoundary,
									                                                                  int nValuesPerQuadraturePoint,
									                                                                  double tolerance,
									                                                                  int *exteriorElementBoundariesArray,
									                                                                  int *elementBoundaryElementsArray,
									                                                                  int *elementBoundaryLocalElementBoundariesArray,
									                                                                  double *ebq_global_val,
									                                                                  double *ebqe_val,
									                                                                  int *firstBadIndex)
     void ccalculateExteriorElementBoundaryStress3D "calculateExteriorElementBoundaryStress3D"(int nExteriorElementBoundaries_global,
						                                               int nQuadraturePoints_elementBoundary,
						                                               int *elementBoundaryMaterialTypes,
						                                               int *exteriorElementBoundaries,
						                                               int *elementBoundaryElements,
						                                               int *elementBoundaryLocalElementBoundaries,
						                                               double *p,
						                                               double *mom_flux_vec_u,
						                                               double *mom_flux_vec_v,
						                                               double *mom_flux_vec_w,
						                                               double *dS,
						                                               double *n,
						                                               double *F)
     void ccalculateExteriorElementBoundaryStress2D "calculateExteriorElementBoundaryStress2D"(int nExteriorElementBoundaries_global,
						                                               int nQuadraturePoints_elementBoundary,
						                                               int *elementBoundaryMaterialTypes,
						                                               int *exteriorElementBoundaries,
						                                               int *elementBoundaryElements,
						                                               int *elementBoundaryLocalElementBoundaries,
						                                               double *p,
						                                               double *mom_flux_vec_u,
						                                               double *mom_flux_vec_v,
						                                               double *dS,
						                                               double *n,
						                                               double *F)

def parametricFiniteElementSpace_getHessianValues(int nElements_global,
     						  int nQuadraturePoints_element,
						  int nDOF_element,	
						  int nSpace_global,
						  np.ndarray Hessian_psi,
						  np.ndarray inverseJacobianArray,
						  np.ndarray Hessian_vArray):
    cparametricFiniteElementSpace_getHessianValues(nElements_global,
     						   nQuadraturePoints_element,
						   nDOF_element,	
						   nSpace_global,
						   <double*> Hessian_psi.data,
						   <double*> inverseJacobianArray.data,
						   <double*> Hessian_vArray.data)    
def updateDiffusion2_strong(int nElements_global,
			    int nQuadraturePoints_element,
			    int nSpace,
			    np.ndarray a,
			    np.ndarray Hess_phi,
			    np.ndarray strong_residual):
    cupdateDiffusion2_strong(nElements_global,
			     nQuadraturePoints_element,
			     nSpace,
			     <double*> a.data,
			     <double*> Hess_phi.data,
			     <double*> strong_residual.data)
def updateDiffusionJacobian2_strong(int nElements_global,
				    int nQuadraturePoints_element,
				    int nDOF_trial_element,
				    int nSpace,
				    np.ndarray l2g,
				    np.ndarray a,
				    np.ndarray da,
				    np.ndarray v,
				    np.ndarray Hess_phi,
				    np.ndarray dphi,
				    np.ndarray Hess_v,
				    np.ndarray dstrong_residual):
    cupdateDiffusionJacobian2_strong(nElements_global,
				     nQuadraturePoints_element,
				     nDOF_trial_element,
				     nSpace,
				     <int*> l2g.data,
				     <double*> a.data,
				     <double*> da.data,
				     <double*> v.data,
				     <double*> Hess_phi.data,
				     <double*> dphi.data,
				     <double*> Hess_v.data,
				     <double*> dstrong_residual.data)
def updateDiffusion2_adjoint(int nElements_global,
			     int nQuadraturePoints_element,
			     int nDOF_test_element,
			     int nSpace,
			     np.ndarray a,
			     np.ndarray Hess_w_dV,
			     np.ndarray Lstar_w_dV):
    cupdateDiffusion2_adjoint(nElements_global,
			      nQuadraturePoints_element,
			      nDOF_test_element,
			      nSpace,
			      <double*> a.data,
			      <double*> Hess_w_dV.data,
			      <double*> Lstar_w_dV.data)
def calculateWeightedShapeHessians(int nElements_global,
				   int nQuadraturePoints_element,
				   int nDOF_test_element,
				   int nSpace,
				   np.ndarray dVR,
				   np.ndarray abs_det_jac,
				   np.ndarray Hess_w,
				   np.ndarray Hess_w_dV):
    ccalculateWeightedShapeHessians(nElements_global,
				    nQuadraturePoints_element,
				    nDOF_test_element,
				    nSpace,
				    <double*> dVR.data,
				    <double*> abs_det_jac.data,
				    <double*> Hess_w.data,
				    <double*> Hess_w_dV.data)
def calculateFiniteElementFunctionHessianValues(int nElements_global,
						int nQuadraturePoints_element,
						int nDOF_trial_element,
						int nComponents,
						int nSpace,
						np.ndarray l2g,
						np.ndarray dof,
						np.ndarray Hessian_v,
						np.ndarray Hessian_u):
    ccalculateFiniteElementFunctionHessianValues(nElements_global,
						 nQuadraturePoints_element,
						 nDOF_trial_element,
						 nComponents,
						 nSpace,
						 <int*> l2g.data,
						 <double*> dof.data,
						 <double*> Hessian_v.data,
						 <double*> Hessian_u.data)
def updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_CSR(int nInteriorElementBoundaries_global,
									   int nElementBoundaries_element,
									   int nQuadraturePoints_elementBoundary,
									   int nDOF_test_element,
									   int nDOF_trial_element,
									   np.ndarray interiorElementBoundaries,
									   np.ndarray elementBoundaryElements,
									   np.ndarray elementBoundaryLocalElementBoundaries,
									   np.ndarray nFreeDOF_element_r,
									   np.ndarray freeLocal_r,
									   np.ndarray nFreeDOF_element_u,
									   np.ndarray freeLocal_u,
									   np.ndarray csrRowIndeces_ru,
									   np.ndarray csrColumnOffsets_eb_ru,
									   np.ndarray elementBoundaryFluxJacobian_2sided,
									   np.ndarray w_dS,
									   np.ndarray jac):
    cupdateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_CSR(nInteriorElementBoundaries_global,
									    nElementBoundaries_element,
									    nQuadraturePoints_elementBoundary,
									    nDOF_test_element,
									    nDOF_trial_element,
									    <int*> interiorElementBoundaries.data,
									    <int*> elementBoundaryElements.data,
									    <int*> elementBoundaryLocalElementBoundaries.data,
									    <int*> nFreeDOF_element_r.data,
									    <int*> freeLocal_r.data,
									    <int*> nFreeDOF_element_u.data,
									    <int*> freeLocal_u.data,
									    <int*> csrRowIndeces_ru.data,
									    <int*> csrColumnOffsets_eb_ru.data,
									    <double*> elementBoundaryFluxJacobian_2sided.data,
									    <double*> w_dS.data,
									    <double*> jac.data)
    
def updateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_dense(int nInteriorElementBoundaries_global,
									     int nElementBoundaries_element,
									     int nQuadraturePoints_elementBoundary,
									     int nDOF_test_element,
									     int nDOF_trial_element,
									     int offset_r,
									     int stride_r,
									     int offset_u,
									     int stride_u,
									     int nFreeVDOF_global,
									     np.ndarray interiorElementBoundaries,
									     np.ndarray elementBoundaryElements,
									     np.ndarray elementBoundaryLocalElementBoundaries,
									     np.ndarray nFreeDOF_element_r,
									     np.ndarray nFreeDOF_element_u,
									     np.ndarray freeLocal_r,
									     np.ndarray freeGlobal_r,
									     np.ndarray freeLocal_u,
									     np.ndarray freeGlobal_u,
									     np.ndarray elementBoundaryFluxJacobian_2sided,
									     np.ndarray w_dS,
									     np.ndarray jac):
    cupdateGlobalJacobianFromInteriorElementBoundaryFluxJacobian_2sided_dense(nInteriorElementBoundaries_global,
									      nElementBoundaries_element,
									      nQuadraturePoints_elementBoundary,
									      nDOF_test_element,
									      nDOF_trial_element,
									      offset_r,
									      stride_r,
									      offset_u,
									      stride_u,
									      nFreeVDOF_global,
									      <int*> interiorElementBoundaries.data,
									      <int*> elementBoundaryElements.data,
									      <int*> elementBoundaryLocalElementBoundaries.data,
									      <int*> nFreeDOF_element_r.data,
									      <int*> nFreeDOF_element_u.data,
									      <int*> freeLocal_r.data,
									      <int*> freeGlobal_r.data,
									      <int*> freeLocal_u.data,
									      <int*> freeGlobal_u.data,
									      <double*> elementBoundaryFluxJacobian_2sided.data,
									      <double*> w_dS.data,
									      <double*> jac.data)    
def updateInteriorTwoSidedElementBoundaryFlux(int nInteriorElementBoundaries_global,
					      int nElementBoundaries_element,
					      int nQuadraturePoints_elementBoundary,
					      int nDOF_test_element,
					      np.ndarray interiorElementBoundaries,
					      np.ndarray elementBoundaryElements,
					      np.ndarray elementBoundaryLocalElementBoundaries,
					      np.ndarray flux,
					      np.ndarray w_dS,
					      np.ndarray residual):
    cupdateInteriorTwoSidedElementBoundaryFlux(nInteriorElementBoundaries_global,
					       nElementBoundaries_element,
					       nQuadraturePoints_elementBoundary,
					       nDOF_test_element,
					       <int*> interiorElementBoundaries.data,
					       <int*> elementBoundaryElements.data,
					       <int*> elementBoundaryLocalElementBoundaries.data,
					       <double*> flux.data,
					       <double*> w_dS.data,
					       <double*> residual.data)
def calculateCFLADR2speeds(int nElements_global,
			   int nQuadraturePoints_element,
			   int nSpace,
			   np.ndarray elementDiameter,
			   np.ndarray dm,
			   np.ndarray df1,
			   np.ndarray df2,
			   np.ndarray cfl):
    ccalculateCFLADR2speeds(nElements_global,
			    nQuadraturePoints_element,
			    nSpace,
			    <double*> elementDiameter.data,
			    <double*> dm.data,
			    <double*> df1.data,
			    <double*> df2.data,
			    <double*> cfl.data)
def checkElementBoundaryAndExteriorElementBoundaryArraysSame(int nElementBoundaries_element,
							     int nExteriorElementBoundaries_global,
							     int nQuadraturePoints_elementBoundary,
							     int nValuesPerQuadraturePoint,
							     double tolerance,
							     np.ndarray exteriorElementBoundariesArray,
							     np.ndarray elementBoundaryElementsArray,
							     np.ndarray elementBoundaryLocalElementBoundariesArray,
							     np.ndarray ebq_val,
							     np.ndarray ebqe_val,
							     np.ndarray firstBadIndex):
    cdef int output
    output = ccheckElementBoundaryAndExteriorElementBoundaryArraysSame(nElementBoundaries_element,
								       nExteriorElementBoundaries_global,
								       nQuadraturePoints_elementBoundary,
								       nValuesPerQuadraturePoint,
								       tolerance,
								       <int*> exteriorElementBoundariesArray.data,
								       <int*> elementBoundaryElementsArray.data,
								       <int*> elementBoundaryLocalElementBoundariesArray.data,
								       <double*> ebq_val.data,
								       <double*> ebqe_val.data,
								       <int*> firstBadIndex.data)
    return output
def checkGlobalElementBoundaryAndExteriorElementBoundaryArraysSame(int nExteriorElementBoundaries_global,
								   int nQuadraturePoints_elementBoundary,
								   int nValuesPerQuadraturePoint,
								   double tolerance,
								   np.ndarray exteriorElementBoundariesArray,
								   np.ndarray elementBoundaryElementsArray,
								   np.ndarray elementBoundaryLocalElementBoundariesArray,
								   np.ndarray ebq_global_val,
								   np.ndarray ebqe_val,
								   np.ndarray firstBadIndex):
    cdef int output
    output = ccheckGlobalElementBoundaryAndExteriorElementBoundaryArraysSame(nExteriorElementBoundaries_global,
									     nQuadraturePoints_elementBoundary,
									     nValuesPerQuadraturePoint,
									     tolerance,
									     <int*> exteriorElementBoundariesArray.data,
									     <int*> elementBoundaryElementsArray.data,
									     <int*> elementBoundaryLocalElementBoundariesArray.data,
									     <double*> ebq_global_val.data,
									     <double*> ebqe_val.data,
									     <int*> firstBadIndex.data)
def calculateExteriorElementBoundaryStress3D(int nExteriorElementBoundaries_global,
					     int nQuadraturePoints_elementBoundary,
					     np.ndarray elementBoundaryMaterialTypes,
					     np.ndarray exteriorElementBoundaries,
					     np.ndarray elementBoundaryElements,
					     np.ndarray elementBoundaryLocalElementBoundaries,
					     np.ndarray p,
					     np.ndarray mom_flux_vec_u,
					     np.ndarray mom_flux_vec_v,
					     np.ndarray mom_flux_vec_w,
					     np.ndarray dS,
					     np.ndarray n,
					     np.ndarray F):
    ccalculateExteriorElementBoundaryStress3D(nExteriorElementBoundaries_global,
					      nQuadraturePoints_elementBoundary,
					      <int*> elementBoundaryMaterialTypes.data,
					      <int*> exteriorElementBoundaries.data,
					      <int*> elementBoundaryElements.data,
					      <int*> elementBoundaryLocalElementBoundaries.data,
					      <double*> p.data,
					      <double*> mom_flux_vec_u.data,
					      <double*> mom_flux_vec_v.data,
					      <double*> mom_flux_vec_w.data,
					      <double*> dS.data,
					      <double*> n.data,
					      <double*> F.data)
def calculateExteriorElementBoundaryStress2D(int nExteriorElementBoundaries_global,
					     int nQuadraturePoints_elementBoundary,
					     np.ndarray elementBoundaryMaterialTypes,
					     np.ndarray exteriorElementBoundaries,
					     np.ndarray elementBoundaryElements,
					     np.ndarray elementBoundaryLocalElementBoundaries,
					     np.ndarray p,
					     np.ndarray mom_flux_vec_u,
					     np.ndarray mom_flux_vec_v,
					     np.ndarray dS,
					     np.ndarray n,
					     np.ndarray F):
    ccalculateExteriorElementBoundaryStress2D(nExteriorElementBoundaries_global,
					      nQuadraturePoints_elementBoundary,
					      <int*> elementBoundaryMaterialTypes.data,
					      <int*> exteriorElementBoundaries.data,
					      <int*> elementBoundaryElements.data,
					      <int*> elementBoundaryLocalElementBoundaries.data,
					      <double*> p.data,
					      <double*> mom_flux_vec_u.data,
					      <double*> mom_flux_vec_v.data,
					      <double*> dS.data,
					      <double*> n.data,
					      <double*> F.data)
